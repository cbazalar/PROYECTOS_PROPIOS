CREATE OR REPLACE TRIGGER BAS_TRG_BU_PROCE_BATCH_ACTU
  BEFORE UPDATE ON BAS_PROCE_BATCH_ACTUA
  FOR EACH ROW
DECLARE
  ln_Secuencia   NUMBER;
  lsDescripcion  VARCHAR2(20);
  lsCodEstado    BAS_ESTAD_PROCE_BATCH.COD_ESTA_PROC%TYPE;
BEGIN
  lsCodEstado := :NEW.EPBA_COD_ESTA_PROC;
  IF :OLD.FEC_FINA_PROC IS NOT NULL THEN
     RETURN;
  END IF;

  lsDescripcion := GEN_PKG_GENER.GEN_FN_STATUS_ESTAD_BATCH(lsCodEstado);
  IF (lsDescripcion = 'OK' OR lsDescripcion = 'ERROR') THEN
      /* Generacion del Correlativo Proceso Batch Historico */
      SELECT BAS_SEQ_PROCE_BATCH_HISTO.NEXTVAL
      INTO ln_Secuencia FROM dual;

      /* Inserciï¿½n la tabla BAS_PROCE_BATCH_HISTO */
      INSERT INTO BAS_PROCE_BATCH_HISTO
      (OID_PROC_BATC_HIST, PAIS_COD_PAIS,
       SIST_COD_SIST, PRBA_COD_PROC_BATC,
       FEC_INIC_PROC, FEC_FINA_PROC,
       DES_LOG, EPBA_COD_ESTA_PROC,
       NUM_LOTE, USU_PROC, DES_ETAP_PROC, DES_RECO_ERRO,
       COD_PERI, FEC_PROC, ID_PROC, VAL_ADI1, VAL_ADI2, VAL_ADI3)
      VALUES
      ( ln_Secuencia , :NEW.PAIS_COD_PAIS,
       :NEW.SIST_COD_SIST, :NEW.PRBA_COD_PROC_BATC,
       :NEW.FEC_INIC_PROC, SYSDATE,
       :NEW.DES_LOG, :NEW.EPBA_COD_ESTA_PROC,
       :NEW.NUM_LOTE,:NEW.USU_PROC,:NEW.DES_ETAP_PROC, :NEW.DES_RECO_ERRO,
       :NEW.COD_PERI,:NEW.FEC_PROC, :NEW.ID_PROC, :NEW.VAL_ADI1, :NEW.VAL_ADI2, :NEW.VAL_ADI3);
  END IF;


END BAS_TRG_BU_PROCE_BATCH_ACTU;
/

