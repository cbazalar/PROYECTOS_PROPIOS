CREATE OR REPLACE PACKAGE CCC_PKG_PROCE IS

  /* Declaracion de variables */
  ln_sqlcode                            NUMBER(10);
  ls_sqlerrm                            VARCHAR2(1500);
  W_FILAS                               NUMBER:=5000;

 PROCEDURE CCC_PR_GENER_REGIS_CUENT_CORRI(
  p_oid_soli_cabe                  IN   ped_solic_cabec.oid_soli_cabe%TYPE);

 PROCEDURE CCC_PR_GENER_DESGL_FORMA_PAGO(
  p_oid_soli_cabe                  IN   ped_solic_cabec.ind_esta%TYPE,
  p_oid_clie                       IN   mae_clien.oid_clie%TYPE,
  p_oid_form_pago                  IN   bel_forma_pago.oid_form_pago%TYPE,
  p_fec_fact                       IN   ped_solic_cabec.fec_fact%TYPE,
  p_oid_peri                       IN   cra_perio.oid_peri%TYPE,
  p_oid_zona                       IN   zon_zona.oid_zona%TYPE,
  p_ind_cabe                       IN   NUMBER,
  p_imp_inaf                       IN   NUMBER,
  p_imp_frac_loca                  IN   ped_solic_cabec.val_tota_paga_loca%TYPE);


 PROCEDURE CCC_PR_GENER_DESGL_FORMA_FLEXI(
  p_oid_soli_cabe                  IN   ped_solic_cabec.ind_esta%TYPE,
  p_oid_clie                       IN   mae_clien.oid_clie%TYPE,
  p_fec_fact                       IN   ped_solic_cabec.fec_fact%TYPE,
  p_mont_fina_flex                 IN   NUMBER);

 /**************************************************************************
  Descripcion       : Genera los movimientos de cuenta corriente
  Fecha Creacion    : 11/05/2009
  Parametros Entrada :
   - Oid Solicitud Cabecera
   - Numero de Orden de la Cuota
   - Fecha de Vencimiento
   - Importe
   - Numero Lote de Facturacion
   - Codigo Usuario
 ***************************************************************************/
 PROCEDURE CCC_PR_GENER_CUENT_CORRI_FACT(
  p_cod_tipo_movi                  IN   ccc_gener_cuota_cuent_corri.cod_tipo_movi%TYPE,
  p_oid_soli_cabe                  IN   ped_solic_cabec.oid_soli_cabe%TYPE,
  p_oid_peri                       IN   cra_perio.oid_peri%TYPE,
  p_oid_clie                       IN   mae_clien.oid_clie%TYPE,
  p_num_orde_cuot                  IN   ccc_movim_cuent_corri.num_orde_cuot%TYPE,
  p_fec_venc                       IN   DATE,
  p_imp_inaf                       IN   NUMBER,
  p_imp_movi                       IN   ccc_movim_cuent_corri.imp_movi%TYPE,
  p_num_lote_fact                  IN   ped_solic_cabec.num_lote_fact%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_GENER_CUOTA_CUENT_CORRI(
  p_oid_soli_cabe                  IN   ped_solic_cabec.oid_soli_cabe%TYPE);

 PROCEDURE CCC_PR_GENER_CUOTA_FLEXI;

 PROCEDURE CCC_PR_GENER_CUENT_CORRI_FACTU;

 /**************************************************************************
  Descripcion       : Genera los movimientos de cuenta corriente
  Fecha Creacion    : 11/05/2009
  Parametros Entrada :
   - Codigo de Pais
   - Codigo de Sociedad
   - Codigo Tipo de Movimiento
   - Codigo Periodo
   - Codigo Cliente
   - Fecha de Vencimiento
   - Importe
   - Observacion
   - Codigo Usuario
 ***************************************************************************/
 PROCEDURE CCC_PR_GENER_MOVIM_CUENT_CORRI(
  p_cod_pais                      IN   seg_pais.cod_pais%TYPE,
  p_cod_soci                      IN   seg_socie.cod_soci%TYPE,
  p_cod_tipo_movi                 IN   ccc_param_tipos_movim.cod_tipo_movi%TYPE,
  p_cod_peri                      IN   seg_perio_corpo.cod_peri%TYPE,
  p_cod_clie                      IN   mae_clien.cod_clie%TYPE,
  p_fec_venc                      IN   VARCHAR2,
  p_importe                       IN   VARCHAR2,
  p_val_obse                      IN   VARCHAR2,
  p_cod_usu                       IN   VARCHAR2);

   /**************************************************************************
     Descripcion       : Aplica los abonos pendientes a los cargos pendientes
                                  de un Cliente
     Fecha Creacion    : 11/05/2009
     Parametros Entrada :
            Oid Cliente
   ***************************************************************************/
   PROCEDURE CCC_PR_APLIC_ABONO_CARGO_CLIEN(
      p_oid_clie                   IN       mae_clien.oid_clie%TYPE);

   /**************************************************************************
     Descripcion       : Generacion Pago Bancario Manual
     Fecha Creacion    : 11/05/2009
     Parametros Entrada :
             Codigo Pais
             Codigo Sociedad
             Codigo Cuenta Corriente Bancaria
            Numero de Lote
            Codigo Cliente
            Numero Consecutivo de Transaccion
            Fecha Pago
            Importe Pago
            Codigo Usuario
   ***************************************************************************/
   PROCEDURE CCC_PR_GENER_PAGO_BANCA_MANUA(
      p_cod_cban                                 IN  ccc_cuent_corri_banca.cod_cc%TYPE,
      p_num_lote                                 IN ccc_movim_banca.num_lote%TYPE,
      p_cod_clie                                   IN mae_clien.cod_clie%TYPE,
      p_num_cons_tran                        IN ccc_movim_banca.num_cons_tran%TYPE,
      p_fec_pago                                 IN  VARCHAR2,
      p_imp_pago                                  IN ccc_movim_banca.imp_pago%TYPE,
      p_cod_usua                                 IN VARCHAR2);

 /**************************************************************************
     Descripcion       : Generacion Cheque Bancario Individual
     Fecha Creacion    : 13/09/2012
     Parametros Entrada :
             Codigo Pais
             Codigo Sociedad
             Codigo Cuenta Corriente Bancaria
            Numero de Lote
            Codigo Cliente
            Numero Consecutivo de Transaccion
            Fecha Pago
            Importe Pago
            Codigo Usuario
 ***************************************************************************/
 PROCEDURE CCC_PR_GENER_LOTE_BANCA_CHEQU(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_GENER_LOTE_BANCA_EXTER(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE,
  p_cod_banc                       IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);
   /**************************************************************************
      Descripcion       : Registra en ccc_movim_cuent_corri  y ccc_cabec_carga_abono_direc +
                      ccc_detal_cargo_abono_direc  un cargo o abono conforme al
                      Tipo Abono Subproceso dado por parametro.

      Se realiza lo siguiente :
        - Determina la parametria segun  Tipo Abono Subproceso dado por parametro
          y crea la cabecera en ccc_cabec_carga_abono_direc
       - Registra el detalle en las tablas ccc_detal_cargo_abono_direc
          y ccc_movim_cuent_corri

   Fecha Creacion    : 12/01/2009
   Parametros Entrada :
      Codigo del Pais,
      Codigo de la Sociedad,
      Codigo de la Marca,
      Codigo Acceso,
      Codigo SubAcceso,
      Codigo del Periodo,
      Oid del Tipo Abono Subproceso
      Codigo del Cliente,
      Fecha del documento,
      Importe del Cargo o Abono
      Codigo Usuario
  ***************************************************************************/
 PROCEDURE CCC_PR_GENER_CARGO_ABONO_MANUA(
  p_cod_peri                       IN   seg_perio_corpo.cod_peri%TYPE,
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_fec_venc                       IN   VARCHAR2,
  p_val_obse                       IN   VARCHAR2,
  p_importe                        IN   VARCHAR2,
  p_cod_usua                       IN   VARCHAR2);

 /**************************************************************************
   Descripcion       : Regulariza un pago bancario.
   Fecha Creacion    : 11/05/2009
   Parametros Entrada :
      Oid Tipo Abono Subproceso
      Codigo Cliente
      Importe Movimiento
      Codigo Usuario
 ***************************************************************************/
 PROCEDURE CCC_PR_GENER_CARGO_ABONO_MANUA(
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_imp_movi                       IN   NUMBER,
  p_cod_usua                       IN   VARCHAR2);

 PROCEDURE CCC_PR_GENER_CARGO_ABONO_INTER(
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_fec_docu                       IN   DATE,
  p_imp_movi                       IN   NUMBER,
  p_cod_usua                       IN   VARCHAR2);

 /**************************************************************************
   Descripcion       : Genera Cargo Deuda Incobrable
   Fecha Creacion    : 11/05/2009
   Parametros Entrada :
      Numero Documento de Identidad
 ***************************************************************************/
 PROCEDURE CCC_PR_GENER_CARGO_DEUDA_INCOB(
  p_num_docu_iden                  IN   mae_clien.cod_clie%TYPE);

   /**************************************************************************
     Descripcion       : Regulariza un pago bancario.
     Fecha Creacion    : 11/05/2009
     Parametros Entrada :
            Numero de Lote
            Oid Movimiento Bancario
            Numero Consecutivo de Transaccion
            Codigo de Consultora
   ***************************************************************************/
   PROCEDURE CCC_PR_REGUL_PAGO_BANCA(
      p_num_lote                            IN   ccc_movim_banca.num_lote%TYPE,
      p_oid_movi_banc                   IN   ccc_movim_banca.oid_movi_banc%TYPE,
      p_num_cons_tran                  IN  ccc_movim_banca.num_cons_tran%TYPE,
      p_cod_clie                             IN  mae_clien.cod_clie%TYPE);
      
  PROCEDURE CCC_PR_REGUL_PAGO_BANCA(
  p_num_lote                      ccc_movim_banca.num_lote%TYPE,
  p_oid_movi_banc                 ccc_movim_banca.oid_movi_banc%TYPE,
  p_num_cons_tran                 ccc_movim_banca.num_cons_tran%TYPE,
  p_cod_clie                      mae_clien.cod_clie%TYPE,
  p_monto                        VARCHAR2  );      

   /**************************************************************************
     Descripcion       : Eliminar Regulariza un pago bancario.
     Fecha Creacion    : 11/05/2009
     Parametros Entrada :
            Oid Movimiento Bancario
   ***************************************************************************/
    PROCEDURE CCC_PR_ELIMI_REGUL_PAGO_BANCA(
         p_oid_movi_banc                    IN       ccc_movim_banca.oid_movi_banc%TYPE,
         p_cod_usua                             IN       seg_usuar.use_usua%TYPE);

  /***************************************************************************
    Descripcion       : Elimina la informacion de las tablas de cargos y abonos
                        directos masivos (CCC_CARGA_CARGO_ABONO_MASIV).
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
    PROCEDURE CCC_PR_ELIMI_CARGO_ABONO_MASIV(
      p_num_lote                            IN       VARCHAR2);

   /***************************************************************************
    Descripcion       : Elimina la informacion de las tablas de cargos y abonos
                                directos masivos (CCC_CARGA_CARGO_ABONO_MASIV).
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
    PROCEDURE CCC_PR_VALID_CARGO_ABONO_MASIV(
  p_ind_tipo_carg                  IN   VARCHAR2,
      p_num_lote                                     IN         VARCHAR2,
      p_cant_regi_carg                           OUT     VARCHAR2,
      p_imp_tota_carg                            OUT      VARCHAR2,
      p_cod_error                                    OUT     VARCHAR2);

   /***************************************************************************
    Descripcion       : Procesa los cargos o abonos directos cargados en
                        la tabla de carga de cargos y abonos directos masivos
                        (CCC_CARGA_CARGO_ABONO_MASIV).
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
   PROCEDURE CCC_PR_PROCE_CARGO_ABONO_MASIV(
      p_cod_pais                                     IN      seg_pais.cod_pais%TYPE,
      p_cod_peri                                     IN      seg_perio_corpo.cod_peri%TYPE,
      p_oid_tipo_abon_subp                   IN      ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
      p_fec_venc                                     IN      VARCHAR2,
      p_num_lote                                     IN      VARCHAR2,
      p_cod_usua                                      IN      seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_PROCE_CARGO_ABONO_INTER(
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_fec_docu                       IN   DATE,
  p_num_lote                       IN   VARCHAR2,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);
  
 PROCEDURE CCC_PR_PROCE_CADIR_DETAL_MASIV(
  p_oid_tipo_abon_subp                           IN      ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_num_lote                                     IN      VARCHAR2,
  p_cod_usua                                     IN      seg_usuar.use_usua%TYPE);

   /***************************************************************************
    Descripcion       : Elimina la informacion de las tablas de Cargos Docle Masivos
                                (CCC_CARGA_CARGO_DOCLE_MASIV).
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
   PROCEDURE CCC_PR_ELIMI_CADIR_DOCLE_MASIV(
      p_num_lote                            IN       VARCHAR2);

   /***************************************************************************
    Descripcion       : Valida la informacion cargada en la tabla de carga de
                        Cargos Docle masivos (CCC_CARGA_CARGO_DOCLE_MASIV).
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
   PROCEDURE CCC_PR_VALID_CADIR_DOCLE_MASIV(
      p_num_lote                            IN       VARCHAR2,
      p_cant_regi_carg                  OUT    VARCHAR2,
      p_imp_tota_carg                   OUT    VARCHAR2,
      p_cod_error                          OUT    VARCHAR2);

   /***************************************************************************
    Descripcion       : Procesa los Cargos DOCLE cargados en
                        la tabla de carga de Cargos Docle directos masivos
                        (CCC_CARGA_CARGO_DOCLE_MASIV).
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
    PROCEDURE CCC_PR_PROCE_CADIR_DOCLE_MASIV(
      p_cod_pais                   IN   seg_pais.cod_pais%TYPE,
      p_cod_soci                   IN   seg_socie.cod_soci%TYPE,
      p_cod_tipo_soli              IN   ped_tipo_solic.cod_tipo_soli%TYPE,
      p_num_lote                   IN   ccc_carga_cadir_docle_masiv.num_lote%TYPE,
      p_cod_usu                    IN   seg_usuar.use_usua%TYPE,
      p_cod_modu                   IN   fin_proce_modul.cod_modu%TYPE,
      p_cod_proce                  IN   fin_proce_modul.cod_proc%TYPE);

/***************************************************************************
   Descripcion       : Elimina la informacion de las tablas
                        de Bloqueo Financiero Masivo (CCC_CARGA_BLOQU_FINAN_MASIV).
   Fecha Creacion    : 22/05/2009
   Autor             : Jorge Florencio
***************************************************************************/
PROCEDURE CCC_PR_ELIMI_BLOQU_FINAN_MASIV(
   p_num_lote                   IN   VARCHAR2);

/***************************************************************************
   Descripcion       : Valida la informacion cargada en la tabla de carga de
                        Bloqueo Financiero Masivo (CCC_CARGA_BLOQU_FINAN_MASIV).
   Fecha Creacion    : 22/05/2009
   Autor             : Jorge Florencio
***************************************************************************/
PROCEDURE CCC_PR_VALID_BLOQU_FINAN_MASIV(
   p_num_lote                   IN   VARCHAR2,
   p_cant_regi_carg             OUT  VARCHAR2,
   p_cod_error                  OUT  VARCHAR2);

/***************************************************************************
   Descripcion       : Procesa los Cargos DOCLE cargados en
                        la tabla de carga de Cargos Docle directos masivos
                        (CCC_CARGA_CARGO_DOCLE_MASIV).
   Fecha Creacion    : 22/05/2009
   Autor             : Jorge Florencio
***************************************************************************/
PROCEDURE CCC_PR_PROCE_BLOQU_FINAN_MASIV(
   p_cod_pais                      IN   seg_pais.cod_pais%TYPE,
   p_cod_tipo_acci                 IN   seg_socie.cod_soci%TYPE,
   p_cod_tipo_bloq                 IN   ped_tipo_solic.cod_tipo_soli%TYPE,
   p_val_moti_bloq                 IN   ped_tipo_solic.cod_tipo_soli%TYPE,
   p_num_lote                      IN   ccc_carga_cadir_docle_masiv.num_lote%TYPE,
   p_cod_usu                       IN   seg_usuar.use_usua%TYPE,
   p_cod_modu                      IN   fin_proce_modul.cod_modu%TYPE,
   p_cod_proce                     IN   fin_proce_modul.cod_proc%TYPE);


   /***************************************************************************
    Descripcion       : Elimina la informacion de las tablas de Pagos Bancarios
                                 Masivos
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
   PROCEDURE CCC_PR_ELIMI_PAGOS_BANCA_MASIV;

 /***************************************************************************
   Descripcion       : Elimina la informacion de la tabla de carga de Pagos
                                Bancarios Masivos.
   Fecha Creacion    : 22/05/2009
   Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_VALID_PAGOS_BANCA_MASIV(
  p_ind_tipo_carg                  IN    VARCHAR2,
  p_cant_regi_carg                 OUT   VARCHAR2,
  p_imp_tota_carg                  OUT   VARCHAR2,
  p_cod_error                      OUT   VARCHAR2);

 /***************************************************************************
  Descripcion       : Procesa  la informacion de la tabla de carga de Pagos
                                Bancarios Masivos.
  Fecha Creacion    : 22/05/2009
  Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_PROCE_PAGOS_BANCO_MASIV(
  p_cod_cban                       IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE,
  p_num_lote                       OUT  ccc_movim_banca.num_lote%TYPE);

   /***************************************************************************
   Descripcion       : Proceso que realiza la carga de los pagos en linea
   Fecha Creacion    : 22/05/2009
   Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_CARGA_PAGOS_BANCO_LINEA(
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);
 /***************************************************************************
    Descripcion       : Elimina las regularizaciones de pagos bancarios que se
                               encuentran en la entidad CCC_CARGA_REGUL_PAGOS_MASIV
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
   PROCEDURE CCC_PR_ELIMI_REGUL_PAGOS_MASIV;

   /***************************************************************************
    Descripcion       : Valida las regularizaciones de pagos bancarios que se encuentran
                                en la entidad CCC_CARGA_REGUL_PAGOS_MASIV
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
   PROCEDURE CCC_PR_VALID_REGUL_PAGOS_MASIV(
      p_cod_pais                              IN seg_pais.cod_pais%TYPE,
      p_cod_soci                               IN seg_socie.cod_soci%TYPE,
      p_cod_cban                             IN    ccc_cuent_corri_banca.cod_cc%TYPE,
      p_cod_error                           OUT VARCHAR2);

   /***************************************************************************
    Descripcion       : Procesa las regularizaciones de pagos bancarios que se encuentran
                                en la entidad CCC_CARGA_REGUL_PAGOS_MASIV
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
   PROCEDURE CCC_PR_PROCE_REGUL_PAGOS_MASIV(
     p_cod_pais                                 IN   seg_pais.cod_pais%TYPE,
      p_cod_soci                                IN   seg_socie.cod_soci%TYPE,
      p_cod_cban                               IN  ccc_cuent_corri_banca.cod_cc%TYPE,
      p_cod_usua                                IN   seg_usuar.use_usua%TYPE,
      p_cod_modu                                 IN  fin_proce_modul.cod_modu%TYPE,
      p_cod_proc                                IN  fin_proce_modul.cod_proc%TYPE);

 PROCEDURE ccc_pr_vaban_pagos_incob_cedul(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_vaban_tipol_consu(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_vaban_codig_consu(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_vaban_digit_contr(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_vaban_docum_ident(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_vaban_docum_ident_final(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_vaban_pagos_dobles(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_vaban_pagos_negat(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_vaban_pagos_excsu(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_vaban_saldo_negat(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_vaban_pagos_banca_antig(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_valid_banca_banco_agric(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE ccc_pr_valid_banca_indiv(
  p_cod_cuen_banc                  IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_val_nom_prog                   IN   ccc_param_valid_lotes_banca.val_nomb_prog%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_VALID_LOTES_BANCA(
  p_cod_tipo_orig                  IN   ccc_tipos_orige_lotes_banca.cod_tipo_orig%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);
   /***************************************************************************
    Descripcion       : Procesa liquida un lote bancario que se ha recepcionado
                               en la tabla de Movimientos Bancarios ( CCC_MOVIM_BANCA).
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
 PROCEDURE CCC_PR_LIQUI_LOTE_BANCA(
  p_num_lote                       IN  ccc_movim_banca.num_lote%TYPE,
  p_cod_usua                       IN   VARCHAR2);

   /***************************************************************************
    Descripcion       : Procesa que registra el lote bancario en la Cuenta Corriente
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
   PROCEDURE CCC_PR_REGIS_LOTE_BANCA_PERCE(
      p_cod_pais                   IN   seg_pais.cod_pais%TYPE,
      p_cod_soci                   IN   seg_socie.cod_soci%TYPE,
      p_num_lote                   IN   ccc_movim_banca.num_lote%TYPE,
      p_cod_usua                   IN   VARCHAR2);

 /***************************************************************************
   Descripcion       : Procesa elimina un lote bancario que se ha recepcionado
                               en la tabla de Movimientos Bancarios ( CCC_MOVIM_BANCA).
   Fecha Creacion    : 22/05/2009
   Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_ELIMI_LOTE_BANCA(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE,
  p_cod_usua                       IN   VARCHAR2);

   PROCEDURE CCC_PR_CONCI_BANCA_CUPON;

 /***************************************************************************
   Descripcion       : Proceso que identifica a las consultoras en Venezuela Lbel
                                a las cuales se les generara doble cupon.
   Fecha Creacion    : 08/02/2010
   Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_GENER_CONSU_CUPON(
  p_cod_pais                     IN   seg_pais.cod_pais%TYPE,
  p_cod_soci                     IN   seg_socie.cod_soci%TYPE,
  p_cod_peri                     IN   seg_perio_corpo.cod_peri%TYPE);

 PROCEDURE CCC_PR_GENER_CARGO_COBRA_EXTER(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE);

 PROCEDURE CCC_PR_APLIC_ABONO_CASTI(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE);

 PROCEDURE CCC_PR_ACTUA_DEUDA_INCOB_REING;

 PROCEDURE CCC_PR_CONTA_BANCA_PREVI_SAPFI;

 PROCEDURE CCC_PR_CONTA_BANCA_CUENT_SAPFI(
  p_num_lote                     IN   ccc_movim_banca.num_lote%TYPE);

 PROCEDURE CCC_PR_CONTA_BANCA_CUENT_ESPEC(
  p_num_lote                     IN   ccc_movim_banca.num_lote%TYPE);
 /***************************************************************************
   Descripcion       : Proceso que identifica a las consultoras en Venezuela Lbel
                                a las cuales se les generara doble cupon.
   Fecha Creacion    : 08/02/2010
   Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_CONCI_BANCA_CUPON_LOTE(
  p_num_lote                     IN   ccc_movim_banca.num_lote%TYPE);

 /***************************************************************************
  Descripcion       : Proceso dado  un  numero de lote que identifica un grupo
                               de registros en la tabla per_solic_monet, los agrupa y
                               procesa por tipo de solicitud  generando los abonos correspondientes
  Fecha Creacion    : 22/05/2009
  Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_GENER_CUENT_CORRI_PERCE(
  p_cod_pais                     IN   seg_pais.cod_pais%TYPE,
  p_cod_soci                     IN   seg_socie.cod_soci%TYPE,
  p_num_lote                     IN   per_solic_monet.num_lote%TYPE);

 PROCEDURE CCC_PR_INSER_HISTO_LOTES(
  p_cod_pais                     IN   seg_pais.cod_pais%TYPE,
  p_num_lote                     IN   per_solic_monet.num_lote%TYPE);

 PROCEDURE CCC_PR_BLOQU_CASTI_CLIEN_INDIV(
  p_oid_clie                     IN   mae_clien.oid_clie%TYPE);

   /***************************************************************************
    Descripcion       : Proceso que realiza un Bloqueo Financiero Masivo en base
                                a los parametros enviados
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
   PROCEDURE CCC_PR_BLOQU_FINAN_DIAS_ATRAS(
     p_cod_pais                seg_pais.cod_pais%TYPE,
     p_cod_soci                seg_socie.cod_soci%TYPE,
     p_num_dias_atras          NUMBER,
     p_imp_desde               NUMBER,
     p_cod_usua                seg_usuar.use_usua%TYPE);

   /***************************************************************************
    Descripcion       : Proceso que Genera los Cargos de Familia Segura
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
 PROCEDURE CCC_PR_GENER_CARGO_FAMIL_SEGUR(
  p_cod_pais                     IN   seg_pais.cod_pais%TYPE,
  p_fec_fact                     IN   ped_solic_cabec.fec_fact%TYPE,
  p_cod_usua                     IN   seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_GENER_ANUL_FAMIL_SEGUR(
  p_oid_soli_cabe                IN   ped_solic_cabec.oid_soli_cabe%TYPE,
  p_cod_peri                     IN   seg_perio_corpo.cod_peri%TYPE,
  p_oid_soli_cabe_anul           IN   ped_solic_cabec.oid_soli_cabe%TYPE
  );

 FUNCTION CCC_FN_OBTIE_FECHA_INICI_VIGEN(
  p_cod_pais                     IN   seg_pais.cod_pais%TYPE,
  p_cod_peri                     IN   seg_perio_corpo.cod_peri%TYPE,
  p_cod_poli                     IN   sgr_famse_poliz.cod_poli%TYPE,
  p_cod_clie                     IN   mae_clien.cod_clie%TYPE,
  p_fec_fact                     IN   DATE)
 RETURN DATE;

 FUNCTION CCC_FN_OBTIE_FECHA_FINAL_VIGEN(
    p_cod_pais                    IN   seg_pais.cod_pais%TYPE,
    p_cod_peri                    IN   seg_perio_corpo.cod_peri%TYPE,
    p_cod_poli                    IN   sgr_famse_poliz.cod_poli%TYPE,
    p_cod_clie                    IN   mae_clien.cod_clie%TYPE)
 RETURN DATE;

 PROCEDURE CCC_PR_PROCE_CONSU_HABIL_FLEXI;

 PROCEDURE CCC_PR_GENER_CARGO_INTER_FLEXI;

 PROCEDURE CCC_PR_GENER_PAQUE_DOCUM_FLEXI;

 PROCEDURE CCC_PR_GENER_PADOC_FLEXI_CONSU(
  p_oid_clie                       IN   NUMBER,
  p_ind_cali_comp                  IN   VARCHAR2,
  p_ind_cali_expe                  IN   NUMBER,
  p_val_line_cred_cata             IN   NUMBER,
  p_val_line_cred_util_cata        IN   NUMBER,
  p_val_line_cred_disp_cata        IN   NUMBER,
  p_cod_peri                       IN   VARCHAR2,
  p_cod_peri_adic_1                IN   VARCHAR2,
  p_cod_peri_adic_2                IN   VARCHAR2,
  p_cod_peri_rest_1                IN   VARCHAR2,
  p_cod_peri_rest_2                IN   VARCHAR2);

 PROCEDURE CCC_PR_DEPUR_PAGOS_PENDI_REGUL(
  p_dias_anti                      IN   NUMBER,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 /***************************************************************************
   Descripcion       : Proceso que realiza la depuracion de los Saldos Menores
                       Deudores hasta una determinada campa?a y monto
   Fecha Creacion    : 22/05/2009
   Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_DEPUR_SALDO_MENOR_DEUDO(
  p_cod_peri                       IN   seg_perio_corpo.cod_peri%TYPE,
  p_imp_hast                       IN   NUMBER,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 /***************************************************************************
   Descripcion       : Proceso que realiza la depuracion de los Saldos Menores
                       Acreedores hasta una determinada campa?a.
   Fecha Creacion    : 22/05/2009
   Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_DEPUR_SALDO_MENOR_ACREE(
  p_cod_peri                       IN   seg_perio_corpo.cod_peri%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

/***************************************************************************
   Descripcion       : Proceso que realiza la depuracion de las cuentas
                       incobrables de cuenta corriente
   Fecha Creacion    : 22/05/2009
   Autor             : Jorge Florencio
***************************************************************************/
 PROCEDURE CCC_PR_DEPUR_DEUDA_INCOB(
  p_fec_hast                       IN   VARCHAR2,
  p_imp_desd                       IN   NUMBER,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_DEPUR_DEUDA_INCOB_BLOQU(
  p_oid_proc_ejec_inco             IN   fin_proce_modul.cod_proc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_DEPUR_DEUDA_INCOB_ABODI(
  p_oid_proc_ejec_inco             IN   fin_proce_modul.cod_proc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_DEPUR_DEUDA_INCOB_ABOSM(
  p_oid_proc_ejec_inco             IN   fin_proce_modul.cod_proc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_ACTUA_DEUDA_INCOB;
 
 PROCEDURE CCC_PR_CONDO_DEUDA_CASTI(
  p_oid_cons_cast_cabe           IN   NUMBER);
  
 PROCEDURE CCC_PR_ARCHI_RETIR_SINDE;

 /***************************************************************************
    Descripcion       : Archiva Cuenta Corriente Individual
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_ARCHI_CUENT_CORRI_INDIV(
  p_oid_clie  mae_clien.oid_clie%TYPE);

 /***************************************************************************
    Descripcion       : Archiva Cuenta Corriente de Manera Masiva
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_ARCHI_CUENT_CORRI_MASIV(
  p_cod_perf                   IN   ccc_perfi_clien.cod_perf%TYPE);

 /***************************************************************************
   Descripcion       : Proceso que Actualiza los Saldos del Maestro de Consultoras
 ***************************************************************************/
 PROCEDURE CCC_PR_ACTUA_SALDO_MAEST_CONSU;

 /***************************************************************************
   Descripcion       : Cruce de los saldos positivos y negativos pendientes
                        de aplicar en Cuenta Corriente
 ***************************************************************************/
 PROCEDURE CCC_PR_CRUCE_SALDO_PENDI_APLIC;

/***************************************************************************
   Descripcion : Proceso que reconstruye la Cuenta Corriente de una Consultora
 ***************************************************************************/
 PROCEDURE CCC_PR_DESTR_CUENT_CORRI_INDIV(
  p_oid_clie                   IN   mae_clien.oid_clie%TYPE,
  p_ind_exce                   IN   NUMBER);
 /***************************************************************************
    Descripcion       : Realiza las validaciones generales de cuenta corriente
 ***************************************************************************/
 PROCEDURE CCC_PR_VALID_GENER_CUENT_CORRI;

 /***************************************************************************
  Descripcion : Genera los gastos adminitrativos
 ***************************************************************************/
 PROCEDURE CCC_PR_GENER_CARGO_GASTO_ADMIN(
  p_cod_usua                    IN   seg_usuar.use_usua%TYPE   DEFAULT USER);

 PROCEDURE CCC_PR_PROCE_CUENT_CORRI_GP5;

 PROCEDURE CCC_PR_PROCE_CIERR_FACTU;

 PROCEDURE CCC_PR_PROCE_EXECU_SCRIP;
 
 PROCEDURE CCC_PR_MIGRA_CLIEN_CASTI;
 
 PROCEDURE CCC_PR_GENER_CARGO_ABONO_CANCE(
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_fec_docu                       IN   DATE,
  p_imp_movi                       IN   NUMBER,
  p_cod_usua                       IN   VARCHAR2);
 
 PROCEDURE CCC_PR_CORRI_SALDO_MIGRA;
 
 PROCEDURE CCC_PR_APROB_ERROR_PAGO_BANCA(
  p_oid_movi_banc                  IN   ccc_movim_banca.oid_movi_banc%TYPE,
  p_cod_clie                       IN   ccc_movim_banca.cod_cons%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_ELIMI_ERROR_PAGO_BANCA(
  p_oid_movi_banc                  IN   ccc_movim_banca.oid_movi_banc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE);

 PROCEDURE CCC_PR_GENER_NOVED_DEUDA_WEB(
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE DEFAULT USER);

 /***************************************************************************
    Descripcion       : Proceso de cargos y abonos
    Fecha Creacion    : 21/01/2009
    Autor             : Cristhian Roman
   ***************************************************************************/
      PROCEDURE CCC_PR_PROCE_CARGO_ABONO(
      p_cod_pais                VARCHAR2,
      p_cod_peri                VARCHAR2,
      p_cod_vent                VARCHAR2,
      p_pre_corr                VARCHAR2,
      p_cod_clie                VARCHAR2,
      p_tip_carg                VARCHAR2,
      p_tip_abon                VARCHAR2,
      p_cod_usua                VARCHAR2);

   /***************************************************************************
    Descripcion       : Proceso que realiza la determinacion de los periodos
                        activos y se calculan los periodos anteriores
    Fecha Creacion    : 20/01/2010
    Autor             : Jose Luis Rodriguez
   ***************************************************************************/
   PROCEDURE CCC_PR_ACTUA_SALDO_LEVAN(
      p_cod_pais  seg_pais.cod_pais%TYPE,
      p_cod_soci  seg_socie.cod_soci%TYPE );

   /***************************************************************************
    Descripcion       : Proceso que realiza la evaluacion de un periodo activo
    Fecha Creacion    : 20/01/2010
    Autor             : Jose Luis Rodriguez
   ***************************************************************************/
 PROCEDURE CCC_PR_ACTUA_SALDO(
  p_cod_peri                     IN   seg_perio_corpo.cod_peri%TYPE);

   /***************************************************************************
    Descripcion       : Proceso que realiza la evaluacion de un periodo que
                        es historico, es decir uno de los 3 periodos anteriores
                        al periodo activo.
    Fecha Creacion    : 20/01/2010
    Autor             : Jose Luis Rodriguez
   ***************************************************************************/
 PROCEDURE CCC_PR_ACTUA_SALDO_HISTO(
  p_cod_pais                     IN   seg_pais.cod_pais%TYPE,
  p_cod_soci                     IN   seg_socie.cod_soci%TYPE,
  p_cod_peri                     IN   seg_perio_corpo.cod_peri%TYPE,
  p_cod_tipo_eje                 IN   VARCHAR2);
  
 /**************************************************************************
  Descripcion        :
  Fecha Creacion     : 10/02/2013

  Autor              : Rosalvina Ramirez
  ***************************************************************************/
 PROCEDURE CCC_PR_GENER_INTER_MORA(psCodigoPais seg_pais.cod_pais%type);

 PROCEDURE CCC_PR_REGIS_CLIEN_INCOB(
  p_num_docu_iden           VARCHAR2);

 PROCEDURE CCC_PR_ELIMI_MOVIM_CUENT_CORRI(
  p_oid_movi_cc                  IN   ccc_movim_cuent_corri.oid_movi_cc%TYPE);

 PROCEDURE CCC_PR_ELIMI_MOVIM_BANCA(
  p_oid_movi_banc                  IN   ccc_movim_banca.oid_movi_banc%TYPE);

 PROCEDURE CCC_PR_ELIMI_LOTE_BANCA_LIQUI(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE,
  p_val_moti                       IN   VARCHAR2);

 PROCEDURE CCC_PR_GENER_REPOR_EMAIL_USUAR;

 PROCEDURE CCC_PR_INSER_PAGO_WEBSE(
  p_cod_banc                     IN	  VARCHAR2,
  p_num_oper                     IN   VARCHAR2,
  p_cod_clie                     IN   VARCHAR2,
  p_fec_pago                     IN   VARCHAR2,
  p_val_pago                     IN   VARCHAR2,
  p_ind_ejec                     OUT   VARCHAR2);

 PROCEDURE CCC_PR_REVER_PAGO_WEBSE(
  p_cod_banc                     IN   VARCHAR2,
  p_num_oper                     IN   VARCHAR2,
  p_cod_clie                     IN   VARCHAR2,
  p_fec_pago                     IN   VARCHAR2,
  p_ind_ejec                     OUT   VARCHAR2);

 PROCEDURE CCC_PR_CONSU_SALDO_WEBSE(
  p_cod_clie                     IN   VARCHAR2,
  p_nom_clie                     OUT  VARCHAR2,
  p_val_sal                      OUT  VARCHAR2,
  p_ind_ejec                     OUT  VARCHAR2);

 /*
 PROCEDURE CCC_PR_GENER_CUADR_SAPFI_DIARI(
  p_fec_gene                 IN   VARCHAR2);

 PROCEDURE CCC_PR_GENER_CUADR_SAPFI(
  p_fec_gene                 IN   VARCHAR2 DEFAULT NULL);
 */

PROCEDURE CCC_PR_GENER_CARGO_ABONO(
  p_oid_tipo_abon                  IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_val_impo                       IN   ccc_movim_cuent_corri.imp_movi%TYPE,
  p_cod_usua                       IN   seg_usuar.cod_usua%TYPE,
  p_resu                           OUT  NUMBER);

 PROCEDURE CCC_PR_GENER_CARGO_ABONO(
  p_cod_peri                       IN   seg_perio_corpo.cod_peri%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_fec_venc                       IN   VARCHAR2,
  p_val_obse                       IN   VARCHAR2,
  p_importe                        IN   VARCHAR2,
  p_resul                          OUT  number);
  
 PROCEDURE CCC_PR_CALCU_INTER_MORA;

 PROCEDURE CCC_PR_FACTU_INTER_MORA(
     p_num_lote                    IN VARCHAR2,
     p_usuario                     IN VARCHAR2);
     
 /***************************************************************************
    Descripcion       : Valida la carga de consultora y monto interes
    Fecha Creacion    : 17/04/2015
    Autor             : Diego Torres Loyola
    ***************************************************************************/
    PROCEDURE CCC_PR_VALIDAR_CONSULTORA_MONT(psCodigoUsuario VARCHAR2);
    
      /***************************************************************************
    Descripcion       : Realiza la carga consultora y monto interes
    Fecha Creacion    : 17/04/2015
    Autor             : Diego Torres Loyola
    ***************************************************************************/
    PROCEDURE CCC_PR_CARGAR_CONSULTORA_MONT(psCodigoUsuario VARCHAR2);

END CCC_PKG_PROCE;
/
CREATE OR REPLACE PACKAGE BODY CCC_PKG_PROCE IS

  -- Declaracion de Variables --
  gv_log_cod_modu                 fin_modul.cod_modu%TYPE;
  gv_log_cod_proc                 fin_proce_modul.cod_proc%TYPE;

  gv_cod_proc_ejec                NUMBER(12);
  gv_log_cod_pais                 seg_pais.cod_pais%TYPE;
  gv_log_cod_soci                 seg_socie.cod_soci%TYPE;
  gv_des_log                      VARCHAR2(2500);
  gv_log_user                     fin_proce_ejecu.usu_proc%TYPE;

  gc_cod_usua                     CONSTANT CHAR(4):='MAKI';
  gc_cod_marc                     CONSTANT CHAR(1):='T';
  gc_cod_cana                     CONSTANT CHAR(2):='VD';
  gc_cod_sbac_cadi                CONSTANT CHAR(3):='CAD';
  gc_cod_proc_banc                CONSTANT CHAR(6):='TES001';
  gc_cod_subp_reca_banc_manu      CONSTANT CHAR(1):='2';
  gc_cod_subp_regu                CONSTANT CHAR(1):='3';
  gc_cod_subp_cheq                CONSTANT CHAR(1):='4';
  gc_cod_iden_proc_erro           CONSTANT CHAR(1):='I';
  gc_cod_iden_proc_tran           CONSTANT CHAR(1):='T';
  gc_cod_iden_proc_proc           CONSTANT CHAR(1):='P';
  gc_cod_iden_proc_regu           CONSTANT CHAR(1):='R';
  gc_val_esta_movi_apli           CONSTANT CHAR(1):='A';
  gc_val_esta_movi_pend           CONSTANT CHAR(1):='P';
  gc_cod_proc_fact                CONSTANT CHAR(6):='CCC001';
  gc_cod_proc_carg_dire           CONSTANT VARCHAR2(6):='CCC007';
  gc_cod_proc_abon_dire           CONSTANT VARCHAR2(6):='CCC008';
  gc_cod_subp_fact                CONSTANT NUMBER(1):=1;
  gc_cod_subp_carg_fase           CONSTANT NUMBER(1):=7;
  gc_cod_tipo_bloq_fina           CONSTANT CHAR(2):='02';
  gc_cod_subp_cargo_sald_meno     CONSTANT CHAR(2):='90';
  gc_cod_subp_abon_sald_meno      CONSTANT CHAR(2):='90';
  gc_cod_subp_abon_depu_inco      CONSTANT CHAR(2):='91';
  gc_cod_cupo_conc                CONSTANT CHAR(1):='C';
  gc_cod_cupo_depu                CONSTANT CHAR(1):='D';
  gc_cod_suba_perc                CONSTANT CHAR(3):='290';
  gc_num_cabe_fact                CONSTANT NUMBER(4):=1507;
  gc_oid_cabe_fact                CONSTANT NUMBER(4):=1507;
  gc_oid_tipo_soli_carg_uso       CONSTANT NUMBER(4):=1507;
  gc_oid_tipo_peri                CONSTANT NUMBER(4):= 2001;
  gc_oid_subg_vent                CONSTANT NUMBER(4):= 2001;
  gc_cod_tipo_orig_inte           CONSTANT CHAR(3):='INT';
  gc_cod_tipo_orig_digi           CONSTANT CHAR(3):='DIG';
  gc_cod_tipo_orig_exce           CONSTANT CHAR(3):='EXC';
  gc_cod_tipo_orig_regu_exce      CONSTANT CHAR(3):='REX';
  gc_cod_tipo_tran_cheq           CONSTANT CHAR(5):='TBCHQ';
  gc_cod_cuen_corr_banc_cheq      CONSTANT CHAR(6):='BACHEQ';
  gc_cod_tipo_orig_digi_cheq      CONSTANT CHAR(3):='DCH';
  gc_cod_tipo_orig_digi_paex      CONSTANT CHAR(3):='DPE';
  gc_cod_tipo_orig_web            CONSTANT CHAR(3):='CWS';
  gc_cod_prog_carg_deud_web       CONSTANT CHAR(4):='CADW';
  gc_gest_movi_banc_elim          CONSTANT CHAR(1):='E';
  gc_gest_movi_banc_depu          CONSTANT CHAR(1):='D';
  gc_tipo_docu_cedu               CONSTANT CHAR(2):='01';
  gc_oid_abon_fami_segu           CONSTANT NUMBER(3):= 803;

  gc_cod_perf_gene                CONSTANT VARCHAR2(3):='999';

  gc_cod_tipo_movi_fact           CONSTANT VARCHAR2(3):='FAC';
  gc_cod_tipo_movi_flex           CONSTANT VARCHAR2(3):='FLX';
  gc_cod_tipo_soli_carg_flex      CONSTANT VARCHAR2(4):='SCUF';
  gc_ind_bene_toda                CONSTANT VARCHAR2(1):='T';
  gc_ind_bene_lide                CONSTANT VARCHAR2(1):='L';
  gc_ind_bene_nuev                CONSTANT VARCHAR2(1):='N';
  gc_ind_bene_clas                CONSTANT VARCHAR2(1):='C';
  gc_ind_bene_nume_poli           CONSTANT VARCHAR2(1):='P';
  gc_ind_tipo_carg_cedu           CONSTANT VARCHAR2(1):='R';

  gc_cod_modu                     fin_proce_ejecu.cod_modu%TYPE:='CCC';
  gc_cod_proc_exec_scri           fin_proce_ejecu.cod_proc%TYPE:='1310';
  gc_cod_proc_gene_carg_fase      fin_proce_ejecu.cod_proc%TYPE:='7007';
  gc_cod_proc_gene_carg_admi      fin_proce_ejecu.cod_proc%TYPE:='7008';
  gc_cod_proc_gene_habi_flex      fin_proce_ejecu.cod_proc%TYPE:='7009';
  gc_cod_proc_proc_habi_flex      fin_proce_ejecu.cod_proc%TYPE:='7010';
  gc_cod_proc_gene_movi_fact      fin_proce_ejecu.cod_proc%TYPE:='7011';
  gc_cod_proc_gene_carg_flex      fin_proce_ejecu.cod_proc%TYPE:='7012';
  gc_cod_proc_soli_carg_flex      fin_proce_ejecu.cod_proc%TYPE:='7013';
  gc_cod_carg_deud_web            fin_proce_ejecu.cod_proc%TYPE:='7015';
  gc_cod_proc_depu_pago_regu      fin_proce_ejecu.cod_proc%TYPE:='20220044';
  gc_cod_proc_depu_sald_deud      fin_proce_ejecu.cod_proc%TYPE:='20220042';
  gc_cod_proc_depu_sald_acre      fin_proce_ejecu.cod_proc%TYPE:='20220043';
  gc_cod_proc_depu_inco           fin_proce_ejecu.cod_proc%TYPE:='20220045';
  gc_oid_tipo_docu_lega_fact_2    fac_tipo_docum.oid_tipo_docu%TYPE := 9;
  gc_cod_inte_sapf                CONSTANT CHAR(5):='SAPFI';
  gc_cod_inte_sapf_cobr             CONSTANT VARCHAR2(7):='COBFI';

  gc_cod_proc_vali_codi_cons       fin_proce_ejecu.cod_proc%TYPE:='7121';
  gc_cod_proc_vali_digi_ctrl       fin_proce_ejecu.cod_proc%TYPE:='7122';
  gc_cod_proc_vali_banc_agri       fin_proce_ejecu.cod_proc%TYPE:='7123';
  gc_cod_proc_vali_docu_iden       fin_proce_ejecu.cod_proc%TYPE:='7124';
  gc_cod_proc_vali_tipo_clie       fin_proce_ejecu.cod_proc%TYPE:='7125';
  gc_cod_proc_vali_supe_exce       fin_proce_ejecu.cod_proc%TYPE:='7126';
  gc_cod_proc_vali_pago_dobl       fin_proce_ejecu.cod_proc%TYPE:='7127';
  gc_cod_proc_vali_pago_anti       fin_proce_ejecu.cod_proc%TYPE:='7128';
  gc_cod_proc_vali_sin_deud        fin_proce_ejecu.cod_proc%TYPE:='7129';

  gc_cod_prod_abon_flet_estr       CONSTANT VARCHAR2(10):='9999999997';
  gc_cod_prod_carg_inte_flex       CONSTANT VARCHAR2(10):='9999999996';
  gc_cod_form_pago_flex            CONSTANT VARCHAR2(3):='FLX';
  gc_cod_form_pago_carg_flex       CONSTANT VARCHAR2(3):='CUF';

  -- Declaracion de tipos y registros
  TYPE t_tab_ccc_movim_cuent_corri IS TABLE OF ccc_movim_cuent_corri%ROWTYPE;
  TYPE gt_tab_oid_clie             IS TABLE OF mae_clien.oid_clie%TYPE;

  -- Excepciones --
  gv_reco_trac                    FIN_PKG_GENER.error_rt;
  e_exis_proc_ejec                EXCEPTION;
  e_codi_soci_null                EXCEPTION;
  e_codi_pais_null                EXCEPTION;
  e_no_exis_impo_gast_admi        EXCEPTION;
  e_no_exis_camp_acti             EXCEPTION;
  e_no_para_tipo_soli             EXCEPTION;
  e_no_para_carg_fase             EXCEPTION;
  e_no_coin_nume_regi             EXCEPTION;
  e_no_perm_para                  EXCEPTION;
  e_camp_bene_toda                EXCEPTION;
  e_no_gene_regi                  EXCEPTION;
  e_no_exis_movi                  EXCEPTION;
  e_no_para                       EXCEPTION;

 /**************************************************************************
  Descripcion       : Actuliza el cargo aplicado en la cuenta corriente
  Fecha Creacion    : 11/05/2009
  Parametros Entrada :
   Oid Cliente
   Oid del Cargo
   Fecha Ultimo Movimiento
   Oid Ultimo Subproceso
   Oid Ultimo Tipo Cargo Abono
   Oid Marca Situacion
   Importe Pagado
   Importe Pendiente
   Importe Pago
 ***************************************************************************/
 PROCEDURE ccc_pr_actua_cargo_aplic(
  p_oid_clie                       IN   mae_clien.oid_clie%TYPE,
  p_oid_movi_carg                  IN   ccc_movim_cuent_corri.oid_movi_cc%TYPE,
  p_fec_proc                       IN   ccc_movim_cuent_corri.fec_ulti_movi%TYPE,
  p_fec_ulti_movi                  IN   ccc_movim_cuent_corri.fec_ulti_movi%TYPE,
  p_oid_subp_ulti                  IN   ccc_subpr.oid_subp%TYPE,
  p_oid_tcab_ulti                  IN   ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE,
  p_oid_marc_situ                  IN   ccc_marca_situa.oid_marc_situ%TYPE,
  p_imp_paga                       IN   ccc_movim_cuent_corri.imp_paga%TYPE,
  p_imp_pend                       IN   ccc_movim_cuent_corri.imp_pend%TYPE,
  p_imp_pago                       IN   ccc_movim_cuent_corri.imp_pago%TYPE,
  p_oid_movi_abon                  IN   ccc_movim_cuent_corri.oid_movi_cc%TYPE,
  p_ind_tipo_abon                  IN   ccc_proce_subpr_creac_aplic.ind_abon_nomo%TYPE,
  p_ind_pago_exce                  IN   ccc_movim_banca.ind_pago_exce%TYPE,
  p_cod_usua                       IN   ccc_movim_cuent_corri.cod_usua%TYPE)
 IS

  lv_reg_hmcc                           ccc_histo_movim_cc%ROWTYPE;
  lv_reg_aplic_abon_cargo               ccc_aplic_abono_cargo%ROWTYPE;
  lv_ind_actu_cobr                      ccc_param_gener.val_para%TYPE;
  lv_cod_cart                           cob_cabec_asign_carte.cod_cart%TYPE;

 BEGIN

  SELECT ccc_hmcc_seq.nextval
  INTO lv_reg_hmcc.oid_hist_movi
  FROM dual;

  SELECT
   mcc.subp_oid_subp_ulti,
   mcc.tcab_oid_tcab_ulti,
   mcc.val_ulti_nume_hist,
   mcc.val_refe_nume_docu_exte,
   mcc.fec_ulti_movi,
   mcc.fec_venc,
   mcc.fec_valo,
   mcc.imp_movi,
   mcc.imp_paga,
   mcc.imp_pend,
   mcc.imp_divi,
   mcc.imp_paga_divi,
   mcc.val_ulti_docu_mes_seri,
   mcc.val_ulti_docu_anio,
   mcc.val_ulti_docu_nume,
   mcc.val_nume_lote_cont,
   mcc.fec_conta,
   mcc.val_obse,
   mcc.cuco_oid_cuen_cont_cuot,
   mcc.ticl_oid_tipo_clie,
   mcc.masi_oid_marc_situ,
   mcc.mone_oid_mone,
   mcc.mpab_oid_medi_pago,
   mcc.clie_oid_clie,
   mcc.ind_tipo_camb,
   mcc.cod_usua,
   mcc.imp_pago,
   mcc.imp_movi_cuen,
   mcc.imp_movi_divi,
   mcc.oid_movi_cc,
   mcc.fec_docu,
   mcc.ind_dto_carg_Apli
  INTO
   lv_reg_hmcc.subp_oid_subp,
   lv_reg_hmcc.tcab_oid_tipo_carg_abon,
   lv_reg_hmcc.num_hist,
   lv_reg_hmcc.val_refe_nume_docu_exte,
   lv_reg_hmcc.fec_movi,
   lv_reg_hmcc.fec_venc,
   lv_reg_hmcc.fec_valo,
   lv_reg_hmcc.imp,
   lv_reg_hmcc.imp_paga,
   lv_reg_hmcc.imp_pen,
   lv_reg_hmcc.imp_divi,
   lv_reg_hmcc.imp_paga_divi,
   lv_reg_hmcc.val_ulti_docu_mes_seri,
   lv_reg_hmcc.val_ulti_docu_anio,
   lv_reg_hmcc.val_ulti_docu_nume,
   lv_reg_hmcc.val_nume_lote_cont,
   lv_reg_hmcc.fec_cont,
   lv_reg_hmcc.val_obse,
   lv_reg_hmcc.cuco_oid_cuen_cont,
   lv_reg_hmcc.ticl_oid_tipo_clie,
   lv_reg_hmcc.masi_oid_marc_situ,
   lv_reg_hmcc.mone_oid_mone,
   lv_reg_hmcc.mpab_oid_medi_pago_teor,
   lv_reg_hmcc.clie_oid_clie,
   lv_reg_hmcc.val_tipo_camb,
   lv_reg_hmcc.cod_usua,
   lv_reg_hmcc.imp_pago,
   lv_reg_hmcc.imp_movi,
   lv_reg_hmcc.imp_movi_divi,
   lv_reg_hmcc.mvcc_oid_movi_cc,
   lv_reg_hmcc.fec_docu,
   lv_reg_hmcc.ind_desc_carg_apli
  FROM
   ccc_movim_cuent_corri mcc
  WHERE mcc.oid_movi_cc=p_oid_movi_carg;

  INSERT INTO ccc_histo_movim_cc VALUES lv_reg_hmcc;

  UPDATE ccc_movim_cuent_corri mcc
  SET
   mcc.masi_oid_marc_situ = p_oid_marc_situ ,
   mcc.subp_oid_subp_ulti = p_oid_subp_ulti,
   mcc.tcab_oid_tcab_ulti = p_oid_tcab_ulti,
   mcc.fec_ulti_movi =
   CASE
    WHEN p_fec_ulti_movi > mcc.fec_docu
    THEN p_fec_ulti_movi
   ELSE mcc.fec_docu
   END,
   mcc.imp_paga = p_imp_paga,
   mcc.imp_pend = p_imp_pend,
   mcc.imp_pago = p_imp_pago,
   mcc.val_ulti_nume_hist = mcc.val_ulti_nume_hist + 1
  WHERE mcc.oid_movi_cc = p_oid_movi_carg;

  IF p_ind_tipo_abon=0 THEN

   lv_reg_aplic_abon_cargo.cmba_oid_movi_banc := p_oid_movi_abon;

   BEGIN

    -- Aplicacion en Cobranzas Pago Bancario--
    lv_ind_actu_cobr := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndicadorActualizacionCobranza');

    IF lv_ind_actu_cobr = '1' THEN

     UPDATE cob_detal_movim_carte mc
     SET
      mc.imp_deud_canc = mc.imp_deud_asig - p_imp_pend,
      mc.imp_pago_banc = mc.imp_pago_banc + p_imp_pago,
      mc.fec_ult_pago_banc = p_fec_ulti_movi,
      mc.val_ulti_nume_hist = lv_reg_hmcc.num_hist + 1,
      mc.imp_deud_pend = p_imp_pend,
      mc.ind_deud_pend =
      CASE
       WHEN p_imp_pend  <= 0
        THEN  0
        ELSE  mc.ind_deud_pend
      END,
      mc.usu_modi = USER,
      mc.fec_modi = SYSDATE
     WHERE mc.mvcc_oid_movi_cc = p_oid_movi_carg
       AND mc.fec_cier >= p_fec_ulti_movi
     RETURNING mc.cod_cart INTO lv_cod_cart;

     UPDATE cob_carte_movim_cuent_clien cc
     SET
      cc.imp_deud_canc = cc.imp_deud_asig - p_imp_pend,
      cc.imp_pago_banc = cc.imp_pago_banc + p_imp_pago,
      cc.fec_ult_pago_banc = p_fec_ulti_movi,
      cc.val_ulti_nume_hist = lv_reg_hmcc.num_hist + 1,
      cc.imp_deud_pend = p_imp_pend,
      cc.ind_deud_pend =
      CASE
       WHEN p_imp_pend  <= 0
        THEN  0
        ELSE  cc.ind_deud_pend
      END,
      cc.usu_modi = USER,
      cc.fec_modi = SYSDATE
     WHERE cc.mvcc_oid_movi_cc = p_oid_movi_carg
       AND cc.fec_cier >= p_fec_ulti_movi
     RETURNING cc.cod_cart INTO lv_cod_cart;

     UPDATE cob_detal_asign_carte d
     SET
      ( d.imp_deud_canc,
        d.imp_pago_banc,
        d.fec_ult_pago_banc,
        d.imp_deud_pend ) =
      (SELECT
        SUM(c.imp_deud_canc),
        SUM(c.imp_pago_banc),
        MAX(c.fec_ult_pago_banc),
        SUM(c.imp_deud_pend)
       FROM cob_carte_movim_cuent_clien c
       WHERE c.cod_cart = lv_cod_cart
         AND c.oid_clie = p_oid_clie
       GROUP BY c.oid_clie),
       d.usu_modi = p_cod_usua,
       d.fec_modi = SYSDATE
     WHERE d.oid_clie = p_oid_clie
       AND d.cod_cart = lv_cod_cart;

     UPDATE cob_repor_estad_recup_cobra cbz
     SET
      cbz.cob_dias_21 =
          CASE
           WHEN p_fec_ulti_movi <= cbz.fec_cier_21 THEN
            cbz.cob_dias_21 + p_imp_pago
           ELSE
            cbz.cob_dias_21
          END,
      cbz.cob_dias_31 =
          CASE
           WHEN p_fec_ulti_movi <= cbz.fec_cier_31 THEN
            cbz.cob_dias_31 + p_imp_pago
           ELSE
            cbz.cob_dias_31
          END,
      cbz.cob_dias_42 =
          CASE
           WHEN p_fec_ulti_movi <= cbz.fec_cier_42 THEN
            cbz.cob_dias_42 + p_imp_pago
           ELSE
            cbz.cob_dias_42
          END,
      cbz.cob_dias_63 =
          CASE
           WHEN p_fec_ulti_movi <= cbz.fec_cier_63 THEN
            cbz.cob_dias_63 + p_imp_pago
           ELSE
            cbz.cob_dias_63
          END,
      cbz.cob_dias_84 =
          CASE
           WHEN p_fec_ulti_movi <= cbz.fec_cier_84 THEN
            cbz.cob_dias_84 + p_imp_pago
           ELSE
            cbz.cob_dias_84
          END,
      cbz.cob_dias_126 =
          CASE
           WHEN p_fec_ulti_movi <= cbz.fec_cier_126 THEN
            cbz.cob_dias_126 + p_imp_pago
           ELSE
            cbz.cob_dias_126
          END,
      cbz.cob_dias_189 =
          CASE
           WHEN p_fec_ulti_movi <= cbz.fec_cier_189 THEN
            cbz.cob_dias_189 + p_imp_pago
           ELSE
            cbz.cob_dias_189
          END,
      cbz.cob_dias_vent =
          CASE
           WHEN p_fec_ulti_movi <= cbz.fec_cier_vent THEN
            NVL(cbz.cob_dias_vent,0) + p_imp_pago
           ELSE
            NVL(cbz.cob_dias_vent,0)
          END,
      cbz.cob_dias_999 = cbz.cob_dias_189 + p_imp_pago,
      cbz.ulti_nume_hist = lv_reg_hmcc.num_hist + 1,
      cbz.imp_paga = p_imp_paga,
      cbz.imp_pend = p_imp_pend,
      cbz.imp_sald_pend_sac = cbz.imp_sald_pend_sac - p_imp_pago,
      cbz.usu_modi = USER,
      cbz.fec_modi = SYSDATE
     WHERE cbz.oid_movi_cc = p_oid_movi_carg;

    END IF;

   EXCEPTION

    WHEN OTHERS THEN
      NULL;

   END;

  ELSE

   lv_reg_aplic_abon_cargo.mvcc_oid_movi_abon := p_oid_movi_abon;

   BEGIN

    lv_ind_actu_cobr := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndicadorActualizacionCobranza');

    IF lv_ind_actu_cobr = '1' THEN

     UPDATE cob_detal_movim_carte mc
     SET
      mc.imp_deud_canc = mc.imp_deud_asig - p_imp_pend,
      mc.imp_pago_otro = mc.imp_pago_otro + p_imp_pago,
      mc.val_ulti_nume_hist = lv_reg_hmcc.num_hist + 1,
      mc.imp_deud_pend = p_imp_pend,
      mc.ind_deud_pend =
      CASE
       WHEN p_imp_pend  <= 0
       THEN  0
       ELSE  mc.ind_deud_pend
      END,
      mc.usu_modi = USER,
      mc.fec_modi = SYSDATE
     WHERE mc.mvcc_oid_movi_cc = p_oid_movi_carg
       AND mc.fec_cier >= p_fec_ulti_movi
     RETURNING mc.cod_cart INTO lv_cod_cart;

     UPDATE cob_carte_movim_cuent_clien cc
     SET
      cc.imp_deud_canc = cc.imp_deud_asig - p_imp_pend,
      cc.imp_pago_otro = cc.imp_pago_otro + p_imp_pago,
      cc.val_ulti_nume_hist = lv_reg_hmcc.num_hist + 1,
      cc.imp_deud_pend = p_imp_pend,
      cc.ind_deud_pend =
      CASE
       WHEN p_imp_pend  <= 0
       THEN  0
       ELSE  cc.ind_deud_pend
      END,
      cc.usu_modi = USER,
      cc.fec_modi = SYSDATE
     WHERE cc.mvcc_oid_movi_cc = p_oid_movi_carg
       AND cc.fec_cier >= p_fec_ulti_movi
     RETURNING cc.cod_cart INTO lv_cod_cart;

     UPDATE cob_detal_asign_carte d
     SET
      ( d.imp_deud_canc,
        d.imp_pago_otro,
        d.imp_deud_pend ) =
      (SELECT
        SUM(c.imp_deud_canc),
        SUM(c.imp_pago_otro),
        SUM(c.imp_deud_pend)
       FROM cob_carte_movim_cuent_clien c
       WHERE c.cod_cart=lv_cod_cart
         AND c.oid_clie= p_oid_clie
       GROUP BY c.oid_clie),
       d.usu_modi = p_cod_usua,
       d.fec_modi = SYSDATE
     WHERE d.oid_clie = p_oid_clie
       AND d.cod_cart = lv_cod_cart;

     UPDATE cob_repor_estad_recup_cobra cbz
     SET
      cbz.ulti_nume_hist = lv_reg_hmcc.num_hist + 1,
      cbz.imp_paga = p_imp_paga,
      cbz.imp_pend = p_imp_pend,
      cbz.imp_abon_nmon = cbz.imp_abon_nmon + p_imp_pago,
      cbz.imp_fact_neto = cbz.imp_fact_neto - p_imp_pago,
      cbz.imp_sald_pend_sac = cbz.imp_sald_pend_sac - p_imp_pago,
      cbz.usu_modi = USER,
      cbz.fec_modi = SYSDATE
     WHERE cbz.oid_movi_cc = p_oid_movi_carg;

    END IF;

   EXCEPTION

    WHEN OTHERS THEN
      NULL;

   END;

  END IF;

  lv_reg_aplic_abon_cargo.subp_oid_subp_apli := p_oid_subp_ulti;
  lv_reg_aplic_abon_cargo.mvcc_oid_movi_carg := p_oid_movi_carg;
  lv_reg_aplic_abon_cargo.clie_oid_clie := p_oid_clie;
  lv_reg_aplic_abon_cargo.imp_abon := p_imp_pago;
  lv_reg_aplic_abon_cargo.fec_proc := p_fec_proc;
  lv_reg_aplic_abon_cargo.fec_apli := p_fec_ulti_movi;
  lv_reg_aplic_abon_cargo.usu_crea := p_cod_usua;
  lv_reg_aplic_abon_cargo.fec_crea := SYSDATE;
  lv_reg_aplic_abon_cargo.usu_modi := p_cod_usua;
  lv_reg_aplic_abon_cargo.fec_modi := SYSDATE;
  lv_reg_aplic_abon_cargo.oid_movi_abon := ccc_hmba_seq.nextval;
  lv_reg_aplic_abon_cargo.imp_pend_carg := p_imp_pend;
  lv_reg_aplic_abon_cargo.val_nume_hist := lv_reg_hmcc.num_hist + 1;
  lv_reg_aplic_abon_cargo.ind_pago_exce := p_ind_pago_exce;
  lv_reg_aplic_abon_cargo.ind_tipo_abon_nmon := p_ind_tipo_abon;

  INSERT INTO ccc_aplic_abono_cargo VALUES lv_reg_aplic_abon_cargo;

 EXCEPTION

  WHEN OTHERS THEN
   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(SQLERRM, 1, 250);

   RAISE_application_error(-20123,
                              'ERROR ccc_pr_actua_cargo_aplic: ' ||
                               ls_sqlerrm);

 END ccc_pr_actua_cargo_aplic;

 /**************************************************************************
   Descripcion       : Aplica los abonos pendientes a los cargos pendientes
                         de un Cliente
   Fecha Creacion    : 11/05/2009
   Parametros Entrada :
            Oid Pais
            Codigo de Pais
            Oid Sociedad
            Codigo de Sociedad
            Oid Cliente
            Codigo Usuario
  ***************************************************************************/
   PROCEDURE ccc_pr_aplic_abono_cargo_masiv(
      p_oid_pais                             seg_pais.oid_pais%TYPE,
      p_oid_cabe_carg                   ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE,
      p_val_docu_anio_apli            ccc_cabec_carga_abono_direc.anio%TYPE,
      p_val_docu_mes_apli            ccc_cabec_carga_abono_direc.val_peri_mes%TYPE,
      p_val_docu_nume_apli          ccc_cabec_carga_abono_direc.num_cabe%TYPE,
      p_oid_clie                              mae_clien.oid_clie%TYPE,
      p_cod_usua                            VARCHAR2)
   IS

   CURSOR c_abon(p_oid_pais NUMBER,p_oid_clie  NUMBER)
   IS
     SELECT *
     FROM (
             SELECT mcc.oid_movi_cc                  oid_movi,
                    sca.oid_subp_apli                oid_subp_apli,
                    sca.oid_tcab_apli                oid_tcab_aplic,
                    sca.oid_tipo_abono_subp_apli     oid_tipo_abono_subp_apli,
                    sca.oid_marc_situ_sali           oid_marc_situ_sali,
                    sca.ind_abon_nomo                tipo,
                    mcc.fec_docu                     fec_movi,
                    mcc.imp_pend*-1                  imp_pend
             FROM ccc_movim_cuent_corri mcc,
                  ccc_proce_subpr_creac_aplic sca
             WHERE mcc.clie_oid_clie=p_oid_clie
             AND mcc.subp_oid_subp_crea=sca.oid_subp_crea
             AND mcc.tcab_oid_tcab_crea=sca.oid_tcab_crea
             AND mcc.imp_pend<0
             UNION
             SELECT mb.oid_movi_banc                 oid_movi,
                    sca.oid_subp_apli                oid_subp_apli,
                    sca.oid_tcab_apli                oid_tcab_aplic,
                    sca.oid_tipo_abono_subp_apli     oid_tipo_abono_subp_apli,
                    sca.oid_marc_situ_sali           oid_marc_situ_sali,
                    sca.ind_abon_nomo                tipo,
                    mb.fec_pago                      fec_movi,
                    mb.imp_sald_pend                 imp_pend
             FROM ccc_movim_banca mb,
                  ccc_proce_subpr_creac_aplic sca
             WHERE mb.clie_oid_clie=p_oid_clie
             AND mb.pais_oid_pais=p_oid_pais
             AND mb.subp_oid_marc_crea=sca.oid_subp_crea
             AND mb.cod_iden_proc=gc_cod_iden_proc_proc
             AND mb.imp_sald_pend<>0)
             ORDER BY fec_movi ASC;

   CURSOR c_carg(p_oid_clie                  mae_clien.oid_clie%TYPE,
                p_oid_tipo_abono_subp_aplic ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE)
   IS
      SELECT mcc.oid_movi_cc ,
            mcc.masi_oid_marc_situ,
             mcc.imp_movi,
             mcc.imp_paga ,
             mcc.imp_pend,
             mcc.val_ulti_docu_anio,
             mcc.val_ulti_docu_mes_seri,
             mcc.val_ulti_docu_nume
      FROM ccc_movim_cuent_corri mcc
      WHERE mcc.clie_oid_clie=p_oid_clie
      AND mcc.imp_pend>0
      AND EXISTS (
         SELECT NULL
         FROM ccc_marca_tipo_abono mta
         WHERE mta.tasp_oid_tipo_abon_subp=p_oid_tipo_abono_subp_aplic
         AND mta.masi_oid_marc_sali=mcc.masi_oid_marc_situ
         AND mta.ind_entr_sali='E')
      ORDER BY mcc.fec_venc ASC;

     v_imp_abon            NUMBER(12,2);
     v_imp_pend_fina       NUMBER(12,2);
     v_imp_pend_inic       NUMBER(12,2);

     e_rz_inco_sald_pend        EXCEPTION;

   BEGIN

     -- Obtiene el Saldo Pendiente Inicial de MCC
     v_imp_pend_inic:=CCC_PKG_GENER.CCC_FN_OBTIE_SALDO_TOTAL(p_oid_clie);

     -- Inicio Loop Abonos --
     FOR v_abon IN c_abon(p_oid_pais,p_oid_clie) LOOP

        IF c_abon%FOUND = FALSE THEN
           EXIT;
        END IF;

        v_imp_abon:=v_abon.imp_pend;

         -- Inicio Loop Cargos --
         FOR v_carg IN c_carg(p_oid_clie,v_abon.oid_tipo_abono_subp_apli) LOOP

            IF c_carg%FOUND = FALSE THEN
              EXIT;
            END IF;

            IF v_imp_abon >= v_carg.imp_pend THEN

                  CCC_PKG_GENER.CCC_PR_ACTUA_CUENT(
                     p_oid_clie,
                     v_Carg.Oid_Movi_Cc,
                     v_abon.fec_movi,
                     p_oid_cabe_carg,
                     p_val_docu_anio_apli,
                     p_val_docu_mes_apli,
                     p_val_docu_nume_apli,
                     v_abon.oid_subp_apli,
                     v_abon.oid_tcab_aplic,
                     v_abon.oid_marc_situ_sali,
                     v_carg.imp_movi,
                     0,
                     v_carg.imp_pend,
                     v_abon.oid_movi,
                     v_abon.tipo,
                     p_cod_usua);

                  v_imp_abon:=v_imp_abon - v_carg.imp_pend;



            ELSE

                   CCC_PKG_GENER.CCC_PR_ACTUA_CUENT(
                     p_oid_clie,
                     v_Carg.Oid_Movi_Cc,
                     v_abon.fec_movi,
                     p_oid_cabe_carg,
                     p_val_docu_anio_apli,
                     p_val_docu_mes_apli,
                     p_val_docu_nume_apli,
                     v_abon.oid_subp_apli,
                     v_abon.oid_tcab_aplic,
                     v_carg.masi_oid_marc_situ,
                     v_carg.imp_paga + v_imp_abon,
                     v_carg.imp_pend - v_imp_abon,
                     v_imp_abon,
                     v_abon.oid_movi,
                     v_abon.tipo,
                     p_cod_usua);

                 v_imp_abon:=0;

                 EXIT;


         END IF;

         IF v_imp_abon=0 THEN
            EXIT;
         END IF;

      END LOOP;

      -- Actualizando el Abono
      IF v_abon.tipo=1 THEN

         UPDATE ccc_movim_cuent_corri mcc
         SET mcc.imp_pend=v_imp_abon*-1,
             mcc.imp_paga=mcc.imp_movi - v_imp_abon*-1,
             mcc.subp_oid_subp_ulti = v_abon.oid_subp_apli,
             mcc.tcab_oid_tcab_ulti = v_abon.oid_tcab_aplic,
             mcc.masi_oid_marc_situ= CASE
                                       WHEN v_imp_abon=0 THEN v_abon.oid_marc_situ_sali
                                       ELSE mcc.masi_oid_marc_situ
                                     END
          WHERE mcc.oid_movi_cc=v_abon.oid_movi;
       ELSE

          UPDATE ccc_movim_banca mb
          SET mb.imp_sald_pend =  v_imp_abon,
                  mb.imp_apli=mb.imp_pago - v_imp_abon,
                  mb.subp_oid_marc_ulti=v_abon.oid_subp_apli,
                  mb.tcab_oid_abon_ulti = v_abon.oid_tcab_aplic,
                  mb.val_esta_movi_pend = CASE
                                             WHEN v_imp_abon=0 THEN 'A'
                                             ELSE 'P'
                                          END
           WHERE mb.oid_movi_banc=v_abon.oid_movi;
       END IF;

  END LOOP;
  -- Fin Loop Abonos

   v_imp_pend_fina:=CCC_PKG_GENER.CCC_FN_OBTIE_SALDO_TOTAL(p_oid_clie);

   IF  v_imp_pend_inic <> v_imp_pend_fina THEN
       gv_des_log:='ERROR CCC_PR_APLIC_ABONO_CARGO_MASIV  oid clie : ' || p_oid_clie;
       FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
       RAISE e_rz_inco_sald_pend;
   END IF;


   EXCEPTION
      WHEN e_rz_inco_sald_pend THEN
         RAISE_application_error(-20123,
                              'ERROR CCC_PR_APLIC_ABONO_CARGO_MASIV: Saldos Inconsistentes' ||
                               ls_sqlerrm);

   END ccc_pr_aplic_abono_cargo_masiv;


      /**************************************************************************
     Descripcion       : Aplica una cabebcera de cargo y abono directo
     Fecha Creacion    : 11/05/2009
     Parametros Entrada :
            Codigo de Pais
            Codigo de Sociedad
            Anio de Cabecera
            Mes de Cabecera
            Documento de Cabecera
            Codide de Usuario
   ***************************************************************************/
   PROCEDURE ccc_pr_aplic_cabec_cargo_abono(
      p_cod_pais           IN  seg_pais.cod_pais%TYPE,
      p_num_anio           IN  ccc_movim_cuent_corri.val_docu_anio%TYPE,
      p_num_mes            IN  ccc_movim_cuent_corri.val_docu_mes_seri%TYPE,
      p_num_cabe           IN  ccc_cabec_carga_abono_direc.num_cabe%TYPE,
      p_cod_usu            IN  VARCHAR2
      )
   IS

   CURSOR c_deta_clie(p_oid_cabe_carg ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE)
   IS
      SELECT det.clie_oid_clie
      FROM ccc_detal_cargo_abono_direc det
      WHERE det.ccad_oid_cabe_carg=p_oid_cabe_carg;

   lv_oid_pais                     seg_pais.oid_pais%TYPE;
   lv_oid_cabe_carg                ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;

   TYPE t_tab_deta_clie IS TABLE OF c_deta_clie%ROWTYPE;
   lv_tab_deta_clie                t_tab_deta_clie;

  BEGIN

      lv_oid_pais:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_cod_pais);

      SELECT cab.oid_cabe_carg
      INTO lv_oid_cabe_carg
      FROM ccc_cabec_carga_abono_direc cab
      WHERE cab.anio=p_num_anio
      AND cab.val_peri_mes=p_num_mes
      AND cab.num_cabe=p_num_cabe;

      OPEN c_deta_clie(lv_oid_cabe_carg);
      LOOP
         FETCH c_deta_clie BULK COLLECT INTO  lv_tab_deta_clie LIMIT W_FILAS;
            IF lv_tab_deta_clie.COUNT > 0 THEN
               FOR i IN lv_tab_deta_clie.FIRST .. lv_tab_deta_clie.LAST LOOP
                  CCC_PKG_PROCE.CCC_PR_APLIC_ABONO_CARGO_MASIV(lv_oid_pais,lv_oid_cabe_carg,p_num_anio,p_num_mes,p_num_cabe,lv_tab_deta_clie(i).clie_oid_clie,p_cod_usu);
               END LOOP;
            END IF;

         EXIT WHEN c_deta_clie%NOTFOUND;
      END LOOP;
      CLOSE c_deta_clie;

   END ccc_pr_aplic_cabec_cargo_abono;

   PROCEDURE ccc_pr_obtie_param_tipo_solic(
     p_oid_pais           IN   seg_pais.oid_pais%TYPE,
     p_cod_tipo_soli      IN   ped_tipo_solic.cod_tipo_soli%TYPE,
     p_cod_proc           OUT  ccc_proce.cod_proc%TYPE,
     p_oid_proc           OUT  ccc_proce.oid_proc%TYPE,
     p_cod_subp           OUT  ccc_subpr.cod_subp%TYPE,
     p_oid_subp           OUT  ccc_subpr.oid_subp%TYPE,
     p_oid_cuen_corr_banc OUT  ccc_asign_subpr_tipo_solic.ccba_oid_cuen_corr_banc%TYPE,
     p_cod_tipo_carg_abon OUT  ccc_tipo_cargo_abono.cod_tipo_carg_abon%TYPE,
     p_oid_tipo_carg_abon OUT  ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE,
     p_masi_oid_marc_sali OUT  ccc_marca_tipo_abono.masi_oid_marc_sali%TYPE,
     p_oid_cuen_cont      OUT  ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE,
     p_oid_marc           OUT  ped_tipo_solic.marc_oid_marc%TYPE,
     p_oid_sbac           OUT  ped_tipo_solic.sbac_oid_sbac%TYPE,
     p_oid_medi_pago      OUT  bel_forma_pago_detal.mpab_oid_medi_pago%TYPE,
     p_tsol_oid_tipo_cons OUT  ped_tipo_solic_pais.tsol_oid_tipo_cons%TYPE,
     p_oid_tipo_abon_subp OUT  ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
     p_ind_soli_nega      OUT  ped_tipo_solic.ind_soli_nega%TYPE);

   PROCEDURE ccc_pr_gener_movim_crea_perce(
      p_cod_pais            IN  seg_pais.cod_pais%TYPE,
      p_cod_soci            IN   seg_socie.cod_soci%TYPE,
      p_oid_soci            IN  seg_socie.oid_soci%TYPE,
      p_num_lote            IN  per_solic_monet.num_lote%TYPE,
      p_cod_tipo_soli       IN  ped_tipo_solic.cod_tipo_soli%TYPE,
      p_num_anio            IN  ccc_movim_cuent_corri.val_docu_anio%TYPE,
      p_num_mes             IN  ccc_movim_cuent_corri.val_docu_mes_seri%TYPE,
      p_num_comp            IN  ccc_secue_pais.num_secu%TYPE,
      p_oid_cabe_carg       IN  ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE,
      p_oid_proc            IN  ccc_proce.oid_proc%TYPE,
      p_oid_subp            IN  ccc_subpr.oid_subp%TYPE,
      p_oid_cuen_corr_banc  IN  ccc_asign_subpr_tipo_solic.ccba_oid_cuen_corr_banc%TYPE,
      p_cod_tipo_carg_abon  IN  ccc_tipo_cargo_abono.cod_tipo_carg_abon%TYPE,
      p_oid_tipo_carg_abon  IN  ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE,
      p_masi_oid_marc_sali  IN  ccc_marca_tipo_abono.masi_oid_marc_sali%TYPE,
      p_oid_cuen_cont       IN  ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE,
      p_oid_marc            IN  ped_tipo_solic.marc_oid_marc%TYPE,
      p_oid_mone            IN  seg_pais.mone_oid_mone%TYPE,
      p_oid_sbac            IN  ped_tipo_solic.sbac_oid_sbac%TYPE,
      p_oid_medi_pago       IN  bel_forma_pago_detal.mpab_oid_medi_pago%TYPE,
      p_tsol_oid_tipo_cons  IN  ped_tipo_solic_pais.tsol_oid_tipo_cons%TYPE,
      p_ind_soli_nega       IN  ped_tipo_solic.ind_soli_nega%TYPE,
      p_cod_acce            IN  per_solic_monet.cod_acce%TYPE,
      p_cod_sbac            IN  per_solic_monet.cod_sbac%TYPE,
      p_num_iden_cuot_ini   OUT ped_numer_solic.val_ulti_nume_soli%TYPE,
      p_num_iden_cuot_fin   OUT ped_numer_solic.val_ulti_nume_soli%TYPE );

 PROCEDURE ccc_pr_gener_movim_cuent_corri(
  p_num_iden_cuot_inic             IN   ped_numer_solic.val_ulti_nume_soli%TYPE);

 PROCEDURE ccc_pr_gener_detal_cargo_abono(
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE);

 PROCEDURE CCC_PR_GENER_REGIS_CUENT_CORRI(
  p_oid_soli_cabe                  IN   ped_solic_cabec.oid_soli_cabe%TYPE)
 IS

  lv_ind_soli_nega                      ped_tipo_solic.ind_soli_nega%TYPE;
  lv_oid_form_pago_cabe                 bel_forma_pago.oid_form_pago%TYPE;
  lv_oid_clie                           mae_clien.oid_clie%TYPE;
  lv_fec_fact                           ped_solic_cabec.fec_fact%TYPE;
  lv_oid_peri                           ped_solic_cabec.perd_oid_peri%TYPE;
  lv_oid_zona                           ped_solic_cabec.zzon_oid_zona%TYPE;
  lv_val_tota_paga_loca_cabe            NUMBER(12,2);
  lv_val_imp_inaf_cabe                  NUMBER(12,2);
  lv_ind_gast_admi                      ccc_param_gener.val_para%TYPE;

  TYPE reg_desg_form_pago  IS RECORD (
   oid_form_pago                        NUMBER(12),
   ind_cabe                             NUMBER(12),
   imp_inaf                             NUMBER(12,2),
   imp_loca                             NUMBER(12,2));

  TYPE tab_desg_form_pago               IS TABLE OF reg_desg_form_pago;
  lv_tab_desg_form_pago                 tab_desg_form_pago;

  CURSOR c_desg_form_pago(
   p_oid_form_pago                      bel_forma_pago.oid_form_pago%TYPE,
   p_imp_tota                           NUMBER)
  IS
  WITH temp1
  AS
      (SELECT *
    FROM (
          SELECT
           psp.fopa_oid_form_pago oid_form_pago,
           SUM(psp.val_prec_fact_tota_loca) - SUM(psp.val_prec_cont_tota_loca) imp_tota
          FROM
           ped_solic_cabec psc,
           ped_solic_posic psp
          WHERE psc.oid_soli_cabe = psp.soca_oid_soli_cabe
            AND psc.soca_oid_soli_cabe = p_oid_soli_cabe
            AND psp.fopa_oid_form_pago IS NOT NULL
            AND psp.fopa_oid_form_pago <> lv_oid_form_pago_cabe
          GROUP BY psp.fopa_oid_form_pago)
        WHERE imp_tota > 0),
     temp2 AS
      (SELECT
        SUM(t1.imp_tota) imp_tota
       FROM temp1 t1)
      SELECT
       t1.oid_form_pago,
       0   ind_cabe,
       0   imp_inaf,
       t1.imp_tota
      FROM temp1 t1
      UNION ALL
      SELECT
       p_oid_form_pago,
       1                    ind_cabe,
       lv_val_imp_inaf_cabe imp_inaf,
       p_imp_tota - NVL(t2.imp_tota,0) imp_tota
      FROM temp2 t2;

  CURSOR c_cuot_desg_form_pago
  IS
   SELECT
    oid_soli_cabe,
    oid_peri,
    cod_tipo_movi,
    oid_clie,
    ROWNUM num_orde_cuot,
    fec_venc,
    imp_cuot_inaf,
    imp_cuot_frac_loca
   FROM  (
     SELECT
      ccc.oid_soli_cabe,
      ccc.oid_peri,
      ccc.cod_tipo_movi,
      ccc.oid_clie,
      ccc.fec_venc,
      SUM(ccc.imp_cuot_inaf) imp_cuot_inaf,
      SUM(ccc.imp_cuot_frac_loca) imp_cuot_frac_loca
     FROM ccc_gener_cuota_cuent_corri ccc
     WHERE ccc.oid_soli_cabe = p_oid_soli_cabe
     AND ccc.ind_cuot_flex = 0
     GROUP BY
      ccc.oid_soli_cabe,
      ccc.oid_peri,
      ccc.cod_tipo_movi,
      ccc.oid_clie,
      ccc.fec_venc
     ORDER BY ccc.fec_venc ASC);



 BEGIN

  lv_ind_gast_admi := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('indicadorAdicionGAConsolidado');

  IF lv_ind_gast_admi = 'S' THEN

   SELECT
    psc.clie_oid_clie,
    psc.fec_fact,
    psc.perd_oid_peri,
    psc.zzon_oid_zona,
    pts.ind_soli_nega,
    psc.fopa_oid_form_pago,
    psc.val_tota_paga_loca + NVL(psc.val_tota_gast_admi,0),
    NVL(psc.val_impo_flet_tota_loca,0) + NVL(psc.val_tota_gast_admi,0)
   INTO
    lv_oid_clie,
    lv_fec_fact,
    lv_oid_peri,
    lv_oid_zona,
    lv_ind_soli_nega ,
    lv_oid_form_pago_cabe,
    lv_val_tota_paga_loca_cabe,
    lv_val_imp_inaf_cabe
   FROM
    ped_solic_cabec psc,
    ped_tipo_solic_pais ptsp,
    ped_tipo_solic pts
   WHERE psc.oid_soli_cabe = p_oid_soli_cabe
     AND psc.tspa_oid_tipo_soli_pais = ptsp.oid_tipo_soli_pais
     AND ptsp.tsol_oid_tipo_soli = pts.oid_tipo_soli;

  ELSE

   SELECT
    psc.clie_oid_clie,
    psc.fec_fact,
    psc.perd_oid_peri,
    psc.zzon_oid_zona,
    pts.ind_soli_nega,
    psc.fopa_oid_form_pago,
    NVL(psc.val_tota_paga_loca,0),
    NVL(psc.val_impo_flet_tota_loca,0)
   INTO
    lv_oid_clie,
    lv_fec_fact,
    lv_oid_peri,
    lv_oid_zona,
    lv_ind_soli_nega ,
    lv_oid_form_pago_cabe,
    lv_val_tota_paga_loca_cabe,
    lv_val_imp_inaf_cabe
   FROM
    ped_solic_cabec psc,
    ped_tipo_solic_pais ptsp,
    ped_tipo_solic pts
   WHERE psc.oid_soli_cabe = p_oid_soli_cabe
     AND psc.tspa_oid_tipo_soli_pais = ptsp.oid_tipo_soli_pais
     AND ptsp.tsol_oid_tipo_soli = pts.oid_tipo_soli;

 END IF;

  /*
  dbms_output.put_line('----------------');
  dbms_output.put_line(' ');
  dbms_output.put_line('Datos del Pedido');
  dbms_output.put_line('Oid Soli Cabe : ' || p_oid_soli_cabe);
  dbms_output.put_line('Fecha Facturacion : ' || lv_fec_fact);
  dbms_output.put_line('Forma de Pago Cabecera : ' || lv_oid_form_pago_cabe);
  dbms_output.put_line('Total Pedido : ' || lv_val_tota_paga_loca_cabe);
  dbms_output.put_line('Indicador Solicitud Negativa ' || lv_ind_soli_nega);
  dbms_output.put_line('----------------');
  */

  IF lv_val_tota_paga_loca_cabe = 0 THEN
   RAISE e_no_gene_regi;
  END IF;

  IF lv_ind_soli_nega = 0 THEN

    -- Realizando el desglose de las formas de pago
    OPEN c_desg_form_pago(lv_oid_form_pago_cabe,lv_val_tota_paga_loca_cabe);
    LOOP
     FETCH c_desg_form_pago BULK COLLECT INTO lv_tab_desg_form_pago LIMIT W_FILAS;
     IF lv_tab_desg_form_pago.COUNT > 0 THEN

       FOR i IN lv_tab_desg_form_pago.FIRST .. lv_tab_desg_form_pago.LAST LOOP

        /*
        dbms_output.put_line('   Desglosando Formas de Pago ');
        dbms_output.put_line('   Forma de Pago : ' || lv_tab_desg_form_pago(i).oid_form_pago);
        dbms_output.put_line('   Importe Fraccionar : ' || lv_tab_desg_form_pago(i).imp_loca);

        dbms_output.put_line(lv_tab_desg_form_pago(i).imp_inaf);
        */

        -- Desglose de la forma de pago --
        CCC_PR_GENER_DESGL_FORMA_PAGO(
         p_oid_soli_cabe,
         lv_oid_clie,
         lv_tab_desg_form_pago(i).oid_form_pago,
         lv_fec_fact,
         lv_oid_peri,
         lv_oid_zona,
         lv_tab_desg_form_pago(i).ind_cabe,
         lv_tab_desg_form_pago(i).imp_inaf,
         lv_tab_desg_form_pago(i).imp_loca);

       END LOOP;

     END IF;

    EXIT WHEN c_desg_form_pago%NOTFOUND;
   END LOOP;
   CLOSE c_desg_form_pago;

   FOR v_ccc IN c_cuot_desg_form_pago LOOP

    /*
    dbms_output.put_line('   ******************************** ');
    dbms_output.put_line('   Generando Cuenta Corriente ');
    dbms_output.put_line('   Numero Cuota : ' || v_ccc.num_orde_cuot);
    dbms_output.put_line('   Fecha Vencimiento : ' || v_ccc.fec_venc);
    dbms_output.put_line('   Importe Cuota : ' || v_ccc.imp_cuot_frac_loca);
    */

    -- Genera Cuotas Normales --
    CCC_PR_GENER_CUENT_CORRI_FACT(
     v_ccc.cod_tipo_movi,
     v_ccc.oid_soli_cabe,
     v_ccc.oid_peri,
     v_ccc.oid_clie,
     v_ccc.num_orde_cuot,
     v_ccc.fec_venc,
     v_ccc.imp_cuot_inaf,
     v_ccc.imp_cuot_frac_loca,
     NULL,
     USER);

   END LOOP;

  ELSE

   -- Genera la Cuenta Corriente Directamente del Pedido
   CCC_PR_GENER_CUENT_CORRI_FACT(
    gc_cod_tipo_movi_fact,
    p_oid_soli_cabe,
    lv_oid_peri,
    lv_oid_clie,
    1,
    lv_fec_fact,
    NULL,
    lv_val_tota_paga_loca_cabe,
    NULL,
    USER);

  END IF;


  DELETE FROM ccc_gener_cuota_cuent_corri
  WHERE oid_soli_cabe = p_oid_soli_cabe;

 EXCEPTION

  WHEN e_no_gene_regi THEN
   NULL;

  WHEN OTHERS THEN
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_REGIS_CUENT_CORRI;

 PROCEDURE CCC_PR_GENER_DESGL_FORMA_PAGO(
  p_oid_soli_cabe                  IN   ped_solic_cabec.ind_esta%TYPE,
  p_oid_clie                       IN   mae_clien.oid_clie%TYPE,
  p_oid_form_pago                  IN   bel_forma_pago.oid_form_pago%TYPE,
  p_fec_fact                       IN   ped_solic_cabec.fec_fact%TYPE,
  p_oid_peri                       IN   cra_perio.oid_peri%TYPE,
  p_oid_zona                       IN   zon_zona.oid_zona%TYPE,
  p_ind_cabe                       IN   NUMBER,
  p_imp_inaf                       IN   NUMBER,
  p_imp_frac_loca                  IN   ped_solic_cabec.val_tota_paga_loca%TYPE)
 IS

  lv_cod_peri                           seg_perio_corpo.cod_peri%TYPE;
  lv_num_max_posi_deta                  bel_forma_pago_detal.num_posi_deta%TYPE;
  lv_reg_ccc_cuot_pago                  ccc_gener_cuota_cuent_corri%ROWTYPE;
  lv_imp_desg_acum                      NUMBER(12,2):=0;
  lv_imp_inaf                           NUMBER(12,2);



  CURSOR c_form_pago_deta
  IS
   SELECT
    fpd.num_posi_deta,
    fpd.mpab_oid_medi_pago,
    fpd.val_porc_pago,
    fpd.cod_indi_dias,
    NVL(fpd.num_dias,0) num_dias,
    fpd.cact_oid_acti
   FROM bel_forma_pago_detal fpd
   WHERE fpd.fopa_oid_form_pago = p_oid_form_pago
   ORDER BY fpd.num_posi_deta ASC;

 BEGIN

  lv_imp_inaf :=  p_imp_inaf;

  SELECT MAX(fpd.num_posi_deta)
  INTO lv_num_max_posi_deta
  FROM bel_forma_pago_detal fpd
  WHERE fpd.fopa_oid_form_pago = p_oid_form_pago;

  lv_cod_peri := FIN_PKG_GENER.FIN_FN_OBTIE_CODIG_PERIO(p_oid_peri);

  FOR v_form_pago_deta IN c_form_pago_deta LOOP

   lv_reg_ccc_cuot_pago.oid_soli_cabe := p_oid_soli_cabe;
   lv_reg_ccc_cuot_pago.cod_tipo_movi := gc_cod_tipo_movi_fact;

   BEGIN

    SELECT p.cod_tipo_movi
    INTO  lv_reg_ccc_cuot_pago.cod_tipo_movi
    FROM ccc_param_tipo_solic_pais p
    WHERE p.oid_form_pago = p_oid_form_pago;

  EXCEPTION

   WHEN no_data_found THEN
    lv_reg_ccc_cuot_pago.cod_tipo_movi := gc_cod_tipo_movi_fact;

   END;

   lv_reg_ccc_cuot_pago.oid_peri := p_oid_peri;
   lv_reg_ccc_cuot_pago.oid_clie := p_oid_clie;
   lv_reg_ccc_cuot_pago.oid_form_pago := p_oid_form_pago;
   lv_reg_ccc_cuot_pago.num_orde_cuot := v_form_pago_deta.num_posi_deta;
   lv_reg_ccc_cuot_pago.oid_medi_pago := v_form_pago_deta.mpab_oid_medi_pago;
   lv_reg_ccc_cuot_pago.imp_cuot_inaf := 0;
   lv_reg_ccc_cuot_pago.ind_cuot_flex := 0;

   /*
   dbms_output.put_line('      Importe a Fraccionar ' || lv_imp_frac_loca);
   dbms_output.put_line('      Cuota generada ');
   dbms_output.put_line('      Maxima Posicion Deta : ' || lv_num_max_posi_deta);
   dbms_output.put_line('      Numero Posicion Deta : ' || lv_reg_ccc_cuot_pago.num_orde_cuot);
   */

   IF v_form_pago_deta.num_posi_deta < lv_num_max_posi_deta THEN

   /*
    dbms_output.put_line('      NO es la ultima posicion');
    dbms_output.put_line('      % Pago ' || v_form_pago_deta.val_porc_pago);
    */
    lv_reg_ccc_cuot_pago.imp_cuot_frac_loca := round((v_form_pago_deta.val_porc_pago*p_imp_frac_loca)/100,2);
    lv_imp_desg_acum := lv_imp_desg_acum + lv_reg_ccc_cuot_pago.imp_cuot_frac_loca;

   ELSE

   /*
    dbms_output.put_line('      Ultima Posicion');
    dbms_output.put_line('      Importe Desglosado Acumulado ' || lv_imp_desg_acum);
    */

    lv_reg_ccc_cuot_pago.imp_cuot_frac_loca := p_imp_frac_loca - lv_imp_desg_acum;

   END IF;

   IF (p_ind_cabe = 1 AND lv_imp_inaf > 0) THEN

    IF lv_reg_ccc_cuot_pago.imp_cuot_frac_loca > lv_imp_inaf THEN

     lv_reg_ccc_cuot_pago.imp_cuot_inaf := lv_imp_inaf;
     lv_imp_inaf := 0;

    ELSE

     lv_reg_ccc_cuot_pago.imp_cuot_inaf := lv_reg_ccc_cuot_pago.imp_cuot_frac_loca;
     lv_imp_inaf :=  lv_imp_inaf - lv_reg_ccc_cuot_pago.imp_cuot_frac_loca;

    END IF;

   END IF;

   CASE
      WHEN v_form_pago_deta.cod_indi_dias = 'N' THEN

       --dbms_output.put_line('      Indicador de Dias por Numero de Dias');

       lv_reg_ccc_cuot_pago.fec_venc := p_fec_fact + v_form_pago_deta.num_dias;

      WHEN v_form_pago_deta.cod_indi_dias = 'A' THEN

        --dbms_output.put_line('      Indicador de Dias por Actividad ' || v_form_pago_deta.cact_oid_acti);

       --lv_reg_ccc_cuot_pago.oid_peri := p_oid_peri + v_form_pago_deta.num_dias;
       BEGIN
        lv_reg_ccc_cuot_pago.oid_peri := GEN_PKG_GENER.gen_fn_devuelve_id_cra_perio2(GEN_FN_CALCU_PERIO(lv_cod_peri, v_form_pago_deta.num_dias));
       EXCEPTION
        WHEN NO_DATA_FOUND THEN
         lv_reg_ccc_cuot_pago.oid_peri := p_oid_peri;
       END;


       BEGIN

        SELECT cr.fec_inic
        INTO lv_reg_ccc_cuot_pago.fec_venc
        FROM
         cra_crono cr
        WHERE cr.perd_oid_peri = p_oid_peri
          AND cr.zzon_oid_zona = p_oid_zona
          AND cr.cact_oid_acti = v_form_pago_deta.cact_oid_acti;

       EXCEPTION
        WHEN no_data_found THEN
         lv_reg_ccc_cuot_pago.fec_venc := p_fec_fact;
       END;

      WHEN v_form_pago_deta.cod_indi_dias = 'D' THEN

        --dbms_output.put_line('      Indicador de Dias Duracion');

        SELECT cr.fec_inic
        INTO lv_reg_ccc_cuot_pago.fec_venc
        FROM
         cra_crono cr
        WHERE cr.perd_oid_peri = p_oid_peri
          AND cr.zzon_oid_zona = p_oid_zona
          AND cr.cact_oid_acti = v_form_pago_deta.cact_oid_acti;

      ELSE

        --dbms_output.put_line('      Indicador de Dias Fecha Facturacion');

        lv_reg_ccc_cuot_pago.fec_venc := p_fec_fact;

   END CASE ;

   /*
   dbms_output.put_line('      Orden Cuota : ' || lv_reg_ccc_cuot_pago.num_orde_cuot);
   dbms_output.put_line('      Fecha Vencimiento : ' || lv_reg_ccc_cuot_pago.fec_venc);
   dbms_output.put_line('      Importe Desglosado : ' || lv_reg_ccc_cuot_pago.imp_cuot_frac_loca);
   */

   --lv_imp_frac_loca := lv_imp_frac_loca - lv_reg_ccc_cuot_pago.imp_cuot_frac_loca;

   --dbms_output.put_line('      Importe a Fraccionar restante : ' || lv_imp_frac_loca);

   INSERT INTO ccc_gener_cuota_cuent_corri VALUES lv_reg_ccc_cuot_pago;

  END LOOP;

 EXCEPTION

   WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_DESGL_FORMA_PAGO;

 PROCEDURE CCC_PR_GENER_DESGL_FORMA_FLEXI(
  p_oid_soli_cabe                  IN   ped_solic_cabec.ind_esta%TYPE,
  p_oid_clie                       IN   mae_clien.oid_clie%TYPE,
  p_fec_fact                       IN   ped_solic_cabec.fec_fact%TYPE,
  p_mont_fina_flex                 IN   NUMBER)
 IS

  lv_imp_cuot_frac_loca                 NUMBER(12,2);
  lv_imp_cuot_inaf                      NUMBER(12,2);
  lv_min_fec_venc                       DATE;

 BEGIN

  -- Obteniendo la primera fecha de vencimiento --
  SELECT MIN(c.fec_venc)
  INTO lv_min_fec_venc
  FROM ccc_gener_cuota_cuent_corri c
  WHERE c.oid_soli_cabe = p_oid_soli_cabe
  AND c.cod_tipo_movi = gc_cod_tipo_movi_fact;

  -- Se inserta solo el pedido base
  INSERT INTO ccc_gener_cuota_cuent_flexi
   SELECT
    c.oid_soli_cabe,
    gc_cod_tipo_movi_fact,
    MIN(c.oid_peri),
    c.oid_clie,
    NULL,
    NULL,
    NULL,
    SUM(c.imp_cuot_inaf) imp_cuot_inaf,
    SUM(c.imp_cuot_frac_loca) imp_cuot_frac_loca,
    c.fec_venc,
    0,
    NULL,
    0,
    0
   FROM ccc_gener_cuota_cuent_corri c
   WHERE c.oid_soli_cabe = p_oid_soli_cabe
     AND c.fec_venc = lv_min_fec_venc
     AND c.cod_tipo_movi = gc_cod_tipo_movi_fact
   GROUP BY
    c.oid_soli_cabe,
    c.oid_clie,
    c.fec_venc;

  SELECT f.imp_cuot_frac_loca, f.imp_cuot_inaf
  INTO lv_imp_cuot_frac_loca, lv_imp_cuot_inaf
  FROM ccc_gener_cuota_cuent_flexi f
  WHERE f.oid_soli_cabe = p_oid_soli_cabe;

  IF (lv_imp_cuot_frac_loca > p_mont_fina_flex) AND
     (lv_imp_cuot_inaf < lv_imp_cuot_frac_loca - p_mont_fina_flex) THEN

   DELETE FROM ccc_gener_cuota_cuent_corri c
   WHERE c.oid_soli_cabe = p_oid_soli_cabe
     AND c.fec_venc = lv_min_fec_venc
     AND c.cod_tipo_movi = gc_cod_tipo_movi_fact;

   UPDATE ccc_gener_cuota_cuent_flexi f
   SET f.imp_cuot_frac_loca = f.imp_cuot_frac_loca - p_mont_fina_flex
   WHERE f.oid_soli_cabe = p_oid_soli_cabe;

   -- Inserta el pedido base
   INSERT INTO ccc_gener_cuota_cuent_corri
    SELECT f.*
    FROM ccc_gener_cuota_cuent_flexi f
    WHERE f.oid_soli_cabe = p_oid_soli_cabe;


   -- Inserta las cuotas flexipago
   INSERT INTO ccc_gener_cuota_cuent_corri
    SELECT
     p_oid_soli_cabe,        -- oid_soli_cabe  number(12)
     gc_cod_tipo_movi_flex,   -- cod_tipo_movi varchar2(3)
     d.oid_peri_cuot_flex,   -- oid_peri  number(12)
     p_oid_clie,             -- oid_clie  number(12)
     d.oid_form_pago,        -- oid_form_pago  number(12)
     d.val_nume_orde_cuot,    -- num_orde_cuot  number(3)
     NULL,                   -- oid_medi_pago  number(12)
     0,                       -- imp_cuot_inaf  number(12,2)
     d.val_mont_cuot_flex,    -- imp_cuot_frac_loca  number(12,2)
     d.fec_venc_cuot_flex,    --fec_venc  DATE,
     1,                        -- ind_cuopt_flex NUMBER(1)
     NULL,               --oid_peri_orig  number(12)
     1,                        --ind_carg_frac  number(1)
     0                         --ind_oc  number(1)
    FROM flx_cuota_flexi_factu_detal d
    WHERE d.fec_fact = p_fec_fact
      AND d.oid_clie = p_oid_clie;

   END IF;

 EXCEPTION

   WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_DESGL_FORMA_FLEXI;

 PROCEDURE CCC_PR_GENER_CUENT_CORRI_FACT(
  p_cod_tipo_movi                  IN   ccc_gener_cuota_cuent_corri.cod_tipo_movi%TYPE,
  p_oid_soli_cabe                  IN   ped_solic_cabec.oid_soli_cabe%TYPE,
  p_oid_peri                       IN   cra_perio.oid_peri%TYPE,
  p_oid_clie                       IN   mae_clien.oid_clie%TYPE,
  p_num_orde_cuot                  IN   ccc_movim_cuent_corri.num_orde_cuot%TYPE,
  p_fec_venc                       IN   DATE,
  p_imp_inaf                       IN   NUMBER,
  p_imp_movi                       IN   ccc_movim_cuent_corri.imp_movi%TYPE,
  p_num_lote_fact                  IN   ped_solic_cabec.num_lote_fact%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  -- excepciones
  e_rz_indi_cons_no_def                 EXCEPTION;

  lv_ind_gene_perc                      NUMBER(1);
  lv_ind_tipo_soli_gene_perc            NUMBER(1);
  lv_oid_pais                           seg_pais.oid_pais%TYPE;
  lv_oid_soci                           seg_socie.oid_soci%TYPE;
  lv_oid_tipo_soli_pais                 ped_tipo_solic_pais.oid_tipo_soli_pais%TYPE;
  lv_val_nume_soli                      ped_solic_cabec.val_nume_soli%TYPE;
  lv_oid_marc                           seg_marca.oid_marc%TYPE;
  lv_fec_docu                           ccc_movim_cuent_corri.fec_docu%TYPE;
  lv_imp_movi                           ccc_detal_cargo_abono_direc.imp%TYPE;
  lv_oid_tipo_peri                      seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
  lv_oid_cabe_carg                      ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_oid_movi_cc                        ccc_movim_cuent_corri.oid_movi_cc%TYPE;
  lv_oid_movi_cc_perc                   ccc_movim_cuent_corri.oid_movi_cc%TYPE;
  lv_oid_suba                           seg_subac.oid_sbac%TYPE;
  lv_oid_sbac_perc                      seg_subac.oid_sbac%TYPE;
  lv_oid_mone                           seg_pais.mone_oid_mone%TYPE;
  lv_oid_tipo_docu_lega                 ccc_movim_cuent_corri.tido_oid_tipo_docu%TYPE;
  lv_oid_tipo_clie                      mae_clien_tipo_subti.ticl_oid_tipo_clie%TYPE;
  lv_oid_subt_clie                      mae_clien_tipo_subti.sbti_oid_subt_clie%TYPE;
  lv_oid_regi                           zon_regio.oid_regi%TYPE;
  lv_oid_secc                           zon_secci.oid_secc%TYPE;
  lv_oid_terr_admi                      mae_clien_unida_admin.ztad_oid_terr_admi%TYPE;
  lv_oid_subg_vent                      zon_sub_geren_venta.oid_subg_vent%TYPE;

  lv_oid_tipo_abon_subp                 ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
  lv_oid_proc                           ccc_proce.oid_proc%TYPE;
  lv_oid_subp                           ccc_subpr.oid_subp%TYPE;
  lv_oid_cuen_cont                      ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
  lv_oid_marc_situ                      ccc_marca_situa.oid_marc_situ%TYPE;
  lv_oid_tipo_carg_abon                 ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
  lv_val_ejer_cuot                      ccc_movim_cuent_corri.val_ejer_cuot%TYPE;
  lv_num_anio                           ccc_movim_cuent_corri.val_docu_anio%TYPE;
  lv_num_mes                            ccc_movim_cuent_corri.val_docu_mes_seri%TYPE;
  lv_num_cabe                           ccc_cabec_carga_abono_direc.num_cabe%TYPE;
  lv_num_iden_cuot                      ped_numer_solic.val_ulti_nume_soli%TYPE;
  lv_imp_afec                           NUMBER;
  lv_imp_perc                           NUMBER;
  lv_fact_calc_perc                     NUMBER;
  lv_sign_perc                          NUMBER;
  e_para_null_proc                      EXCEPTION;
  
  ln_no_gene_perc_cons                 NUMBER(5);

 BEGIN

  lv_ind_gene_perc := ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('IndicadorGeneracionPercepcion');

  SELECT
   psc.pais_oid_pais,
   psc.soci_oid_soci,
   psc.mone_oid_mone,
   psc.tspa_oid_tipo_soli_pais,
   psc.sbac_oid_sbac,
   psc.tido_oid_tipo_docu,
   psc.ticl_oid_tipo_clie,
   psc.sbti_oid_subt_clie,
   psc.ztad_oid_terr_admi,
   psc.val_nume_soli,
   psc.fec_fact,
   psc.val_tota_paga_loca
  INTO
   lv_oid_pais,
   lv_oid_soci,
   lv_oid_mone,
   lv_oid_tipo_soli_pais,
   lv_oid_suba,
   lv_oid_tipo_docu_lega,
   lv_oid_tipo_clie,
   lv_oid_subt_clie,
   lv_oid_terr_admi,
   lv_val_nume_soli,
   lv_fec_docu,
   lv_imp_movi
  FROM ped_solic_cabec psc
  WHERE psc.oid_soli_cabe = p_oid_soli_cabe;

  lv_val_ejer_cuot := SUBSTR(lv_val_nume_soli,1,2);
  lv_num_iden_cuot := SUBSTR(lv_val_nume_soli,3,8);

 BEGIN

  -- Obteniendo Parametria del Proceso --
  lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);
  lv_oid_subg_vent := CCC_PKG_GENER.CCC_FN_OBTIE_OID_SUBGE_VENTA(lv_oid_pais,lv_oid_marc,gc_cod_sbac_cadi);

  SELECT spc.tipe_oid_tipo_peri
  INTO lv_oid_tipo_peri
  FROM
   seg_perio_corpo spc,
   cra_perio cp
  WHERE spc.oid_peri = cp.peri_oid_peri
    AND cp.oid_peri = p_oid_peri;

  IF p_cod_tipo_movi = gc_cod_tipo_movi_fact THEN

   BEGIN

    SELECT
     tas.oid_tipo_abon_subp,
     cs.ccpr_oid_proc,
     cs.oid_subp,
     tas.cuco_oid_cuen_cont,
     mta.masi_oid_marc_sali,
     tas.tcab_oid_tcab,
     0
    INTO
     lv_oid_tipo_abon_subp,
     lv_oid_proc,
     lv_oid_subp,
     lv_oid_cuen_cont,
     lv_oid_marc_situ,
     lv_oid_tipo_carg_abon,
     lv_ind_tipo_soli_gene_perc
    FROM
     ccc_asign_subpr_tipo_solic asig,
     ccc_subpr cs,
     ccc_tipo_abono_subpr tas,
     ccc_marca_tipo_abono mta
    WHERE asig.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
      AND asig.subp_oid_subp_crea_cuot = cs.oid_subp
      AND cs.oid_subp = tas.subp_oid_subp
      AND tas.oid_tipo_abon_subp = mta.tasp_oid_tipo_abon_subp
      AND mta.ind_entr_sali = 'S';

   EXCEPTION

    WHEN no_data_found THEN

     SELECT
      tas.oid_tipo_abon_subp,
      cs.ccpr_oid_proc,
      cs.oid_subp,
      tas.cuco_oid_cuen_cont,
      mta.masi_oid_marc_sali,
      tas.tcab_oid_tcab,
      1
     INTO
      lv_oid_tipo_abon_subp,
      lv_oid_proc,
      lv_oid_subp,
      lv_oid_cuen_cont,
      lv_oid_marc_situ,
      lv_oid_tipo_carg_abon,
      lv_ind_tipo_soli_gene_perc
     FROM
      ccc_proce cp,
      ccc_subpr cs,
      ccc_tipo_abono_subpr tas,
      ccc_marca_tipo_abono mta
     WHERE cp.oid_proc = cs.ccpr_oid_proc
       AND cs.oid_subp = tas.subp_oid_subp
       AND tas.oid_tipo_abon_subp = mta.tasp_oid_tipo_abon_subp
       AND mta.ind_entr_sali = 'S'
       AND cp.cod_proc = gc_cod_proc_fact
       AND cs.cod_subp = gc_cod_subp_fact;

   END;

  ELSE

   SELECT
    cptp.oid_tipo_abon_subp,
    cptp.oid_proc,
    cptp.oid_subp,
    cptp.oid_cuen_cont,
    cptp.oid_marc_sali,
    cptp.oid_tipo_carg_abon,
    cptp.ind_gene_perc
   INTO
     lv_oid_tipo_abon_subp,
     lv_oid_proc,
     lv_oid_subp,
     lv_oid_cuen_cont,
     lv_oid_marc_situ,
     lv_oid_tipo_carg_abon,
     lv_ind_tipo_soli_gene_perc
    FROM ccc_param_tipo_solic_pais cptp
    WHERE cptp.cod_tipo_movi = p_cod_tipo_movi
      AND cptp.oid_tipo_soli_pais = lv_oid_tipo_soli_pais;


  END IF;

  -- Obtiene datos de consultora
  SELECT
   zz.zorg_oid_regi,
   zs.oid_secc
  INTO
   lv_oid_regi,
   lv_oid_secc
  FROM
  zon_terri_admin zta,
  zon_secci zs,
  zon_zona zz
  WHERE zta.oid_terr_admi = lv_oid_terr_admi
    AND zta.zscc_oid_secc = zs.oid_secc
    AND zs.zzon_oid_zona = zz.oid_zona;

  EXCEPTION

   WHEN no_data_found THEN
    RAISE e_para_null_proc;

  END;


 -- Crea la Cabecera de cargos y Abonos Directos --
 --CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(lv_oid_pais, lv_oid_soci, lv_oid_proc, lv_oid_tipo_abon_subp, lv_oid_cabe_carg,lv_num_anio,lv_num_mes,lv_num_cabe);
 lv_oid_cabe_carg := gc_oid_cabe_fact;
 lv_num_anio  := to_char(SYSDATE, 'YY');
 lv_num_mes   := to_char(SYSDATE, 'MM');
 lv_num_cabe := gc_num_cabe_fact;

 SELECT ccc_mvcc_seq.NEXTVAL
 INTO lv_oid_movi_cc
 FROM dual;

 -- Crea detalle en  ccc_movim_cuent_corri
 INSERT INTO ccc_movim_cuent_corri VALUES(
  lv_oid_movi_cc,              -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
  lv_oid_soci,                 -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
  lv_oid_marc_situ,            -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
  lv_oid_mone,                 -- MONE_OID_MONE            NUMBER(12),
  p_oid_peri,                  -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
  lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
  lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
  lv_oid_suba,                 -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
  lv_oid_subp,                 -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
  lv_oid_subp,                 -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
  lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
  lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
  p_oid_clie,                 -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
    lv_num_anio,                 -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
    lv_num_mes,                  -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
    lv_num_cabe,                 -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
    lv_val_ejer_cuot,            -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
    NULL,                        -- FEC_CONTA                DATE,
  lv_fec_docu,                 -- FEC_DOCU                 DATE                 NOT NULL,
  lv_fec_docu,                 -- FEC_ULTI_MOVI            DATE                 NOT NULL,
    TRUNC(SYSDATE),              -- FEC_VALO                 DATE,
  p_fec_venc,                 -- FEC_VENC                 DATE                 NOT NULL,
  p_imp_movi,                  -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
    0,                           -- IMP_DIVI                 NUMBER(12,2),
    0,                           -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
    0,                           -- IMP_PAGA_DIVI            NUMBER(12,2),
  p_imp_movi,                  -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
    lv_num_iden_cuot,            -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
    NULL,                        -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
  p_num_orde_cuot,             -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
    'FACTURACION GP5'  ,         -- VAL_OBSE                 VARCHAR2(100 BYTE),
    NULL,                        -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
    lv_num_anio,                 -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
    lv_num_mes,                  -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
    lv_num_cabe,                 -- VAL_ULTI_DOCU_NUME       NUMBER(8),
    0,                           -- VAL_ULTI_NUME_HIST       NUMBER(3),
    NULL,                        -- MPAB_OID_MEDI_PAGO       NUMBER(12),
  lv_oid_terr_admi,            -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
  lv_oid_tipo_clie,            -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
  lv_oid_marc,                  -- MARC_OID_MARC            NUMBER(12),
  0,                           -- IMP_PAGO                 NUMBER(12,2),
  0,                           -- IMP_PAGO_DIVI            NUMBER(12,2),
  p_imp_movi,                  -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
  0,                           -- IMP_MOVI_DIVI            NUMBER(12,2),
  p_num_lote_fact,             -- NUM_LOTE_FACT            NUMBER(10),
  p_cod_usua,                   -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
  1,                           -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
  NULL,                        -- IND_DTO_CARG_APLI        NUMBER(1),
  lv_oid_secc,                 -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
  lv_oid_subg_vent,            -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
  p_oid_soli_cabe,             -- SOCA_OID_SOLI_CABE       NUMBER(12),
  lv_oid_subt_clie,            -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
  lv_oid_tipo_soli_pais,       -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
  lv_oid_tipo_peri,            -- TIPE_OID_TIPO_PERI       NUMBER(12),
  lv_oid_regi,                 -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
  lv_oid_tipo_docu_lega,       -- TIDO_OID_TIPO_DOCU       NUMBER(12),
  SYSDATE,                      -- FEC_ULTI_ACTU            DATE                 NOT NULL,
  SYSDATE,                      -- VAL_HORA_CREA            DATE
  NULL,                    -- OID_PERI_ORIG            NUMBER(12)
  0,                             -- IND_CARG_FRAC           NUMBER(1)
  0,                             -- IND_OC                   NUMBER(1),
  NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
  lv_fec_docu                    -- FEC_PROC DATE
  );

  -- Crea detalle en ccc_detal_cargo_abono_direc
  INSERT INTO ccc_detal_cargo_abono_direc VALUES(
   ccc_dcad_seq.nextval,         -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
   lv_oid_cabe_carg,             --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
   p_oid_clie,                  --  CLIE_OID_CLIE                 NUMBER(12),
   1,                            --  NUM_LINE                      NUMBER(6),
   0,                            --  NUM_HIST_GENE                 NUMBER(3),
   lv_fec_docu,                      --  FEC_MOVI                      DATE,
   0,                            --  IMP_MONE                      NUMBER(12,2),
   ABS(p_imp_movi),                    --  IMP                           NUMBER(12,2),
   NULL,                         --  VAL_REFE                      VARCHAR2(20 BYTE),
   NULL,                         --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
   NULL,                         --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
   lv_oid_mone,                  --  MONE_OID_MONE                 NUMBER(12),
   NULL,                         --  CMBA_OID_MOVI_BANC            NUMBER(12),
   NULL,                         --  MPAB_OID_MEDI_PAGO            NUMBER(12),
   lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
   lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
   lv_oid_movi_cc,               --  MVCC_OID_MOVI_CC              NUMBER(12),
   NULL,                         --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
   NULL,                          --  FEC_PAGO_BANC                 DATE,
   p_cod_usua,                     --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
   lv_oid_soci,                   --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
   lv_oid_tipo_abon_subp,          -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
   SYSDATE );                     --  FEC_CREA                      DATE            NOT NULL


  select count(adi.ind_gene_perc) into ln_no_gene_perc_cons
  from mae_clien_datos_adici adi
  where adi.ind_gene_perc = 'N'
  and  adi.clie_oid_clie = p_oid_clie;
  
  -- Generando la Percepcion --
  IF lv_ind_gene_perc = 1 AND lv_ind_tipo_soli_gene_perc = 1 AND ln_no_gene_perc_cons=0 THEN

   IF p_imp_inaf IS NOT NULL THEN

    lv_imp_afec := p_imp_movi - NVL(p_imp_inaf,0);

   ELSE

     IF p_imp_movi > 0 THEN
      lv_sign_perc := 1;
     ELSE
      lv_sign_perc := -1;
     END IF;

     SELECT (ABS(psc.val_tota_paga_loca) - ABS( NVL(psc.val_impo_flet_tota_loca,0) - NVL(psc.val_tota_gast_admi,0)))*lv_sign_perc
     INTO lv_imp_afec
     FROM ped_solic_cabec psc
     WHERE psc.oid_soli_cabe = p_oid_soli_cabe;

   END IF;

   SELECT round(p.por_agen_nper/100,2)
   INTO lv_fact_calc_perc
   FROM per_porce_perce p;

   lv_imp_perc := NVL(round(lv_imp_afec*lv_fact_calc_perc,2),0);

  --BEGIN
    SELECT
      ppp.oid_tipo_abon_subp,
      ppp.oid_proc,
      ppp.oid_subp,
      ppp.oid_cuen_cont,
      ppp.oid_marc_situ_sali,
      ppp.oid_tipo_carg_abon
     INTO
      lv_oid_tipo_abon_subp,
      lv_oid_proc,
      lv_oid_subp,
      lv_oid_cuen_cont,
      lv_oid_marc_situ,
      lv_oid_tipo_carg_abon
     FROM
      per_param_perce_tipo_soli_pais ppp
     WHERE ppp.oid_tipo_soli_pais = lv_oid_tipo_soli_pais;

   SELECT ss.oid_sbac
   INTO lv_oid_sbac_perc
   FROM seg_subac ss
   WHERE ss.cod_sbac = gc_cod_suba_perc;

   lv_num_iden_cuot :=ccc_pkg_gener.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(gc_cod_suba_perc);

   SELECT ccc_mvcc_seq.NEXTVAL
   INTO lv_oid_movi_cc_perc
   FROM dual;

   INSERT INTO ccc_movim_cuent_corri VALUES(
    lv_oid_movi_cc_perc,              -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
    lv_oid_soci,                 -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
    lv_oid_marc_situ,            -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
    lv_oid_mone,                 -- MONE_OID_MONE            NUMBER(12),
    p_oid_peri,                  -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
    lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
    lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
    lv_oid_sbac_perc,                 -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
    lv_oid_subp,                 -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
    lv_oid_subp,                 -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
    lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
    lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
    p_oid_clie,                 -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
    lv_num_anio,                 -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
    lv_num_mes,                  -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
    lv_num_cabe,                 -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
    lv_val_ejer_cuot,            -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
    NULL,                        -- FEC_CONTA                DATE,
    lv_fec_docu,                 -- FEC_DOCU                 DATE                 NOT NULL,
    lv_fec_docu,                 -- FEC_ULTI_MOVI            DATE                 NOT NULL,
    TRUNC(SYSDATE),              -- FEC_VALO                 DATE,
    p_fec_venc,                 -- FEC_VENC                 DATE                 NOT NULL,
    lv_imp_perc,                  -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
    0,                           -- IMP_DIVI                 NUMBER(12,2),
    0,                           -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
    0,                           -- IMP_PAGA_DIVI            NUMBER(12,2),
    lv_imp_perc,                  -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
    lv_num_iden_cuot,            -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
    NULL,                        -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
    p_num_orde_cuot,             -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
    'PERCEPCION FACTURACION GP5'  ,         -- VAL_OBSE                 VARCHAR2(100 BYTE),
    NULL,                        -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
    lv_num_anio,                 -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
    lv_num_mes,                  -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
    lv_num_cabe,                 -- VAL_ULTI_DOCU_NUME       NUMBER(8),
    0,                           -- VAL_ULTI_NUME_HIST       NUMBER(3),
    NULL,                        -- MPAB_OID_MEDI_PAGO       NUMBER(12),
    lv_oid_terr_admi,            -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
    lv_oid_tipo_clie,            -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
    lv_oid_marc,                  -- MARC_OID_MARC            NUMBER(12),
    0,                           -- IMP_PAGO                 NUMBER(12,2),
    0,                           -- IMP_PAGO_DIVI            NUMBER(12,2),
    lv_imp_perc,                  -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
    0,                           -- IMP_MOVI_DIVI            NUMBER(12,2),
    p_num_lote_fact,             -- NUM_LOTE_FACT            NUMBER(10),
    p_cod_usua,                   -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
    1,                           -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
    NULL,                        -- IND_DTO_CARG_APLI        NUMBER(1),
    lv_oid_secc,                 -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
    lv_oid_subg_vent,            -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
    NULL,                        -- SOCA_OID_SOLI_CABE       NUMBER(12),
    lv_oid_subt_clie,            -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
    lv_oid_tipo_soli_pais,       -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
    lv_oid_tipo_peri,            -- TIPE_OID_TIPO_PERI       NUMBER(12),
    lv_oid_regi,                 -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
    lv_oid_tipo_docu_lega,       -- TIDO_OID_TIPO_DOCU       NUMBER(12),
    SYSDATE,                      -- FEC_ULTI_ACTU            DATE                 NOT NULL
    SYSDATE,                      -- VAL_HORA_CREA            DATE
    NULL,                    -- OID_PERI_ORIG            NUMBER(12)
    0,                             -- IND_CARG_FRAC           NUMBER(1)
    0,                             -- IND_OC                   NUMBER(1)
    NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
    lv_fec_docu                    -- FEC_DOCU
    );

   -- Crea detalle en ccc_detal_cargo_abono_direc
   INSERT INTO ccc_detal_cargo_abono_direc VALUES(
    ccc_dcad_seq.nextval,         -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
    lv_oid_cabe_carg,             --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
    p_oid_clie,                  --  CLIE_OID_CLIE                 NUMBER(12),
    1,                            --  NUM_LINE                      NUMBER(6),
    0,                            --  NUM_HIST_GENE                 NUMBER(3),
    lv_fec_docu,                      --  FEC_MOVI                      DATE,
    0,                            --  IMP_MONE                      NUMBER(12,2),
    ABS(lv_imp_perc),                   --  IMP                           NUMBER(12,2),
    NULL,                         --  VAL_REFE                      VARCHAR2(20 BYTE),
    NULL,                         --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
    NULL,                         --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
    lv_oid_mone,                  --  MONE_OID_MONE                 NUMBER(12),
    NULL,                         --  CMBA_OID_MOVI_BANC            NUMBER(12),
    NULL,                         --  MPAB_OID_MEDI_PAGO            NUMBER(12),
    lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
    lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
    lv_oid_movi_cc_perc,          --  MVCC_OID_MOVI_CC              NUMBER(12),
    NULL,                         --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
    NULL,                          --  FEC_PAGO_BANC                 DATE,
    p_cod_usua,                     --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
    lv_oid_soci,                   --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
    lv_oid_tipo_abon_subp,          -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
    SYSDATE );                     --  FEC_CREA                      DATE            NOT NULL

/*
   EXCEPTION
    WHEN OTHERS THEN
      NULL;
   END;
*/
  END IF;

  -- Lamando a la aplicacion de los CAD
  CCC_PR_APLIC_ABONO_CARGO_CLIEN(p_oid_clie);

  -- Liberando el Secuencial de CCC ---
  --CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(lv_num_anio,lv_num_mes,lv_num_cabe);

 EXCEPTION

  WHEN e_para_null_proc THEN
   RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CUENT_CORRI_FACT: e_para_null_proc' ||
                               ls_sqlerrm);

   WHEN e_rz_indi_cons_no_def THEN
    RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CUENT_CORRI_FACT: e_rz_indi_cons_no_def' ||
                               ls_sqlerrm);

   WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_CUENT_CORRI_FACT;

 PROCEDURE CCC_PR_GENER_CUOTA_CUENT_CORRI(
  p_oid_soli_cabe                  IN   ped_solic_cabec.oid_soli_cabe%TYPE)
 IS

  lv_ind_soli_nega                      ped_tipo_solic.ind_soli_nega%TYPE;
  lv_oid_form_pago_cabe                 bel_forma_pago.oid_form_pago%TYPE;
  lv_oid_clie                           mae_clien.oid_clie%TYPE;
  lv_fec_fact                           ped_solic_cabec.fec_fact%TYPE;
  lv_oid_peri                           ped_solic_cabec.perd_oid_peri%TYPE;
  lv_oid_zona                           ped_solic_cabec.zzon_oid_zona%TYPE;
  lv_ind_gast_admi                      ccc_param_gener.val_para%TYPE;
  lv_ind_pedi_prue                      ped_solic_cabec.ind_pedi_prue%TYPE;
  lv_val_tota_paga_loca_cabe            NUMBER(12,2);
  lv_val_imp_inaf_cabe                  NUMBER(12,2);
  lv_imp_gast_admi                      NUMBER(12,2);

  TYPE reg_desg_form_pago  IS RECORD (
   oid_form_pago                        NUMBER(12),
   ind_cabe                             NUMBER(12),
   imp_inaf                             NUMBER(12,2),
   imp_loca                             NUMBER(12,2));

  TYPE tab_desg_form_pago               IS TABLE OF reg_desg_form_pago;
  lv_tab_desg_form_pago                 tab_desg_form_pago;

  CURSOR c_desg_form_pago(
   p_oid_form_pago                      bel_forma_pago.oid_form_pago%TYPE,
   p_imp_tota                           NUMBER)
  IS
  WITH temp1
  AS
      (SELECT *
    FROM (
          SELECT
           psp.fopa_oid_form_pago oid_form_pago,
           SUM(psp.val_prec_fact_tota_loca) - SUM(psp.val_prec_cont_tota_loca) imp_tota
          FROM
           ped_solic_cabec psc,
           ped_solic_posic psp
          WHERE psc.oid_soli_cabe = psp.soca_oid_soli_cabe
            AND psc.soca_oid_soli_cabe = p_oid_soli_cabe
            AND psp.fopa_oid_form_pago IS NOT NULL
            AND psp.fopa_oid_form_pago <> lv_oid_form_pago_cabe
          GROUP BY psp.fopa_oid_form_pago)
        WHERE imp_tota > 0),
     temp2 AS
      (SELECT
        SUM(t1.imp_tota) imp_tota
       FROM temp1 t1)
      SELECT
       t1.oid_form_pago,
       0   ind_cabe,
       0   imp_inaf,
       t1.imp_tota
      FROM temp1 t1
      UNION ALL
      SELECT
       p_oid_form_pago,
       1                    ind_cabe,
       lv_val_imp_inaf_cabe imp_inaf,
       p_imp_tota - NVL(t2.imp_tota,0) imp_tota
      FROM temp2 t2;

 BEGIN

  lv_ind_gast_admi := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('indicadorAdicionGAConsolidado');

  IF lv_ind_gast_admi = 'S' THEN

   -- Obteniendo el gastos administrativo
   SELECT SUM(NVL(val_tota_gast_admi,0))
   INTO lv_imp_gast_admi
   FROM ped_solic_cabec oc
   WHERE oc.soca_oid_soli_cabe = p_oid_soli_cabe;

  ELSE

   lv_imp_gast_admi := 0;

  END IF;

  SELECT
   psc.clie_oid_clie,
   psc.fec_fact,
   psc.perd_oid_peri,
   psc.zzon_oid_zona,
   pts.ind_soli_nega,
   ptsp.ind_pedi_prue,
   psc.fopa_oid_form_pago,
   psc.val_tota_paga_loca + NVL(lv_imp_gast_admi,0),
   NVL(psc.val_impo_flet_tota_loca,0) + NVL(lv_imp_gast_admi,0)
  INTO
   lv_oid_clie,
   lv_fec_fact,
   lv_oid_peri,
   lv_oid_zona,
   lv_ind_soli_nega ,
   lv_ind_pedi_prue,
   lv_oid_form_pago_cabe,
   lv_val_tota_paga_loca_cabe,
   lv_val_imp_inaf_cabe
  FROM ped_solic_cabec psc,
       ped_tipo_solic_pais ptsp,
       ped_tipo_solic pts
  WHERE psc.oid_soli_cabe = p_oid_soli_cabe
  AND psc.tspa_oid_tipo_soli_pais = ptsp.oid_tipo_soli_pais
  AND ptsp.tsol_oid_tipo_soli = pts.oid_tipo_soli;

  /*
  dbms_output.put_line('----------------');
  dbms_output.put_line(' ');
  dbms_output.put_line('Datos del Pedido');
  dbms_output.put_line('Oid Soli Cabe : ' || p_oid_soli_cabe);
  dbms_output.put_line('Fecha Facturacion : ' || lv_fec_fact);
  dbms_output.put_line('Forma de Pago Cabecera : ' || lv_oid_form_pago_cabe);
  dbms_output.put_line('Total Pedido : ' || lv_val_tota_paga_loca_cabe);
  dbms_output.put_line('Indicador Solicitud Negativa ' || lv_ind_soli_nega);
  dbms_output.put_line('----------------');
  */

  IF lv_val_tota_paga_loca_cabe = 0 THEN
   RAISE e_no_gene_regi;
  END IF;

  IF lv_ind_soli_nega = 0 AND lv_ind_pedi_prue = 0 THEN

    -- Realizando el desglose de las formas de pago
    OPEN c_desg_form_pago(lv_oid_form_pago_cabe,lv_val_tota_paga_loca_cabe);
    LOOP
     FETCH c_desg_form_pago BULK COLLECT INTO lv_tab_desg_form_pago LIMIT W_FILAS;
     IF lv_tab_desg_form_pago.COUNT > 0 THEN

       FOR i IN lv_tab_desg_form_pago.FIRST .. lv_tab_desg_form_pago.LAST LOOP

        -- Desglose de la forma de pago --
        CCC_PR_GENER_DESGL_FORMA_PAGO(
         p_oid_soli_cabe,
         lv_oid_clie,
         lv_tab_desg_form_pago(i).oid_form_pago,
         lv_fec_fact,
         lv_oid_peri,
         lv_oid_zona,
         lv_tab_desg_form_pago(i).ind_cabe,
         lv_tab_desg_form_pago(i).imp_inaf,
         lv_tab_desg_form_pago(i).imp_loca);

       END LOOP;

     END IF;

    EXIT WHEN c_desg_form_pago%NOTFOUND;
   END LOOP;
   CLOSE c_desg_form_pago;

  ELSE

   -- Genera la Cuenta Corriente Directamente del Pedido
   CCC_PR_GENER_CUENT_CORRI_FACT(
    gc_cod_tipo_movi_fact,
    p_oid_soli_cabe,
    lv_oid_peri,
    lv_oid_clie,
    1,
    lv_fec_fact,
    NULL,
    lv_val_tota_paga_loca_cabe,
    NULL,
    USER);

    DELETE FROM ccc_gener_cuota_cuent_corri
    WHERE oid_soli_cabe = p_oid_soli_cabe;

  END IF;

 EXCEPTION

  WHEN e_no_gene_regi THEN
   NULL;

  WHEN OTHERS THEN
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_CUOTA_CUENT_CORRI;

 PROCEDURE CCC_PR_GENER_CUOTA_FLEXI
 IS

  lv_cod_peri                      bas_ctrl_fact.cod_peri%TYPE;
  lv_fec_fact                      bas_ctrl_fact.fec_proc%TYPE;

 CURSOR c_cons_flex
 IS
 SELECT
  ccc.oid_soli_cabe,
  ccc.oid_clie,
  flx.val_mont_fina
 FROM ccc_gener_cuota_cuent_corri ccc,
      flx_cuota_flexi_factu_cabec flx
 WHERE flx.oid_clie = ccc.oid_clie
   AND flx.cod_peri = lv_cod_peri
   AND flx.fec_fact = lv_fec_fact
   AND ccc.cod_tipo_movi = 'FAC';

 BEGIN

  -- Habilitando los Cargo x Uso
  UPDATE ccc_gener_cuota_cuent_corri ccc
  SET ccc.cod_tipo_movi = 'CUF'
  WHERE ccc.oid_form_pago = 1509;

  DELETE FROM ccc_gener_cuota_cuent_flexi;

  SELECT z.cod_peri,z.fec_proc
  INTO lv_cod_peri,lv_fec_fact
  FROM bas_ctrl_fact z
  WHERE z.ind_camp_act = 1
    AND z.sta_camp = 0;

  FOR v_cons_flex IN c_cons_flex LOOP
    CCC_PR_GENER_DESGL_FORMA_FLEXI(
     v_cons_flex.oid_soli_cabe,
     v_cons_flex.oid_clie,
     lv_fec_fact,
     v_cons_flex.val_mont_fina);
  END LOOP;

 EXCEPTION

   WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_CUOTA_FLEXI;

 PROCEDURE CCC_PR_GENER_CUENT_CORRI_FACTU
 IS

  lv_cod_pais                           seg_pais.cod_pais%TYPE;
  lv_cod_soci                           seg_socie.cod_soci%TYPE;
  lv_cod_peri                           bas_ctrl_fact.cod_peri%TYPE;
  lv_fec_fact                           bas_ctrl_fact.fec_proc%TYPE;
  lv_fact_calc_perc                     per_porce_perce.por_agen_nper%TYPE;
  lv_id_proc_ejec                       fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_num_iden_cuot_inic                 ccc_numer_ident_cuota.val_ulti_nume_iden_cuot%TYPE;
  lv_num_anio                           ccc_movim_cuent_corri.val_docu_anio%TYPE;
  lv_num_mes                            ccc_movim_cuent_corri.val_docu_mes_seri%TYPE;
  lv_num_cabe                           ccc_cabec_carga_abono_direc.num_cabe%TYPE;
  lv_oid_soci                           seg_socie.oid_soci%TYPE;
  lv_oid_marc                           seg_marca.oid_marc%TYPE;
  lv_oid_sbac_perc                      seg_subac.oid_sbac%TYPE;

  --lv_ind_gene_perc                      NUMBER(1);
  lv_cant_perc                          NUMBER(12);
  lv_num_lote                           VARCHAR2(15);
  lv_cod_erro                           VARCHAR2(250);

  -- excepciones
  e_rz_indi_cons_no_def                 EXCEPTION;
  e_para_null_proc                      EXCEPTION;

 CURSOR c_movi_fact
 IS
  WITH temp1
   AS
   (
    SELECT
     ccc.oid_soli_cabe,
     ccc.cod_tipo_movi,
     ccc.oid_peri,
     ccc.oid_clie,
     ccc.fec_venc,
     ROW_NUMBER() OVER(PARTITION BY ccc.oid_clie ORDER BY fec_venc) num_orde_cuot,
     SUM(ccc.imp_cuot_frac_loca) imp_movi
    FROM ccc_gener_cuota_cuent_corri ccc
    GROUP BY
     ccc.oid_soli_cabe,
     ccc.cod_tipo_movi,
     ccc.oid_peri,
     ccc.oid_clie,
     ccc.fec_venc)
  SELECT
   ccc_mvcc_seq.NEXTVAL,              -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
   psc.soci_oid_soci,                 -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
   pts.oid_marc_sali,            -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
   psc.mone_oid_mone,                 -- MONE_OID_MONE            NUMBER(12),
   t1.oid_peri,                  -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
   pts.oid_tipo_carg_abon,       -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
   pts.oid_tipo_carg_abon,       -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
   psc.sbac_oid_sbac,                 -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
   pts.oid_subp,                 -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
   pts.oid_subp,                 -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
   pts.oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
   pts.oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
   t1.oid_clie,                 -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
   lv_num_anio,                 -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
   lv_num_mes,                  -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
   lv_num_cabe,                 -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
   SUBSTR(psc.val_nume_soli,1,2),            -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
   NULL,                        -- FEC_CONTA                DATE,
   psc.fec_fact,                 -- FEC_DOCU                 DATE                 NOT NULL,
   psc.fec_fact,                 -- FEC_ULTI_MOVI            DATE                 NOT NULL,
   TRUNC(SYSDATE),              -- FEC_VALO                 DATE,
   t1.fec_venc,                 -- FEC_VENC                 DATE                 NOT NULL,
   t1.imp_movi,                  -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
   0,                           -- IMP_DIVI                 NUMBER(12,2),
   0,                           -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
   0,                           -- IMP_PAGA_DIVI            NUMBER(12,2),
   t1.imp_movi,                  -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
   TO_NUMBER(SUBSTR(psc.val_nume_soli,3,8)),            -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
   NULL,                        -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
   t1.num_orde_cuot,             -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
   'FACTURACION GP5'  ,         -- VAL_OBSE                 VARCHAR2(100 BYTE),
   NULL,--lv_num_lote,                        -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
   lv_num_anio,                 -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
   lv_num_mes,                  -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
   lv_num_cabe,                 -- VAL_ULTI_DOCU_NUME       NUMBER(8),
   0,                           -- VAL_ULTI_NUME_HIST       NUMBER(3),
   NULL,                        -- MPAB_OID_MEDI_PAGO       NUMBER(12),
   psc.ztad_oid_terr_admi,            -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
   psc.ticl_oid_tipo_clie,            -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
   lv_oid_marc,                  -- MARC_OID_MARC            NUMBER(12),
   0,                           -- IMP_PAGO                 NUMBER(12,2),
   0,                           -- IMP_PAGO_DIVI            NUMBER(12,2),
   t1.imp_movi,                  -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
   0,                           -- IMP_MOVI_DIVI            NUMBER(12,2),
   NULL,             -- NUM_LOTE_FACT            NUMBER(10),
   USER,                   -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
   1,                           -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
   NULL,                        -- IND_DTO_CARG_APLI        NUMBER(1),
   zs.oid_secc,                 -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
   gc_oid_subg_vent,            -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
   psc.oid_soli_cabe,             -- SOCA_OID_SOLI_CABE       NUMBER(12),
   psc.sbti_oid_subt_clie,            -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
   psc.tspa_oid_tipo_soli_pais,       -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
   gc_oid_tipo_peri,            -- TIPE_OID_TIPO_PERI       NUMBER(12),
   zz.zorg_oid_regi,                 -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
   psc.tido_oid_tipo_docu,    -- TIDO_OID_TIPO_DOCU       NUMBER(12),
   SYSDATE,                      -- FEC_ULTI_ACTU            DATE                 NOT NULL
   SYSDATE,                      -- VAL_HORA_CREA            DATE
   NULL,             -- OID_PERI_ORIG            NUMBER(12)
   0,                             -- IND_CARG_FRAC           NUMBER(1)
   0,                             -- IND_OC                   NUMBER(1)
   NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
   psc.fec_fact                   -- FEC_DOCU
  FROM
   temp1 t1,
   ped_solic_cabec psc,
   ccc_param_tipo_solic_pais pts,
   zon_terri_admin zta,
   zon_secci zs,
   zon_zona zz
  WHERE t1.oid_soli_cabe = psc.oid_soli_cabe
    AND psc.ztad_oid_terr_admi = zta.oid_terr_admi
    AND zta.zscc_oid_secc = zs.oid_secc
    AND zs.zzon_oid_zona = zz.oid_zona
    AND pts.oid_tipo_soli_pais = psc.tspa_oid_tipo_soli_pais
    AND pts.cod_tipo_movi = t1.cod_tipo_movi;

 CURSOR c_movi_perc
 IS
  WITH temp1
   AS
   (
    SELECT
     ccc.oid_soli_cabe,
     ccc.cod_tipo_movi,
     ccc.oid_peri,
     ccc.oid_clie,
     ccc.fec_venc,
     ROW_NUMBER() OVER(PARTITION BY ccc.oid_clie ORDER BY fec_venc) num_orde_cuot,
     ROUND(((SUM(ccc.imp_cuot_frac_loca) - SUM(ccc.imp_cuot_inaf))*lv_fact_calc_perc),2) imp_movi
    FROM ccc_gener_cuota_cuent_corri ccc
    GROUP BY
     ccc.oid_soli_cabe,
     ccc.cod_tipo_movi,
     ccc.oid_peri,
     ccc.oid_clie,
     ccc.fec_venc)
  SELECT
   ccc_mvcc_seq.NEXTVAL,              -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
   psc.soci_oid_soci,                 -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
   pts.oid_marc_sali_perc,            -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
   psc.mone_oid_mone,                 -- MONE_OID_MONE            NUMBER(12),
   t1.oid_peri,                  -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
   pts.oid_tipo_carg_abon_perc,       -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
   pts.oid_tipo_carg_abon_perc,       -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
   lv_oid_sbac_perc,                 -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
   pts.oid_subp_perc,                 -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
   pts.oid_subp_perc,                 -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
   pts.oid_cuen_cont_perc,            -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
   pts.oid_cuen_cont_perc,            -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
   t1.oid_clie,                 -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
   lv_num_anio,                 -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
   lv_num_mes,                  -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
   lv_num_cabe,                 -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
   SUBSTR(psc.val_nume_soli,1,2),            -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
   NULL,                        -- FEC_CONTA                DATE,
   psc.fec_fact,                 -- FEC_DOCU                 DATE                 NOT NULL,
   psc.fec_fact,                 -- FEC_ULTI_MOVI            DATE                 NOT NULL,
   TRUNC(SYSDATE),              -- FEC_VALO                 DATE,
   t1.fec_venc,                 -- FEC_VENC                 DATE                 NOT NULL,
   t1.imp_movi,                  -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
   0,                           -- IMP_DIVI                 NUMBER(12,2),
   0,                           -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
   0,                           -- IMP_PAGA_DIVI            NUMBER(12,2),
   t1.imp_movi,                  -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
   lv_num_iden_cuot_inic + ROWNUM -1 ,            -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
   NULL,                        -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
   t1.num_orde_cuot,             -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
   'PERCEPCION FACTURACION GP5' ,         -- VAL_OBSE                 VARCHAR2(100 BYTE),
   lv_num_lote,                        -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
   lv_num_anio,                 -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
   lv_num_mes,                  -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
   lv_num_cabe,                 -- VAL_ULTI_DOCU_NUME       NUMBER(8),
   0,                           -- VAL_ULTI_NUME_HIST       NUMBER(3),
   NULL,                        -- MPAB_OID_MEDI_PAGO       NUMBER(12),
   psc.ztad_oid_terr_admi,            -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
   psc.ticl_oid_tipo_clie,            -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
   lv_oid_marc,                  -- MARC_OID_MARC            NUMBER(12),
   0,                           -- IMP_PAGO                 NUMBER(12,2),
   0,                           -- IMP_PAGO_DIVI            NUMBER(12,2),
   t1.imp_movi,                  -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
   0,                           -- IMP_MOVI_DIVI            NUMBER(12,2),
   NULL,             -- NUM_LOTE_FACT            NUMBER(10),
   USER,                   -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
   1,                           -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
   NULL,                        -- IND_DTO_CARG_APLI        NUMBER(1),
   zs.oid_secc,                 -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
   gc_oid_subg_vent,            -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
   psc.oid_soli_cabe,             -- SOCA_OID_SOLI_CABE       NUMBER(12),
   psc.sbti_oid_subt_clie,            -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
   NULL,       -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
   gc_oid_tipo_peri,            -- TIPE_OID_TIPO_PERI       NUMBER(12),
   zz.zorg_oid_regi,                 -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
   psc.tido_oid_tipo_docu,    -- TIDO_OID_TIPO_DOCU       NUMBER(12),
   SYSDATE,                      -- FEC_ULTI_ACTU            DATE                 NOT NULL
   SYSDATE,                      -- VAL_HORA_CREA            DATE
   NULL,             -- OID_PERI_ORIG            NUMBER(12)
   0,                             -- IND_CARG_FRAC           NUMBER(1)
   0,                             -- IND_OC                   NUMBER(1)
   NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
   psc.fec_fact                   -- FEC_PROC
  FROM
   temp1 t1,
   ped_solic_cabec psc,
   ccc_param_tipo_solic_pais pts,
   zon_terri_admin zta,
   zon_secci zs,
   zon_zona zz
  WHERE t1.oid_soli_cabe = psc.oid_soli_cabe
    AND psc.ztad_oid_terr_admi = zta.oid_terr_admi
    AND zta.zscc_oid_secc = zs.oid_secc
    AND zs.zzon_oid_zona = zz.oid_zona
    AND pts.oid_tipo_soli_pais = psc.tspa_oid_tipo_soli_pais
    AND pts.cod_tipo_movi = t1.cod_tipo_movi
    AND pts.ind_gene_perc = 1;

  lv_tab_ccc_movi_cuen_corr        t_tab_ccc_movim_cuent_corri;
  lv_tab_ccc_movi_cuen_perc        t_tab_ccc_movim_cuent_corri;


  TYPE t_tab_oid_movi_cc           IS TABLE OF ccc_movim_cuent_corri.oid_movi_cc%TYPE;
  TYPE t_tab_fec_docu              IS TABLE OF ccc_movim_cuent_corri.fec_docu%TYPE;
  TYPE t_tab_oid_subp              IS TABLE OF ccc_movim_cuent_corri.subp_oid_subp_crea%TYPE;
  TYPE t_tab_oid_clie              IS TABLE OF ccc_movim_cuent_corri.clie_oid_clie%TYPE;
  TYPE t_tab_imp_movi              IS TABLE OF ccc_movim_cuent_corri.imp_movi%TYPE;

  lv_tab_oid_movi_cc               t_tab_oid_movi_cc;
  lv_tab_fec_docu                  t_tab_fec_docu;
  lv_tab_oid_subp                  t_tab_oid_subp;
  lv_tab_oid_clie                  t_tab_oid_clie;
  lv_tab_oid_clie_tota             t_tab_oid_clie;
  lv_tab_imp_movi                  t_tab_imp_movi;

  lv_tab_oid_movi_cc_perc          t_tab_oid_movi_cc;
  lv_tab_fec_docu_perc             t_tab_fec_docu;
  lv_tab_oid_subp_perc             t_tab_oid_subp;
  lv_tab_oid_clie_perc             t_tab_oid_clie;
  lv_tab_imp_movi_perc             t_tab_imp_movi;
  lv_ind_apli_cuen_corr            ccc_param_gener.val_para%TYPE;

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');
  lv_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);

  SELECT round(p.por_agen_nper/100,2)
  INTO lv_fact_calc_perc
  FROM per_porce_perce p;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,gc_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio del Proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  SELECT ccc.oid_clie
  BULK COLLECT INTO lv_tab_oid_clie_tota
  FROM ccc_gener_cuota_cuent_corri ccc
  GROUP BY ccc.oid_clie;

  gv_des_log:='Cantidad de Consultoras ' || lv_tab_oid_clie_tota.COUNT;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  IF lv_tab_oid_clie_tota.COUNT = 0 THEN
   RAISE e_no_exis_movi;
  END IF;

  --lv_ind_gene_perc := ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('IndicadorGeneracionPercepcion');
  lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);

  -- Crea la Cabecera de cargos y Abonos Directos --
  lv_num_anio  := to_char(SYSDATE, 'YY');
  lv_num_mes   := to_char(SYSDATE, 'MM');
  lv_num_cabe := gc_num_cabe_fact;
  lv_num_lote:= ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;

  SELECT z.cod_peri,z.fec_proc
  INTO lv_cod_peri,lv_fec_fact
  FROM bas_ctrl_fact z
  WHERE z.ind_camp_act = 1
    AND z.sta_camp = 0;

  gv_des_log:='Numero de Lote : ' || lv_num_lote ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='--------------------------------';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Inicio Generacion de Movimientos ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  OPEN c_movi_fact;

  LOOP

   FETCH c_movi_fact BULK COLLECT INTO lv_tab_ccc_movi_cuen_corr LIMIT w_filas;

    IF lv_tab_ccc_movi_cuen_corr.COUNT > 0 THEN

     gv_des_log:='   Inicio : Insertando en CCC_MOVIM_CUENT_CORRI ';
     FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

     FORALL x IN lv_tab_ccc_movi_cuen_corr.FIRST .. lv_tab_ccc_movi_cuen_corr.LAST
      INSERT INTO ccc_movim_cuent_corri VALUES lv_tab_ccc_movi_cuen_corr(x)
      RETURNING
       oid_movi_cc,
       fec_docu,
       subp_oid_subp_crea,
       clie_oid_clie,
       imp_movi
      BULK COLLECT INTO
       lv_tab_oid_movi_cc,
       lv_tab_fec_docu,
       lv_tab_oid_subp,
       lv_tab_oid_clie,
       lv_tab_imp_movi;

     gv_des_log:='   Registros insertados en CCC_MOVIM_CUENT_CORRI: ' || SQL%ROWCOUNT;
     FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

     gv_des_log:='   Inicio : Insertando en CCC_DETAL_CARGO_ABONO_DIREC : ';
     FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

     FORALL i IN 1 .. lv_tab_oid_movi_cc.COUNT
      INSERT INTO ccc_detal_cargo_abono_direc VALUES (
       ccc_dcad_seq.nextval,                      -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
       gc_oid_cabe_fact,                     --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
       lv_tab_oid_clie(i),                        --  CLIE_OID_CLIE                 NUMBER(12),
       1507,                                      --  NUM_LINE                      NUMBER(6),
       0,                                         --  NUM_HIST_GENE                 NUMBER(3),
       lv_tab_fec_docu(i),                        --  FEC_MOVI                      DATE,
       0,                                         --  IMP_MONE                      NUMBER(12,2),
       ABS(lv_tab_imp_movi(i)),     --  IMP                           NUMBER(12,2),
       NULL,                                      --  VAL_REFE                      VARCHAR2(20 BYTE),
       lv_num_lote,                                      --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
       NULL,                                      --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
       NULL,                                      --  MONE_OID_MONE                 NUMBER(12),
       NULL,                                      --  CMBA_OID_MOVI_BANC            NUMBER(12),
       NULL,                                      --  MPAB_OID_MEDI_PAGO            NUMBER(12),
       NULL,                                      --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
       NULL,                                      --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
       lv_tab_oid_movi_cc(i),                     --  MVCC_OID_MOVI_CC              NUMBER(12),
       NULL,                                      --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
       NULL,                                      --  FEC_PAGO_BANC                 DATE,
       USER,                                      --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
       lv_oid_soci,                               --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
       lv_tab_oid_subp(i),                      -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
       SYSDATE) ;                                 --  FEC_CREA                      DATE            NOT NULL

     gv_des_log:='   Registros insertados en CCC_DETAL_CARGO_ABONO_DIREC : ' || SQL%ROWCOUNT;
     FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

    END IF;

   EXIT WHEN c_movi_fact%NOTFOUND;
  END LOOP;
  CLOSE c_movi_fact;

  gv_des_log:='Fin Generacion de Movimientos ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='------------------------------';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Inicio Generacion de Percepciones ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  SELECT ss.oid_sbac
  INTO lv_oid_sbac_perc
  FROM seg_subac ss
  WHERE ss.cod_sbac = gc_cod_suba_perc;

  WITH temp1
   AS
   (
    SELECT
     ccc.oid_soli_cabe,
     ccc.oid_peri,
     ccc.oid_clie,
     ccc.fec_venc,
     ROW_NUMBER() OVER(PARTITION BY ccc.oid_clie ORDER BY fec_venc) num_orde_cuot,
     ROUND(((SUM(ccc.imp_cuot_frac_loca) - SUM(ccc.imp_cuot_inaf))*lv_fact_calc_perc),2) imp_movi
    FROM ccc_gener_cuota_cuent_corri ccc
    GROUP BY
     ccc.oid_soli_cabe,
     ccc.oid_peri,
     ccc.oid_clie,
     ccc.fec_venc)
  SELECT COUNT(*)
  INTO lv_cant_perc
  FROM
   temp1 t1,
   ped_solic_cabec psc,
   ccc_param_tipo_solic_pais pts,
   zon_terri_admin zta,
   zon_secci zs,
   zon_zona zz
  WHERE t1.oid_soli_cabe = psc.oid_soli_cabe
    AND psc.ztad_oid_terr_admi = zta.oid_terr_admi
    AND zta.zscc_oid_secc = zs.oid_secc
    AND zs.zzon_oid_zona = zz.oid_zona
    AND pts.oid_tipo_abon_subp = psc.tspa_oid_tipo_soli_pais
    AND pts.ind_gene_perc = 1;

  lv_num_iden_cuot_inic:=CCC_PKG_GENER.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(lv_cod_pais,lv_cod_soci,gc_cod_suba_perc,lv_cant_perc);
  gv_des_log:='Identificador de Cuota Inicial : ' || lv_num_iden_cuot_inic;

  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  OPEN c_movi_perc;

  LOOP

   FETCH c_movi_perc BULK COLLECT INTO lv_tab_ccc_movi_cuen_perc LIMIT w_filas;

    IF lv_tab_ccc_movi_cuen_perc.COUNT > 0 THEN

     gv_des_log:='   Inicio : Insertando en CCC_MOVIM_CUENT_CORRI ';
     FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

     FORALL y IN lv_tab_ccc_movi_cuen_perc.FIRST .. lv_tab_ccc_movi_cuen_perc.LAST
      INSERT INTO ccc_movim_cuent_corri VALUES lv_tab_ccc_movi_cuen_perc(y)
      RETURNING
       oid_movi_cc,
       fec_docu,
       subp_oid_subp_crea,
       clie_oid_clie,
       imp_movi
      BULK COLLECT INTO
       lv_tab_oid_movi_cc_perc,
       lv_tab_fec_docu_perc,
       lv_tab_oid_subp_perc,
       lv_tab_oid_clie_perc,
       lv_tab_imp_movi_perc;

     gv_des_log:='   Registros insertados en CCC_MOVIM_CUENT_CORRI: ' || SQL%ROWCOUNT;
     FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

     gv_des_log:='   Inicio : Insertando en CCC_DETAL_CARGO_ABONO_DIREC : ';
     FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

     FORALL j IN 1 .. lv_tab_oid_movi_cc_perc.COUNT
      INSERT INTO ccc_detal_cargo_abono_direc VALUES (
       ccc_dcad_seq.nextval,                      -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
       gc_oid_cabe_fact,                     --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
       lv_tab_oid_clie_perc(j),                        --  CLIE_OID_CLIE                 NUMBER(12),
       1507,                                      --  NUM_LINE                      NUMBER(6),
       0,                                         --  NUM_HIST_GENE                 NUMBER(3),
       lv_tab_fec_docu_perc(j),                        --  FEC_MOVI                      DATE,
       0,                                         --  IMP_MONE                      NUMBER(12,2),
       ABS(lv_tab_imp_movi_perc(j)),     --  IMP                           NUMBER(12,2),
       NULL,                                      --  VAL_REFE                      VARCHAR2(20 BYTE),
       lv_num_lote,                                      --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
       NULL,                                      --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
       NULL,                                      --  MONE_OID_MONE                 NUMBER(12),
       NULL,                                      --  CMBA_OID_MOVI_BANC            NUMBER(12),
       NULL,                                      --  MPAB_OID_MEDI_PAGO            NUMBER(12),
       NULL,                                      --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
       NULL,                                      --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
       lv_tab_oid_movi_cc_perc(j),                     --  MVCC_OID_MOVI_CC              NUMBER(12),
       NULL,                                      --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
       NULL,                                      --  FEC_PAGO_BANC                 DATE,
       USER,                                      --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
       lv_oid_soci,                               --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
       lv_tab_oid_subp_perc(j),                      -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
       SYSDATE) ;                                 --  FEC_CREA                      DATE            NOT NULL

     gv_des_log:='   Registros insertados en CCC_DETAL_CARGO_ABONO_DIREC : ' || SQL%ROWCOUNT;
     FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);


    END IF;

   EXIT WHEN c_movi_perc%NOTFOUND;
  END LOOP;
  CLOSE c_movi_perc;

  gv_des_log:='Fin Generacion de Percepciones ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='--------------------------------';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Actualizando la Informacion de los Cargos Flexipago';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  -- Actualizacion Oid's Flexipago --
  UPDATE flx_cuota_flexi_factu_detal d
  SET d.oid_movi_carg_flex = ( SELECT mcc.oid_movi_cc
                               FROM ccc_movim_cuent_corri mcc
                               WHERE mcc.clie_oid_clie = d.oid_clie
                                 AND mcc.perd_oid_peri = d.oid_peri_cuot_flex
                                 AND mcc.fec_docu = lv_fec_fact
                                 AND mcc.fec_venc = d.fec_venc_cuot_flex
                                 AND mcc.subp_oid_subp_crea = 203)
  WHERE d.cod_peri =  lv_cod_peri
  AND d.fec_fact =lv_fec_fact
  AND d.oid_movi_carg_flex IS NULL;

  lv_ind_apli_cuen_corr := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndicadorAplicacionCuentaCorrienteGP5');

  IF lv_ind_apli_cuen_corr = 'S' THEN

   gv_des_log:='--------------------------------';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

   gv_des_log:='Inicio : Aplicando los CAD en Cuenta Corriente ';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

   FOR j IN lv_tab_oid_clie_tota.FIRST .. lv_tab_oid_clie_tota.LAST LOOP
    CCC_PR_APLIC_ABONO_CARGO_CLIEN(lv_tab_oid_clie_tota(j));
   END LOOP;

    gv_des_log:='Fin: Aplicando los CAD en Cuenta Corriente ';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

    gv_des_log:='--------------------------------';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  END IF;

  gv_des_log:='Eliminando las cuotas generadas en GP5';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);
  DELETE FROM ccc_gener_cuota_cuent_corri;

  gv_des_log:='--------------------------------';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);



  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec, 2);

 EXCEPTION

  WHEN e_para_null_proc THEN
   RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CUENT_CORRI_FACT: e_para_null_proc' ||
                               ls_sqlerrm);

   WHEN e_no_exis_movi THEN
    gv_des_log:='Fin del proceso';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec,gv_des_log);

    FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_movi_fact,lv_id_proc_ejec, 2);


   WHEN e_rz_indi_cons_no_def THEN
    RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CUENT_CORRI_FACT: e_rz_indi_cons_no_def' ||
                               ls_sqlerrm);

   WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_CUENT_CORRI_FACTU;

 PROCEDURE CCC_PR_GENER_MOVIM_CUENT_CORRI(
      p_cod_pais                   IN   seg_pais.cod_pais%TYPE,
      p_cod_soci                   IN   seg_socie.cod_soci%TYPE,
      p_cod_tipo_movi              IN   ccc_param_tipos_movim.cod_tipo_movi%TYPE,
      p_cod_peri                   IN   seg_perio_corpo.cod_peri%TYPE,
      p_cod_clie                   IN   mae_clien.cod_clie%TYPE,
      p_fec_venc                   IN   VARCHAR2,
      p_importe                    IN   VARCHAR2,
      p_val_obse                   IN   VARCHAR2,
      p_cod_usu                    IN   VARCHAR2)
   IS
      -- excepciones
      e_rz_indi_cons_no_def          EXCEPTION;

      lv_oid_pais                   seg_pais.oid_pais%TYPE;
      lv_oid_soci                   seg_socie.oid_soci%TYPE;
      lv_oid_marc                   seg_marca.oid_marc%TYPE;
      lv_oid_peri                   cra_perio.oid_peri%TYPE;
      lv_fec_docu                   ccc_movim_cuent_corri.fec_docu%TYPE;
      lv_importe                    ccc_detal_cargo_abono_direc.imp%TYPE;
      lv_importe_movim              ccc_detal_cargo_abono_direc.imp%TYPE;
      lv_oid_tipo_peri              seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
      lv_oid_cabe_carg              ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
      lv_oid_movi_cc                ccc_movim_cuent_corri.oid_movi_cc%TYPE;
      lv_oid_suba                   seg_subac.oid_sbac%TYPE;
      lv_oid_mone                   seg_pais.mone_oid_mone%TYPE;
      lv_oid_clie                   mae_clien.oid_clie%TYPE;
      lv_oid_tipo_clie              mae_clien_tipo_subti.ticl_oid_tipo_clie%TYPE;
      lv_oid_subt_clie              mae_clien_tipo_subti.sbti_oid_subt_clie%TYPE;
      lv_oid_regi                   zon_regio.oid_regi%TYPE;
      lv_oid_secc                   zon_secci.oid_secc%TYPE;
      lv_oid_terr_admi              mae_clien_unida_admin.ztad_oid_terr_admi%TYPE;
      lv_oid_subg_vent              zon_sub_geren_venta.oid_subg_vent%TYPE;

      lv_oid_tipo_abon_subp         ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
      lv_oid_proc                   ccc_proce.oid_proc%TYPE;
      lv_oid_subp                   ccc_subpr.oid_subp%TYPE;
      lv_oid_cuen_cont              ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
      lv_oid_marc_situ              ccc_marca_situa.oid_marc_situ%TYPE;
      lv_oid_tipo_carg_abon         ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
      lv_indi_tipo_abon             ccc_subpr.val_indi_tipo_abon%TYPE;
      lv_num_anio                   ccc_movim_cuent_corri.val_docu_anio%TYPE;
      lv_num_mes                    ccc_movim_cuent_corri.val_docu_mes_seri%TYPE;
      lv_num_cabe                   ccc_cabec_carga_abono_direc.num_cabe%TYPE;
      lv_num_iden_cuot              ped_numer_solic.val_ulti_nume_soli%TYPE;
      lv_val_indi_cons              ccc_subpr.val_indi_cons%TYPE;
      lv_fec_venc                   ccc_movim_cuent_corri.fec_venc%TYPE;
      e_para_null_proc              EXCEPTION;

   BEGIN

      lv_fec_docu:=TO_DATE(TO_CHAR(SYSDATE,'DD/MM/YYYY'),'DD/MM/YYYY');
      lv_fec_venc:= TO_DATE(p_fec_venc,'DD/MM/YYYY');


      BEGIN

         -- Obteniendo Parametria del Proceso --
         lv_oid_pais := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_cod_pais);
         lv_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(p_cod_soci);
         lv_oid_mone := FIN_PKG_GENER.FIN_FN_OBTIE_OID_MONED(p_cod_pais);
         lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);
         lv_oid_subg_vent := CCC_PKG_GENER.CCC_FN_OBTIE_OID_SUBGE_VENTA(lv_oid_pais,lv_oid_marc,gc_cod_sbac_cadi);
         lv_oid_suba := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SUBAC(gc_cod_sbac_cadi);
         lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_PERIO(p_cod_peri);
         lv_oid_tipo_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_TIPO_PERI(p_cod_peri);


         /*  Obtiene parametria del Tipo de Movimiento */
         SELECT
            pm.oid_tipo_abon_subp,
            pm.oid_proc,
            pm.oid_subp,
            pm.oid_cuen_cont,
            pm.Ind_Tipo_Abon,
            pm.oid_marc_sali,
            pm.oid_tcab,
            pm.ind_cons
         INTO
            lv_oid_tipo_abon_subp,
            lv_oid_proc,
            lv_oid_subp,
            lv_oid_cuen_cont,
            lv_indi_tipo_abon,
            lv_oid_marc_situ,
            lv_oid_tipo_carg_abon,
            lv_val_indi_cons
         FROM ccc_param_tipos_movim pm
         WHERE pm.cod_tipo_movi = p_cod_tipo_movi;


         -- Obtiene datos de consultora
         SELECT
            cli.oid_clie,
            tpc.ticl_oid_tipo_clie,
            tpc.sbti_oid_subt_clie,
            zon.zorg_oid_regi,
            sec.oid_secc,
            ua.ztad_oid_terr_admi
         INTO
            lv_oid_clie,
            lv_oid_tipo_clie,
            lv_oid_subt_clie,
            lv_oid_regi,
            lv_oid_secc,
            lv_oid_terr_admi
         FROM
            mae_clien cli,
            mae_clien_tipo_subti tpc,
            mae_clien_unida_admin ua,
            zon_terri_admin za,
            zon_secci sec,
            zon_zona zon
         WHERE cli.cod_clie = p_cod_clie
           AND cli.oid_clie = tpc.clie_oid_clie
           AND tpc.ind_ppal = 1
           AND cli.oid_clie = ua.clie_oid_clie
           AND ua.ztad_oid_terr_admi = za.oid_terr_admi
           AND za.zscc_oid_secc = sec.oid_secc
           AND sec.zzon_oid_zona = zon.oid_zona
           AND ua.ind_acti = 1;

      EXCEPTION

         WHEN no_data_found THEN
              RAISE e_para_null_proc;

      END;

      -- Adecua signo del importe del abono/cargo
      IF     TO_NUMBER(p_importe,'999999999.00') < 0 THEN
         lv_importe := TO_NUMBER(p_importe,'999999999.00') * -1;
      ELSE
         lv_importe := TO_NUMBER(p_importe,'999999999.00');
      END IF;

      IF  lv_val_indi_cons = 'D'  THEN
         lv_importe_movim := lv_importe;
      ELSE
         IF  lv_val_indi_cons = 'H' THEN
            lv_importe_movim := lv_importe * -1;
         ELSE
            RAISE e_rz_indi_cons_no_def;
         END IF;
      END IF;

      -- Obteniendo el numero Identificador de Cuota --
      lv_num_iden_cuot:=ccc_pkg_gener.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(p_cod_pais,p_cod_soci,gc_cod_sbac_cadi );

      --    Prepara oid  para ccc_movim_cuent_corri
      SELECT    ccc_mvcc_seq.NEXTVAL
      INTO    lv_oid_movi_cc
      FROM dual;

      -- Crea la Cabecera de cargos y Abonos Directos --
      CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(lv_oid_pais, lv_oid_soci, lv_oid_proc, lv_oid_tipo_abon_subp, lv_oid_cabe_carg,lv_num_anio,lv_num_mes,lv_num_cabe);


      -- Crea detalle en  ccc_movim_cuent_corri
      INSERT INTO ccc_movim_cuent_corri VALUES(
         lv_oid_movi_cc,              -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
         lv_oid_soci,                 -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
         lv_oid_marc_situ,            -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
         lv_oid_mone,                 -- MONE_OID_MONE            NUMBER(12),
         lv_oid_peri,                  -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
         lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
         lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
         lv_oid_suba,                 -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
         lv_oid_subp,                 -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
         lv_oid_subp,                 -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
         lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
         lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
         lv_oid_clie,                 -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
         lv_num_anio,                 -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
         lv_num_mes,                  -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
         lv_num_cabe,                 -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
         lv_num_anio,                 -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
         NULL,                        -- FEC_CONTA                DATE,
         lv_fec_docu,                     -- FEC_DOCU                 DATE                 NOT NULL,
         lv_fec_docu,                     -- FEC_ULTI_MOVI            DATE                 NOT NULL,
         lv_fec_docu,                     -- FEC_VALO                 DATE,
         lv_fec_venc,                     -- FEC_VENC                 DATE                 NOT NULL,
         lv_importe_movim,            -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
         0,                           -- IMP_DIVI                 NUMBER(12,2),
         0,                           -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
         0,                           -- IMP_PAGA_DIVI            NUMBER(12,2),
         lv_importe_movim,            -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
         lv_num_iden_cuot,            -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
         NULL,                        -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
         1,                           -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
         p_val_obse,                  -- VAL_OBSE                 VARCHAR2(100 BYTE),
         NULL,                        -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
         lv_num_anio,                 -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
         lv_num_mes,                  -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
         lv_num_cabe,                 -- VAL_ULTI_DOCU_NUME       NUMBER(8),
         0,                           -- VAL_ULTI_NUME_HIST       NUMBER(3),
         NULL,                        -- MPAB_OID_MEDI_PAGO       NUMBER(12),
         lv_oid_terr_admi,            -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
         lv_oid_tipo_clie,            -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
         lv_oid_marc,                  -- MARC_OID_MARC            NUMBER(12),
         0,                           -- IMP_PAGO                 NUMBER(12,2),
         0,                           -- IMP_PAGO_DIVI            NUMBER(12,2),
         lv_importe_movim,            -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
         0,                           -- IMP_MOVI_DIVI            NUMBER(12,2),
         NULL,                        -- NUM_LOTE_FACT            NUMBER(10),
         p_cod_usu,                   -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
         1,                           -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
         NULL,                        -- IND_DTO_CARG_APLI        NUMBER(1),
         lv_oid_secc,                 -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
         lv_oid_subg_vent,            -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
         NULL,                        -- SOCA_OID_SOLI_CABE       NUMBER(12),
         lv_oid_subt_clie,            -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
         NULL,                        -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
         lv_oid_tipo_peri,            -- TIPE_OID_TIPO_PERI       NUMBER(12),
         lv_oid_regi,                 -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
         NULL,                        -- TIDO_OID_TIPO_DOCU       NUMBER(12),
         SYSDATE,                      -- FEC_ULTI_ACTU            DATE                 NOT NULL,
         SYSDATE,                      -- VAL_HORA_CREA            DATE
         NULL,             -- OID_PERI_ORIG            NUMBER(12)
         0,                             -- IND_CARG_FRAC           NUMBER(1)
         0,                             -- IND_OC                   NUMBER(1)
         NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
         lv_fec_docu                    -- FEC_PROC
         );

      -- Crea detalle en ccc_detal_cargo_abono_direc
      INSERT INTO ccc_detal_cargo_abono_direc VALUES(
             ccc_dcad_seq.nextval,         -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
             lv_oid_cabe_carg,             --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
             lv_oid_clie,                  --  CLIE_OID_CLIE                 NUMBER(12),
             1,                            --  NUM_LINE                      NUMBER(6),
             0,                            --  NUM_HIST_GENE                 NUMBER(3),
             lv_fec_docu,                      --  FEC_MOVI                      DATE,
             0,                            --  IMP_MONE                      NUMBER(12,2),
             lv_importe,                    --  IMP                           NUMBER(12,2),
             NULL,                         --  VAL_REFE                      VARCHAR2(20 BYTE),
             NULL,                         --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
             NULL,                         --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
             lv_oid_mone,                  --  MONE_OID_MONE                 NUMBER(12),
             NULL,                         --  CMBA_OID_MOVI_BANC            NUMBER(12),
             NULL,                         --  MPAB_OID_MEDI_PAGO            NUMBER(12),
             lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
             lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
             lv_oid_movi_cc,               --  MVCC_OID_MOVI_CC              NUMBER(12),
             NULL,                         --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
             NULL,                          --  FEC_PAGO_BANC                 DATE,
             p_cod_usu,                     --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
             lv_oid_soci,                   --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
             lv_oid_tipo_abon_subp,          -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
             SYSDATE );                     --  FEC_CREA                      DATE            NOT NULL


      -- Lamando a la aplicacion de los CAD
      CCC_PKG_PROCE.CCC_PR_APLIC_CABEC_CARGO_ABONO(p_cod_pais,lv_num_anio,lv_num_mes,lv_num_cabe,p_cod_usu);

      -- Liberando el Secuencial de CCC ---
      CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(p_cod_pais, lv_num_anio,lv_num_mes,lv_num_cabe);

   EXCEPTION
       WHEN e_para_null_proc THEN

            RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CARGO_ABONO_MANUA: e_para_null_proc' ||
                               ls_sqlerrm);

      WHEN e_rz_indi_cons_no_def THEN
         RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CARGO_ABONO_MANUA: e_rz_indi_cons_no_def' ||
                               ls_sqlerrm);

      WHEN OTHERS THEN
           ln_sqlcode := SQLCODE;
           ls_sqlerrm := substr(SQLERRM, 1, 250);
           gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
           RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CARGO_ABONO_MANUA: ' ||
                               ls_sqlerrm);

   END CCC_PR_GENER_MOVIM_CUENT_CORRI;

 PROCEDURE CCC_PR_APLIC_ABONO_CARGO_CLIEN(
  p_oid_clie                       IN   mae_clien.oid_clie%TYPE)
 IS

  CURSOR c_abon(
   p_oid_clie                   NUMBER)
  IS
   SELECT
    oid_movi,
    oid_subp_apli,
    oid_tcab_apli,
    oid_tipo_abon_subp_apli,
    oid_marc_situ_sali,
    tipo,
    ind_pago_exce,
    fec_proc,
    fec_movi,
    imp_pend,
    oid_docu_refe
   FROM (
      SELECT
         mcc.oid_movi_cc                 oid_movi,
         sca.oid_subp_apli               oid_subp_apli,
         sca.oid_tcab_apli               oid_tcab_apli,
         sca.oid_tipo_abono_subp_apli    oid_tipo_abon_subp_apli,
         sca.oid_marc_situ_sali          oid_marc_situ_sali,
         sca.ind_abon_nomo               tipo,
         0                               ind_pago_exce,
         mcc.fec_docu                    fec_proc,
         mcc.fec_docu                    fec_movi,
         mcc.imp_pend*-1                 imp_pend,
         (SELECT psc.soca_oid_docu_refe
          FROM ped_solic_cabec psc
          WHERE psc.oid_soli_cabe = mcc.soca_oid_soli_cabe
            AND psc.clie_oid_clie = mcc.clie_oid_clie) oid_docu_refe
       FROM
          ccc_movim_cuent_corri mcc,
          ccc_proce_subpr_creac_aplic sca
       WHERE mcc.clie_oid_clie = p_oid_clie
         AND mcc.subp_oid_subp_crea = sca.oid_subp_crea
         AND mcc.tcab_oid_tcab_crea = sca.oid_tcab_crea
         AND mcc.imp_pend < 0
       UNION
       SELECT
          mb.oid_movi_banc                        oid_movi,
          sca.oid_subp_apli                         oid_subp_apli,
          sca.oid_tcab_apli                         oid_tcab_apli,
          sca.oid_tipo_abono_subp_apli     oid_tipo_abon_subp_apli,
          sca.oid_marc_situ_sali                oid_marc_situ_sali,
          sca.ind_abon_nomo                      tipo,
          mb.ind_pago_exce                          ind_pago_exce,
          mb.fec_proc                                fec_proc,
          mb.fec_pago                                fec_movi,
          mb.imp_sald_pend                        imp_pend,
          NULL                                            oid_docu_refe
        FROM
         ccc_movim_banca mb,
         ccc_proce_subpr_creac_aplic sca
        WHERE mb.clie_oid_clie = p_oid_clie
          AND mb.subp_oid_marc_crea = sca.oid_subp_crea
          AND mb.cod_iden_proc = gc_cod_iden_proc_proc
          AND mb.imp_sald_pend > 0)
      ORDER BY fec_movi ASC;

   CURSOR c_carg(
      p_oid_clie                   mae_clien.oid_clie%TYPE,
      p_oid_docu_refe              NUMBER,
      p_oid_tipo_abono_subp_aplic  ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE)
   IS
      SELECT
         mcc.oid_movi_cc ,
         mcc.masi_oid_marc_situ,
         mcc.imp_movi,
         mcc.imp_paga ,
         mcc.imp_pend,
         CASE
            WHEN mcc.soca_oid_soli_cabe = p_oid_docu_refe THEN 1
                ELSE 0
         END oid_docu_refe
      FROM
         ccc_movim_cuent_corri mcc
      WHERE mcc.clie_oid_clie = p_oid_clie
      AND mcc.imp_pend > 0
      AND EXISTS (
         SELECT NULL
         FROM ccc_marca_tipo_abono mta
         WHERE mta.tasp_oid_tipo_abon_subp=p_oid_tipo_abono_subp_aplic
         AND mta.masi_oid_marc_sali=mcc.masi_oid_marc_situ
         AND mta.ind_entr_sali='E')
        ORDER BY 6 DESC, mcc.perd_oid_peri ASC, mcc.fec_venc ASC,oid_movi_cc ASC;

      lv_imp_abon                  NUMBER(12,2);
      lv_imp_pend_fina             NUMBER(12,2);
      lv_imp_pend_inic             NUMBER(12,2);

      lv_reg_inco_aplic_ccc        ccc_error_aplic_abono_cargo%ROWTYPE;
      
      ls_IndSomosBelcorp           BAS_PARAM_PAIS.VAL_PARA%TYPE;
      lnOcurrencias                NUMBER;

 BEGIN

  lv_imp_pend_inic := CCC_PKG_GENER.CCC_FN_OBTIE_SALDO_TOTAL(p_oid_clie);

  -- Inicio Loop Abonos --
  FOR v_abon IN c_abon(p_oid_clie) LOOP

   lv_imp_abon := v_abon.imp_pend;

   -- Inicio Loop Cargos --
   FOR v_carg IN c_carg(p_oid_clie,v_abon.oid_docu_refe, v_abon.oid_tipo_abon_subp_apli) LOOP

    IF lv_imp_abon >= v_carg.imp_pend THEN

     -- Abono mayor al Cargo
     ccc_pr_actua_cargo_aplic(
      p_oid_clie,
      v_carg.oid_movi_cc,
      v_abon.fec_proc,
      v_abon.fec_movi,
      v_abon.oid_subp_apli,
      v_abon.oid_tcab_apli,
      v_abon.oid_marc_situ_sali,
      v_carg.imp_movi,
      0,
      v_carg.imp_pend,
      v_abon.oid_movi,
      v_abon.tipo,
      v_abon.ind_pago_exce,
      USER);

     lv_imp_abon := lv_imp_abon - v_carg.imp_pend;

    ELSE

     -- Abono menor al Cargo
     ccc_pr_actua_cargo_aplic(
      p_oid_clie,
      v_carg.oid_movi_cc,
      v_abon.fec_proc,
      v_abon.fec_movi,
      v_abon.oid_subp_apli,
      v_abon.oid_tcab_apli,
      v_carg.masi_oid_marc_situ,
      v_carg.imp_paga + lv_imp_abon,
      v_carg.imp_pend - lv_imp_abon,
      lv_imp_abon,
      v_abon.oid_movi,
      v_abon.tipo,
      v_abon.ind_pago_exce,
      USER);

     lv_imp_abon:=0;

     EXIT;

    END IF;

    IF lv_imp_abon=0 THEN
     EXIT;
    END IF;

   END LOOP;

   -- Fin Loop Cargos


   -- Actualizando el Abono
   IF v_abon.tipo=1 THEN

    --Actualizando Abono Factu
    UPDATE ccc_movim_cuent_corri mcc
    SET
     mcc.imp_pend=lv_imp_abon*-1,
     mcc.imp_paga=mcc.imp_movi - lv_imp_abon*-1,
     mcc.subp_oid_subp_ulti = v_abon.oid_subp_apli,
     mcc.tcab_oid_tcab_ulti = v_abon.oid_tcab_apli,
     mcc.masi_oid_marc_situ=
     CASE
      WHEN lv_imp_abon=0
       THEN v_abon.oid_marc_situ_sali
       ELSE mcc.masi_oid_marc_situ
     END
     WHERE mcc.oid_movi_cc=v_abon.oid_movi;

   ELSE

    --Actualizando recaudo bancario
    UPDATE ccc_movim_banca mb
    SET
     mb.imp_sald_pend =  lv_imp_abon,
     mb.imp_apli = mb.imp_pago - lv_imp_abon,
     mb.subp_oid_marc_ulti=v_abon.oid_subp_apli,
     mb.tcab_oid_abon_ulti = v_abon.oid_tcab_apli,
     mb.val_esta_movi_pend =
     CASE
      WHEN lv_imp_abon=0
      THEN gc_val_esta_movi_apli
      ELSE gc_val_esta_movi_pend
      END
     WHERE mb.oid_movi_banc=v_abon.oid_movi;

   END IF;

  END LOOP;

  -- Fin Loop Abonos
  lv_imp_pend_fina := CCC_PKG_GENER.CCC_FN_OBTIE_SALDO_TOTAL(p_oid_clie);

  -- Actualizando la deuda en el Maestro de Cliente
  UPDATE mae_clien mc
  SET mc.sal_deud_ante = lv_imp_pend_fina
  WHERE mc.oid_clie = p_oid_clie;

  IF  lv_imp_pend_inic <> lv_imp_pend_fina THEN

   --Inconsistencia Saldos Pendientes
   lv_reg_inco_aplic_ccc.oid_clie := p_oid_clie;
   lv_reg_inco_aplic_ccc.imp_sald_pend_inic := lv_imp_pend_inic;
   lv_reg_inco_aplic_ccc.imp_sald_pend_final := lv_imp_pend_fina;
   lv_reg_inco_aplic_ccc.fec_apli := SYSDATE;

   INSERT  INTO ccc_error_aplic_abono_cargo VALUES lv_reg_inco_aplic_ccc;

  END IF;
  
  --Ajuste por Somos Belcorp
  ls_IndSomosBelcorp := NVL(GEN_PKG_GENER.GEN_FN_PARAM_PAIS(NULL,'GEN','017'),'0');
  IF(ls_IndSomosBelcorp = '1') THEN
    SELECT COUNT(1)
      INTO lnOcurrencias
      FROM SBE_CTRL_CLIEN
     WHERE OID_CLIE = p_oid_clie;
     
    IF(lnOcurrencias = 0) THEN
      INSERT INTO SBE_CTRL_CLIEN
        (OID_CLIE, 
         COD_CLIE, 
         FEC_ULTI_ACTU)
      VALUES
        (p_oid_clie,
         NULL,
         SYSDATE);
    ELSE
      UPDATE SBE_CTRL_CLIEN
         SET FEC_ULTI_ACTU = SYSDATE
       WHERE OID_CLIE = p_oid_clie;
    END IF; 
  END IF;

 EXCEPTION
  WHEN OTHERS THEN
   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(sqlerrm,1,250);
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_APLIC_ABONO_CARGO_CLIEN: '||ls_sqlerrm);

 END CCC_PR_APLIC_ABONO_CARGO_CLIEN;

 PROCEDURE CCC_PR_GENER_PAGO_BANCA_MANUA(
  p_cod_cban                                 IN  ccc_cuent_corri_banca.cod_cc%TYPE,
  p_num_lote                                 IN ccc_movim_banca.num_lote%TYPE,
  p_cod_clie                                   IN mae_clien.cod_clie%TYPE,
  p_num_cons_tran                        IN ccc_movim_banca.num_cons_tran%TYPE,
  p_fec_pago                                 IN  VARCHAR2,
  p_imp_pago                                  IN ccc_movim_banca.imp_pago%TYPE,
  p_cod_usua                                 IN VARCHAR2)
 IS

  lv_reg_ccc_movim_banca                         ccc_movim_banca%ROWTYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_fec_pago                                      DATE;
  lc_val_esta_movi_pend                    CONSTANT VARCHAR2(1):='P';
  lc_val_cod_iden_proc_ok                CONSTANT VARCHAR2(1):='T';
  lc_val_cod_iden_esta_ok                CONSTANT VARCHAR2(1):='N';
  lc_cod_proc_reca                            CONSTANT VARCHAR2(6):='TES001';
  lc_cod_subp_reca_manu                  CONSTANT NUMBER(1):=2;
  lc_cod_tipo_tran                             CONSTANT VARCHAR2(5):='TBEFE';

 BEGIN

  lv_fec_pago:= TO_DATE(p_fec_pago,'DD/MM/YYYY');
  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');

  SELECT ccc_cmba_seq.NEXTVAL
  INTO lv_reg_ccc_movim_banca.oid_movi_banc
  FROM dual;

  SELECT tt.oid_tipo_tran
  INTO lv_reg_ccc_movim_banca.ttra_oid_tipo_trans
  FROM ccc_tipo_trans tt
  WHERE tt.cod_tipo_tran=lc_cod_tipo_tran;

  lv_reg_ccc_movim_banca.clie_oid_clie := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CLIENTE(p_cod_clie);
  lv_reg_ccc_movim_banca.pais_oid_pais:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);
  lv_reg_ccc_movim_banca.soci_oid_soci:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);
  lv_reg_ccc_movim_banca.subp_oid_marc_crea:=  CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_OID_SUBPR(lc_cod_proc_reca,lc_cod_subp_reca_manu);
  lv_reg_ccc_movim_banca.tcab_oid_abon_crea := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_OID_TICAB(lv_reg_ccc_movim_banca.subp_oid_marc_crea);
  lv_reg_ccc_movim_banca.subp_oid_marc_ulti := lv_reg_ccc_movim_banca.subp_oid_marc_crea;
  lv_reg_ccc_movim_banca.tcab_oid_abon_ulti:= lv_reg_ccc_movim_banca.tcab_oid_abon_crea;
  lv_reg_ccc_movim_banca.ccba_oid_cc_banc:=CCC_PKG_GENER.CCC_FN_OBTIE_CODIG_BANCO_CCBAN(p_cod_cban);
  lv_reg_ccc_movim_banca.num_lote:=p_num_lote;
  lv_reg_ccc_movim_banca.num_cons_tran:=p_num_cons_tran;
  lv_reg_ccc_movim_banca.cod_cons:=p_cod_clie;
  lv_reg_ccc_movim_banca.val_esta_movi_pend:=lc_val_esta_movi_pend;
  lv_reg_ccc_movim_banca.fec_pago:=lv_fec_pago;
  lv_reg_ccc_movim_banca.fec_proc:=TRUNC(SYSDATE);
  lv_reg_ccc_movim_banca.val_hora_proc := SYSDATE;
  lv_reg_ccc_movim_banca.val_hora_norm_adic := lc_val_cod_iden_esta_ok;
  lv_reg_ccc_movim_banca.cod_iden_proc:=lc_val_cod_iden_proc_ok;
  lv_reg_ccc_movim_banca.imp_pago:=p_imp_pago;
  lv_reg_ccc_movim_banca.val_usua_proc:=p_cod_usua;
  lv_reg_ccc_movim_banca.cod_usua:=p_cod_usua;
  lv_reg_ccc_movim_banca.val_obse := 'COBRANZA MANUAL';
  lv_reg_ccc_movim_banca.num_hist:=0;
  lv_reg_ccc_movim_banca.imp_apli:=0;
  lv_reg_ccc_movim_banca.imp_sald_pend:=p_imp_pago;
  lv_reg_ccc_movim_banca.fec_movi_apli:=SYSDATE;
  lv_reg_ccc_movim_banca.val_impo_movi:= p_imp_pago;
  lv_reg_ccc_movim_banca.cod_usua_rece := p_cod_usua;
  lv_reg_ccc_movim_banca.val_hora_rece := SYSDATE;
  lv_reg_ccc_movim_banca.ind_pago_regu := 0;

  INSERT INTO ccc_movim_banca VALUES lv_reg_ccc_movim_banca;

  --CCC_PKG_GENER.CCC_PR_REGIS_LOTE_BANCA(p_cod_pais,p_cod_soci,p_cod_cban, p_num_lote,p_cod_usua);

 END CCC_PR_GENER_PAGO_BANCA_MANUA;

 PROCEDURE CCC_PR_GENER_LOTE_BANCA_CHEQU(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_oid_subp_crea_cheq            ccc_subpr.oid_subp%TYPE;
  lv_oid_tcab_crea_cheq            ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
  lv_oid_tipo_tran                 ccc_tipo_trans.oid_tipo_tran%TYPE;
  lv_oid_cuen_corr_cheq            ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;

 BEGIN

  lv_cod_pais := ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_oid_pais := gen_pkg_gener.gen_fn_devuelve_id_pais(lv_cod_pais);

  lv_cod_soci := ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');
  lv_oid_soci := gen_pkg_gener.gen_fn_devuelve_id_socie(lv_cod_soci);

  -- Subproceso de Creacion
  SELECT cs.oid_subp
  INTO lv_oid_subp_crea_cheq
  FROM
   ccc_proce cp,
   ccc_subpr cs
  WHERE cp.oid_proc = cs.ccpr_oid_proc
    AND cp.cod_proc = gc_cod_proc_banc
    AND cs.cod_subp = gc_cod_subp_cheq;

  -- Tipo Cargo Abono de Creacion
  SELECT tas.tcab_oid_tcab
  INTO lv_oid_tcab_crea_cheq
  FROM ccc_tipo_abono_subpr tas
  WHERE tas.subp_oid_subp = lv_oid_subp_crea_cheq;

  --Tipo de Transacci?n
  SELECT  ctt.oid_tipo_tran
  INTO lv_oid_tipo_tran
  FROM ccc_tipo_trans ctt
  WHERE ctt.cod_tipo_tran = gc_cod_tipo_tran_cheq;

  -- Oid Cuenta Corriente Bancaria Cheque
  SELECT ccb.oid_cuen_corr_banc
  INTO lv_oid_cuen_corr_cheq
  FROM ccc_cuent_corri_banca ccb
  WHERE ccb.cod_cc = gc_cod_cuen_corr_banc_cheq;

  -- Identificando el tipo de cuenta corriente bancaria
  INSERT INTO ccc_movim_banca
   SELECT
    ccc_cmba_seq.nextval,          -- oid_movi_banc  number(12)
    lv_oid_soci,                   -- soci_oid_soci  number(12)
    lv_oid_subp_crea_cheq,         -- subp_oid_marc_ulti  number(12)
    lv_oid_subp_crea_cheq,         -- subp_oid_marc_crea  number(12)
    lv_oid_tcab_crea_cheq,              -- tcab_oid_abon_ulti  number(12)
    lv_oid_tcab_crea_cheq,              -- tcab_oid_abon_crea  number(12)
    lv_oid_tipo_tran,             -- ttra_oid_tipo_trans  number(12)
    lv_oid_cuen_corr_cheq,        -- ccba_oid_cc_banc  number(12)
    ROWNUM,                       -- num_cons_tran  number(10)
    ban.num_lote,                 -- num_lote  number(12)
    ban.cod_clie,                  -- cod_cons  varchar2(15)
    NULL,                          -- cod_erro  varchar2(2)
    NULL,                          -- val_digi_cheq_fact  number(2)
    NULL,                          -- val_docu_apli_anio  varchar2(2)
    NULL,                          -- val_docu_apli_mes_seri  varchar2(2)
    NULL,                          -- val_docu_apli_nume  number(8)
    NULL,                          -- val_docu_crea_anio  varchar2(2)
    NULL,                          -- val_docu_crea_mes_seri  varchar2(2)
    NULL,                          -- val_docu_crea_nume  number(8)
    NULL,                          -- val_esta_movi_pend  varchar2(1)
    NULL,                          -- fec_cont  date
    TRUNC(SYSDATE),                -- fec_pago  date
    TRUNC(SYSDATE),                -- fec_proc  date
    SYSDATE,                       -- val_hora_proc  date
    NULL,                          -- val_hora_norm_adic  varchar2(1)
    gc_cod_iden_proc_tran,         -- cod_iden_proc  varchar2(1)
    ban.imp_cheq,                  -- imp_pago  number(12,2)
    NULL,                          -- val_nomb_ofic  varchar2(30)
    NULL,                          -- num_cupo  number(12)
    NULL,                          -- val_nume_docu  varchar2(15)
    NULL,                          -- num_fact_bole  number(10)
    null,                          -- val_nume_lote_cont  varchar2(20)
    'CARGA POR DIGITACION DE CHEQUES',         -- val_obse  varchar2(100)
    NULL,                          -- cod_ofic_reca  varchar2(5)
    p_cod_usua,                    -- val_usua_proc  varchar2(20)
    NULL,                          -- fec_movi_apli  date
    NULL,                          -- val_impo_movi  number(12,2)
    p_cod_usua,                    -- cod_usua  varchar2(20)
    NULL,                          -- num_lote_exte  number(12)
    0,                             -- num_hist  number(4)
    0,                             -- imp_apli  number(12,2)
    ban.imp_cheq,                  -- imp_sald_pend  number(12,2)
    lv_oid_pais,                   -- pais_oid_pais  number(12)
    NULL,                          -- sbac_oid_sbac  number(12)
    NULL,                          -- tier_oid_erro  number(12)
    mc.oid_clie,                          -- clie_oid_clie  number(12)
    NULL,                          -- mcac_oid_cabe  number(12)
    p_cod_usua,                    -- cod_usua_rece  varchar2(25)
    SYSDATE,                       -- val_hora_rece  date
    NULL,                          -- cod_usua_liqu  varchar2(25)
    NULL,                          -- val_hora_liqu  date
    NULL,                          -- cod_usua_regu  varchar2(25)
    NULL,                          -- val_hora_regu  date
    NULL,                          -- cod_usu_carg_exce  varchar2(25)
    NULL,                          -- val_hora_carg_exce  date
    0,                              -- ind_pago_regu  number(1),
    NULL,                             -- val_digi_ctrl
    NULL,                             -- num_docu_iden
    NULL,                            -- oid_banc_sucu_cheq
    CASE
      WHEN ban.fec_cobr > ban.fec_crea THEN
        'F'
      ELSE 'D'
    END,                            -- ind_tipo_cheq
    ban.fec_cobr,                   -- fec_cobr_cheq
    bc.cod_banc,                    -- cod_banc_cheq
    bc.cod_sucu_prin,               -- cod_sucu_cheq,
    NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
    0,                             -- ind_erro_gest,
    NULL,                         -- imp_pago_tota
    NULL,                          -- imp_perc
    0,                             -- ind_pago_inco
    0,                            -- ind_pago_exce
    0,                             --ind_exce_vali
    0,                             --imp_apli_clie NUMBER(15,2)
    0,                             -- imp_apli_exce NUMBER(15,2)
    0,                             --imp_apli_inco NUMBER(15,2)
    0,                             --imp_apli_cobr_exte NUMBER(15,2)
    0,                             --imp_apli_cobr_pend_regu NUMBER(15,2));
    0,                              --imp_apli_fami_prot NUMBER(15,2));
    0,                               -- ind_elim
    0                                --ind_pago_reve
  FROM
   ccc_carga_digit_chequ_banca ban,
   ccc_banco_chequ bc,
   mae_clien mc
  WHERE ban.cod_banc = bc.cod_banc
  AND ban.cod_clie = mc.cod_clie
  AND ban.num_lote = p_num_lote;

  CCC_PKG_GENER.CCC_PR_GENER_CABEC_LOTE_BANCA(gc_cod_cuen_corr_banc_cheq,gc_cod_tipo_orig_digi_cheq,p_num_lote ,p_num_lote,p_cod_usua);

  /*
   IF v_lote_proc.ind_liqu_auto = 1 THEN

    CCC_PKG_PROCE.CCC_PR_LIQUI_LOTE_BANCA(lv_cod_pais,lv_cod_soci,v_lote_proc.num_lote,p_cod_usua);

   END IF;
  */

 EXCEPTION
  WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_LOTE_BANCA_CHEQU;

 PROCEDURE CCC_PR_GENER_LOTE_BANCA_EXTER(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE,
  p_cod_banc                       IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_oid_subp_crea_banc            ccc_subpr.oid_subp%TYPE;
  lv_oid_tcab_crea_banc            ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
  lv_oid_tipo_tran                 ccc_tipo_trans.oid_tipo_tran%TYPE;

 BEGIN

  lv_cod_pais := ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_oid_pais := gen_pkg_gener.gen_fn_devuelve_id_pais(lv_cod_pais);

  lv_cod_soci := ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');
  lv_oid_soci := gen_pkg_gener.gen_fn_devuelve_id_socie(lv_cod_soci);

  -- Subproceso de Creacion
  SELECT cs.oid_subp
  INTO lv_oid_subp_crea_banc
  FROM
   ccc_proce cp,
   ccc_subpr cs
  WHERE cp.oid_proc = cs.ccpr_oid_proc
    AND cp.cod_proc = gc_cod_proc_banc
    AND cs.cod_subp =  gc_cod_subp_reca_banc_manu;

  -- Tipo Cargo Abono de Creacion
  SELECT tas.tcab_oid_tcab
  INTO lv_oid_tcab_crea_banc
  FROM ccc_tipo_abono_subpr tas
  WHERE tas.subp_oid_subp = lv_oid_subp_crea_banc;

  --Tipo de Transacci?n
  SELECT  ctt.oid_tipo_tran
  INTO lv_oid_tipo_tran
  FROM ccc_cuent_corri_banca ccb,
       ccc_tipo_trans ctt
  WHERE ccb.cod_tipo_tran = ctt.cod_tipo_tran
   AND ccb.cod_cc = p_cod_banc;

  -- Identificando el tipo de cuenta corriente bancaria
  INSERT INTO ccc_movim_banca
   SELECT
    ccc_cmba_seq.nextval,          -- oid_movi_banc  number(12)
    lv_oid_soci,                   -- soci_oid_soci  number(12)
    lv_oid_subp_crea_banc,         -- subp_oid_marc_ulti  number(12)
    lv_oid_subp_crea_banc,         -- subp_oid_marc_crea  number(12)
    lv_oid_tcab_crea_banc,              -- tcab_oid_abon_ulti  number(12)
    lv_oid_tcab_crea_banc,              -- tcab_oid_abon_crea  number(12)
    lv_oid_tipo_tran,             -- ttra_oid_tipo_trans  number(12)
    ccb.oid_cuen_corr_banc,        -- ccba_oid_cc_banc  number(12)
    ROWNUM,                       -- num_cons_tran  number(10)
    ban.num_lote,                 -- num_lote  number(12)
    ban.cod_clie,                  -- cod_cons  varchar2(15)
    NULL,                          -- cod_erro  varchar2(2)
    NULL,                          -- val_digi_cheq_fact  number(2)
    NULL,                          -- val_docu_apli_anio  varchar2(2)
    NULL,                          -- val_docu_apli_mes_seri  varchar2(2)
    NULL,                          -- val_docu_apli_nume  number(8)
    NULL,                          -- val_docu_crea_anio  varchar2(2)
    NULL,                          -- val_docu_crea_mes_seri  varchar2(2)
    NULL,                          -- val_docu_crea_nume  number(8)
    NULL,                          -- val_esta_movi_pend  varchar2(1)
    NULL,                          -- fec_cont  date
    ban.fec_pago,                  -- fec_pago  date
    TRUNC(SYSDATE),                -- fec_proc  date
    SYSDATE,                       -- val_hora_proc  date
    NULL,                          -- val_hora_norm_adic  varchar2(1)
    gc_cod_iden_proc_tran,         -- cod_iden_proc  varchar2(1)
    ban.imp_pago,                  -- imp_pago  number(12,2)
    NULL,                          -- val_nomb_ofic  varchar2(30)
    NULL,                          -- num_cupo  number(12)
    NULL,                          -- val_nume_docu  varchar2(15)
    NULL,                          -- num_fact_bole  number(10)
    null,                          -- val_nume_lote_cont  varchar2(20)
    'CARGA POR PAGO BANCARIO MANUAL',         -- val_obse  varchar2(100)
    NULL,                          -- cod_ofic_reca  varchar2(5)
    p_cod_usua,                    -- val_usua_proc  varchar2(20)
    NULL,                          -- fec_movi_apli  date
    NULL,                          -- val_impo_movi  number(12,2)
    p_cod_usua,                    -- cod_usua  varchar2(20)
    NULL,                          -- num_lote_exte  number(12)
    0,                             -- num_hist  number(4)
    0,                             -- imp_apli  number(12,2)
    ban.imp_pago,                  -- imp_sald_pend  number(12,2)
    lv_oid_pais,                   -- pais_oid_pais  number(12)
    NULL,                          -- sbac_oid_sbac  number(12)
    NULL,                          -- tier_oid_erro  number(12)
    mc.oid_clie,                          -- clie_oid_clie  number(12)
    NULL,                          -- mcac_oid_cabe  number(12)
    p_cod_usua,                    -- cod_usua_rece  varchar2(25)
    SYSDATE,                       -- val_hora_rece  date
    NULL,                          -- cod_usua_liqu  varchar2(25)
    NULL,                          -- val_hora_liqu  date
    NULL,                          -- cod_usua_regu  varchar2(25)
    NULL,                          -- val_hora_regu  date
    NULL,                          -- cod_usu_carg_exce  varchar2(25)
    NULL,                          -- val_hora_carg_exce  date
    0,                              -- ind_pago_regu  number(1),
    NULL,                             -- val_digi_ctrl
    NULL,                             -- num_docu_iden
    NULL,                            -- oid_banc_sucu_cheq
    NULL,                            -- ind_tipo_cheq
    NULL,                   -- fec_cobr_cheq
    NULL,                    -- cod_banc_cheq
    NULL,               -- cod_sucu_cheq
    NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2),
    0,                             -- ind_erro_gest
    NULL,                         -- imp_pago_tota
    NULL,                          -- imp_perc
    0,                             -- ind_pago_inco
    0,                            -- ind_pago_exce
    0,                             --ind_exce_vali
    0,                             --imp_apli_clie NUMBER(15,2)
    0,                             -- imp_apli_exce NUMBER(15,2)
    0,                             --imp_apli_inco NUMBER(15,2)
    0,                             --imp_apli_cobr_exte NUMBER(15,2)
    0,                             --imp_apli_cobr_pend_regu NUMBER(15,2));
    0,                              --imp_apli_fami_prot NUMBER(15,2));
    0,                               --ind_elim
    0                                -- ind_pago_reve
  FROM
   ccc_carga_digit_pagos_exter ban,
   ccc_cuent_corri_banca ccb,
   mae_clien mc
  WHERE ban.cod_banc = ccb.cod_cc
  AND ban.cod_clie = mc.cod_clie
  AND ban.num_lote = p_num_lote;

  CCC_PKG_GENER.CCC_PR_GENER_CABEC_LOTE_BANCA(p_cod_banc,gc_cod_tipo_orig_digi_paex,p_num_lote ,p_num_lote,p_cod_usua);

  /*
   IF v_lote_proc.ind_liqu_auto = 1 THEN

    CCC_PKG_PROCE.CCC_PR_LIQUI_LOTE_BANCA(lv_cod_pais,lv_cod_soci,v_lote_proc.num_lote,p_cod_usua);

   END IF;
  */

 EXCEPTION
  WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_LOTE_BANCA_EXTER;

 PROCEDURE CCC_PR_GENER_CARGO_ABONO_MANUA(
  p_cod_peri                       IN   seg_perio_corpo.cod_peri%TYPE,
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_fec_venc                       IN   VARCHAR2,
  p_val_obse                       IN   VARCHAR2,
  p_importe                        IN   VARCHAR2,
  p_cod_usua                       IN   VARCHAR2)
 IS

  -- excepciones
  e_rz_indi_cons_no_def            EXCEPTION;

  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_oid_marc                      seg_marca.oid_marc%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_fec_docu                      ccc_movim_cuent_corri.fec_docu%TYPE;
  lv_importe                       ccc_detal_cargo_abono_direc.imp%TYPE;
  lv_importe_movim                 ccc_detal_cargo_abono_direc.imp%TYPE;
  lv_oid_tipo_peri                 seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
  lv_oid_cabe_carg                 ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_oid_movi_cc                   ccc_movim_cuent_corri.oid_movi_cc%TYPE;
  lv_oid_suba                      seg_subac.oid_sbac%TYPE;
  lv_oid_mone                      seg_pais.mone_oid_mone%TYPE;
  lv_oid_clie                      mae_clien.oid_clie%TYPE;
  lv_oid_tipo_clie                 mae_clien_tipo_subti.ticl_oid_tipo_clie%TYPE;
  lv_oid_subt_clie                 mae_clien_tipo_subti.sbti_oid_subt_clie%TYPE;
  lv_oid_regi                      zon_regio.oid_regi%TYPE;
  lv_oid_secc                      zon_secci.oid_secc%TYPE;
  lv_oid_terr_admi                 mae_clien_unida_admin.ztad_oid_terr_admi%TYPE;
  lv_oid_subg_vent                 zon_sub_geren_venta.oid_subg_vent%TYPE;

   lv_oid_proc                     ccc_proce.oid_proc%TYPE;
   lv_oid_subp                     ccc_subpr.oid_subp%TYPE;
   lv_oid_cuen_cont                ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
   lv_oid_marc_situ                ccc_marca_situa.oid_marc_situ%TYPE;
   lv_oid_tipo_carg_abon           ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
   lv_indi_tipo_abon               ccc_subpr.val_indi_tipo_abon%TYPE;
   lv_num_anio                     ccc_movim_cuent_corri.val_docu_anio%TYPE;
   lv_num_mes                      ccc_movim_cuent_corri.val_docu_mes_seri%TYPE;
   lv_num_cabe                     ccc_cabec_carga_abono_direc.num_cabe%TYPE;
   lv_num_iden_cuot                ped_numer_solic.val_ulti_nume_soli%TYPE;
   lv_val_indi_cons                ccc_subpr.val_indi_cons%TYPE;
   lv_fec_venc                     ccc_movim_cuent_corri.fec_venc%TYPE;

   e_para_null_proc                EXCEPTION;

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');

   /* inicializa variables globales  para registro de log  */
  gv_log_cod_pais := lv_cod_pais;
  gv_log_cod_soci := lv_cod_soci;
  gv_log_user     := p_cod_usua;
  gv_log_cod_modu := 'CCC';
  gv_log_cod_proc := '15';

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

  gv_des_log:='Inicio CCC_PR_GENER_CARGO_ABONO_MANUA parametros ' ||
               ' 1: '  || lv_cod_pais ||
               ' 2: '  || lv_cod_soci ||
               ' 3: '  ||  p_cod_peri  ||
               ' 4: '  || p_oid_tipo_abon_subp ||
               ' 5: '  || p_cod_clie  ||
               ' 6: ' || p_importe  ;

  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  lv_fec_docu:=TO_DATE(TO_CHAR(SYSDATE,'DD/MM/YYYY'),'DD/MM/YYYY');

  IF p_fec_venc IS NULL THEN
   -----lv_fec_venc:= TO_DATE(SYSDATE,'DD/MM/YYYY');
   lv_fec_venc:= TO_DATE(TO_CHAR(SYSDATE,'DD/MM/YYYY'),'DD/MM/YYYY');
  ELSE
   lv_fec_venc:= TO_DATE(p_fec_venc,'DD/MM/YYYY');
  END IF;

  BEGIN

   -- Obteniendo Parametria del Proceso --
   lv_oid_pais := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);
   lv_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);
   lv_oid_mone := FIN_PKG_GENER.FIN_FN_OBTIE_OID_MONED(lv_cod_pais);
   lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);
   lv_oid_subg_vent := CCC_PKG_GENER.CCC_FN_OBTIE_OID_SUBGE_VENTA(lv_oid_pais,lv_oid_marc,gc_cod_sbac_cadi);
   lv_oid_suba := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SUBAC(gc_cod_sbac_cadi);
   lv_oid_tipo_peri := gc_oid_tipo_peri;

   IF p_cod_peri IS NOT NULL THEN
    lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_PERIO(p_cod_peri);
   ELSE
    lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_PERIO_ACTU;
   END IF;

   gv_des_log:='   Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   /*  Obtiene parametria relacionada al Tipo Abono Subproceso dado por parametro */
   CCC_PKG_GENER.CCC_PR_OBTIE_PARAM_TASUB(p_oid_tipo_abon_subp,lv_oid_proc,lv_oid_subp,lv_oid_cuen_cont,lv_indi_tipo_abon,lv_oid_marc_situ,lv_oid_tipo_carg_abon,lv_val_indi_cons);

   gv_des_log:='   Los datos para el Tipo de Abono Subporceso son: ' ||
                  ' 1 p_oid_tipo_abon_subp :'  || p_oid_tipo_abon_subp ||
                  ' 2 lv_oid_proc :'  || lv_oid_proc ||
                  ' 3 lv_oid_subp : '  ||  lv_oid_subp  ||
                  ' 4 lv_oid_cuen_cont :'  || lv_oid_cuen_cont ||
                  ' 5 lv_indi_tipo_abon :'  || lv_indi_tipo_abon    ||
                  ' 6 lv_oid_marc_situ :' || lv_oid_marc_situ  ||
                  ' 7 lv_oid_tipo_carg_abon :' || lv_oid_tipo_carg_abon  ||
                  ' 8 lv_val_indi_cons :' || lv_val_indi_cons  ;


      gv_des_log:='Inicio Obteniendo los datos de la consultora';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      -- Obtiene datos de consultora
      SELECT
         cli.oid_clie,
         tpc.ticl_oid_tipo_clie,
         tpc.sbti_oid_subt_clie,
         zon.zorg_oid_regi,
         sec.oid_secc,
         ua.ztad_oid_terr_admi
      INTO
         lv_oid_clie,
         lv_oid_tipo_clie,
         lv_oid_subt_clie,
         lv_oid_regi,
         lv_oid_secc,
         lv_oid_terr_admi
      FROM
         mae_clien cli,
         mae_clien_tipo_subti tpc,
         mae_clien_unida_admin ua,
         zon_terri_admin za,
         zon_secci sec,
         zon_zona zon
      WHERE cli.cod_clie = p_cod_clie
        AND cli.oid_clie = tpc.clie_oid_clie
        AND tpc.ind_ppal = 1
        AND cli.oid_clie = ua.clie_oid_clie
        AND ua.ztad_oid_terr_admi = za.oid_terr_admi
        AND za.zscc_oid_secc = sec.oid_secc
        AND sec.zzon_oid_zona = zon.oid_zona
        AND ua.ind_acti = 1;

      gv_des_log:='Fin Obteniendo los datos de la consultora';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   EXCEPTION
      WHEN no_data_found THEN
         RAISE e_para_null_proc;
   END;

   -- Adecua signo del importe del abono/cargo
   IF     TO_NUMBER(p_importe,'999999999.00') < 0 THEN
      lv_importe := TO_NUMBER(p_importe,'999999999.00') * -1;
   ELSE
      lv_importe := TO_NUMBER(p_importe,'999999999.00');
   END IF;

   IF  lv_val_indi_cons = 'D'  THEN
      lv_importe_movim := lv_importe;
   ELSE
      IF  lv_val_indi_cons = 'H' THEN
         lv_importe_movim := lv_importe * -1;
      ELSE
         RAISE e_rz_indi_cons_no_def;
      END IF;
   END IF;

   -- Obteniendo el numero Identificador de Cuota --
  lv_num_iden_cuot:=ccc_pkg_gener.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(lv_cod_pais,lv_cod_soci,gc_cod_sbac_cadi );
   gv_des_log:='   Numero identificador de Cuota : ' || lv_num_iden_cuot;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   --    Prepara oid  para ccc_movim_cuent_corri
   SELECT ccc_mvcc_seq.NEXTVAL
   INTO lv_oid_movi_cc
   FROM dual;

   -- Crea la Cabecera de cargos y Abonos Directos --
   CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(lv_oid_pais, lv_oid_soci, lv_oid_proc, p_oid_tipo_abon_subp, lv_oid_cabe_carg,lv_num_anio,lv_num_mes,lv_num_cabe);
   gv_des_log:=' Se crea la cabecera del CAD ' || lv_oid_cabe_carg;
   fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                   gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='INSERT CCC_MOVIM_CUENT_CORRI : OID_MOVI_CC => ' || lv_oid_movi_cc || ' sbac_oid_sbac =>' || lv_oid_suba || ' val_ejer_cuot=> ' || lv_num_anio ||
                  ' num_iden_cuot => '  || lv_num_iden_cuot || ' num_orde_cuot => 1 '  ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   -- Crea detalle en  ccc_movim_cuent_corri
   INSERT INTO ccc_movim_cuent_corri VALUES(
      lv_oid_movi_cc,              -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
      lv_oid_soci,                 -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
      lv_oid_marc_situ,            -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
      lv_oid_mone,                 -- MONE_OID_MONE            NUMBER(12),
      lv_oid_peri,                  -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
      lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
      lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
      lv_oid_suba,                 -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
      lv_oid_subp,                 -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
      lv_oid_subp,                 -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
      lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
      lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
      lv_oid_clie,                 -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
      lv_num_anio,                 -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
      lv_num_mes,                  -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
      lv_num_cabe,                 -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
      lv_num_anio,                 -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
      NULL,                        -- FEC_CONTA                DATE,
      lv_fec_docu,                     -- FEC_DOCU                 DATE                 NOT NULL,
      lv_fec_docu,                     -- FEC_ULTI_MOVI            DATE                 NOT NULL,
      lv_fec_docu,                     -- FEC_VALO                 DATE,
      lv_fec_venc,                     -- FEC_VENC                 DATE                 NOT NULL,
      lv_importe_movim,            -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_DIVI                 NUMBER(12,2),
      0,                           -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_PAGA_DIVI            NUMBER(12,2),
      lv_importe_movim,            -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
      lv_num_iden_cuot,            -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
      NULL,                        -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
      1,                           -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
      p_val_obse,                  -- VAL_OBSE                 VARCHAR2(100 BYTE),
      NULL,                        -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
      lv_num_anio,                 -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
      lv_num_mes,                  -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
      lv_num_cabe,                 -- VAL_ULTI_DOCU_NUME       NUMBER(8),
      0,                           -- VAL_ULTI_NUME_HIST       NUMBER(3),
      NULL,                        -- MPAB_OID_MEDI_PAGO       NUMBER(12),
      lv_oid_terr_admi,            -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
      lv_oid_tipo_clie,            -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
      lv_oid_marc,                  -- MARC_OID_MARC            NUMBER(12),
      0,                           -- IMP_PAGO                 NUMBER(12,2),
      0,                           -- IMP_PAGO_DIVI            NUMBER(12,2),
      lv_importe_movim,            -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_MOVI_DIVI            NUMBER(12,2),
      NULL,                        -- NUM_LOTE_FACT            NUMBER(10),
      p_cod_usua,                  -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
      1,                           -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
      NULL,                        -- IND_DTO_CARG_APLI        NUMBER(1),
      lv_oid_secc,                 -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
      lv_oid_subg_vent,            -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
      NULL,                        -- SOCA_OID_SOLI_CABE       NUMBER(12),
      lv_oid_subt_clie,            -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
      NULL,                        -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
      lv_oid_tipo_peri,            -- TIPE_OID_TIPO_PERI       NUMBER(12),
      lv_oid_regi,                 -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
      NULL,                        -- TIDO_OID_TIPO_DOCU       NUMBER(12),
      SYSDATE,                      -- FEC_ULTI_ACTU            DATE                 NOT NULL
      SYSDATE,                      -- VAL_HORA_CREA            DATE
      NULL,             -- OID_PERI_ORIG            NUMBER(12)
      0,                             -- IND_CARG_FRAC           NUMBER(1)
      0,                             -- IND_OC                   NUMBER(1)
      NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
      lv_fec_docu);                    -- FEC_PROC);


   -- Crea detalle en ccc_detal_cargo_abono_direc
   INSERT INTO ccc_detal_cargo_abono_direc VALUES(
         ccc_dcad_seq.nextval,         -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
         lv_oid_cabe_carg,             --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
         lv_oid_clie,                  --  CLIE_OID_CLIE                 NUMBER(12),
         1,                            --  NUM_LINE                      NUMBER(6),
         0,                            --  NUM_HIST_GENE                 NUMBER(3),
         lv_fec_docu,                      --  FEC_MOVI                      DATE,
         0,                            --  IMP_MONE                      NUMBER(12,2),
         lv_importe,                    --  IMP                           NUMBER(12,2),
         NULL,                         --  VAL_REFE                      VARCHAR2(20 BYTE),
         NULL,                         --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
         NULL,                         --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
         lv_oid_mone,                  --  MONE_OID_MONE                 NUMBER(12),
         NULL,                         --  CMBA_OID_MOVI_BANC            NUMBER(12),
         NULL,                         --  MPAB_OID_MEDI_PAGO            NUMBER(12),
         lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
         lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
         lv_oid_movi_cc,               --  MVCC_OID_MOVI_CC              NUMBER(12),
         NULL,                         --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
         NULL,                          --  FEC_PAGO_BANC                 DATE,
         p_cod_usua,                          --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
         lv_oid_soci,                   --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
         p_oid_tipo_abon_subp,          -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
         SYSDATE );                     --  FEC_CREA                      DATE            NOT NULL

   gv_des_log := 'Se ejecutara aplicacion de    num_cabe: ' || lv_num_cabe || ' num_anio: ' || lv_num_anio ||  ' num_mes: ' || lv_num_mes ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);



   -- Lamando a la aplicacion de los CAD
   --CCC_PKG_PROCE.CCC_PR_APLIC_CABEC_CARGO_ABONO(p_cod_pais,p_cod_soci,lv_num_anio,lv_num_mes,lv_num_cabe,p_cod_usua);
   CCC_PR_APLIC_ABONO_CARGO_CLIEN(lv_oid_clie);

   -- Liberando el Secuencial de CCC ---
  CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(lv_cod_pais, lv_num_anio,lv_num_mes,lv_num_cabe);

   gv_des_log := 'Fin  CCC_PR_GENER_CARGO_ABONO_MANUAL de manera correcta' ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

EXCEPTION
   WHEN e_para_null_proc THEN
      gv_des_log:='   Error en Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;
            FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
            gv_des_log:='Fin del proceso de manera erronea';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
            RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CARGO_ABONO_MANUA: ' ||
                               ls_sqlerrm);

   WHEN e_rz_indi_cons_no_def THEN
           gv_des_log := 'ccc_pr_gener_cargo_abono_manua Error: indi_cons no es H ni D';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

           gv_des_log:='Fin del proceso de manera erronea';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);

   WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

END CCC_PR_GENER_CARGO_ABONO_MANUA;

 PROCEDURE CCC_PR_GENER_CARGO_ABONO_MANUA(
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_imp_movi                       IN   NUMBER,
  p_cod_usua                       IN   VARCHAR2)
 IS

  -- excepciones
  e_rz_indi_cons_no_def            EXCEPTION;

  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_oid_marc                      seg_marca.oid_marc%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_fec_docu                      ccc_movim_cuent_corri.fec_docu%TYPE;
  lv_imp_movi                      ccc_movim_cuent_corri.imp_movi%TYPE;
  lv_oid_tipo_peri                 seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
  lv_oid_cabe_carg                 ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_oid_movi_cc                   ccc_movim_cuent_corri.oid_movi_cc%TYPE;
  lv_oid_suba                      seg_subac.oid_sbac%TYPE;
  lv_oid_mone                      seg_pais.mone_oid_mone%TYPE;
  lv_oid_clie                      mae_clien.oid_clie%TYPE;
  lv_oid_tipo_clie                 mae_clien_tipo_subti.ticl_oid_tipo_clie%TYPE;
  lv_oid_subt_clie                 mae_clien_tipo_subti.sbti_oid_subt_clie%TYPE;
  lv_oid_regi                      zon_regio.oid_regi%TYPE;
  lv_oid_secc                      zon_secci.oid_secc%TYPE;
  lv_oid_terr_admi                 mae_clien_unida_admin.ztad_oid_terr_admi%TYPE;
  lv_oid_subg_vent                 zon_sub_geren_venta.oid_subg_vent%TYPE;

  lv_oid_proc                     ccc_proce.oid_proc%TYPE;
  lv_oid_subp                     ccc_subpr.oid_subp%TYPE;
  lv_oid_cuen_cont                ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
  lv_oid_marc_situ                ccc_marca_situa.oid_marc_situ%TYPE;
  lv_oid_tipo_carg_abon           ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
  lv_indi_tipo_abon               ccc_subpr.val_indi_tipo_abon%TYPE;
  lv_num_anio                     ccc_movim_cuent_corri.val_docu_anio%TYPE;
  lv_num_mes                      ccc_movim_cuent_corri.val_docu_mes_seri%TYPE;
  lv_num_cabe                     ccc_cabec_carga_abono_direc.num_cabe%TYPE;
  lv_num_iden_cuot                ped_numer_solic.val_ulti_nume_soli%TYPE;
  lv_val_indi_cons                ccc_subpr.val_indi_cons%TYPE;
  lv_cod_peri                     seg_perio_corpo.cod_peri%TYPE;

  e_para_null_proc                EXCEPTION;

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');
  lv_cod_peri := FIN_PKG_GENER.FIN_FN_OBTIE_CODIG_PERIO_ACTUA;

  /* inicializa variables globales  para registro de log  */
  gv_log_cod_pais := lv_cod_pais;
  gv_log_cod_soci := lv_cod_soci;
  gv_log_user     := p_cod_usua;
  gv_log_cod_modu := 'CCC';
  gv_log_cod_proc := '15';

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

  gv_des_log:='Inicio CCC_PR_GENER_CARGO_ABONO_MANUA parametros ' ||
               ' 1: '  || lv_cod_pais ||
               ' 2: '  || lv_cod_soci ||
               ' 3: '  || lv_cod_peri  ||
               ' 4: '  || p_oid_tipo_abon_subp ||
               ' 5: '  || p_cod_clie  ||
               ' 6: ' || p_imp_movi  ;

  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  lv_fec_docu:=TO_DATE(TO_CHAR(SYSDATE,'DD/MM/YYYY'),'DD/MM/YYYY');



  BEGIN

   -- Obteniendo Parametria del Proceso --
   lv_oid_pais := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);
   lv_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);
   lv_oid_mone := FIN_PKG_GENER.FIN_FN_OBTIE_OID_MONED(lv_cod_pais);
   lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);
   lv_oid_subg_vent := CCC_PKG_GENER.CCC_FN_OBTIE_OID_SUBGE_VENTA(lv_oid_pais,lv_oid_marc,gc_cod_sbac_cadi);
   lv_oid_suba := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SUBAC(gc_cod_sbac_cadi);
   lv_oid_tipo_peri := gc_oid_tipo_peri;

   IF lv_cod_peri IS NOT NULL THEN
    lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_PERIO(lv_cod_peri);
   ELSE
    lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_PERIO_ACTU;
   END IF;

   gv_des_log:='   Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   /*  Obtiene parametria relacionada al Tipo Abono Subproceso dado por parametro */
   CCC_PKG_GENER.CCC_PR_OBTIE_PARAM_TASUB(p_oid_tipo_abon_subp,lv_oid_proc,lv_oid_subp,lv_oid_cuen_cont,lv_indi_tipo_abon,lv_oid_marc_situ,lv_oid_tipo_carg_abon,lv_val_indi_cons);

   gv_des_log:='   Los datos para el Tipo de Abono Subporceso son: ' ||
                  ' 1 p_oid_tipo_abon_subp :'  || p_oid_tipo_abon_subp ||
                  ' 2 lv_oid_proc :'  || lv_oid_proc ||
                  ' 3 lv_oid_subp : '  ||  lv_oid_subp  ||
                  ' 4 lv_oid_cuen_cont :'  || lv_oid_cuen_cont ||
                  ' 5 lv_indi_tipo_abon :'  || lv_indi_tipo_abon    ||
                  ' 6 lv_oid_marc_situ :' || lv_oid_marc_situ  ||
                  ' 7 lv_oid_tipo_carg_abon :' || lv_oid_tipo_carg_abon  ||
                  ' 8 lv_val_indi_cons :' || lv_val_indi_cons  ;


      gv_des_log:='Inicio Obteniendo los datos de la consultora';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      -- Obtiene datos de consultora
      SELECT
         cli.oid_clie,
         tpc.ticl_oid_tipo_clie,
         tpc.sbti_oid_subt_clie,
         zon.zorg_oid_regi,
         sec.oid_secc,
         ua.ztad_oid_terr_admi
      INTO
         lv_oid_clie,
         lv_oid_tipo_clie,
         lv_oid_subt_clie,
         lv_oid_regi,
         lv_oid_secc,
         lv_oid_terr_admi
      FROM
         mae_clien cli,
         mae_clien_tipo_subti tpc,
         mae_clien_unida_admin ua,
         zon_terri_admin za,
         zon_secci sec,
         zon_zona zon
      WHERE cli.cod_clie = p_cod_clie
        AND cli.oid_clie = tpc.clie_oid_clie
        AND tpc.ind_ppal = 1
        AND cli.oid_clie = ua.clie_oid_clie
        AND ua.ztad_oid_terr_admi = za.oid_terr_admi
        AND za.zscc_oid_secc = sec.oid_secc
        AND sec.zzon_oid_zona = zon.oid_zona
        AND ua.ind_acti = 1;

      gv_des_log:='Fin Obteniendo los datos de la consultora';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   EXCEPTION
      WHEN no_data_found THEN
         RAISE e_para_null_proc;
   END;

   -- Adecua signo del importe del abono/cargo
   IF  lv_val_indi_cons = 'D'  THEN
      lv_imp_movi := p_imp_movi;
   ELSE
      IF  lv_val_indi_cons = 'H' THEN
         lv_imp_movi := p_imp_movi * -1;
      ELSE
         RAISE e_rz_indi_cons_no_def;
      END IF;
   END IF;

   -- Obteniendo el numero Identificador de Cuota --
  lv_num_iden_cuot:=ccc_pkg_gener.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(lv_cod_pais,lv_cod_soci,gc_cod_sbac_cadi );
   gv_des_log:='   Numero identificador de Cuota : ' || lv_num_iden_cuot;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   --    Prepara oid  para ccc_movim_cuent_corri
   SELECT ccc_mvcc_seq.NEXTVAL
   INTO lv_oid_movi_cc
   FROM dual;

   -- Crea la Cabecera de cargos y Abonos Directos --
   CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(lv_oid_pais, lv_oid_soci, lv_oid_proc, p_oid_tipo_abon_subp, lv_oid_cabe_carg,lv_num_anio,lv_num_mes,lv_num_cabe);
   gv_des_log:=' Se crea la cabecera del CAD ' || lv_oid_cabe_carg;
   fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                   gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='INSERT CCC_MOVIM_CUENT_CORRI : OID_MOVI_CC => ' || lv_oid_movi_cc || ' sbac_oid_sbac =>' || lv_oid_suba || ' val_ejer_cuot=> ' || lv_num_anio ||
                  ' num_iden_cuot => '  || lv_num_iden_cuot || ' num_orde_cuot => 1 '  ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   -- Crea detalle en  ccc_movim_cuent_corri
   INSERT INTO ccc_movim_cuent_corri VALUES(
      lv_oid_movi_cc,              -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
      lv_oid_soci,                 -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
      lv_oid_marc_situ,            -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
      lv_oid_mone,                 -- MONE_OID_MONE            NUMBER(12),
      lv_oid_peri,                  -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
      lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
      lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
      lv_oid_suba,                 -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
      lv_oid_subp,                 -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
      lv_oid_subp,                 -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
      lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
      lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
      lv_oid_clie,                 -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
      lv_num_anio,                 -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
      lv_num_mes,                  -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
      lv_num_cabe,                 -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
      lv_num_anio,                 -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
      NULL,                        -- FEC_CONTA                DATE,
      lv_fec_docu,                     -- FEC_DOCU                 DATE                 NOT NULL,
      lv_fec_docu,                     -- FEC_ULTI_MOVI            DATE                 NOT NULL,
      lv_fec_docu,                     -- FEC_VALO                 DATE,
      lv_fec_docu,                     -- FEC_VENC                 DATE                 NOT NULL,
      lv_imp_movi,            -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_DIVI                 NUMBER(12,2),
      0,                           -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_PAGA_DIVI            NUMBER(12,2),
      lv_imp_movi,            -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
      lv_num_iden_cuot,            -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
      NULL,                        -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
      1,                           -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
      NULL,                  -- VAL_OBSE                 VARCHAR2(100 BYTE),
      NULL,                        -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
      lv_num_anio,                 -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
      lv_num_mes,                  -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
      lv_num_cabe,                 -- VAL_ULTI_DOCU_NUME       NUMBER(8),
      0,                           -- VAL_ULTI_NUME_HIST       NUMBER(3),
      NULL,                        -- MPAB_OID_MEDI_PAGO       NUMBER(12),
      lv_oid_terr_admi,            -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
      lv_oid_tipo_clie,            -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
      lv_oid_marc,                  -- MARC_OID_MARC            NUMBER(12),
      0,                           -- IMP_PAGO                 NUMBER(12,2),
      0,                           -- IMP_PAGO_DIVI            NUMBER(12,2),
      lv_imp_movi,            -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_MOVI_DIVI            NUMBER(12,2),
      NULL,                        -- NUM_LOTE_FACT            NUMBER(10),
      p_cod_usua,                  -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
      1,                           -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
      NULL,                        -- IND_DTO_CARG_APLI        NUMBER(1),
      lv_oid_secc,                 -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
      lv_oid_subg_vent,            -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
      NULL,                        -- SOCA_OID_SOLI_CABE       NUMBER(12),
      lv_oid_subt_clie,            -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
      NULL,                        -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
      lv_oid_tipo_peri,            -- TIPE_OID_TIPO_PERI       NUMBER(12),
      lv_oid_regi,                 -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
      NULL,                        -- TIDO_OID_TIPO_DOCU       NUMBER(12),
      SYSDATE,                      -- FEC_ULTI_ACTU            DATE                 NOT NULL
      SYSDATE,                      -- VAL_HORA_CREA            DATE
      NULL,             -- OID_PERI_ORIG            NUMBER(12)
      0,                             -- IND_CARG_FRAC           NUMBER(1)
      0,                             -- IND_OC                   NUMBER(1)
      NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
      lv_fec_docu);                  -- FEC_DOCU  DATE


   -- Crea detalle en ccc_detal_cargo_abono_direc
   INSERT INTO ccc_detal_cargo_abono_direc VALUES(
         ccc_dcad_seq.nextval,         -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
         lv_oid_cabe_carg,             --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
         lv_oid_clie,                  --  CLIE_OID_CLIE                 NUMBER(12),
         1,                            --  NUM_LINE                      NUMBER(6),
         0,                            --  NUM_HIST_GENE                 NUMBER(3),
         lv_fec_docu,                      --  FEC_MOVI                      DATE,
         0,                            --  IMP_MONE                      NUMBER(12,2),
         lv_imp_movi,                    --  IMP                           NUMBER(12,2),
         NULL,                         --  VAL_REFE                      VARCHAR2(20 BYTE),
         NULL,                         --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
         NULL,                         --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
         lv_oid_mone,                  --  MONE_OID_MONE                 NUMBER(12),
         NULL,                         --  CMBA_OID_MOVI_BANC            NUMBER(12),
         NULL,                         --  MPAB_OID_MEDI_PAGO            NUMBER(12),
         lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
         lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
         lv_oid_movi_cc,               --  MVCC_OID_MOVI_CC              NUMBER(12),
         NULL,                         --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
         NULL,                          --  FEC_PAGO_BANC                 DATE,
         p_cod_usua,                          --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
         lv_oid_soci,                   --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
         p_oid_tipo_abon_subp,          -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
         SYSDATE );                     --  FEC_CREA                      DATE            NOT NULL

   gv_des_log := 'Se ejecutara aplicacion de    num_cabe: ' || lv_num_cabe || ' num_anio: ' || lv_num_anio ||  ' num_mes: ' || lv_num_mes ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);



   -- Lamando a la aplicacion de los CAD
   --CCC_PKG_PROCE.CCC_PR_APLIC_CABEC_CARGO_ABONO(p_cod_pais,p_cod_soci,lv_num_anio,lv_num_mes,lv_num_cabe,p_cod_usua);
   CCC_PR_APLIC_ABONO_CARGO_CLIEN(lv_oid_clie);

   -- Liberando el Secuencial de CCC ---
  CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(lv_cod_pais, lv_num_anio,lv_num_mes,lv_num_cabe);

   gv_des_log := 'Fin  CCC_PR_GENER_CARGO_ABONO_MANUAL de manera correcta' ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

 EXCEPTION
   WHEN e_para_null_proc THEN
      gv_des_log:='   Error en Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;
            FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
            gv_des_log:='Fin del proceso de manera erronea';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
            RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CARGO_ABONO_MANUA: ' ||
                               ls_sqlerrm);

   WHEN e_rz_indi_cons_no_def THEN
           gv_des_log := 'ccc_pr_gener_cargo_abono_manua Error: indi_cons no es H ni D';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

           gv_des_log:='Fin del proceso de manera erronea';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);

   WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_CARGO_ABONO_MANUA;

 PROCEDURE CCC_PR_GENER_CARGO_ABONO_INTER(
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_fec_docu                       IN   DATE,
  p_imp_movi                       IN   NUMBER,
  p_cod_usua                       IN   VARCHAR2)
 IS

  -- excepciones
  e_rz_indi_cons_no_def            EXCEPTION;

  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_oid_marc                      seg_marca.oid_marc%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_fec_docu                      ccc_movim_cuent_corri.fec_docu%TYPE;
  lv_imp_movi                      ccc_movim_cuent_corri.imp_movi%TYPE;
  lv_oid_tipo_peri                 seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
  lv_oid_cabe_carg                 ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_oid_movi_cc                   ccc_movim_cuent_corri.oid_movi_cc%TYPE;
  lv_oid_suba                      seg_subac.oid_sbac%TYPE;
  lv_oid_mone                      seg_pais.mone_oid_mone%TYPE;
  lv_oid_clie                      mae_clien.oid_clie%TYPE;
  lv_oid_tipo_clie                 mae_clien_tipo_subti.ticl_oid_tipo_clie%TYPE;
  lv_oid_subt_clie                 mae_clien_tipo_subti.sbti_oid_subt_clie%TYPE;
  lv_oid_regi                      zon_regio.oid_regi%TYPE;
  lv_oid_secc                      zon_secci.oid_secc%TYPE;
  lv_oid_terr_admi                 mae_clien_unida_admin.ztad_oid_terr_admi%TYPE;
  lv_oid_subg_vent                 zon_sub_geren_venta.oid_subg_vent%TYPE;

  lv_oid_proc                     ccc_proce.oid_proc%TYPE;
  lv_oid_subp                     ccc_subpr.oid_subp%TYPE;
  lv_oid_cuen_cont                ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
  lv_oid_marc_situ                ccc_marca_situa.oid_marc_situ%TYPE;
  lv_oid_tipo_carg_abon           ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
  lv_indi_tipo_abon               ccc_subpr.val_indi_tipo_abon%TYPE;
  lv_num_anio                     ccc_movim_cuent_corri.val_docu_anio%TYPE;
  lv_num_mes                      ccc_movim_cuent_corri.val_docu_mes_seri%TYPE;
  lv_num_cabe                     ccc_cabec_carga_abono_direc.num_cabe%TYPE;
  lv_num_iden_cuot                ped_numer_solic.val_ulti_nume_soli%TYPE;
  lv_val_indi_cons                ccc_subpr.val_indi_cons%TYPE;
  lv_cod_peri                     seg_perio_corpo.cod_peri%TYPE;

  e_para_null_proc                EXCEPTION;

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');
  lv_cod_peri := FIN_PKG_GENER.FIN_FN_OBTIE_CODIG_PERIO_ACTUA;

  /* inicializa variables globales  para registro de log  */
  gv_log_cod_pais := lv_cod_pais;
  gv_log_cod_soci := lv_cod_soci;
  gv_log_user     := p_cod_usua;
  gv_log_cod_modu := 'CCC';
  gv_log_cod_proc := '15';

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

  gv_des_log:='Inicio CCC_PR_GENER_CARGO_ABONO_MANUA parametros ' ||
               ' 1: '  || lv_cod_pais ||
               ' 2: '  || lv_cod_soci ||
               ' 3: '  || lv_cod_peri  ||
               ' 4: '  || p_oid_tipo_abon_subp ||
               ' 5: '  || p_cod_clie  ||
               ' 6: ' || p_imp_movi  ;

  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  lv_fec_docu:=p_fec_docu;

  BEGIN

   -- Obteniendo Parametria del Proceso --
   lv_oid_pais := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);

   lv_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);

   lv_oid_mone := FIN_PKG_GENER.FIN_FN_OBTIE_OID_MONED(lv_cod_pais);

   lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);

   lv_oid_subg_vent := CCC_PKG_GENER.CCC_FN_OBTIE_OID_SUBGE_VENTA(lv_oid_pais,lv_oid_marc,gc_cod_sbac_cadi);

   lv_oid_suba := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SUBAC(gc_cod_sbac_cadi);

   lv_oid_tipo_peri := gc_oid_tipo_peri;

   lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_PERIO_ACTU;
  

    gv_des_log:='   ZZZZ';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='   Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


    gv_des_log:='   XXXX';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   /*  Obtiene parametria relacionada al Tipo Abono Subproceso dado por parametro */
   CCC_PKG_GENER.CCC_PR_OBTIE_PARAM_TASUB(p_oid_tipo_abon_subp,lv_oid_proc,lv_oid_subp,lv_oid_cuen_cont,lv_indi_tipo_abon,lv_oid_marc_situ,lv_oid_tipo_carg_abon,lv_val_indi_cons);

   gv_des_log:='   YYYY';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   gv_des_log:='   Los datos para el Tipo de Abono Subporceso son: ' ||
                  ' 1 p_oid_tipo_abon_subp :'  || p_oid_tipo_abon_subp ||
                  ' 2 lv_oid_proc :'  || lv_oid_proc ||
                  ' 3 lv_oid_subp : '  ||  lv_oid_subp  ||
                  ' 4 lv_oid_cuen_cont :'  || lv_oid_cuen_cont ||
                  ' 5 lv_indi_tipo_abon :'  || lv_indi_tipo_abon    ||
                  ' 6 lv_oid_marc_situ :' || lv_oid_marc_situ  ||
                  ' 7 lv_oid_tipo_carg_abon :' || lv_oid_tipo_carg_abon  ||
                  ' 8 lv_val_indi_cons :' || lv_val_indi_cons  ;


      gv_des_log:='Inicio Obteniendo los datos de la consultora';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      -- Obtiene datos de consultora
      SELECT
         cli.oid_clie,
         tpc.ticl_oid_tipo_clie,
         tpc.sbti_oid_subt_clie,
         zon.zorg_oid_regi,
         sec.oid_secc,
         ua.ztad_oid_terr_admi
      INTO
         lv_oid_clie,
         lv_oid_tipo_clie,
         lv_oid_subt_clie,
         lv_oid_regi,
         lv_oid_secc,
         lv_oid_terr_admi
      FROM
         mae_clien cli,
         mae_clien_tipo_subti tpc,
         mae_clien_unida_admin ua,
         zon_terri_admin za,
         zon_secci sec,
         zon_zona zon
      WHERE cli.cod_clie = p_cod_clie
        AND cli.oid_clie = tpc.clie_oid_clie
        AND tpc.ind_ppal = 1
        AND cli.oid_clie = ua.clie_oid_clie
        AND ua.ztad_oid_terr_admi = za.oid_terr_admi
        AND za.zscc_oid_secc = sec.oid_secc
        AND sec.zzon_oid_zona = zon.oid_zona
        AND ua.ind_acti = 1;

      gv_des_log:='Fin Obteniendo los datos de la consultora';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   EXCEPTION
      WHEN no_data_found THEN
         RAISE e_para_null_proc;
   END;

   -- Adecua signo del importe del abono/cargo
   IF  lv_val_indi_cons = 'D'  THEN
      lv_imp_movi := p_imp_movi;
   ELSE
      IF  lv_val_indi_cons = 'H' THEN
         lv_imp_movi := p_imp_movi * -1;
      ELSE
         RAISE e_rz_indi_cons_no_def;
      END IF;
   END IF;

   -- Obteniendo el numero Identificador de Cuota --
  lv_num_iden_cuot:=ccc_pkg_gener.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(lv_cod_pais,lv_cod_soci,gc_cod_sbac_cadi );
   gv_des_log:='   Numero identificador de Cuota : ' || lv_num_iden_cuot;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   --    Prepara oid  para ccc_movim_cuent_corri
   SELECT ccc_mvcc_seq.NEXTVAL
   INTO lv_oid_movi_cc
   FROM dual;

   -- Crea la Cabecera de cargos y Abonos Directos --
   CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(lv_oid_pais, lv_oid_soci, lv_oid_proc, p_oid_tipo_abon_subp, lv_oid_cabe_carg,lv_num_anio,lv_num_mes,lv_num_cabe);
   gv_des_log:=' Se crea la cabecera del CAD ' || lv_oid_cabe_carg;
   fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                   gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='INSERT CCC_MOVIM_CUENT_CORRI : OID_MOVI_CC => ' || lv_oid_movi_cc || ' sbac_oid_sbac =>' || lv_oid_suba || ' val_ejer_cuot=> ' || lv_num_anio ||
                  ' num_iden_cuot => '  || lv_num_iden_cuot || ' num_orde_cuot => 1 '  ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   -- Crea detalle en  ccc_movim_cuent_corri
   INSERT INTO ccc_movim_cuent_corri VALUES(
      lv_oid_movi_cc,              -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
      lv_oid_soci,                 -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
      lv_oid_marc_situ,            -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
      lv_oid_mone,                 -- MONE_OID_MONE            NUMBER(12),
      lv_oid_peri,                  -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
      lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
      lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
      lv_oid_suba,                 -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
      lv_oid_subp,                 -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
      lv_oid_subp,                 -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
      lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
      lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
      lv_oid_clie,                 -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
      lv_num_anio,                 -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
      lv_num_mes,                  -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
      lv_num_cabe,                 -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
      lv_num_anio,                 -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
      NULL,                        -- FEC_CONTA                DATE,
      lv_fec_docu,                     -- FEC_DOCU                 DATE                 NOT NULL,
      lv_fec_docu,                     -- FEC_ULTI_MOVI            DATE                 NOT NULL,
      lv_fec_docu,                     -- FEC_VALO                 DATE,
      lv_fec_docu,                     -- FEC_VENC                 DATE                 NOT NULL,
      lv_imp_movi,            -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_DIVI                 NUMBER(12,2),
      0,                           -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_PAGA_DIVI            NUMBER(12,2),
      lv_imp_movi,            -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
      lv_num_iden_cuot,            -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
      NULL,                        -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
      1,                           -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
      NULL,                  -- VAL_OBSE                 VARCHAR2(100 BYTE),
      NULL,                        -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
      lv_num_anio,                 -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
      lv_num_mes,                  -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
      lv_num_cabe,                 -- VAL_ULTI_DOCU_NUME       NUMBER(8),
      0,                           -- VAL_ULTI_NUME_HIST       NUMBER(3),
      NULL,                        -- MPAB_OID_MEDI_PAGO       NUMBER(12),
      lv_oid_terr_admi,            -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
      lv_oid_tipo_clie,            -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
      lv_oid_marc,                  -- MARC_OID_MARC            NUMBER(12),
      0,                           -- IMP_PAGO                 NUMBER(12,2),
      0,                           -- IMP_PAGO_DIVI            NUMBER(12,2),
      lv_imp_movi,            -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_MOVI_DIVI            NUMBER(12,2),
      NULL,                        -- NUM_LOTE_FACT            NUMBER(10),
      p_cod_usua,                  -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
      1,                           -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
      NULL,                        -- IND_DTO_CARG_APLI        NUMBER(1),
      lv_oid_secc,                 -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
      lv_oid_subg_vent,            -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
      NULL,                        -- SOCA_OID_SOLI_CABE       NUMBER(12),
      lv_oid_subt_clie,            -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
      NULL,                        -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
      lv_oid_tipo_peri,            -- TIPE_OID_TIPO_PERI       NUMBER(12),
      lv_oid_regi,                 -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
      NULL,                        -- TIDO_OID_TIPO_DOCU       NUMBER(12),
      SYSDATE,                      -- FEC_ULTI_ACTU            DATE                 NOT NULL
      SYSDATE,                      -- VAL_HORA_CREA            DATE
      NULL,             -- OID_PERI_ORIG            NUMBER(12)
      0,                             -- IND_CARG_FRAC           NUMBER(1)
      0,                             -- IND_OC                   NUMBER(1)
      NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
      lv_fec_docu);                  -- FEC_DOCU                 DATE


   -- Crea detalle en ccc_detal_cargo_abono_direc
   INSERT INTO ccc_detal_cargo_abono_direc VALUES(
         ccc_dcad_seq.nextval,         -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
         lv_oid_cabe_carg,             --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
         lv_oid_clie,                  --  CLIE_OID_CLIE                 NUMBER(12),
         1,                            --  NUM_LINE                      NUMBER(6),
         0,                            --  NUM_HIST_GENE                 NUMBER(3),
         lv_fec_docu,                      --  FEC_MOVI                      DATE,
         0,                            --  IMP_MONE                      NUMBER(12,2),
         lv_imp_movi,                    --  IMP                           NUMBER(12,2),
         NULL,                         --  VAL_REFE                      VARCHAR2(20 BYTE),
         NULL,                         --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
         NULL,                         --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
         lv_oid_mone,                  --  MONE_OID_MONE                 NUMBER(12),
         NULL,                         --  CMBA_OID_MOVI_BANC            NUMBER(12),
         NULL,                         --  MPAB_OID_MEDI_PAGO            NUMBER(12),
         lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
         lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
         lv_oid_movi_cc,               --  MVCC_OID_MOVI_CC              NUMBER(12),
         NULL,                         --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
         NULL,                          --  FEC_PAGO_BANC                 DATE,
         p_cod_usua,                          --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
         lv_oid_soci,                   --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
         p_oid_tipo_abon_subp,          -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
         SYSDATE );                     --  FEC_CREA                      DATE            NOT NULL

   gv_des_log := 'Se ejecutara aplicacion de    num_cabe: ' || lv_num_cabe || ' num_anio: ' || lv_num_anio ||  ' num_mes: ' || lv_num_mes ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);



   -- Lamando a la aplicacion de los CAD
   --CCC_PKG_PROCE.CCC_PR_APLIC_CABEC_CARGO_ABONO(p_cod_pais,p_cod_soci,lv_num_anio,lv_num_mes,lv_num_cabe,p_cod_usua);
   CCC_PR_APLIC_ABONO_CARGO_CLIEN(lv_oid_clie);

   -- Liberando el Secuencial de CCC ---
  CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(lv_cod_pais, lv_num_anio,lv_num_mes,lv_num_cabe);

   gv_des_log := 'Fin  CCC_PR_GENER_CARGO_ABONO_MANUAL de manera correcta' ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

 EXCEPTION
   WHEN e_para_null_proc THEN
      gv_des_log:='   Error en Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;
            FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
            gv_des_log:='Fin del proceso de manera erronea';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
            RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CARGO_ABONO_MANUA: ' ||
                               ls_sqlerrm);

   WHEN e_rz_indi_cons_no_def THEN
           gv_des_log := 'ccc_pr_gener_cargo_abono_manua Error: indi_cons no es H ni D';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

           gv_des_log:='Fin del proceso de manera erronea';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);

   WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_CARGO_ABONO_INTER;

 PROCEDURE CCC_PR_GENER_CARGO_DEUDA_INCOB(
  p_num_docu_iden                  IN   mae_clien.cod_clie%TYPE)
 IS

  -- excepciones
  e_rz_indi_cons_no_def            EXCEPTION;

  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_oid_marc                      seg_marca.oid_marc%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_fec_docu                      ccc_movim_cuent_corri.fec_docu%TYPE;
  lv_oid_tipo_peri                 seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
  lv_oid_cabe_carg                 ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_oid_movi_cc                   ccc_movim_cuent_corri.oid_movi_cc%TYPE;
  lv_oid_suba                      seg_subac.oid_sbac%TYPE;
  lv_oid_mone                      seg_pais.mone_oid_mone%TYPE;
  lv_oid_clie                      mae_clien.oid_clie%TYPE;
  lv_oid_tipo_clie                 mae_clien_tipo_subti.ticl_oid_tipo_clie%TYPE;
  lv_oid_subt_clie                 mae_clien_tipo_subti.sbti_oid_subt_clie%TYPE;
  lv_oid_regi                      zon_regio.oid_regi%TYPE;
  lv_oid_secc                      zon_secci.oid_secc%TYPE;
  lv_oid_terr_admi                 mae_clien_unida_admin.ztad_oid_terr_admi%TYPE;
  lv_oid_subg_vent                 zon_sub_geren_venta.oid_subg_vent%TYPE;

   lv_oid_proc                     ccc_proce.oid_proc%TYPE;
   lv_oid_subp                     ccc_subpr.oid_subp%TYPE;
   lv_oid_cuen_cont                ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
   lv_oid_marc_situ                ccc_marca_situa.oid_marc_situ%TYPE;
   lv_oid_tipo_carg_abon           ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
   lv_indi_tipo_abon               ccc_subpr.val_indi_tipo_abon%TYPE;
   lv_num_anio                     ccc_movim_cuent_corri.val_docu_anio%TYPE;
   lv_num_mes                      ccc_movim_cuent_corri.val_docu_mes_seri%TYPE;
   lv_num_cabe                     ccc_cabec_carga_abono_direc.num_cabe%TYPE;
   lv_num_iden_cuot                ped_numer_solic.val_ulti_nume_soli%TYPE;
   lv_val_indi_cons                ccc_subpr.val_indi_cons%TYPE;
   lv_fec_venc                     ccc_movim_cuent_corri.fec_venc%TYPE;

  lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;
  lv_oid_tipo_abon_subp            ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE:=770;
  lv_cod_clie                      mae_clien.cod_clie%TYPE;
  lv_imp_movi                      ccc_movim_cuent_corri.imp_movi%TYPE;

  e_para_null_proc                EXCEPTION;

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');

   /* inicializa variables globales  para registro de log  */
  gv_log_cod_pais := lv_cod_pais;
  gv_log_cod_soci := lv_cod_soci;
  gv_log_user     := USER;
  gv_log_cod_modu := 'CCC';
  gv_log_cod_proc := '15';

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

  SELECT c.imp_deud_cast
  INTO lv_imp_movi
  FROM ccc_consu_casti_cabec c
  WHERE c.cod_clie = p_num_docu_iden;

  SELECT MIN(d.cod_camp), MIN(NVL(d.fec_docu,d.fec_cast))
  INTO lv_cod_peri, lv_fec_docu
  FROM ccc_consu_casti_detal d
  WHERE d.cod_clie = p_num_docu_iden;

  SELECT mc.oid_clie, mc.cod_clie
  INTO lv_oid_clie, lv_cod_clie
  FROM mae_clien mc,
       mae_clien_ident mci
  WHERE mc.oid_clie = mci.clie_oid_clie
    AND mci.num_docu_iden = p_num_docu_iden;


  gv_des_log:='Inicio CCC_PR_GENER_CARGO_ABONO_MANUA parametros ' ||
               ' 1: '  || lv_cod_pais ||
               ' 2: '  || lv_cod_soci ||
               ' 3: '  ||  lv_cod_peri  ||
               ' 4: '  || lv_oid_tipo_abon_subp ||
               ' 5: '  || lv_cod_clie  ||
               ' 6: ' || lv_imp_movi  ;

  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  lv_fec_docu:= lv_fec_docu;

  lv_fec_venc:= lv_fec_docu;

  BEGIN

   -- Obteniendo Parametria del Proceso --
   lv_oid_pais := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);
   lv_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);
   lv_oid_mone := FIN_PKG_GENER.FIN_FN_OBTIE_OID_MONED(lv_cod_pais);
   lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);
   lv_oid_subg_vent := CCC_PKG_GENER.CCC_FN_OBTIE_OID_SUBGE_VENTA(lv_oid_pais,lv_oid_marc,gc_cod_sbac_cadi);
   lv_oid_suba := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SUBAC(gc_cod_sbac_cadi);
   lv_oid_tipo_peri := gc_oid_tipo_peri;

   IF lv_cod_peri IS NOT NULL THEN
    lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_PERIO(lv_cod_peri);
   ELSE
    lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_PERIO_ACTU;
   END IF;

   gv_des_log:='   Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   /*  Obtiene parametria relacionada al Tipo Abono Subproceso dado por parametro */
   CCC_PKG_GENER.CCC_PR_OBTIE_PARAM_TASUB(lv_oid_tipo_abon_subp,lv_oid_proc,lv_oid_subp,lv_oid_cuen_cont,lv_indi_tipo_abon,lv_oid_marc_situ,lv_oid_tipo_carg_abon,lv_val_indi_cons);

   gv_des_log:='   Los datos para el Tipo de Abono Subporceso son: ' ||
                  ' 1 lv_oid_tipo_abon_subp :'  || lv_oid_tipo_abon_subp ||
                  ' 2 lv_oid_proc :'  || lv_oid_proc ||
                  ' 3 lv_oid_subp : '  ||  lv_oid_subp  ||
                  ' 4 lv_oid_cuen_cont :'  || lv_oid_cuen_cont ||
                  ' 5 lv_indi_tipo_abon :'  || lv_indi_tipo_abon    ||
                  ' 6 lv_oid_marc_situ :' || lv_oid_marc_situ  ||
                  ' 7 lv_oid_tipo_carg_abon :' || lv_oid_tipo_carg_abon  ||
                  ' 8 lv_val_indi_cons :' || lv_val_indi_cons  ;


      gv_des_log:='Inicio Obteniendo los datos de la consultora';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      -- Obtiene datos de consultora
      SELECT
         cli.oid_clie,
         tpc.ticl_oid_tipo_clie,
         tpc.sbti_oid_subt_clie,
         zon.zorg_oid_regi,
         sec.oid_secc,
         ua.ztad_oid_terr_admi
      INTO
         lv_oid_clie,
         lv_oid_tipo_clie,
         lv_oid_subt_clie,
         lv_oid_regi,
         lv_oid_secc,
         lv_oid_terr_admi
      FROM
         mae_clien cli,
         mae_clien_tipo_subti tpc,
         mae_clien_unida_admin ua,
         zon_terri_admin za,
         zon_secci sec,
         zon_zona zon
      WHERE cli.cod_clie = lv_cod_clie
        AND cli.oid_clie = tpc.clie_oid_clie
        AND tpc.ind_ppal = 1
        AND cli.oid_clie = ua.clie_oid_clie
        AND ua.ztad_oid_terr_admi = za.oid_terr_admi
        AND za.zscc_oid_secc = sec.oid_secc
        AND sec.zzon_oid_zona = zon.oid_zona
        AND ua.ind_acti = 1;

      gv_des_log:='Fin Obteniendo los datos de la consultora';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   EXCEPTION
      WHEN no_data_found THEN
         RAISE e_para_null_proc;
   END;

   -- Obteniendo el numero Identificador de Cuota --
  lv_num_iden_cuot:=ccc_pkg_gener.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(lv_cod_pais,lv_cod_soci,gc_cod_sbac_cadi );
   gv_des_log:='   Numero identificador de Cuota : ' || lv_num_iden_cuot;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   --    Prepara oid  para ccc_movim_cuent_corri
   SELECT ccc_mvcc_seq.NEXTVAL
   INTO lv_oid_movi_cc
   FROM dual;

   -- Crea la Cabecera de cargos y Abonos Directos --
   CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(lv_oid_pais, lv_oid_soci, lv_oid_proc, lv_oid_tipo_abon_subp, lv_oid_cabe_carg,lv_num_anio,lv_num_mes,lv_num_cabe);
   gv_des_log:=' Se crea la cabecera del CAD ' || lv_oid_cabe_carg;
   fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                   gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='INSERT CCC_MOVIM_CUENT_CORRI : OID_MOVI_CC => ' || lv_oid_movi_cc || ' sbac_oid_sbac =>' || lv_oid_suba || ' val_ejer_cuot=> ' || lv_num_anio ||
                  ' num_iden_cuot => '  || lv_num_iden_cuot || ' num_orde_cuot => 1 '  ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   -- Crea detalle en  ccc_movim_cuent_corri
   INSERT INTO ccc_movim_cuent_corri VALUES(
      lv_oid_movi_cc,              -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
      lv_oid_soci,                 -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
      lv_oid_marc_situ,            -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
      lv_oid_mone,                 -- MONE_OID_MONE            NUMBER(12),
      lv_oid_peri,                  -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
      lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
      lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
      lv_oid_suba,                 -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
      lv_oid_subp,                 -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
      lv_oid_subp,                 -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
      lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
      lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
      lv_oid_clie,                 -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
      lv_num_anio,                 -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
      lv_num_mes,                  -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
      lv_num_cabe,                 -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
      lv_num_anio,                 -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
      NULL,                        -- FEC_CONTA                DATE,
      lv_fec_docu,                     -- FEC_DOCU                 DATE                 NOT NULL,
      lv_fec_docu,                     -- FEC_ULTI_MOVI            DATE                 NOT NULL,
      lv_fec_docu,                     -- FEC_VALO                 DATE,
      lv_fec_venc,                     -- FEC_VENC                 DATE                 NOT NULL,
      lv_imp_movi,            -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_DIVI                 NUMBER(12,2),
      0,                           -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_PAGA_DIVI            NUMBER(12,2),
      lv_imp_movi,            -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
      lv_num_iden_cuot,            -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
      NULL,                        -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
      1,                           -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
      NULL,                  -- VAL_OBSE                 VARCHAR2(100 BYTE),
      NULL,                        -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
      lv_num_anio,                 -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
      lv_num_mes,                  -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
      lv_num_cabe,                 -- VAL_ULTI_DOCU_NUME       NUMBER(8),
      0,                           -- VAL_ULTI_NUME_HIST       NUMBER(3),
      NULL,                        -- MPAB_OID_MEDI_PAGO       NUMBER(12),
      lv_oid_terr_admi,            -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
      lv_oid_tipo_clie,            -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
      lv_oid_marc,                  -- MARC_OID_MARC            NUMBER(12),
      0,                           -- IMP_PAGO                 NUMBER(12,2),
      0,                           -- IMP_PAGO_DIVI            NUMBER(12,2),
      lv_imp_movi,            -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_MOVI_DIVI            NUMBER(12,2),
      NULL,                        -- NUM_LOTE_FACT            NUMBER(10),
      USER,                  -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
      1,                           -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
      NULL,                        -- IND_DTO_CARG_APLI        NUMBER(1),
      lv_oid_secc,                 -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
      lv_oid_subg_vent,            -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
      NULL,                        -- SOCA_OID_SOLI_CABE       NUMBER(12),
      lv_oid_subt_clie,            -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
      NULL,                        -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
      lv_oid_tipo_peri,            -- TIPE_OID_TIPO_PERI       NUMBER(12),
      lv_oid_regi,                 -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
      NULL,                        -- TIDO_OID_TIPO_DOCU       NUMBER(12),
      SYSDATE,                      -- FEC_ULTI_ACTU            DATE                 NOT NULL
      SYSDATE,                      -- VAL_HORA_CREA            DATE
      NULL,             -- OID_PERI_ORIG            NUMBER(12)
      0,                             -- IND_CARG_FRAC           NUMBER(1)
      0,                             -- IND_OC                   NUMBER(1)
      NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
      lv_fec_docu);                     -- FEC_PROC                 DATE                 NOT NULL,


   -- Crea detalle en ccc_detal_cargo_abono_direc
   INSERT INTO ccc_detal_cargo_abono_direc VALUES(
         ccc_dcad_seq.nextval,         -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
         lv_oid_cabe_carg,             --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
         lv_oid_clie,                  --  CLIE_OID_CLIE                 NUMBER(12),
         1,                            --  NUM_LINE                      NUMBER(6),
         0,                            --  NUM_HIST_GENE                 NUMBER(3),
         lv_fec_docu,                      --  FEC_MOVI                      DATE,
         0,                            --  IMP_MONE                      NUMBER(12,2),
         lv_imp_movi,                    --  IMP                           NUMBER(12,2),
         NULL,                         --  VAL_REFE                      VARCHAR2(20 BYTE),
         NULL,                         --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
         NULL,                         --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
         lv_oid_mone,                  --  MONE_OID_MONE                 NUMBER(12),
         NULL,                         --  CMBA_OID_MOVI_BANC            NUMBER(12),
         NULL,                         --  MPAB_OID_MEDI_PAGO            NUMBER(12),
         lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
         lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
         lv_oid_movi_cc,               --  MVCC_OID_MOVI_CC              NUMBER(12),
         NULL,                         --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
         NULL,                          --  FEC_PAGO_BANC                 DATE,
         USER,                          --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
         lv_oid_soci,                   --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
         lv_oid_tipo_abon_subp,          -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
         SYSDATE );                     --  FEC_CREA                      DATE            NOT NULL

   gv_des_log := 'Se ejecutara aplicacion de    num_cabe: ' || lv_num_cabe || ' num_anio: ' || lv_num_anio ||  ' num_mes: ' || lv_num_mes ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);



   -- Lamando a la aplicacion de los CAD
   --CCC_PKG_PROCE.CCC_PR_APLIC_CABEC_CARGO_ABONO(p_cod_pais,p_cod_soci,lv_num_anio,lv_num_mes,lv_num_cabe,p_cod_usua);
   CCC_PR_APLIC_ABONO_CARGO_CLIEN(lv_oid_clie);

   -- Liberando el Secuencial de CCC ---
  CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(lv_cod_pais, lv_num_anio,lv_num_mes,lv_num_cabe);

   gv_des_log := 'Fin  CCC_PR_GENER_CARGO_ABONO_MANUAL de manera correcta' ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

EXCEPTION
   WHEN e_para_null_proc THEN
      gv_des_log:='   Error en Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;
            FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
            gv_des_log:='Fin del proceso de manera erronea';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
            RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CARGO_ABONO_MANUA: ' ||
                               ls_sqlerrm);

   WHEN e_rz_indi_cons_no_def THEN
           gv_des_log := 'ccc_pr_gener_cargo_abono_manua Error: indi_cons no es H ni D';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

           gv_des_log:='Fin del proceso de manera erronea';
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);

/*
   WHEN OTHERS THEN
    gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );
*/
 END CCC_PR_GENER_CARGO_DEUDA_INCOB;

 PROCEDURE CCC_PR_REGUL_PAGO_BANCA(
  p_num_lote                      ccc_movim_banca.num_lote%TYPE,
  p_oid_movi_banc             ccc_movim_banca.oid_movi_banc%TYPE,
  p_num_cons_tran             ccc_movim_banca.num_cons_tran%TYPE,
  p_cod_clie                        mae_clien.cod_clie%TYPE)
 IS

  lv_reg_ccc_movim_banca                 ccc_movim_banca%ROWTYPE;
  lv_oid_clie                                                 mae_clien.oid_clie%TYPE;
  lv_oid_subp_regu                      ccc_subpr.oid_subp%TYPE;
  lv_oid_tcab_regu                      ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;

 BEGIN

  -- Obteniendo el Oid de Cliente
  SELECT  mc.oid_clie
  INTO lv_oid_clie
  FROM mae_clien mc
  WHERE mc.cod_clie = p_cod_clie;

  -- Obteniendo el Proceso bancario de Regularizacion --
  SELECT cs.oid_subp, tas.tcab_oid_tcab
  INTO lv_oid_subp_regu,lv_oid_tcab_regu
  FROM
     ccc_proce cp,
     ccc_subpr cs,
     ccc_tipo_abono_subpr tas
  WHERE cp.oid_proc=cs.ccpr_oid_proc
    AND tas.subp_oid_subp=cs.oid_subp
    AND cp.cod_proc =   gc_cod_proc_banc
    AND cs.cod_subp =  gc_cod_subp_regu;

  -- Regularizando
  UPDATE ccc_movim_banca mb
  SET
   mb.clie_oid_clie = lv_oid_clie,
   mb.cod_cons = p_cod_clie,
   mb.cod_iden_proc = gc_cod_iden_proc_erro,
   mb.val_hora_norm_adic = 'P',
   mb.ind_pago_regu = 1
  WHERE mb.oid_movi_banc = p_oid_movi_banc;


  SELECT mb.*
  INTO lv_reg_ccc_movim_banca
  FROM ccc_movim_banca mb
  WHERE mb.oid_movi_banc = p_oid_movi_banc;

  SELECT ccc_cmba_seq.nextval
  INTO lv_reg_ccc_movim_banca.oid_movi_banc
  FROM dual;

  lv_reg_ccc_movim_banca.num_lote:=p_num_lote;
  lv_reg_ccc_movim_banca.subp_oid_marc_crea:=lv_oid_subp_regu;
  lv_reg_ccc_movim_banca.tcab_oid_abon_crea:=lv_oid_tcab_regu;
  lv_reg_ccc_movim_banca.cod_iden_proc:=gc_cod_iden_proc_tran;
  lv_reg_ccc_movim_banca.val_hora_norm_adic:='R';
  lv_reg_ccc_movim_banca.val_obse := p_oid_movi_banc;
  lv_reg_ccc_movim_banca.fec_proc:=TRUNC(SYSDATE);
  lv_reg_ccc_movim_banca.num_cons_tran:=p_num_cons_tran;
  lv_reg_ccc_movim_banca.val_hora_regu := SYSDATE;

  INSERT INTO ccc_movim_banca VALUES lv_reg_ccc_movim_banca;

 EXCEPTION
  WHEN OTHERS THEN
   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(SQLERRM, 1, 250);
   raise_application_error(-20123,
                              'ERROR CCC_PR_REGUL_PAGO_BANCA: ' ||
                               ls_sqlerrm);

 END CCC_PR_REGUL_PAGO_BANCA;
 
    PROCEDURE CCC_PR_REGUL_PAGO_BANCA(
  p_num_lote                      ccc_movim_banca.num_lote%TYPE,
  p_oid_movi_banc                 ccc_movim_banca.oid_movi_banc%TYPE,
  p_num_cons_tran                 ccc_movim_banca.num_cons_tran%TYPE,
  p_cod_clie                      mae_clien.cod_clie%TYPE,
  p_monto                        VARCHAR2)-- ccc_movim_banca.imp_pago%TYPE  )
  
 IS

  lv_reg_ccc_movim_banca                 ccc_movim_banca%ROWTYPE;
  lv_oid_clie                                                 mae_clien.oid_clie%TYPE;
  lv_oid_subp_regu                      ccc_subpr.oid_subp%TYPE;
  lv_oid_tcab_regu                      ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;

 BEGIN

  -- Obteniendo el Oid de Cliente
  SELECT  mc.oid_clie
  INTO lv_oid_clie
  FROM mae_clien mc
  WHERE mc.cod_clie = p_cod_clie;

  -- Obteniendo el Proceso bancario de Regularizacion --
  SELECT cs.oid_subp, tas.tcab_oid_tcab
  INTO lv_oid_subp_regu,lv_oid_tcab_regu
  FROM
     ccc_proce cp,
     ccc_subpr cs,
     ccc_tipo_abono_subpr tas
  WHERE cp.oid_proc=cs.ccpr_oid_proc
    AND tas.subp_oid_subp=cs.oid_subp
    AND cp.cod_proc =   gc_cod_proc_banc
    AND cs.cod_subp =  gc_cod_subp_regu;

  -- Regularizando
  UPDATE ccc_movim_banca mb
  SET
   mb.clie_oid_clie = lv_oid_clie,
   mb.cod_cons = p_cod_clie,
   mb.cod_iden_proc = gc_cod_iden_proc_erro,
   mb.val_hora_norm_adic = 'P',
   mb.ind_pago_regu = 1
  WHERE mb.oid_movi_banc = p_oid_movi_banc;

  SELECT mb.*
  INTO lv_reg_ccc_movim_banca
  FROM ccc_movim_banca mb
  WHERE mb.oid_movi_banc = p_oid_movi_banc;

  SELECT ccc_cmba_seq.nextval
  INTO lv_reg_ccc_movim_banca.oid_movi_banc
  FROM dual;

  lv_reg_ccc_movim_banca.num_lote:=p_num_lote;
  lv_reg_ccc_movim_banca.subp_oid_marc_crea:=lv_oid_subp_regu;
  lv_reg_ccc_movim_banca.tcab_oid_abon_crea:=lv_oid_tcab_regu;
  lv_reg_ccc_movim_banca.cod_iden_proc:=gc_cod_iden_proc_tran;
  lv_reg_ccc_movim_banca.val_hora_norm_adic:='R';
  lv_reg_ccc_movim_banca.val_obse := p_oid_movi_banc;
  lv_reg_ccc_movim_banca.fec_proc:=TRUNC(SYSDATE);
  lv_reg_ccc_movim_banca.num_cons_tran:=p_num_cons_tran;
  lv_reg_ccc_movim_banca.val_hora_regu := SYSDATE;
  
  IF (to_number(p_monto,'99999999.99') <> 0) THEN
    
    lv_reg_ccc_movim_banca.imp_pago := to_number(p_monto,'99999999.99');
  END IF; 
    
  INSERT INTO ccc_movim_banca VALUES lv_reg_ccc_movim_banca;

 EXCEPTION
  WHEN OTHERS THEN
   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(SQLERRM, 1, 250);
   raise_application_error(-20123,
                              'ERROR CCC_PR_REGUL_PAGO_BANCA: ' ||
                               ls_sqlerrm);

 END CCC_PR_REGUL_PAGO_BANCA;

 PROCEDURE CCC_PR_ELIMI_REGUL_PAGO_BANCA(
  p_oid_movi_banc                  IN   ccc_movim_banca.oid_movi_banc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

 BEGIN

  INSERT INTO ccc_gesti_movim_banca
   SELECT
    mb.oid_movi_banc,     -- oid_movi_banc  number(12)
    gc_gest_movi_banc_elim,                  -- val_tipo_gest  varchar2(2)
    p_cod_usua,           -- cod_usua_gest  varchar2(20)
    SYSDATE               -- fec_gest  date
   FROM ccc_movim_banca mb
   WHERE mb.oid_movi_banc = p_oid_movi_banc;

  UPDATE ccc_movim_banca mb
  SET mb.ind_elim = 1
  WHERE mb.oid_movi_banc = p_oid_movi_banc;

 EXCEPTION
  WHEN OTHERS THEN
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_ELIMI_REGUL_PAGO_BANCA;

   /***************************************************************************
    Descripcion       : Elimina la informacion de las tablas de cargos y abonos
                        directos masivos (CCC_CARGA_CARGO_ABONO_MASIV).
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
   PROCEDURE CCC_PR_ELIMI_CARGO_ABONO_MASIV(
      p_num_lote                            IN       VARCHAR2)
   IS
   BEGIN

      DELETE FROM CCC_CARGA_CARGO_ABONO_MASIV
      WHERE num_lote = p_num_lote;

   END CCC_PR_ELIMI_CARGO_ABONO_MASIV;

   /***************************************************************************
    Descripcion       : Valida la informacion cargada en la tabla de carga de
                        cargo y abonos directos masivos (CCC_CARGA_CARGO_ABONO_MASIV).
    Fecha Creacion    : 22/05/2009
    Autor             : Jorge Florencio
   ***************************************************************************/
 PROCEDURE CCC_PR_VALID_CARGO_ABONO_MASIV(
  p_ind_tipo_carg                  IN   VARCHAR2,
  p_num_lote                       IN   VARCHAR2,
  p_cant_regi_carg                 OUT  VARCHAR2,
  p_imp_tota_carg                  OUT  VARCHAR2,
  p_cod_error                      OUT  VARCHAR2)
 IS

  CURSOR c_carga_cad_masiv
  IS
   SELECT *
   FROM   CCC_CARGA_CARGO_ABONO_MASIV
   WHERE num_lote = p_num_lote
   ORDER  BY VAL_FILA;

  TYPE t_tab_ccc_carga_cad_masiv   IS TABLE OF CCC_CARGA_CARGO_ABONO_MASIV%ROWTYPE;
  lv_tab_ccc_carga_cad_masiv       t_tab_ccc_carga_cad_masiv;
  lv_reg_ccc_carga_cad_masiv       ccc_carga_cargo_abono_masiv%ROWTYPE;
  lv_reg_ccc_error_cad_masiv       ccc_error_cargo_abono_masiv%ROWTYPE;

  lv_imp_movi                      NUMBER;
  lv_cant_erro                     NUMBER;
  lv_ind_codi_vali                 NUMBER(1);
  lv_cod_clie                      mae_clien.cod_clie%TYPE;
  lv_oid_clie                      mae_clien.oid_clie%TYPE;
  lv_oid_terr_admi                 zon_terri_admin.oid_terr_admi%TYPE;
  lv_oid_tipo_clie                 mae_tipo_clien.oid_tipo_clie%TYPE;
  lv_long_docu_iden                NUMBER;

 BEGIN

  lv_reg_ccc_error_cad_masiv.num_lote := p_num_lote;

  lv_long_docu_iden := TO_NUMBER(CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('LongitudDocumentoIdentidad'));

  OPEN c_carga_cad_masiv;
  LOOP
   FETCH c_carga_cad_masiv BULK COLLECT INTO lv_tab_ccc_carga_cad_masiv LIMIT W_FILAS;
    IF lv_tab_ccc_carga_cad_masiv.COUNT > 0 THEN

     FOR x IN lv_tab_ccc_carga_cad_masiv.FIRST .. lv_tab_ccc_carga_cad_masiv.LAST LOOP
                  lv_reg_ccc_carga_cad_masiv := lv_tab_ccc_carga_cad_masiv(x);
                  lv_reg_ccc_error_cad_masiv.val_fila := lv_reg_ccc_carga_cad_masiv.Val_Fila;

      lv_ind_codi_vali := 0;

                  --01) Validando los datos Obligatorios
                  IF (lv_reg_ccc_carga_cad_masiv.cod_clie IS NULL) THEN
                     lv_reg_ccc_error_cad_masiv.cod_erro := '01';
                     lv_reg_ccc_error_cad_masiv.des_erro := 'Dato oblligatorio en nulo - Codigo Consultora';

                     INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;

                  ELSE

       BEGIN

                     --02) El codigo consultora no existe
        IF p_ind_tipo_carg <> gc_ind_tipo_carg_cedu THEN

                     BEGIN

          SELECT mc.oid_clie , mc.cod_clie
          INTO lv_oid_clie, lv_cod_clie
                        FROM mae_clien mc
                        WHERE mc.cod_clie=lv_reg_ccc_carga_cad_masiv.cod_clie;

          lv_ind_codi_vali:=1;

         EXCEPTION

          WHEN NO_DATA_FOUND THEN
           lv_reg_ccc_error_cad_masiv.cod_erro := '02';
           lv_reg_ccc_error_cad_masiv.des_erro := 'Codigo de Consultora ' || lv_reg_ccc_carga_cad_masiv.cod_clie || ' No Existe';

           INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;

         END;

        ELSE

         -- Validacion por Documento de Identidad
         BEGIN

          SELECT mc.oid_clie, mc.cod_clie
          INTO lv_oid_clie, lv_cod_clie
          FROM
           mae_clien mc,
           mae_clien_ident mci
          WHERE mc.oid_clie = mci.clie_oid_clie
            AND mci.num_docu_iden = LPAD(lv_reg_ccc_carga_cad_masiv.cod_clie,lv_long_docu_iden,'0');

          UPDATE ccc_carga_cargo_abono_masiv cam
          SET cam.cod_clie = lv_cod_clie
          WHERE cam.val_fila = lv_reg_ccc_carga_cad_masiv.val_fila;

          lv_ind_codi_vali:=1;

         EXCEPTION

          WHEN no_data_found THEN
            lv_reg_ccc_error_cad_masiv.cod_erro := '02';
            lv_reg_ccc_error_cad_masiv.des_erro := 'Documento de Identidad ' || lv_reg_ccc_carga_cad_masiv.cod_clie  || ' No existe';

           INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;

         END;

      END IF;

      END;
    END IF;


    IF lv_ind_codi_vali = 1 THEN

                        --03) Validacion de la Unidad Administrativa Activa
                        BEGIN

                           SELECT mcua.ztad_oid_terr_admi
                           INTO lv_oid_terr_admi
      FROM
       mae_clien mc,
                                      mae_clien_unida_admin  mcua
                           WHERE mc.oid_clie  = mcua.clie_oid_clie
                                AND mcua.ind_acti = 1
           AND mc.cod_clie = lv_cod_clie;

                        EXCEPTION
                          WHEN NO_DATA_FOUND THEN

                             lv_reg_ccc_error_cad_masiv.cod_erro := '03';
          lv_reg_ccc_error_cad_masiv.des_erro := 'Consultora ' || lv_cod_clie || ' No tiene Unidad Administrativa Activa';

                             INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;

                           WHEN too_many_rows THEN

                               lv_reg_ccc_error_cad_masiv.cod_erro := '04';
          lv_reg_ccc_error_cad_masiv.des_erro := 'Consultora ' || lv_cod_clie || ' tiene mas de una Unidad Administrativa Activa';

                               INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;

                        END;

                        --04) Validacion de la Tipologia del Cliente
                        BEGIN

                           SELECT mtc.oid_tipo_clie
                           INTO lv_oid_tipo_clie
                           FROM
                              mae_clien mc,
                              mae_clien_tipo_subti mcts,
                              mae_tipo_clien mtc
                           WHERE mc.oid_clie = mcts.clie_oid_clie
                                AND mtc.oid_tipo_clie = mcts.ticl_oid_tipo_clie
                                AND mtc.cod_tipo_clie = '02'
                                AND mcts.ind_ppal=1
                                AND mc.cod_clie = lv_cod_clie;

                          EXCEPTION

                             WHEN NO_DATA_FOUND THEN

                                 lv_reg_ccc_error_cad_masiv.cod_erro := '04';
          lv_reg_ccc_error_cad_masiv.des_erro := 'Codigo ' || lv_cod_clie || ' Ingresado No Pertenece al Tipo Cliente Consultora';

                                 INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;

                              WHEN too_many_rows THEN

                                 lv_reg_ccc_error_cad_masiv.cod_erro := '04';
          lv_reg_ccc_error_cad_masiv.des_erro := 'Consultora ' || lv_cod_clie || ' tiene mas de una Tipologia de Cliente Activa';

                                 INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;

                          END;

      END IF;




                  IF (lv_reg_ccc_carga_cad_masiv.imp_movi IS NULL) THEN
                     lv_reg_ccc_error_cad_masiv.cod_erro := '01';
                     lv_reg_ccc_error_cad_masiv.des_erro := 'Dato oblligatorio en nulo - Importe CAD';

                     INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;


                  ELSE

                     --06) El Importe de Pago es Incorrecto
                     BEGIN

                        IF (lv_reg_ccc_carga_cad_masiv.imp_movi = 0) THEN
                            lv_reg_ccc_error_cad_masiv.cod_erro := '06';
                            lv_reg_ccc_error_cad_masiv.des_erro := 'Dato no es numerico - Importe Movimiento : ' || lv_reg_ccc_carga_cad_masiv.imp_movi_vali ;

                            INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;

                        END IF;

                        IF (lv_reg_ccc_carga_cad_masiv.imp_movi IS NOT NULL) AND (lv_reg_ccc_carga_cad_masiv.imp_movi <> 0) THEN
                           lv_imp_movi := TO_NUMBER(lv_reg_ccc_carga_cad_masiv.imp_movi_vali,'9999999999.99');

                     END IF;

                     EXCEPTION
                        WHEN VALUE_ERROR THEN
                            lv_reg_ccc_error_cad_masiv.cod_erro := '06';
                            lv_reg_ccc_error_cad_masiv.des_erro := 'Dato no es numerico - Importe Movimiento : ' || lv_reg_ccc_carga_cad_masiv.imp_movi_vali ;

                            INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;

                    END;

                  END IF;

          END LOOP;

       END IF;

      EXIT WHEN c_carga_cad_masiv%NOTFOUND;
         END LOOP;
      CLOSE c_carga_cad_masiv;

      SELECT COUNT(*)
      INTO  lv_cant_Erro
      FROM  ccc_error_cargo_abono_masiv
      WHERE num_lote = p_num_lote;

       p_cod_error := lv_cant_Erro;

  SELECT
   TO_CHAR(COUNT(*)),
   TO_CHAR(SUM(cad.imp_movi))
  INTO
   p_cant_regi_carg ,
   p_imp_tota_carg
  FROM ccc_carga_cargo_abono_masiv cad
  WHERE cad.num_lote = p_num_lote;

 EXCEPTION
  WHEN OTHERS THEN
   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(sqlerrm,1,250);
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_VALID_CARGO_ABONO_MASIV: '||ls_sqlerrm);

 END CCC_PR_VALID_CARGO_ABONO_MASIV;

 /***************************************************************************
  Descripcion       : Procesa los cargos o abonos directos cargados en
                        la tabla de carga de cargos y abonos directos masivos
                        (CCC_CARGA_CARGO_ABONO_MASIV).
  Fecha Creacion    : 22/05/2009
  Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_PROCE_CARGO_ABONO_MASIV(
  p_cod_pais                       IN   seg_pais.cod_pais%TYPE,
  p_cod_peri                       IN   seg_perio_corpo.cod_peri%TYPE,
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_fec_venc                       IN   VARCHAR2,
  p_num_lote                       IN   VARCHAR2,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_oid_mone                      seg_pais.mone_oid_mone%TYPE;
  lv_oid_suba                      seg_subac.oid_sbac%TYPE;
  lv_oid_subg_vent                 zon_sub_geren_venta.oid_subg_vent%TYPE;
  lv_oid_marc                      seg_marca.oid_marc%TYPE;
  lv_oid_cana                      seg_canal.oid_cana%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_oid_tipo_peri                 seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
  lv_oid_cabe_carg_crea            ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_fec_docu                      DATE;
  lv_fec_venc                      DATE;

  lv_oid_proc                   ccc_proce.oid_proc%TYPE;
  lv_oid_subp                   ccc_subpr.oid_subp%TYPE;
  lv_num_anio_crea              ccc_cabec_carga_abono_direc.anio%TYPE;
  lv_num_mes_crea               ccc_cabec_carga_abono_direc.val_peri_mes%TYPE;
  lv_num_cabe_crea              ccc_cabec_carga_abono_direc.num_cabe%TYPE;
  lv_num_iden_cuot_inic         ccc_numer_ident_cuota.val_ulti_nume_iden_cuot%TYPE;

  lv_indi_tipo_abon             ccc_subpr.val_indi_tipo_abon%TYPE;
  lv_fact_indi_cons             NUMBER(1);
  lv_val_indi_cons              ccc_subpr.val_indi_cons%TYPE;
  lv_oid_tipo_carg_abon         ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
  lv_oid_cuen_cont              ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
  lv_oid_marc_situ              ccc_marca_situa.oid_marc_situ%TYPE;
  lv_oid_acti                   cra_activ.oid_acti%TYPE;
  lv_cod_peri_sgte              seg_perio_corpo.cod_peri%TYPE;
  lv_oid_peri_sgte              cra_perio.oid_peri%TYPE;

  e_para_null_proc              EXCEPTION;

  CURSOR cur_cad_masi
  IS
   SELECT
    ccc_mvcc_seq.NEXTVAL,                    -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
    lv_oid_soci,                             -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
    lv_oid_marc_situ,                        -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
    lv_oid_mone,                             -- MONE_OID_MONE            NUMBER(12),
    lv_oid_peri,                             -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
    lv_oid_tipo_carg_abon,                   -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
    lv_oid_tipo_carg_abon,                   -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
    lv_oid_suba,                             -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
    lv_oid_subp,                             -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
    lv_oid_subp,                             -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
    lv_oid_cuen_cont,                        -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
    lv_oid_cuen_cont,                        -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
    cli.oid_clie,                            -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
    lv_num_anio_crea,                        -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
    lv_num_mes_crea,                         -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
    lv_num_cabe_crea,                        -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
    lv_num_anio_crea,                        -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
    NULL,                                    -- FEC_CONTA                DATE,
    lv_fec_docu,                            -- FEC_DOCU                 DATE                 NOT NULL,
    lv_fec_docu,                            -- FEC_ULTI_MOVI            DATE                 NOT NULL,
    lv_fec_docu,                            -- FEC_VALO                 DATE,
    CASE
     WHEN lv_fec_venc IS NOT NULL
      THEN  lv_fec_venc
      ELSE
       NVL((SELECT CRO.FEC_INIC
            FROM CRA_CRONO CRO
            WHERE CRO.ZZON_OID_ZONA = zon.oid_zona
              AND CRO.PERD_OID_PERI = lv_oid_peri_sgte
              AND CRO.CACT_OID_ACTI = lv_oid_acti),TRUNC(SYSDATE))
     END CASE,                         -- FEC_VENC                 DATE                 NOT NULL,
     ABS(cad.imp_movi)*lv_fact_indi_cons,--TO_NUMBER(ABS(cad.imp_movi),'9999999999.99')*lv_fact_indi_cons, -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
     0,                                       -- IMP_DIVI                 NUMBER(12,2),
     0,                                       -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
     0,                                       -- IMP_PAGA_DIVI            NUMBER(12,2),
     ABS(cad.imp_movi)*lv_fact_indi_cons,--TO_NUMBER(ABS(cad.imp_movi),'9999999999.99')*lv_fact_indi_cons, -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
     lv_num_iden_cuot_inic + ROWNUM -1,       -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
     NULL,                                    -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
     1,                                       -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
     cad.val_obse,                                    -- VAL_OBSE                 VARCHAR2(100 BYTE),
     NULL,                                    -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
     lv_num_anio_crea,                        -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
     lv_num_mes_crea,                         -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
     lv_num_cabe_crea,                        -- VAL_ULTI_DOCU_NUME       NUMBER(8),
     0,                                       -- VAL_ULTI_NUME_HIST       NUMBER(3),
     NULL,                                    -- MPAB_OID_MEDI_PAGO       NUMBER(12),
     ua.ztad_oid_terr_admi,                   -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
     tpc.ticl_oid_tipo_clie,                  -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
     lv_oid_marc,                             -- MARC_OID_MARC            NUMBER(12),
     0,                                       -- IMP_PAGO                 NUMBER(12,2),
     0,                                       -- IMP_PAGO_DIVI            NUMBER(12,2),
     ABS(cad.imp_movi)*lv_fact_indi_cons,--TO_NUMBER(ABS(cad.imp_movi),'9999999999.99')*lv_fact_indi_cons, -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
     0,                                       -- IMP_MOVI_DIVI            NUMBER(12,2),
     NULL,                                    -- NUM_LOTE_FACT            NUMBER(10),
     p_cod_usua,                                    -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
     1,                                       -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
     NULL,                                    -- IND_DTO_CARG_APLI        NUMBER(1),
     sec.oid_secc,                            -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
     lv_oid_subg_vent,                        -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
     NULL,                                    -- SOCA_OID_SOLI_CABE       NUMBER(12),
     tpc.sbti_oid_subt_clie,                  -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
     NULL,                                    -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
     lv_oid_tipo_peri,                        -- TIPE_OID_TIPO_PERI       NUMBER(12),
     zon.zorg_oid_regi,                       -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
     NULL,                                    -- TIDO_OID_TIPO_DOCU       NUMBER(12),
     SYSDATE,                                  -- FEC_ULTI_ACTU            DATE                 NOT NULL
     SYSDATE,                      -- VAL_HORA_CREA            DATE
     NULL,             -- OID_PERI_ORIG            NUMBER(12)
     0,                             -- IND_CARG_FRAC           NUMBER(1)
     0,                             -- IND_OC                   NUMBER(1)
     NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
     lv_fec_docu                     -- FEC_PROC                 DATE                 NOT NULL,
    FROM
     mae_clien cli,
     mae_clien_tipo_subti tpc,
     mae_clien_unida_admin ua,
     zon_terri_admin za,
     zon_secci sec,
     zon_zona zon,
     ccc_carga_cargo_abono_masiv cad
    WHERE cli.cod_clie = cad.cod_clie
      AND cli.oid_clie = tpc.clie_oid_clie
      AND tpc.ind_ppal = 1
      AND cli.oid_clie = ua.clie_oid_clie
      AND ua.ztad_oid_terr_admi = za.oid_terr_admi
      AND za.zscc_oid_secc = sec.oid_secc
      AND sec.zzon_oid_zona = zon.oid_zona
      AND ua.ind_acti = 1
      AND cad.num_lote = p_num_lote;


  lv_tab_ccc_movim_cuent_corri     t_tab_ccc_movim_cuent_corri;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_cant_cad_masi                 NUMBER(12);
  lv_cant_cad_proc                 NUMBER(12);
  lv_ind_proc_ejec                 NUMBER(1);

  TYPE t_tab_oid_movi_cc           IS TABLE OF ccc_movim_cuent_corri.oid_movi_cc%TYPE;
  TYPE t_tab_fec_docu              IS TABLE OF ccc_movim_cuent_corri.fec_docu%TYPE;
  TYPE t_tab_oid_clie              IS TABLE OF ccc_movim_cuent_corri.clie_oid_clie%TYPE;
  TYPE t_tab_imp_movi              IS TABLE OF ccc_movim_cuent_corri.imp_movi%TYPE;

  lv_tab_oid_movi_cc               t_tab_oid_movi_cc;
  lv_tab_fec_docu                  t_tab_fec_docu;
  lv_tab_oid_clie                  t_tab_oid_clie;
  lv_tab_imp_movi                  t_tab_imp_movi;

  lv_cod_erro                      VARCHAR2(250);

 BEGIN

    /* inicializa variables globales  para registro de log  */
    gv_log_cod_pais := p_cod_pais;
    gv_log_user     := p_cod_usua;
    gv_log_cod_modu := 'CCC';
    gv_log_cod_proc := '16';

    -- Valida si existen procesos en ejecucion --
    lv_ind_proc_ejec := FIN_PKG_GENER.FIN_FN_INDIC_PROCE_EJECU(gv_log_cod_pais,gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc);

    IF lv_ind_proc_ejec=1 THEN
       RAISE e_exis_proc_ejec;
    END IF;

    FIN_PKG_GENER.FIN_PR_REGIS_PROCE_LOG(gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec,lv_cod_erro);

    gv_des_log:='Inicio CCC_PR_PROCE_CARGO_ABONO_MASIV parametros :' ||
                  ' 1: '  || p_cod_pais ||
                  ' 2: '  ||  p_cod_peri  ||
                  ' 3: '  || p_oid_tipo_abon_subp ||
                  ' 4: '  || p_fec_venc    ||
                  ' 5: '  || p_num_lote    ||
                  ' 6: ' || p_cod_usua  ;

    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

    BEGIN

       lv_oid_pais := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_cod_pais);
       lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');
       lv_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);
       lv_oid_mone := FIN_PKG_GENER.FIN_FN_OBTIE_OID_MONED(p_cod_pais);
       lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);
       lv_oid_cana := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CANAL(gc_cod_cana);
       lv_oid_subg_vent := CCC_PKG_GENER.CCC_FN_OBTIE_OID_SUBGE_VENTA(lv_oid_pais,lv_oid_marc,gc_cod_sbac_cadi);
       lv_oid_suba := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SUBAC(gc_cod_sbac_cadi);
       lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_PERIO(p_cod_peri);
       lv_oid_tipo_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_TIPO_PERI(p_cod_peri);
       lv_fec_docu:=TO_DATE(TO_CHAR(SYSDATE,'DD/MM/YYYY'),'DD/MM/YYYY');

       IF p_fec_venc IS NOT NULL THEN
          lv_fec_venc:=TO_DATE(p_fec_venc,'DD/MM/YYYY');
       ELSE
          lv_fec_venc := NULL;

          -- Obtenemos el OID del periodo siguiente
          lv_cod_peri_sgte := GEN_FN_CALCU_PERIO(p_cod_peri, 1);
          lv_oid_peri_sgte := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CRA_PERIO(lv_cod_peri_sgte, lv_oid_marc, lv_oid_cana);

          -- Obtenemos el OID de la actividad
          SELECT ACT.OID_ACTI
          INTO lv_oid_acti
          FROM CRA_ACTIV ACT
          WHERE ACT.PAIS_OID_PAIS = lv_oid_pais
            AND ACT.MARC_OID_MARC = lv_oid_marc
            AND ACT.CANA_OID_CANA = lv_oid_Cana
            AND ACT.COD_ACTI = 'CV'; -- Cupon de Vencimiento

       END IF;

       gv_des_log:='   Los datos obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;

       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

       gv_des_log:='Inicio Obteniendo Parametria del Tipo de Abono por Subproceso';
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

       /*  Obtiene parametria relacionada al Tipo Abono Subproceso dado por parametro */
       CCC_PKG_GENER.CCC_PR_OBTIE_PARAM_TASUB(p_oid_tipo_abon_subp,lv_oid_proc,lv_oid_subp,lv_oid_cuen_cont,lv_indi_tipo_abon,lv_oid_marc_situ,lv_oid_tipo_carg_abon,lv_val_indi_cons);

       gv_des_log:='Fin Obteniendo parametria del Tipo de Abono por Subproceso';
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

    EXCEPTION
       WHEN no_data_found THEN
          RAISE e_para_null_proc;
    END;

    IF lv_val_indi_cons = 'D'  THEN
       lv_fact_indi_cons := 1;
    ELSE
       IF  lv_val_indi_cons = 'H' THEN
          lv_fact_indi_cons := -1;
       END IF;
    END IF;

    -- Crea cabecera
    gv_des_log:=' CCC_PR_CREA_CABEC_CARGO_ABONO ' ||
                           '  pais : ' || lv_oid_pais ||
                           '  sociedad : ' || lv_oid_soci ||
                           '  oid_proc : ' || lv_oid_proc ||
                           '  oid_tipo_abon_subp : ' || p_oid_tipo_abon_subp;
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                   gv_cod_proc_ejec, gv_des_log);
    CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(lv_oid_pais, lv_oid_soci, lv_oid_proc, p_oid_tipo_abon_subp, lv_oid_cabe_carg_crea,lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea);
    gv_des_log:=' Se crea la cabecera del CAD : ' || lv_oid_cabe_carg_crea ||
                           '  Anio : ' || lv_num_anio_crea ||
                           '  Mes : ' || lv_num_mes_crea ||
                           '  Docu : ' || lv_num_cabe_crea;

    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                   gv_cod_proc_ejec, gv_des_log);


    -- Obtener la cantidad de CAD Masivos a procesar
    SELECT COUNT(*)
    INTO lv_cant_cad_masi
    FROM ccc_carga_cargo_abono_masiv
    WHERE num_lote = p_num_lote;

    SELECT COUNT(*)
    INTO lv_cant_cad_proc
    FROM
       mae_clien cli,
       mae_clien_tipo_subti tpc,
       mae_clien_unida_admin ua,
       zon_terri_admin za,
       zon_secci sec,
       zon_zona zon,
       ccc_carga_cargo_abono_masiv cad
    WHERE cli.cod_clie = cad.cod_clie
      AND cli.oid_clie = tpc.clie_oid_clie
      AND tpc.ind_ppal = 1
      AND cli.oid_clie = ua.clie_oid_clie
      AND ua.ztad_oid_terr_admi = za.oid_terr_admi
      AND za.zscc_oid_secc = sec.oid_secc
      AND sec.zzon_oid_zona = zon.oid_zona
      AND ua.ind_acti = 1
      AND cad.num_lote = p_num_lote;

    IF lv_cant_cad_masi = lv_cant_cad_proc AND lv_cant_cad_masi > 0 THEN

       gv_des_log:='Cantidad de CAD a Procesar : ' || lv_cant_cad_masi;
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

       lv_num_iden_cuot_inic:=CCC_PKG_GENER.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(p_cod_pais,lv_cod_soci,gc_cod_sbac_cadi,lv_cant_cad_masi);
       gv_des_log:='Identificador de Cuota Inicial : ' || lv_num_iden_cuot_inic;
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,   gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


       OPEN cur_cad_masi;

       LOOP
          FETCH cur_cad_masi BULK COLLECT INTO  lv_tab_ccc_movim_cuent_corri LIMIT w_filas;

          IF lv_tab_ccc_movim_cuent_corri.COUNT > 0 THEN

             gv_des_log:='Inicio : Insertando en CCC_MOVIM_CUENT_CORRI ';
                                fin_pkg_gener.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

             FORALL x IN lv_tab_ccc_movim_cuent_corri.FIRST .. lv_tab_ccc_movim_cuent_corri.LAST
                INSERT INTO ccc_movim_cuent_corri VALUES lv_tab_ccc_movim_cuent_corri(x)
                RETURNING oid_movi_cc ,
                          fec_docu,
                          clie_oid_clie,
                          imp_movi
                BULK COLLECT INTO lv_tab_oid_movi_cc,
                                  lv_tab_fec_docu,
                                  lv_tab_oid_clie,
                                  lv_tab_imp_movi;

              gv_des_log:=' Registros insertados en CCC_MOVIM_CUENT_CORRI: ' || SQL%ROWCOUNT;
              fin_pkg_gener.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

              gv_des_log:='Inicio : Insertando en CCC_DETAL_CARGO_ABONO_DIREC : ';
              fin_pkg_gener.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

             FORALL i IN 1 .. lv_tab_oid_movi_cc.COUNT
                INSERT INTO ccc_detal_cargo_abono_direc
                   VALUES (
                      ccc_dcad_seq.nextval,                      -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
                      lv_oid_cabe_carg_crea,                     --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
                      lv_tab_oid_clie(i),                        --  CLIE_OID_CLIE                 NUMBER(12),
                      1507,                                      --  NUM_LINE                      NUMBER(6),
                      0,                                         --  NUM_HIST_GENE                 NUMBER(3),
                      lv_tab_fec_docu(i),                        --  FEC_MOVI                      DATE,
                      0,                                         --  IMP_MONE                      NUMBER(12,2),
                      lv_tab_imp_movi(i)*lv_fact_indi_cons ,     --  IMP                           NUMBER(12,2),
                      NULL,                                      --  VAL_REFE                      VARCHAR2(20 BYTE),
                      p_num_lote,                                      --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
                      NULL,                                      --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
                      lv_oid_mone,                               --  MONE_OID_MONE                 NUMBER(12),
                      NULL,                                      --  CMBA_OID_MOVI_BANC            NUMBER(12),
                      NULL,                                      --  MPAB_OID_MEDI_PAGO            NUMBER(12),
                      lv_oid_cuen_cont,                          --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
                      lv_oid_cuen_cont,                          --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
                      lv_tab_oid_movi_cc(i),                     --  MVCC_OID_MOVI_CC              NUMBER(12),
                      NULL,                                      --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
                      NULL,                                      --  FEC_PAGO_BANC                 DATE,
                      p_cod_usua,                                      --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
                      lv_oid_soci,                               --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
                      p_oid_tipo_abon_subp,                      -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
                      SYSDATE) ;                                 --  FEC_CREA                      DATE            NOT NULL

                      gv_des_log:=' Registros insertados en CCC_DETAL_CARGO_ABONO_DIREC : ' || SQL%ROWCOUNT;
                      fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


            gv_des_log:='Inicio : Aplicando los CAD en Cuenta Corriente ';
            fin_pkg_gener.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

            FOR j IN lv_tab_oid_clie.FIRST .. lv_tab_oid_clie.LAST
            LOOP
               CCC_PR_APLIC_ABONO_CARGO_CLIEN(lv_tab_oid_clie(j));
            END LOOP;

            gv_des_log:='Fin: Aplicando los CAD en Cuenta Corriente ';
            fin_pkg_gener.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

          END IF;

          EXIT WHEN cur_cad_masi%NOTFOUND;
       END LOOP;
       CLOSE cur_cad_masi;


       -- Aplicando la Cuenta Corriente --
       --CCC_PR_APLIC_CABEC_CARGO_ABONO(p_cod_pais,p_cod_soci,lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea,p_cod_usua );

       -- Liberando el Secuencial de CCC ---
       CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(p_cod_pais, lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea);

       gv_des_log:='Inicio :Registrando en el Historico de Cargos Procesados';
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

       INSERT INTO ccc_histo_cargo_abono_masiv
          SELECT *
          FROM ccc_carga_cargo_abono_masiv c
          WHERE c.num_lote = p_num_lote;

       DELETE FROM ccc_carga_cargo_abono_masiv  cdm
       WHERE cdm.num_lote=p_num_lote;

       gv_des_log:='Fin CCC_PR_CARGA_CARGO_ABONO_MASIV';
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

       FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

    ELSE

       gv_des_log:='No coincide el numero de registros a insertar : CAD Original : ' ||
       lv_cant_cad_masi || '  CAD a Procesar : ' || lv_cant_cad_proc ;
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
       RAISE e_no_coin_nume_regi;

    END IF;


 EXCEPTION
    WHEN e_exis_proc_ejec THEN
       RAISE_application_error(-20123,
                              'ERROR CCC_PR_PROCE_CARGO_ABONO_MASIV: ' ||
                               ls_sqlerrm);

    WHEN e_para_null_proc THEN
       gv_des_log:='   Error en Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ||
                  ' 9 lv_fec_docu :' || lv_fec_docu ||
                  ' 10 lv_fec_venc :' || lv_fec_venc ;

            FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
            gv_des_log:='Fin del proceso de manera erronea';
           FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
            RAISE_application_error(-20123,
                              'ERROR CCC_PR_PROCE_CARGO_ABONO_MASIV: ' ||
                               ls_sqlerrm);

    WHEN e_no_coin_nume_regi THEN
       FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
       RAISE_application_error(-20123,
                              'ERROR CCC_PR_PROCE_CARGO_ABONO_MASIV: ' ||
                               ls_sqlerrm);

    WHEN OTHERS THEN
       gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** CCC_PR_PROCE_CARGO_ABONO_MASIV Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );


 END CCC_PR_PROCE_CARGO_ABONO_MASIV;

 PROCEDURE CCC_PR_PROCE_CARGO_ABONO_INTER(
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_fec_docu                       IN   DATE,
  p_num_lote                       IN   VARCHAR2,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_oid_mone                      seg_pais.mone_oid_mone%TYPE;
  lv_oid_suba                      seg_subac.oid_sbac%TYPE;
  lv_oid_subg_vent                 zon_sub_geren_venta.oid_subg_vent%TYPE;
  lv_oid_marc                      seg_marca.oid_marc%TYPE;  
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_oid_tipo_peri                 seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
  lv_oid_cabe_carg_crea            ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_fec_docu                      DATE;
  lv_fec_venc                      DATE;

  lv_oid_proc                      ccc_proce.oid_proc%TYPE;
  lv_oid_subp                      ccc_subpr.oid_subp%TYPE;
  lv_num_anio_crea                 ccc_cabec_carga_abono_direc.anio%TYPE;
  lv_num_mes_crea                  ccc_cabec_carga_abono_direc.val_peri_mes%TYPE;
  lv_num_cabe_crea                 ccc_cabec_carga_abono_direc.num_cabe%TYPE;
  lv_num_iden_cuot_inic            ccc_numer_ident_cuota.val_ulti_nume_iden_cuot%TYPE;

  lv_indi_tipo_abon                ccc_subpr.val_indi_tipo_abon%TYPE;
  lv_fact_indi_cons                NUMBER(1);
  lv_val_indi_cons                 ccc_subpr.val_indi_cons%TYPE;
  lv_oid_tipo_carg_abon            ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
  lv_oid_cuen_cont                 ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
  lv_oid_marc_situ                 ccc_marca_situa.oid_marc_situ%TYPE;
  lv_oid_acti                      cra_activ.oid_acti%TYPE;
  lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;  
  lv_oid_peri_sgte                 cra_perio.oid_peri%TYPE;

  e_para_null_proc                 EXCEPTION;

  CURSOR cur_cad_masi
  IS
   SELECT
    ccc_mvcc_seq.NEXTVAL,                    -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
    lv_oid_soci,                             -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
    lv_oid_marc_situ,                        -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
    lv_oid_mone,                             -- MONE_OID_MONE            NUMBER(12),
    lv_oid_peri,                             -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
    lv_oid_tipo_carg_abon,                   -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
    lv_oid_tipo_carg_abon,                   -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
    lv_oid_suba,                             -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
    lv_oid_subp,                             -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
    lv_oid_subp,                             -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
    lv_oid_cuen_cont,                        -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
    lv_oid_cuen_cont,                        -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
    cli.oid_clie,                            -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
    lv_num_anio_crea,                        -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
    lv_num_mes_crea,                         -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
    lv_num_cabe_crea,                        -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
    lv_num_anio_crea,                        -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
    NULL,                                    -- FEC_CONTA                DATE,
    lv_fec_docu,                            -- FEC_DOCU                 DATE                 NOT NULL,
    lv_fec_docu,                            -- FEC_ULTI_MOVI            DATE                 NOT NULL,
    lv_fec_docu,                            -- FEC_VALO                 DATE,
    CASE
     WHEN lv_fec_venc IS NOT NULL
      THEN  lv_fec_venc
      ELSE
       NVL((SELECT CRO.FEC_INIC
            FROM CRA_CRONO CRO
            WHERE CRO.ZZON_OID_ZONA = zon.oid_zona
              AND CRO.PERD_OID_PERI = lv_oid_peri_sgte
              AND CRO.CACT_OID_ACTI = lv_oid_acti),TRUNC(SYSDATE))
     END CASE,                         -- FEC_VENC                 DATE                 NOT NULL,
     ABS(cad.imp_movi)*lv_fact_indi_cons,--TO_NUMBER(ABS(cad.imp_movi),'9999999999.99')*lv_fact_indi_cons, -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
     0,                                       -- IMP_DIVI                 NUMBER(12,2),
     0,                                       -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
     0,                                       -- IMP_PAGA_DIVI            NUMBER(12,2),
     ABS(cad.imp_movi)*lv_fact_indi_cons,--TO_NUMBER(ABS(cad.imp_movi),'9999999999.99')*lv_fact_indi_cons, -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
     lv_num_iden_cuot_inic + ROWNUM -1,       -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
     NULL,                                    -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
     1,                                       -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
     cad.val_obse,                                    -- VAL_OBSE                 VARCHAR2(100 BYTE),
     NULL,                                    -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
     lv_num_anio_crea,                        -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
     lv_num_mes_crea,                         -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
     lv_num_cabe_crea,                        -- VAL_ULTI_DOCU_NUME       NUMBER(8),
     0,                                       -- VAL_ULTI_NUME_HIST       NUMBER(3),
     NULL,                                    -- MPAB_OID_MEDI_PAGO       NUMBER(12),
     ua.ztad_oid_terr_admi,                   -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
     tpc.ticl_oid_tipo_clie,                  -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
     lv_oid_marc,                             -- MARC_OID_MARC            NUMBER(12),
     0,                                       -- IMP_PAGO                 NUMBER(12,2),
     0,                                       -- IMP_PAGO_DIVI            NUMBER(12,2),
     ABS(cad.imp_movi)*lv_fact_indi_cons,--TO_NUMBER(ABS(cad.imp_movi),'9999999999.99')*lv_fact_indi_cons, -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
     0,                                       -- IMP_MOVI_DIVI            NUMBER(12,2),
     NULL,                                    -- NUM_LOTE_FACT            NUMBER(10),
     p_cod_usua,                                    -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
     1,                                       -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
     NULL,                                    -- IND_DTO_CARG_APLI        NUMBER(1),
     sec.oid_secc,                            -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
     lv_oid_subg_vent,                        -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
     NULL,                                    -- SOCA_OID_SOLI_CABE       NUMBER(12),
     tpc.sbti_oid_subt_clie,                  -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
     NULL,                                    -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
     lv_oid_tipo_peri,                        -- TIPE_OID_TIPO_PERI       NUMBER(12),
     zon.zorg_oid_regi,                       -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
     NULL,                                    -- TIDO_OID_TIPO_DOCU       NUMBER(12),
     SYSDATE,                                  -- FEC_ULTI_ACTU            DATE                 NOT NULL
     SYSDATE,                      -- VAL_HORA_CREA            DATE
     NULL,             -- OID_PERI_ORIG            NUMBER(12)
     0,                             -- IND_CARG_FRAC           NUMBER(1)
     0,                             -- IND_OC                   NUMBER(1)
     NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
     lv_fec_docu                     -- FEC_PROC                 DATE                 NOT NULL,
    FROM
     mae_clien cli,
     mae_clien_tipo_subti tpc,
     mae_clien_unida_admin ua,
     zon_terri_admin za,
     zon_secci sec,
     zon_zona zon,
     ccc_carga_cargo_abono_masiv cad
    WHERE cli.cod_clie = cad.cod_clie
      AND cli.oid_clie = tpc.clie_oid_clie
      AND tpc.ind_ppal = 1
      AND cli.oid_clie = ua.clie_oid_clie
      AND ua.ztad_oid_terr_admi = za.oid_terr_admi
      AND za.zscc_oid_secc = sec.oid_secc
      AND sec.zzon_oid_zona = zon.oid_zona
      AND ua.ind_acti = 1
      AND cad.num_lote = p_num_lote;


  lv_tab_ccc_movim_cuent_corri     t_tab_ccc_movim_cuent_corri;
  lv_cant_cad_masi                 NUMBER(12);
  lv_cant_cad_proc                 NUMBER(12);
  lv_ind_proc_ejec                 NUMBER(1);

  TYPE t_tab_oid_movi_cc           IS TABLE OF ccc_movim_cuent_corri.oid_movi_cc%TYPE;
  TYPE t_tab_fec_docu              IS TABLE OF ccc_movim_cuent_corri.fec_docu%TYPE;
  TYPE t_tab_oid_clie              IS TABLE OF ccc_movim_cuent_corri.clie_oid_clie%TYPE;
  TYPE t_tab_imp_movi              IS TABLE OF ccc_movim_cuent_corri.imp_movi%TYPE;

  lv_tab_oid_movi_cc               t_tab_oid_movi_cc;
  lv_tab_fec_docu                  t_tab_fec_docu;
  lv_tab_oid_clie                  t_tab_oid_clie;
  lv_tab_imp_movi                  t_tab_imp_movi;

  lv_cod_erro                      VARCHAR2(250);

 BEGIN
  
  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');
  lv_cod_peri := FIN_PKG_GENER.FIN_FN_OBTIE_CODIG_PERIO_ACTUA;
  
  /* inicializa variables globales  para registro de log  */
  gv_log_cod_pais := lv_cod_pais;
  gv_log_user     := lv_cod_soci;
  gv_log_cod_modu := 'CCC';
  gv_log_cod_proc := '16';

  -- Valida si existen procesos en ejecucion --
  lv_ind_proc_ejec := FIN_PKG_GENER.FIN_FN_INDIC_PROCE_EJECU(gv_log_cod_pais,gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc);

  IF lv_ind_proc_ejec=1 THEN
   RAISE e_exis_proc_ejec;
  END IF;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_LOG(gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio CCC_PR_PROCE_CARGO_ABONO_MASIV parametros :' ||             
                  ' 1: '  || p_oid_tipo_abon_subp ||
                  ' 2: '  || p_fec_docu    ||
                  ' 3: '  || p_num_lote    ||
                  ' 4: ' || p_cod_usua  ;

  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  BEGIN

   lv_oid_pais := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);
   lv_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);
   lv_oid_mone := FIN_PKG_GENER.FIN_FN_OBTIE_OID_MONED(lv_cod_pais);
   lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);   
   lv_oid_subg_vent := CCC_PKG_GENER.CCC_FN_OBTIE_OID_SUBGE_VENTA(lv_oid_pais,lv_oid_marc,gc_cod_sbac_cadi);
   lv_oid_suba := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SUBAC(gc_cod_sbac_cadi);
   lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_PERIO(lv_cod_peri);
   lv_oid_tipo_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_TIPO_PERI(lv_cod_peri);
   lv_fec_docu:= p_fec_docu;
   lv_fec_venc:= lv_fec_docu;          
  
   gv_des_log:='   Los datos obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;

   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='Inicio Obteniendo Parametria del Tipo de Abono por Subproceso';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   /*  Obtiene parametria relacionada al Tipo Abono Subproceso dado por parametro */
   CCC_PKG_GENER.CCC_PR_OBTIE_PARAM_TASUB(p_oid_tipo_abon_subp,lv_oid_proc,lv_oid_subp,lv_oid_cuen_cont,lv_indi_tipo_abon,lv_oid_marc_situ,lv_oid_tipo_carg_abon,lv_val_indi_cons);

   gv_des_log:='Fin Obteniendo parametria del Tipo de Abono por Subproceso';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  EXCEPTION
   WHEN no_data_found THEN
    RAISE e_para_null_proc;
  END;

  IF lv_val_indi_cons = 'D'  THEN
   lv_fact_indi_cons := 1;
  ELSE
   IF  lv_val_indi_cons = 'H' THEN
    lv_fact_indi_cons := -1;
   END IF;
  END IF;

  -- Crea cabecera
  gv_des_log:=' CCC_PR_CREA_CABEC_CARGO_ABONO ' ||
                           '  pais : ' || lv_oid_pais ||
                           '  sociedad : ' || lv_oid_soci ||
                           '  oid_proc : ' || lv_oid_proc ||
                           '  oid_tipo_abon_subp : ' || p_oid_tipo_abon_subp;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                   gv_cod_proc_ejec, gv_des_log);
  CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(lv_oid_pais, lv_oid_soci, lv_oid_proc, p_oid_tipo_abon_subp, lv_oid_cabe_carg_crea,lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea);
  gv_des_log:=' Se crea la cabecera del CAD : ' || lv_oid_cabe_carg_crea ||
                           '  Anio : ' || lv_num_anio_crea ||
                           '  Mes : ' || lv_num_mes_crea ||
                           '  Docu : ' || lv_num_cabe_crea;

  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                   gv_cod_proc_ejec, gv_des_log);


  -- Obtener la cantidad de CAD Masivos a procesar
  SELECT COUNT(*)
  INTO lv_cant_cad_masi
  FROM ccc_carga_cargo_abono_masiv
  WHERE num_lote = p_num_lote;

  SELECT COUNT(*)
  INTO lv_cant_cad_proc
  FROM
   mae_clien cli,
   mae_clien_tipo_subti tpc,
   mae_clien_unida_admin ua,
   zon_terri_admin za,
   zon_secci sec,
   zon_zona zon,
   ccc_carga_cargo_abono_masiv cad
  WHERE cli.cod_clie = cad.cod_clie
    AND cli.oid_clie = tpc.clie_oid_clie
    AND tpc.ind_ppal = 1
    AND cli.oid_clie = ua.clie_oid_clie
    AND ua.ztad_oid_terr_admi = za.oid_terr_admi
    AND za.zscc_oid_secc = sec.oid_secc
    AND sec.zzon_oid_zona = zon.oid_zona
    AND ua.ind_acti = 1
    AND cad.num_lote = p_num_lote;

  IF lv_cant_cad_masi = lv_cant_cad_proc AND lv_cant_cad_masi > 0 THEN

   gv_des_log:='Cantidad de CAD a Procesar : ' || lv_cant_cad_masi;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   lv_num_iden_cuot_inic:=CCC_PKG_GENER.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(lv_cod_pais,lv_cod_soci,gc_cod_sbac_cadi,lv_cant_cad_masi);
   gv_des_log:='Identificador de Cuota Inicial : ' || lv_num_iden_cuot_inic;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,   gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   OPEN cur_cad_masi;

   LOOP
    FETCH cur_cad_masi BULK COLLECT INTO  lv_tab_ccc_movim_cuent_corri LIMIT w_filas;

    IF lv_tab_ccc_movim_cuent_corri.COUNT > 0 THEN

     gv_des_log:='Inicio : Insertando en CCC_MOVIM_CUENT_CORRI ';
                                fin_pkg_gener.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

     FORALL x IN lv_tab_ccc_movim_cuent_corri.FIRST .. lv_tab_ccc_movim_cuent_corri.LAST
     INSERT INTO ccc_movim_cuent_corri VALUES lv_tab_ccc_movim_cuent_corri(x)
                RETURNING oid_movi_cc ,
                          fec_docu,
                          clie_oid_clie,
                          imp_movi
                BULK COLLECT INTO lv_tab_oid_movi_cc,
                                  lv_tab_fec_docu,
                                  lv_tab_oid_clie,
                                  lv_tab_imp_movi;

              gv_des_log:=' Registros insertados en CCC_MOVIM_CUENT_CORRI: ' || SQL%ROWCOUNT;
              fin_pkg_gener.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

              gv_des_log:='Inicio : Insertando en CCC_DETAL_CARGO_ABONO_DIREC : ';
              fin_pkg_gener.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

             FORALL i IN 1 .. lv_tab_oid_movi_cc.COUNT
                INSERT INTO ccc_detal_cargo_abono_direc
                   VALUES (
                      ccc_dcad_seq.nextval,                      -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
                      lv_oid_cabe_carg_crea,                     --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
                      lv_tab_oid_clie(i),                        --  CLIE_OID_CLIE                 NUMBER(12),
                      1507,                                      --  NUM_LINE                      NUMBER(6),
                      0,                                         --  NUM_HIST_GENE                 NUMBER(3),
                      lv_tab_fec_docu(i),                        --  FEC_MOVI                      DATE,
                      0,                                         --  IMP_MONE                      NUMBER(12,2),
                      lv_tab_imp_movi(i)*lv_fact_indi_cons ,     --  IMP                           NUMBER(12,2),
                      NULL,                                      --  VAL_REFE                      VARCHAR2(20 BYTE),
                      p_num_lote,                                      --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
                      NULL,                                      --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
                      lv_oid_mone,                               --  MONE_OID_MONE                 NUMBER(12),
                      NULL,                                      --  CMBA_OID_MOVI_BANC            NUMBER(12),
                      NULL,                                      --  MPAB_OID_MEDI_PAGO            NUMBER(12),
                      lv_oid_cuen_cont,                          --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
                      lv_oid_cuen_cont,                          --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
                      lv_tab_oid_movi_cc(i),                     --  MVCC_OID_MOVI_CC              NUMBER(12),
                      NULL,                                      --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
                      NULL,                                      --  FEC_PAGO_BANC                 DATE,
                      p_cod_usua,                                      --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
                      lv_oid_soci,                               --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
                      p_oid_tipo_abon_subp,                      -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
                      SYSDATE) ;                                 --  FEC_CREA                      DATE            NOT NULL

                      gv_des_log:=' Registros insertados en CCC_DETAL_CARGO_ABONO_DIREC : ' || SQL%ROWCOUNT;
                      fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


            gv_des_log:='Inicio : Aplicando los CAD en Cuenta Corriente ';
            fin_pkg_gener.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

            FOR j IN lv_tab_oid_clie.FIRST .. lv_tab_oid_clie.LAST
            LOOP
               CCC_PR_APLIC_ABONO_CARGO_CLIEN(lv_tab_oid_clie(j));
            END LOOP;

            gv_des_log:='Fin: Aplicando los CAD en Cuenta Corriente ';
            fin_pkg_gener.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

          END IF;

          EXIT WHEN cur_cad_masi%NOTFOUND;
       END LOOP;
       CLOSE cur_cad_masi;

   -- Liberando el Secuencial de CCC ---
   CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(lv_cod_pais, lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea);

   gv_des_log:='Inicio :Registrando en el Historico de Cargos Procesados';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   INSERT INTO ccc_histo_cargo_abono_masiv
    SELECT *
    FROM ccc_carga_cargo_abono_masiv c
    WHERE c.num_lote = p_num_lote;

   DELETE FROM ccc_carga_cargo_abono_masiv  cdm
   WHERE cdm.num_lote=p_num_lote;

   gv_des_log:='Fin CCC_PR_CARGA_CARGO_ABONO_MASIV';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

  ELSE

   gv_des_log:='No coincide el numero de registros a insertar : CAD Original : ' ||
   lv_cant_cad_masi || '  CAD a Procesar : ' || lv_cant_cad_proc ;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
   RAISE e_no_coin_nume_regi;

  END IF;

 EXCEPTION
 
  WHEN e_exis_proc_ejec THEN
   RAISE_application_error(-20123,
                              'ERROR CCC_PR_PROCE_CARGO_ABONO_MASIV: ' ||
                               ls_sqlerrm);

  WHEN e_para_null_proc THEN
   gv_des_log:='   Error en Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ||
                  ' 9 lv_fec_docu :' || lv_fec_docu ||
                  ' 10 lv_fec_venc :' || lv_fec_venc ;

            FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
            gv_des_log:='Fin del proceso de manera erronea';
           FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(gv_log_cod_pais, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
            RAISE_application_error(-20123,
                              'ERROR CCC_PR_PROCE_CARGO_ABONO_MASIV: ' ||
                               ls_sqlerrm);

  WHEN e_no_coin_nume_regi THEN
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
   RAISE_application_error(-20123,
                              'ERROR CCC_PR_PROCE_CARGO_ABONO_MASIV: ' ||
                               ls_sqlerrm);


  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** CCC_PR_PROCE_CARGO_ABONO_INTER Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );


 END CCC_PR_PROCE_CARGO_ABONO_INTER;


 PROCEDURE CCC_PR_PROCE_CADIR_DETAL_MASIV(
  p_oid_tipo_abon_subp                           IN      ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_num_lote                                     IN      VARCHAR2,
  p_cod_usua                                     IN      seg_usuar.use_usua%TYPE)
 IS

  lv_oid_pais                   seg_pais.oid_pais%TYPE;
  lv_cod_pais                   seg_pais.cod_pais%TYPE;
  lv_oid_soci                   seg_socie.oid_soci%TYPE;
  lv_cod_soci                   seg_socie.cod_soci%TYPE;
  lv_oid_mone                   seg_pais.mone_oid_mone%TYPE;
  lv_oid_suba                   seg_subac.oid_sbac%TYPE;
  lv_oid_subg_vent              zon_sub_geren_venta.oid_subg_vent%TYPE;
  lv_oid_marc                   seg_marca.oid_marc%TYPE;
  lv_oid_tipo_peri              seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
  lv_oid_cabe_carg_crea         ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_fec_docu                   DATE;

  lv_oid_proc                   ccc_proce.oid_proc%TYPE;
  lv_oid_subp                   ccc_subpr.oid_subp%TYPE;
  lv_num_anio_crea              ccc_cabec_carga_abono_direc.anio%TYPE;
  lv_num_mes_crea               ccc_cabec_carga_abono_direc.val_peri_mes%TYPE;
  lv_num_cabe_crea              ccc_cabec_carga_abono_direc.num_cabe%TYPE;
  lv_num_iden_cuot_inic         ccc_numer_ident_cuota.val_ulti_nume_iden_cuot%TYPE;

  lv_indi_tipo_abon             ccc_subpr.val_indi_tipo_abon%TYPE;
  lv_fact_indi_cons             NUMBER(1);
  lv_val_indi_cons              ccc_subpr.val_indi_cons%TYPE;
  lv_oid_tipo_abon_subp         ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
  lv_oid_tipo_carg_abon         ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
  lv_oid_cuen_cont              ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
  lv_oid_marc_situ              ccc_marca_situa.oid_marc_situ%TYPE;
  e_para_null_proc              EXCEPTION;

  CURSOR cur_cad_masi
  IS
   SELECT
      ccc_mvcc_seq.NEXTVAL,                    -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
      lv_oid_soci,                             -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
         lv_oid_marc_situ,                        -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
         lv_oid_mone,                             -- MONE_OID_MONE            NUMBER(12),
         cad.oid_peri,                             -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
         lv_oid_tipo_carg_abon,                   -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
         lv_oid_tipo_carg_abon,                   -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
         lv_oid_suba,                             -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
         lv_oid_subp,                             -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
         lv_oid_subp,                             -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
         lv_oid_cuen_cont,                        -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
         lv_oid_cuen_cont,                        -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
         cli.oid_clie,                            -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
         lv_num_anio_crea,                        -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
         lv_num_mes_crea,                         -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
         lv_num_cabe_crea,                        -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
         lv_num_anio_crea,                        -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
         NULL,                                    -- FEC_CONTA                DATE,
         lv_fec_docu,                            -- FEC_DOCU                 DATE                 NOT NULL,
         lv_fec_docu,                            -- FEC_ULTI_MOVI            DATE                 NOT NULL,
         lv_fec_docu,                            -- FEC_VALO                 DATE,
         cad.fec_venc,                         -- FEC_VENC                 DATE                 NOT NULL,
         ABS(cad.imp_movi)*lv_fact_indi_cons,  --TO_NUMBER(ABS(cad.imp_movi),'9999999999.99')*lv_fact_indi_cons, -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
         0,                                       -- IMP_DIVI                 NUMBER(12,2),
         0,                                       -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
         0,                                       -- IMP_PAGA_DIVI            NUMBER(12,2),
         ABS(cad.imp_movi)*lv_fact_indi_cons,--TO_NUMBER(ABS(cad.imp_movi),'9999999999.99')*lv_fact_indi_cons, -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
         lv_num_iden_cuot_inic + ROWNUM -1,       -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
         NULL,                                    -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
         1,                                       -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
         NULL,                                    -- VAL_OBSE                 VARCHAR2(100 BYTE),
         cad.val_refe_nume_docu_exte,             -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
         lv_num_anio_crea,                        -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
         lv_num_mes_crea,                         -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
         lv_num_cabe_crea,                        -- VAL_ULTI_DOCU_NUME       NUMBER(8),
         0,                                       -- VAL_ULTI_NUME_HIST       NUMBER(3),
         NULL,                                    -- MPAB_OID_MEDI_PAGO       NUMBER(12),
         ua.ztad_oid_terr_admi,                   -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
         tpc.ticl_oid_tipo_clie,                  -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
         lv_oid_marc,                             -- MARC_OID_MARC            NUMBER(12),
         0,                                       -- IMP_PAGO                 NUMBER(12,2),
         0,                                       -- IMP_PAGO_DIVI            NUMBER(12,2),
         ABS(cad.imp_movi)*lv_fact_indi_cons,--TO_NUMBER(ABS(cad.imp_movi),'9999999999.99')*lv_fact_indi_cons, -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
         0,                                       -- IMP_MOVI_DIVI            NUMBER(12,2),
         NULL,                                    -- NUM_LOTE_FACT            NUMBER(10),
         p_cod_usua,                                    -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
         1,                                       -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
         NULL,                                    -- IND_DTO_CARG_APLI        NUMBER(1),
         sec.oid_secc,                            -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
         lv_oid_subg_vent,                        -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
         NULL,                                    -- SOCA_OID_SOLI_CABE       NUMBER(12),
         tpc.sbti_oid_subt_clie,                  -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
         NULL,                                    -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
         lv_oid_tipo_peri,                        -- TIPE_OID_TIPO_PERI       NUMBER(12),
         zon.zorg_oid_regi,                       -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
         NULL,                                    -- TIDO_OID_TIPO_DOCU       NUMBER(12),
         SYSDATE,                                  -- FEC_ULTI_ACTU            DATE                 NOT NULL
         SYSDATE,                      -- VAL_HORA_CREA            DATE
         NULL,             -- OID_PERI_ORIG            NUMBER(12)
         0,                             -- IND_CARG_FRAC           NUMBER(1)
         0,                             -- IND_OC                   NUMBER(1)
         NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
         lv_fec_docu                     -- FEC_PROC                 DATE                 NOT NULL,
      FROM
         mae_clien cli,
         mae_clien_tipo_subti tpc,
         mae_clien_unida_admin ua,
         zon_terri_admin za,
         zon_secci sec,
         zon_zona zon,
         ccc_carga_cargo_abono_masiv cad
      WHERE cli.cod_clie = cad.cod_clie
        AND cli.oid_clie = tpc.clie_oid_clie
        AND tpc.ind_ppal = 1
        AND cli.oid_clie = ua.clie_oid_clie
        AND ua.ztad_oid_terr_admi = za.oid_terr_admi
        AND za.zscc_oid_secc = sec.oid_secc
        AND sec.zzon_oid_zona = zon.oid_zona
        AND ua.ind_acti = 1
        AND cad.num_lote = p_num_lote;

    lv_tab_ccc_movim_cuent_corri t_tab_ccc_movim_cuent_corri;
    lv_cant_cad_masi             NUMBER(12);
    lv_cant_cad_proc             NUMBER(12);
    lv_ind_proc_ejec             NUMBER(1);


    TYPE t_tab_oid_movi_cc       IS TABLE OF ccc_movim_cuent_corri.oid_movi_cc%TYPE;
    TYPE t_tab_fec_docu          IS TABLE OF ccc_movim_cuent_corri.fec_docu%TYPE;
    TYPE t_tab_oid_clie          IS TABLE OF ccc_movim_cuent_corri.clie_oid_clie%TYPE;
    TYPE t_tab_imp_movi          IS TABLE OF ccc_movim_cuent_corri.imp_movi%TYPE;

    lv_tab_oid_movi_cc           t_tab_oid_movi_cc;
    lv_tab_fec_docu              t_tab_fec_docu;
    lv_tab_oid_clie              t_tab_oid_clie;
    lv_tab_imp_movi              t_tab_imp_movi;

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');

  /* inicializa variables globales  para registro de log  */
  gv_log_cod_pais := lv_cod_pais;
  gv_log_cod_soci := lv_cod_soci;
  gv_log_user     := p_cod_usua;
  gv_log_cod_modu := 'CCC';
  gv_log_cod_proc := '16';

  -- Valida si existen procesos en ejecucion --
  lv_ind_proc_ejec := FIN_PKG_GENER.FIN_FN_INDIC_PROCE_EJECU(gv_log_cod_pais,gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc);

  IF lv_ind_proc_ejec=1 THEN
   RAISE e_exis_proc_ejec;
  END IF;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

  gv_des_log:='Inicio CCC_PR_PROCE_CARGO_ABONO_MASIV parametros :' ||
                  ' 1: '  || p_oid_tipo_abon_subp ||
                  ' 2: '  || p_num_lote ||
                  ' 3: '  ||  p_cod_usua  ;

  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

    BEGIN

       lv_oid_pais := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);
       lv_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);
       lv_oid_mone := FIN_PKG_GENER.FIN_FN_OBTIE_OID_MONED(lv_cod_pais);
       lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);
       lv_oid_subg_vent := CCC_PKG_GENER.CCC_FN_OBTIE_OID_SUBGE_VENTA(lv_oid_pais,lv_oid_marc,gc_cod_sbac_cadi);
       lv_oid_suba := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SUBAC(gc_cod_sbac_cadi);
       lv_oid_tipo_peri := 2001;
       lv_fec_docu:=TO_DATE(TO_CHAR(SYSDATE,'DD/MM/YYYY'),'DD/MM/YYYY');

       gv_des_log:='   Los datos obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba;

       FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

       gv_des_log:='Inicio Obteniendo Parametria del Tipo de Abono por Subproceso';
       FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

       /*  Obtiene parametria relacionada al Tipo Abono Subproceso dado por parametro */
       CCC_PKG_GENER.CCC_PR_OBTIE_PARAM_TASUB(p_oid_tipo_abon_subp,lv_oid_proc,lv_oid_subp,lv_oid_cuen_cont,lv_indi_tipo_abon,lv_oid_marc_situ,lv_oid_tipo_carg_abon,lv_val_indi_cons);

       gv_des_log:='Fin Obteniendo parametria del Tipo de Abono por Subproceso';
       FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

    EXCEPTION
       WHEN no_data_found THEN
          RAISE e_para_null_proc;
    END;

    IF lv_val_indi_cons = 'D'  THEN
       lv_fact_indi_cons := 1;
    ELSE
       IF  lv_val_indi_cons = 'H' THEN
          lv_fact_indi_cons := -1;
       END IF;
    END IF;

    -- Crea cabecera
    CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(lv_oid_pais, lv_oid_soci, lv_oid_proc, lv_oid_tipo_abon_subp, lv_oid_cabe_carg_crea,lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea);
    gv_des_log:=' Se crea la cabecera del CAD : ' || lv_oid_cabe_carg_crea ||
                           '  Anio : ' || lv_num_anio_crea ||
                           '  Mes : ' || lv_num_mes_crea ||
                           '  Docu : ' || lv_num_cabe_crea;

    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                   gv_cod_proc_ejec, gv_des_log);


    -- Obtener la cantidad de CAD Masivos a procesar
    SELECT COUNT(*)
    INTO lv_cant_cad_masi
    FROM ccc_carga_cargo_abono_masiv
    WHERE num_lote = p_num_lote;

    SELECT COUNT(*)
    INTO lv_cant_cad_proc
    FROM
       mae_clien cli,
       mae_clien_tipo_subti tpc,
       mae_clien_unida_admin ua,
       zon_terri_admin za,
       zon_secci sec,
       zon_zona zon,
       ccc_carga_cargo_abono_masiv cad
    WHERE cli.cod_clie = cad.cod_clie
      AND cli.oid_clie = tpc.clie_oid_clie
      AND tpc.ind_ppal = 1
      AND cli.oid_clie = ua.clie_oid_clie
      AND ua.ztad_oid_terr_admi = za.oid_terr_admi
      AND za.zscc_oid_secc = sec.oid_secc
      AND sec.zzon_oid_zona = zon.oid_zona
      AND ua.ind_acti = 1
      AND cad.num_lote = p_num_lote;

    IF lv_cant_cad_masi = lv_cant_cad_proc AND lv_cant_cad_masi > 0 THEN

       gv_des_log:='Cantidad de CAD a Procesar : ' || lv_cant_cad_masi;
       FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

       lv_num_iden_cuot_inic := CCC_PKG_GENER.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(lv_cod_pais,lv_cod_soci,gc_cod_sbac_cadi,lv_cant_cad_masi);
       gv_des_log:='Identificador de Cuota Inicial : ' || lv_num_iden_cuot_inic;
       FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


       OPEN cur_cad_masi;

       LOOP
          FETCH cur_cad_masi BULK COLLECT INTO  lv_tab_ccc_movim_cuent_corri LIMIT w_filas;

          IF lv_tab_ccc_movim_cuent_corri.COUNT > 0 THEN

             gv_des_log:='Inicio : Insertando en CCC_MOVIM_CUENT_CORRI ';
                                fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

             FORALL x IN lv_tab_ccc_movim_cuent_corri.FIRST .. lv_tab_ccc_movim_cuent_corri.LAST
                INSERT INTO ccc_movim_cuent_corri VALUES lv_tab_ccc_movim_cuent_corri(x)
                RETURNING oid_movi_cc ,
                          fec_docu,
                          clie_oid_clie,
                          imp_movi
                BULK COLLECT INTO lv_tab_oid_movi_cc,
                                  lv_tab_fec_docu,
                                  lv_tab_oid_clie,
                                  lv_tab_imp_movi;

              gv_des_log:=' Registros insertados en CCC_MOVIM_CUENT_CORRI: ' || SQL%ROWCOUNT;
              fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

              gv_des_log:='Inicio : Insertando en CCC_DETAL_CARGO_ABONO_DIREC : ';
              fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

             FORALL i IN 1 .. lv_tab_oid_movi_cc.COUNT
                INSERT INTO ccc_detal_cargo_abono_direc
                   VALUES (
                      ccc_dcad_seq.nextval,                      -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
                      lv_oid_cabe_carg_crea,                     --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
                      lv_tab_oid_clie(i),                        --  CLIE_OID_CLIE                 NUMBER(12),
                      1507,                                      --  NUM_LINE                      NUMBER(6),
                      0,                                         --  NUM_HIST_GENE                 NUMBER(3),
                      lv_tab_fec_docu(i),                        --  FEC_MOVI                      DATE,
                      0,                                         --  IMP_MONE                      NUMBER(12,2),
                      lv_tab_imp_movi(i)*lv_fact_indi_cons ,     --  IMP                           NUMBER(12,2),
                      NULL,                                      --  VAL_REFE                      VARCHAR2(20 BYTE),
                      p_num_lote,                                      --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
                      NULL,                                      --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
                      lv_oid_mone,                               --  MONE_OID_MONE                 NUMBER(12),
                      NULL,                                      --  CMBA_OID_MOVI_BANC            NUMBER(12),
                      NULL,                                      --  MPAB_OID_MEDI_PAGO            NUMBER(12),
                      lv_oid_cuen_cont,                          --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
                      lv_oid_cuen_cont,                          --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
                      lv_tab_oid_movi_cc(i),                     --  MVCC_OID_MOVI_CC              NUMBER(12),
                      NULL,                                      --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
                      NULL,                                      --  FEC_PAGO_BANC                 DATE,
                      p_cod_usua,                                      --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
                      lv_oid_soci,                               --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
                      p_oid_tipo_abon_subp,                      -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
                      SYSDATE) ;                                 --  FEC_CREA                      DATE            NOT NULL

                      gv_des_log:=' Registros insertados en CCC_DETAL_CARGO_ABONO_DIREC : ' || SQL%ROWCOUNT;
                      fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


            gv_des_log:='Inicio : Aplicando los CAD en Cuenta Corriente ';
            fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

            /*
            FOR j IN lv_tab_oid_clie.FIRST .. lv_tab_oid_clie.LAST
            LOOP
               CCC_PKG_PROCE.CCC_PR_APLIC_ABONO_CARGO_CLIEN(lv_tab_oid_clie(j));
            END LOOP;
            */

            gv_des_log:='Fin: Aplicando los CAD en Cuenta Corriente ';
            fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

          END IF;

          EXIT WHEN cur_cad_masi%NOTFOUND;
       END LOOP;
       CLOSE cur_cad_masi;


       -- Aplicando la Cuenta Corriente --
       --CCC_PR_APLIC_CABEC_CARGO_ABONO(p_cod_pais,p_cod_soci,lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea,p_cod_usua );

       -- Liberando el Secuencial de CCC ---
       CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(lv_cod_pais, lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea);

       gv_des_log:='Inicio :Registrando en el Historico de Cargos Procesados';
       FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

       INSERT INTO ccc_histo_cargo_abono_masiv
          SELECT *
          FROM ccc_carga_cargo_abono_masiv c
          WHERE c.num_lote = p_num_lote;

       DELETE FROM ccc_carga_cargo_abono_masiv  cdm
       WHERE cdm.num_lote=p_num_lote;

       gv_des_log:='Fin CCC_PR_CARGA_CARGO_ABONO_MASIV';
       FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

       FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

    ELSE

       gv_des_log:='No coincide el numero de registros a insertar : CAD Original : ' ||
          lv_cant_cad_masi || '  CAD a Procesr : ' || lv_cant_cad_proc ;
       FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,

                                                 gv_cod_proc_ejec, gv_des_log);

       RAISE e_no_coin_nume_regi;

    END IF;

 END CCC_PR_PROCE_CADIR_DETAL_MASIV;

 PROCEDURE CCC_PR_ELIMI_CADIR_DOCLE_MASIV(
  p_num_lote                     IN   VARCHAR2)
 IS
 BEGIN

  DELETE FROM CCC_CARGA_CADIR_DOCLE_MASIV
  WHERE num_lote = p_num_lote;

  DELETE FROM CCC_ERROR_CADIR_DOCLE_MASIV
  WHERE num_lote = p_num_lote;

 EXCEPTION
  WHEN OTHERS THEN
   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(sqlerrm,1,250);
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_ELIMI_CADIR_DOCLE_MASIV: '||ls_sqlerrm);

 END CCC_PR_ELIMI_CADIR_DOCLE_MASIV;

 PROCEDURE CCC_PR_VALID_CADIR_DOCLE_MASIV(
  p_num_lote                     IN    VARCHAR2,
  p_cant_regi_carg               OUT   VARCHAR2,
  p_imp_tota_carg                OUT   VARCHAR2,
  p_cod_error                    OUT   VARCHAR2)
 IS

  CURSOR c_carga_carg_masiv
  IS
   SELECT *
   FROM
    ccc_carga_cadir_docle_masiv
   WHERE num_lote = p_num_lote
   ORDER  BY val_fila;

  TYPE t_tab_ccc_carga_carg_masiv      IS TABLE OF CCC_CARGA_CADIR_DOCLE_MASIV%ROWTYPE;
  lv_tab_ccc_carga_carg_masiv          t_tab_ccc_carga_carg_masiv;
  lv_reg_ccc_carga_cad_masiv           ccc_carga_cadir_docle_masiv%ROWTYPE;
  lv_reg_ccc_error_cad_masiv           ccc_error_cadir_docle_masiv%ROWTYPE;

 CURSOR c_refe_mult
 IS
  SELECT f.num_bole_desp_refe,f.cod_clie
  FROM ccc_carga_cadir_docle_masiv f
  WHERE f.num_lote = p_num_lote
  GROUP BY f.num_bole_desp_refe,f.cod_clie
  HAVING COUNT(DISTINCT f.num_docu_lega_refe) > 1;

  lv_imp_movi                          NUMBER(12,2);
  lv_cant_erro                         NUMBER;
  lv_oid_clie                          mae_clien.oid_clie%TYPE;
  lv_oid_terr_admi                     zon_terri_admin.oid_terr_admi%TYPE;
  lv_oid_tipo_clie                     mae_tipo_clien.oid_tipo_clie%TYPE;
  lv_oid_soca_oid_docu_refe            ped_solic_cabec.oid_soli_cabe%TYPE;
  lv_oid_prod                          mae_produ.oid_prod%TYPE;
  lv_vali_codi_vent                    NUMBER;
  lv_num_docu_lega_refe                fac_docum_conta_cabec.NUM_DOCU_LEGA%type;
  lv_cant_mult_refe                    NUMBER(12);
  lv_cod_unic_vent                     ccc_carga_cadir_docle_masiv.cod_unic_vent%TYPE;
  lv_val_fila                          NUMBER(10);

 BEGIN

  OPEN c_carga_carg_masiv;
  LOOP
   FETCH c_carga_carg_masiv BULK COLLECT INTO lv_tab_ccc_carga_carg_masiv LIMIT W_FILAS;
    IF lv_tab_ccc_carga_carg_masiv.COUNT > 0 THEN

     FOR x IN lv_tab_ccc_carga_carg_masiv.FIRST .. lv_tab_ccc_carga_carg_masiv.LAST LOOP

      lv_reg_ccc_carga_cad_masiv := lv_tab_ccc_carga_carg_masiv(x);
      lv_reg_ccc_error_cad_masiv.num_lote := lv_reg_ccc_carga_cad_masiv.num_lote;
      lv_reg_ccc_error_cad_masiv.val_fila := lv_reg_ccc_carga_cad_masiv.val_fila;

      --01) Validando los datos Obligatorios
      IF (lv_reg_ccc_carga_cad_masiv.Cod_clie IS NULL) THEN
       lv_reg_ccc_error_cad_masiv.cod_erro := '01';
       lv_reg_ccc_error_cad_masiv.des_erro := 'Dato obligatorio en nulo - Codigo Consultora';

       INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;

      ELSE

       --02) El codigo consultora no existe
       BEGIN

        SELECT mc.oid_clie
        INTO lv_oid_clie
        FROM mae_clien mc
        WHERE mc.cod_clie=lv_reg_ccc_carga_cad_masiv.cod_clie;

       EXCEPTION
        WHEN NO_DATA_FOUND THEN
         lv_reg_ccc_error_cad_masiv.cod_erro := '02';
         lv_reg_ccc_error_cad_masiv.des_erro := 'Codigo de Consultora No Existe';

         INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;

       END;

       --03) Validacion de la Unidad Administrativa Activa
       BEGIN

        SELECT mcua.ztad_oid_terr_admi
        INTO lv_oid_terr_admi
        FROM
         mae_clien mc,
         mae_clien_unida_admin  mcua
        WHERE mc.oid_clie  = mcua.clie_oid_clie
          AND mcua.ind_acti = 1
          AND mc.cod_clie=lv_reg_ccc_carga_cad_masiv.cod_clie;

       EXCEPTION
        WHEN NO_DATA_FOUND THEN
         lv_reg_ccc_error_cad_masiv.cod_erro := '03';
         lv_reg_ccc_error_cad_masiv.des_erro := 'Consultora No tiene Unidad Administrativa Activa';

         INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;

        WHEN too_many_rows THEN

         lv_reg_ccc_error_cad_masiv.cod_erro := '04';
         lv_reg_ccc_error_cad_masiv.des_erro := 'Consultora tiene mas de una Unidad Administrativa Activa';

         INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;

       END;

       --05) Validacion de la Tipologia del Cliente
       BEGIN

        SELECT mtc.oid_tipo_clie
        INTO lv_oid_tipo_clie
        FROM
         mae_clien mc,
         mae_clien_tipo_subti mcts,
         mae_tipo_clien mtc
        WHERE mc.oid_clie = mcts.clie_oid_clie
          AND mtc.oid_tipo_clie = mcts.ticl_oid_tipo_clie
          AND mtc.cod_tipo_clie = '02'
          AND mcts.ind_ppal=1
          AND mc.cod_clie=lv_reg_ccc_carga_cad_masiv.cod_clie;

       EXCEPTION
        WHEN NO_DATA_FOUND THEN
         lv_reg_ccc_error_cad_masiv.cod_erro := '05';
         lv_reg_ccc_error_cad_masiv.des_erro := 'Codigo Ingresado No Pertenece al Tipo Cliente Consultora';

         INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;

        WHEN too_many_rows THEN

         lv_reg_ccc_error_cad_masiv.val_fila := lv_reg_ccc_carga_cad_masiv.val_fila;
         lv_reg_ccc_error_cad_masiv.cod_erro := '06';
         lv_reg_ccc_error_cad_masiv.des_erro := 'Consultora tiene mas de una Tipologia de Cliente Activa';

         INSERT INTO ccc_error_cargo_abono_masiv VALUES lv_reg_ccc_error_cad_masiv;

       END;

      END IF;

      /*
      IF (lv_reg_ccc_carga_cad_masiv.val_cant IS NULL) THEN
       lv_reg_ccc_error_cad_masiv.cod_erro := '01';
       lv_reg_ccc_error_cad_masiv.des_erro := 'Dato obligatorio en nulo - Valor Cantidad';

       INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;


      END IF;
      */

      IF (lv_reg_ccc_carga_cad_masiv.imp_movi IS NULL) THEN
       lv_reg_ccc_error_cad_masiv.cod_erro := '01';
       lv_reg_ccc_error_cad_masiv.des_erro := 'Dato obligatorio en nulo - Importe Movimiento';

       INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;

      END IF;

      -- 07) Validacion de la Boleta de Despacho
      BEGIN

       SELECT psc.oid_soli_cabe
       INTO lv_oid_soca_oid_docu_refe
       FROM ped_solic_cabec psc
       WHERE psc.clie_oid_clie = lv_oid_clie
         AND psc.grpr_oid_grup_proc = 5
         AND psc.fec_fact IS NOT NULL
         and psc.ind_ts_no_conso = 0
         and psc.val_tota_paga_loca >= 0
         AND psc.val_nume_soli = lv_reg_ccc_carga_cad_masiv.num_bole_desp_refe;

       UPDATE ccc_carga_cadir_docle_masiv cad
       SET cad.soca_oid_docu_refe=lv_oid_soca_oid_docu_refe
       WHERE cad.val_fila = lv_reg_ccc_carga_cad_masiv.val_fila;

      EXCEPTION
       WHEN no_data_found THEN
        lv_reg_ccc_error_cad_masiv.cod_erro := '07';
        lv_reg_ccc_error_cad_masiv.des_erro := 'La Boleta de Despacho es Incorrecta : ' || lv_reg_ccc_carga_cad_masiv.num_bole_desp_refe ;

        INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;
      END;

      -- 08) Validacion del Codigo de Venta
      BEGIN

       CASE

        WHEN NVL(lv_reg_ccc_carga_cad_masiv.cod_unic_vent,0) = '99999' THEN

         SELECT MIN(psp.prod_oid_prod)
         INTO lv_oid_prod
         FROM
          ped_solic_posic psp
         WHERE psp.num_unid_aten > 0
           AND psp.soca_oid_soli_cabe IN (
                             SELECT psc.oid_soli_cabe
                             FROM ped_solic_cabec psc
                             WHERE psc.soca_oid_soli_cabe =  lv_oid_soca_oid_docu_refe );

         -- Obteniendo el Numero de Documento Legal
         SELECT MIN(c.num_docu_lega)
         INTO lv_num_docu_lega_refe
         FROM
          fac_docum_conta_cabec c,
          fac_docum_conta_linea d
         WHERE c.oid_cabe = d.dcca_oid_cabe
           AND c.soca_oid_soli_cabe = lv_oid_soca_oid_docu_refe
           AND d.prod_oid_prod = lv_oid_prod;

         UPDATE ccc_carga_cadir_docle_masiv cad
         SET
          cad.prod_oid_prod = lv_oid_prod,
          cad.num_docu_lega_refe = lv_num_docu_lega_refe
         WHERE cad.val_fila = lv_reg_ccc_carga_cad_masiv.val_fila;

        -- Abono Flete Estrella
        WHEN NVL(lv_reg_ccc_carga_cad_masiv.cod_unic_vent,0) = '88888' THEN

         SELECT MIN(psp.prod_oid_prod)
         INTO lv_oid_prod
         FROM
          ped_solic_posic psp
         WHERE psp.num_unid_aten > 0
           AND psp.soca_oid_soli_cabe IN (
               SELECT psc.oid_soli_cabe
               FROM ped_solic_cabec psc
               WHERE psc.soca_oid_soli_cabe =  lv_oid_soca_oid_docu_refe );

         -- Obteniendo el Numero de Documento Legal
         SELECT MIN(c.num_docu_lega)
         INTO lv_num_docu_lega_refe
         FROM
          fac_docum_conta_cabec c,
          fac_docum_conta_linea d
         WHERE c.oid_cabe = d.dcca_oid_cabe
           AND c.soca_oid_soli_cabe = lv_oid_soca_oid_docu_refe
           AND d.prod_oid_prod = lv_oid_prod;

         -- Abono Flete Estrella
         SELECT mp.oid_prod
         INTO lv_oid_prod
         FROM mae_produ mp
         WHERE mp.cod_sap = gc_cod_prod_abon_flet_estr;

         UPDATE ccc_carga_cadir_docle_masiv cad
         SET
          cad.prod_oid_prod = lv_oid_prod,
          cad.num_docu_lega_refe = lv_num_docu_lega_refe
         WHERE cad.val_fila = lv_reg_ccc_carga_cad_masiv.val_fila;

        ELSE

         SELECT MIN(psp.prod_oid_prod)
         INTO lv_oid_prod
         FROM ped_solic_posic psp
         WHERE  psp.soca_oid_soli_cabe IN (
                           SELECT psc.oid_soli_cabe
                           FROM
                            ped_solic_cabec psc
                           WHERE psc.soca_oid_soli_cabe = lv_oid_soca_oid_docu_refe )
                           AND psp.val_codi_vent = lv_reg_ccc_carga_cad_masiv.cod_unic_vent;

         -- Obteniendo el Numero de Documento Legal
         SELECT MIN(c.num_docu_lega)
         INTO lv_num_docu_lega_refe
         FROM
          fac_docum_conta_cabec c,
          fac_docum_conta_linea d
         WHERE c.oid_cabe = d.dcca_oid_cabe
           AND c.soca_oid_soli_cabe = lv_oid_soca_oid_docu_refe
           AND d.prod_oid_prod = lv_oid_prod;

         UPDATE ccc_carga_cadir_docle_masiv cad
         SET
          cad.prod_oid_prod = lv_oid_prod,
          cad.num_docu_lega_refe = lv_num_docu_lega_refe
         WHERE cad.val_fila = lv_reg_ccc_carga_cad_masiv.val_fila;

       END CASE;


       IF (lv_oid_prod IS NULL ) THEN

        lv_reg_ccc_error_cad_masiv.cod_erro := '08';
        lv_reg_ccc_error_cad_masiv.des_erro := lv_oid_prod || ' ' || lv_reg_ccc_carga_cad_masiv.soca_oid_docu_refe || ' ' || lv_vali_codi_vent || ' El Codigo de Venta ' || lv_reg_ccc_carga_cad_masiv.cod_unic_vent || ' No Existe en el Documento de Referencia';

        INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;

       END IF;


      EXCEPTION

       WHEN no_data_found THEN

        lv_reg_ccc_error_cad_masiv.cod_erro := '09';
        lv_reg_ccc_error_cad_masiv.des_erro := 'El Codigo de Venta es Incorrecto';

        INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;


      END;

      --10) El Importe de Pago es Incorrecto
      BEGIN

       IF (lv_reg_ccc_carga_cad_masiv.imp_movi IS NOT NULL) THEN
        lv_imp_movi := TO_NUMBER(lv_reg_ccc_carga_cad_masiv.imp_movi_vali,'9999999999.99');
       END IF;

      EXCEPTION

       WHEN VALUE_ERROR THEN
        lv_reg_ccc_error_cad_masiv.val_fila := lv_reg_ccc_carga_cad_masiv.val_fila;
        lv_reg_ccc_error_cad_masiv.cod_erro := '10';
        lv_reg_ccc_error_cad_masiv.des_erro := 'Dato no tiene el formato numerico correcto : ' || lv_reg_ccc_carga_cad_masiv.imp_movi_vali;

        INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;

      END;

       --11) Validacion Tipo de Documento legal
        UPDATE ccc_carga_cadir_docle_masiv cad
        SET cad.oid_tipo_docu_refe =
            ( SELECT
               ftd.oid_tipo_docu
              FROM
               fac_docum_conta_cabec fac,
               fac_tipo_docum ftd
              WHERE fac.tido_oid_tipo_docu = ftd.oid_tipo_docu
                AND fac.ictp_oid_tipo_prog IS NULL
                AND fac.val_tota_paga_loca <> 0
                AND fac.soca_oid_soli_cabe = cad.soca_oid_docu_refe
                AND rownum < 2)
        WHERE cad.val_fila = lv_reg_ccc_carga_cad_masiv.val_fila;

      END LOOP;

     END IF;

   EXIT WHEN c_carga_carg_masiv%NOTFOUND;

  END LOOP;
  CLOSE c_carga_carg_masiv;



  FOR v_cod_clie IN  (SELECT f.num_bole_desp_refe,f.cod_clie,MIN(f.num_docu_lega_refe) num_docu_lega_refe
    FROM ccc_carga_cadir_docle_masiv f
    WHERE f.num_lote = p_num_lote
    GROUP BY f.num_bole_desp_refe,f.cod_clie
    HAVING COUNT(DISTINCT f.num_docu_lega_refe) > 1) LOOP

    SELECT MIN(f.val_fila)
    INTO lv_val_fila
    FROM ccc_carga_cadir_docle_masiv f
    WHERE f.num_lote = p_num_lote
      AND f.num_bole_desp_refe = v_cod_clie.num_bole_desp_refe
      AND f.cod_clie = v_cod_clie.cod_clie
      AND f.num_docu_lega_refe = num_docu_lega_refe;

    SELECT f.cod_unic_vent, f.prod_oid_prod
    INTO lv_cod_unic_vent, lv_oid_prod
    FROM ccc_carga_cadir_docle_masiv f
    WHERE f.num_lote = p_num_lote
      AND f.num_bole_desp_refe = v_cod_clie.num_bole_desp_refe
      AND f.cod_clie = v_cod_clie.cod_clie
      AND f.num_docu_lega_refe = num_docu_lega_refe
      AND f.val_fila = lv_val_fila;

   UPDATE ccc_carga_cadir_docle_masiv f
   SET
    f.cod_unic_vent =lv_cod_unic_vent,
    f.prod_oid_prod = lv_oid_prod,
    f.num_docu_lega_refe = v_cod_clie.num_docu_lega_refe
   WHERE f.num_lote = p_num_lote
      AND f.num_bole_desp_refe = v_cod_clie.num_bole_desp_refe
      AND f.cod_clie = v_cod_clie.cod_clie
      AND f.num_docu_lega_refe <> v_cod_clie.num_docu_lega_refe;

  END LOOP;

  -- Validacion Global
  SELECT COUNT(*)
  INTO lv_cant_mult_refe
  FROM
   (SELECT f.num_bole_desp_refe,f.cod_clie
    FROM ccc_carga_cadir_docle_masiv f
    WHERE f.num_lote = p_num_lote
    GROUP BY f.num_bole_desp_refe,f.cod_clie
    HAVING COUNT(DISTINCT f.num_docu_lega_refe) > 1);

  IF lv_cant_mult_refe > 0 THEN

   FOR v_refe_mult IN c_refe_mult LOOP

     --dbms_output.put_line(v_refe_mult.cod_clie);
     lv_reg_ccc_error_cad_masiv.val_fila := 0;
     lv_reg_ccc_error_cad_masiv.cod_erro := '12';
     lv_reg_ccc_error_cad_masiv.des_erro := 'Se hace referencia a multiples documentos legales en el c?digo ' || v_refe_mult.cod_clie
     || ' para la boleta de despacho ' || v_refe_mult.num_bole_desp_refe;

     INSERT INTO ccc_error_cadir_docle_masiv VALUES lv_reg_ccc_error_cad_masiv;

   END LOOP;
  END IF;

  SELECT COUNT(1)
  INTO  lv_cant_Erro
  FROM  ccc_error_cadir_docle_masiv
  WHERE num_lote = p_num_lote;

  p_cod_error := lv_cant_Erro;

  SELECT
   TO_CHAR(COUNT(1)),
   TO_CHAR(SUM(cad.imp_movi))
  INTO
   p_cant_regi_carg ,
   p_imp_tota_carg
  FROM ccc_carga_cadir_docle_masiv cad
  WHERE cad.num_lote = p_num_lote;

 EXCEPTION

  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_VALID_CADIR_DOCLE_MASIV;


 /***************************************************************************
  Descripcion       : Procesa los Cargos que generan Documento Legal cargados en
                        la tabla de carga de cargos y abonos directos masivos
                        (CCC_CARGA_CARGO_DOCUM_MASIV).

                        lv_ind_tipo_nega = 1 ABONO
                                         = 0 CARGO
  Fecha Creacion    : 22/05/2009
  Autor             : Jorge Florencio
 ***************************************************************************/
 PROCEDURE CCC_PR_PROCE_CADIR_DOCLE_MASIV(
  p_cod_pais                     IN   seg_pais.cod_pais%TYPE,
  p_cod_soci                     IN   seg_socie.cod_soci%TYPE,
  p_cod_tipo_soli                IN   ped_tipo_solic.cod_tipo_soli%TYPE,
  p_num_lote                     IN   ccc_carga_cadir_docle_masiv.num_lote%TYPE,
  p_cod_usu                      IN   seg_usuar.use_usua%TYPE,
  p_cod_modu                     IN   fin_proce_modul.cod_modu%TYPE,
  p_cod_proce                    IN   fin_proce_modul.cod_proc%TYPE)
 IS

  lv_oid_peri                    cra_perio.oid_peri%TYPE;
  lv_num_iden_cuot_inic          ccc_numer_ident_cuota.val_ulti_nume_iden_cuot%TYPE;
  lv_oid_esta_posi               ped_estad_posic.oid_esta_posi%TYPE;
  lv_oid_tipo_soli_pais          ped_tipo_solic_pais.oid_tipo_soli_pais%TYPE;
  lv_oid_alma                    ped_tipo_solic_pais.almc_oid_alma%TYPE;
  lv_oid_form_pago               ped_tipo_solic.sbac_oid_sbac%TYPE;
  lv_oid_tipo_cons               ped_tipo_solic_pais.tsol_oid_tipo_cons%TYPE;
  lv_oid_tipo_docu               ped_tipo_solic_pais.tido_oid_tipo_docu%TYPE;
  lv_oid_acti                    ped_tipo_solic_pais.cact_oid_acti%TYPE;
  lv_oid_sbac                    ped_tipo_solic.sbac_oid_sbac%TYPE;
  lv_oid_soci                    ped_tipo_solic_pais.soci_oid_soci%TYPE;
  lv_oid_mone                    ped_tipo_solic_pais.mone_oid_mone%TYPE;
  lv_oid_clas_soli               ped_tipo_solic.clso_oid_clas_soli%TYPE;
  lv_oid_pais                    ped_tipo_solic_pais.pais_oid_pais%TYPE;
  lv_val_glos                    ped_tipo_solic_pais.val_glos%TYPE;
  lv_oid_tipo_posi               ped_tipo_solic_proce.tpos_oid_tipo_posi%TYPE;
  lv_oid_subt_posi               ped_tipo_solic_proce.stpo_oid_subt_posi%TYPE;
  lv_oid_prod                    ped_tipo_solic_proce.prod_oid_prod%TYPE;
  lv_ind_pedi_prue               ped_tipo_solic_pais.ind_pedi_prue%TYPE;
  lv_ind_perm_unio               ped_tipo_solic_pais.ind_perm_unio%TYPE;
  lv_oid_tipo_clie               ped_tipo_solic.ticl_oid_tipo_clie%TYPE;
  lv_ind_tipo_nega               ped_tipo_solic.ind_soli_nega%TYPE;
  lv_ind_sign                    NUMBER(1);
  lv_oid_tasa                    NUMBER(12);
  lv_tasa                        NUMBER(12,2);

  lv_cant_carg_masi              NUMBER(6);



  CURSOR cur_carg_masi
  IS
      SELECT
         ped_soca_seq.NEXTVAL                     OID_SOLI_CABE,
         TRUNC(SYSDATE)                              FEC_PROG_FACT,
         NULL                                                    FEC_FACT,
         0                                                           NUM_CLIEN ,
         NULL                                                    VAL_GRUP_REVE,
         lv_oid_tipo_soli_pais                        TSPA_OID_TIPO_SOLI_PAIS ,
         NULL                                                    MONE_OID_MONE ,
         3                                                           TIDS_OID_TIPO_DESP,
         lv_oid_alma                                           ALMC_OID_ALMA,
         23                                                         MODU_OID_MODU,
         lv_oid_tipo_clie                                 TICL_OID_TIPO_CLIE ,
         NULL                                                   TAIM_OID_TASA_IMPU,
         lv_oid_peri                                           PERD_OID_PERI ,
         NULL                                                   SOCA_OID_SOLI_CABE,
         mc.oid_clie                                           CLIE_OID_CLIE,
         mc.oid_clie                                           CLIE_OID_CLIE_RECE_FACT,
         mc.oid_clie                                           CLIE_OID_CLIE_PAGA,
         mc.oid_clie                                           CLIE_OID_CLIE_DEST,
         mcd.oid_clie_dire                                CLDI_OID_CLIE_DIRE,
         mci.tdoc_oid_tipo_docu                      TDOC_OID_TIPO_DOCU ,
         lv_oid_soci                                           SOCI_OID_SOCI ,
         lv_oid_sbac                                           SBAC_OID_SBAC ,
         zt.oid_terr                                            TERR_OID_TERR ,
         zz.oid_zona                                            ZZON_OID_ZONA ,
         NULL                                                      IND_ESTA ,
         NULL                                                      IND_IMPR ,
         NULL                                                      IND_EXEN_FLET ,
         lv_num_iden_cuot_inic + rownum - 1      VAL_NUME_SOLI ,
         p_cod_usu                                               VAL_USUA,
         0                                                              VAL_TASA_IMPU ,
         TRUNC(SYSDATE)                     FEC_CRON ,
         lv_ind_perm_unio                   IND_PERM_UNIO_SOL ,
         NULL                               IND_GENE_CC ,
         NULL                               IND_APLI_MANU ,
         1                                  VAL_TIPO_CAMB ,
         NULL                               NUM_DOCU_CONT_INTE ,
         0                                  NUM_DOCU_ORIG,
         NULL                               VAL_LOTE_REPO_FALT ,
         NULL                               FEC_REPO_FALT ,
         0                                  VAL_BASE_FLET_LOCA,
         0                                  VAL_IMPO_FLET_LOCA,
         0                                          VAL_IMPO_FLET_TOTA_LOCA,
         0                                          VAL_IMPO_FLET_SIN_IMPU_TOTA,
         0                                          VAL_RECA_FLET_LOCA,
         0                                          VAL_OTRO_RECA_LOCA,
         cad.imp_movi                               VAL_TOTA_PAGA_LOCA,
         0                                          VAL_PREC_CATA_TOTA_LOCA,
         0                                          VAL_PREC_CATA_SIN_IMPU_TOTA,
         0                                          VAL_PREC_FACT_TOTA_LOCA,
         0                                          VAL_IMPO_IMPU_TOTA_LOCA,
         0                                          VAL_IMPO_DESC_1_TOTA_LOCA,
         0                                          VAL_IMPO_DESC_1_TOTA_DOCU ,
         0                                          VAL_IMPO_DESC_1_SIN_IMPU_TOTA ,
         0                                          VAL_IMPO_DESC_3_TOTA_DOCU ,
         0                                          VAL_IMPO_DESC_3_SIN_IMPU_TOTA,
         0                                          VAL_IMPO_DESC_TOTA_LOCA,
         0                                          VAL_IMPO_DTO_1_SIN_IMP_TOT_LOC,
         0                                          VAL_IMPO_REDO_LOCA,
         0                                          VAL_BASE_FLET_DOCU ,
         0                                          VAL_IMPO_FLET_DOCU ,
         0                                          VAL_IMPO_DESC_TOTA_DOCU ,
         0                                          VAL_IMPO_FLET_SIN_IMPU_DOCU ,
         0                                          VAL_RECA_FLET_DOCU ,
         0                                          VAL_OTRO_RECA_DOCU ,
         0                                          VAL_TOTA_FLET_DOCU,
         0                                          VAL_IMPO_FLET_TOTA_DOCU ,
         0                                          VAL_TOTA_FLET_LOCA,
         0                                          VAL_TOTA_PAGA_DOCU,
         0                                          VAL_PREC_CATA_TOTA_DOCU ,
         0                                          VAL_PREC_CATA_SIN_IMPU_TOTA_DO ,
         0                                          VAL_PREC_CONT_TOTA_LOCA ,
         0                                          VAL_PREC_CONT_SIN_IMPU_TOTA,
         0                                          VAL_PREC_CONT_SIN_IMPU_TOTA_1,
         0                                          VAL_PREC_FACT_TOTA_DOCU ,
         0                                          VAL_PREC_CATA_TOTA_LOC_UNI_DEM,
         0                                          VAL_PREC_NETO_TOTA_DOCU,
         0                                          VAL_PREC_NETO_TOTA_LOCA,
         0                                          VAL_IMPO_IMPU_TOTA_DOCU ,
         0                                          VAL_IMPO_REDO_DOCU ,
         0                                          VAL_IMPO_REDO_CONS_LOCA,
         0                                          VAL_IMPO_REDO_CONS_DOCU ,
         NULL                                       VAL_UNID_DEMA_REAL_TOTA ,
         NULL                                       NUM_UNID_POR_ATEN_TOTA,
         NULL                                       NUM_UNID_ATEN_TOTA,
         0                                          IND_OC ,
         lv_ind_pedi_prue                           IND_PEDI_PRUE ,
         1                                          IND_TS_NO_CONSO ,
         NULL                                       VAL_GLOS_OBSE ,
         NULL                                       VAL_OBSE_REVI ,
         NULL                                       NUM_PREM,
         0                                          VAL_IMPO_DESC_3_TOTA_LOCA ,
         0                                          VAL_IMPO_DTO_3_SIN_IMP_TOT_LOC ,
         lv_oid_pais                                PAIS_OID_PAIS ,
         cad.tido_oid_tipo_docu                          TIDO_OID_TIPO_DOCU ,
         zt.vepo_oid_valo_estr_geop                 VEPO_OID_VALO_ESTR_GEOP ,
         NULL                                       RECQ_OID_RESU_CHEQ,
         1                                          ESSO_OID_ESTA_SOLI ,
         NULL                                       COPA_OID_PARA_GENE ,
         4                                          GRPR_OID_GRUP_PROC ,
         1                                          SBTI_OID_SUBT_CLIE ,
         1                                          ACFI_OID_ACCE_FISI ,
         lv_oid_tipo_cons                           TSPA_OID_TIPO_SOLI_PAIS_CONS ,
         lv_oid_form_pago                           FOPA_OID_FORM_PAGO ,
         NULL                                       CLIE_OID_CONS_ASOC ,
         NULL                                       ESPE_OID_ESTA_PEDI ,
         lv_oid_clas_soli                           CLSO_OID_CLAS_SOLI ,
         zta.oid_terr_admi                          ZTAD_OID_TERR_ADMI ,
         NULL                                       INRE_OID_INDI_REVI ,
         44                                         OPER_OID_OPER  ,
         1                                          PROC_OID_PROC  ,
         TO_NUMBER(cad.soca_oid_docu_refe)           SOCA_OID_DOCU_REFE ,
         NULL                                       TCCL_OID_TCCL_FLET ,
         NULL                                       CLAS_OID_CLAS_FLET ,
         NULL                                       VAL_PUNT_EMIS ,
         NULL                                       NUM_LOTE_FACT ,
         NULL                                       VAL_PREC_CONT_TOTA_DOCU ,
         0                                          IND_INTE_LARI_GENE ,
         TO_CHAR(SYSDATE,'YYYYMMDD')                FEC_PROG_FACT_COMP ,
         NULL                                       ICTP_OID_TIPO_PROG ,
         NULL                                       ICTP_OID_CONC_TIPO_PROG ,
         NULL                                       VAL_ORIG_CHEQ ,
         NULL                                       VAL_IMPO_IVA_ASUM_EMPR,
         NULL                                       VAL_GANA_TOTA_LOCA,
         NULL                                       VAL_GANA_TOTA_DOCU,
         NULL                                       VAL_TASA_FLET,
         NULL                                       VAL_RECA_FLET,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL
      FROM
         (SELECT
             cad.num_lote ,
             cad.cod_clie,
             cad.soca_oid_docu_refe,
             (SELECT
               CASE
                WHEN lv_ind_tipo_nega = 1 THEN ftd.tido_oid_tipo_docu_cont
                ELSE
                  34
               END
              FROM fac_tipo_docum ftd
              WHERE ftd.oid_tipo_docu = cad.oid_tipo_docu_refe) tido_oid_tipo_docu,
             SUM(TO_NUMBER(cad.imp_movi)) imp_movi
          FROM ccc_carga_cadir_docle_masiv cad
          GROUP BY cad.num_lote , cad.cod_clie, cad.soca_oid_docu_refe,cad.oid_tipo_docu_refe) cad,
          mae_clien mc,
          mae_clien_direc mcd,
          mae_clien_unida_admin mcua,
          mae_clien_ident mci,
          zon_terri_admin zta,
          zon_secci zs,
          zon_terri zt,
          zon_zona zz
    WHERE cad.cod_clie=mc.cod_clie
    AND mcua.clie_oid_clie=mc.oid_clie
    AND mcua.ind_acti=1
    AND mc.oid_clie=mcd.clie_oid_clie
    AND mcd.ind_dire_ppal=1
    AND mcd.ind_elim=0
    AND mc.oid_clie=mci.clie_oid_clie
    AND mci.val_iden_docu_prin=1
    AND mcua.ztad_oid_terr_admi = zta.oid_terr_admi
    AND zs.zzon_oid_zona = zz.oid_zona
    AND zta.zscc_oid_secc=zs.oid_secc
    AND zta.terr_oid_terr=zt.oid_terr
    AND cad.num_lote=p_num_lote;

   CURSOR cur_carg_masi_deta
   IS
      SELECT
         ped_sopo_seq.NEXTVAL,         --OID_SOLI_POSI
         ROWNUM,                                --COD_POSI
         p_num_lote,                               --VAL_LOTE_PROD
         1*lv_ind_sign,                     --NUM_UNID_DEMA
         1*lv_ind_sign,                      --NUM_UNID_POR_ATEN
         lv_tasa,                                       --VAL_TASA_IMPU
         det.soca_oid_soli_cabe,             --SOCA_OID_SOLI_CABE
         lv_oid_tasa,                                --TAIM_OID_TASA_IMPU
         lv_oid_tipo_posi,                        --TPOS_OID_TIPO_POSI
         det.prod_oid_prod,                    --PROD_OID_PROD
         NULL,                                         --FOPA_OID_FORM_PAGO
         NULL,                                         --IND_LIMI_VENT
         NULL,                                         --IND_CTRL_STOC
         NULL,                                         --IND_CTRL_LIQU
         det.imp_movi,         --VAL_PREC_CATA_UNIT_LOCA,
         0,                                                --VAL_PREC_CONT_UNIT_LOCA,
         0,                                                --VAL_PREC_CATA_UNIT_DOCU,
         0,                                                --VAL_PREC_CONTA_UNIT_DOCU,
         0,                                                --VAL_PREC_FACT_UNIT_LOCA,
         0,                                                --VAL_PREC_FACT_UNIT_DOCU,
         0,                                                --VAL_PREC_SIN_IMPU_UNIT_LOCA,
         0,                                                --VAL_PREC_SIN_IMPU_UNIT_DOCU,
         0,                                                --VAL_PREC_SIN_IMPU_TOTA_DOCU,
         0,                                                --VAL_IMPO_DESC_UNIT_LOCA,
         NULL,                                         --VAL_IMPO_DESC_UNIT_DOCU,
         0,                                                --VAL_PREC_NETO_UNIT_LOCA,
         0,                                                --VAL_PREC_NETO_TOTA_DOCU,
         0,                                                --VAL_PREC_NETO_UNIT_DOCU,
         0,                                                --VAL_PREC_TOTA_TOTA_LOCA,
         0,                                                --VAL_PREC_TOTA_TOTA_DOCU,
         0,                                                --VAL_IMPO_IMPU_UNIT_LOCA,
         0,                                                --VAL_IMPO_IMPU_UNIT_DOCU,
         0,                                                --VAL_IMPO_DESC_TOTA_DOCU,
         0,                                                --VAL_IMPO_IMPU_TOTA_LOCA,
         0,                                                --VAL_IMPO_IMPU_TOTA_DOCU,
         0,                                                --VAL_IMPO_DESC_TOTA_LOCA,
         0,                                                --VAL_PREC_TOTA_UNIT_LOCA,
         0,                                                --VAL_PREC_TOTA_UNIT_DOCU,
         0,                                                --VAL_PREC_CONT_TOTA_LOCA,
         0,                                                --VAL_PREC_CATA_TOTA_LOCA,
         0,                                                --VAL_PREC_CATA_TOTA_DOCU,
         0,                                                --VAL_PREC_CONT_TOTA_DOCU,
         NULL,                                         --VAL_PORC_DESC,
         0,                                                --VAL_PREC_CATA_TOTA_LOCA_UNID,
         1*lv_ind_sign,                                --NUM_UNID_DEMA_REAL,
         1*lv_ind_sign,                                   --NUM_UNID_COMPR,
         NULL,                                          --NUM_UNID_CAMB,
         NULL,                                          --NUM_UNID_VENT,
         NULL,                                          --NUM_UNID_ATEN,
         NULL,                                          --VAL_CODI_VENT_FICT,
         0,                                                 --VAL_PREC_FACT_TOTA_LOCA,
         0,                                                 --VAL_PREC_FACT_TOTA_DOCU,
         0,                                                 --VAL_PREC_SIN_IMPU_TOTA_LOCA,
         0,                                                 --VAL_PREC_NETO_TOTA_LOCA,
         NULL,                                          --OFDE_OID_DETA_OFER,
         lv_oid_esta_posi,                        --ESPO_OID_ESTA_POSI,
         lv_oid_subt_posi,                        --STPO_OID_SUBT_POSI,
         NULL,                                          --IND_RECU_OBLI,
         det.cod_unic_vent,                             --VAL_CODI_VENT,
         NULL,                                          --SOPO_OID_SOLI_POSI,
         0,                                                 --IND_NO_IMPR,
         NULL,                                          --IND_DENT_FUER_CAJA_BOLS,
         NULL,                                          --VAL_CATA,
         NULL,                                          --NUM_PAGI_CATA,
         NULL,                                          --NUM_CONS,
         NULL,                                          --NUM_DOCU_CONT_INTE,
         NULL,                                          --VAL_EJER_DOCU_CONT_INTE,
         NULL,                                          --VAL_IMPO_DES_SIN_IMP_UNIT_LOCA,
         NULL,                                          --VAL_IMPO_DES_SIN_IMP_UNIT_DOCU,
         NULL,                                          --VAL_IMPO_DES_SIN_IMP_TOTA,
         NULL,                                          --VAL_IMPO_DES_SIN_IMP_TOTA_DOCU,
         NULL,                                           --VAL_OBSE,
         NULL,                                           --VAL_PREC_PUBL_UNIT_LOCA
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL         
        FROM ccc_carga_cadir_docle_masiv det
        WHERE det.num_lote = p_num_lote;

   CURSOR c_cursor
   IS
      SELECT distinct det.soca_oid_soli_cabe soca_oid_soli_cabe
        FROM ccc_histo_cadir_docle_masiv det
        WHERE det.num_lote = p_num_lote;


      TYPE t_tab_ped_solic_cabe                      IS TABLE OF ped_solic_cabec%ROWTYPE;
      TYPE t_tab_ped_solic_posi                       IS TABLE OF ped_solic_posic%ROWTYPE;
      TYPE t_tab_oid_soli_cabe                         IS TABLE OF ped_solic_cabec.oid_soli_cabe%TYPE;
      TYPE t_tab_oid_clie                                  IS TABLE OF mae_clien.oid_clie%TYPE;
      TYPE t_tab_imp_movi                                IS TABLE OF ped_solic_cabec.val_tota_paga_loca%TYPE;
      TYPE t_tab_soca_oid_docu_refe             IS TABLE OF ped_solic_cabec.soca_oid_docu_refe%TYPE;

      TYPE t_oid_soli_cabe IS TABLE OF Ped_Solic_Cabec.Oid_Soli_Cabe%TYPE;

      lv_tab_ped_soli_cabe                     t_tab_ped_solic_cabe;
      lv_tab_ped_soli_posi                     t_tab_ped_solic_posi;
      lv_tab_oid_soli_cabe                     t_tab_oid_soli_cabe;
      lv_tab_oid_clie                          t_tab_oid_clie;
      lv_tab_imp_movi                          t_tab_imp_movi;
      lv_tab_soca_oid_docu_refe                t_tab_soca_oid_docu_refe;
      lv_oid_soli_cabe                         t_oid_soli_cabe;

    lsparametroconso   sto_param_gener_occrr.val_param%TYPE;
    lsparametroCAL     sto_param_gener_occrr.val_param%TYPE;
    lsparametrofecha   VARCHAR2(10);

    i BINARY_INTEGER := 0;
    varoidsolicabe                NUMBER;
    lstipoproceso   VARCHAR2(1);


   BEGIN

      /* inicializa variables globales  para registro de log  */
      gv_log_cod_pais := p_cod_pais;
      gv_log_cod_soci := p_cod_soci;
      gv_log_user     := p_cod_usu;
      gv_log_cod_modu := p_cod_modu;
      gv_log_cod_proc := p_cod_proce;

      FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

      gv_des_log:='Inicio CCC_PR_CARGA_CARGO_DOCUM_MASIV';

      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


      lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_PERIO_ACTU;

      ---- Variables para cargo / abono en linea
      SELECT to_char(SYSDATE,'dd/mm/yyyy') INTO lsparametrofecha FROM dual;
      ---lsparametroconso := sto_pkg_gener.sto_fn_obten_param_ocr(p_cod_pais,'STO_IND_CONSOL');
      lsparametroCAL    := sto_pkg_gener.sto_fn_obten_param_ocr(p_cod_pais,'STO_IND_CARABOL');
      lsparametroconso  := nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_cod_pais,'STO_TIPO_CALC_FACT'),'1');

      SELECT
          b.oid_tipo_soli_pais,
          b.almc_oid_alma,
          b.fopa_oid_form_pago,
          b.tsol_oid_tipo_cons,
          b.tido_oid_tipo_docu,
          b.cact_oid_acti,
          a.sbac_oid_sbac,
          b.soci_oid_soci,
          b.mone_oid_mone,
          a.clso_oid_clas_soli,
          b.pais_oid_pais,
          b.val_glos,
          g.tpos_oid_tipo_posi,
          g.stpo_oid_subt_posi,
          g.prod_oid_prod,
          b.ind_pedi_prue,
          b.ind_perm_unio,
          a.ticl_oid_tipo_clie,
          a.ind_soli_nega
       INTO
          lv_oid_tipo_soli_pais,
          lv_oid_alma,
          lv_oid_form_pago,
          lv_oid_tipo_cons,
          lv_oid_tipo_docu,
          lv_oid_acti,
          lv_oid_sbac,
          lv_oid_soci,
          lv_oid_mone,
          lv_oid_clas_soli,
          lv_oid_pais,
          lv_val_glos,
          lv_oid_tipo_posi,
          lv_oid_subt_posi,
          lv_oid_prod,
          lv_ind_pedi_prue,
          lv_ind_perm_unio,
          lv_oid_tipo_clie,
          lv_ind_tipo_nega
       FROM
             ped_tipo_solic a,
             ped_tipo_solic_pais b,
             ped_tipo_solic_proce g
          WHERE b.tsol_oid_tipo_soli=a.oid_tipo_soli
          AND a.cod_tipo_soli=p_cod_tipo_soli
          AND g.OPER_OID_OPER IN (34,36)
          AND  g.TSPA_OID_TIPO_SOLI_PAIS=b.OID_TIPO_SOLI_PAIS;

      -- Actualiza el valor de indicado de negativo en funcion al tipo
      -- SCCC  Cargo   lv_ind_tipo_nega = 0
      -- SAC   Abono   lv_ind_tipo_nega = 1
      if p_cod_tipo_soli in ('SAC') then
         lv_ind_tipo_nega := 1;
      else
         lv_ind_tipo_nega := 0;
      end if;

      -- Obteniendo el estado de la posicion
      SELECT pep.oid_esta_posi
      INTO lv_oid_esta_posi
      FROM ped_estad_posic pep
      WHERE pep.cod_esta_posi='CO';

      SELECT
         DECODE(zz.OID_TASA_IMPU,NULL,z.OID_TASA_IMPU,zz.OID_TASA_IMPU) ,
         DECODE(zz.VAL_TASA_IMPU,NULL,z.VAL_TASA_IMPU,zz.VAL_TASA_IMPU)
         INTO lv_oid_tasa, lv_tasa
      FROM
           ped_impue_gener v,
           ped_tasa_impue z,
           ped_impue_negoc x,
           mae_produ y,
           ped_tasa_impue zz
      WHERE v.pais_oid_pais= lv_oid_pais
      AND v.sbac_oid_sbac= lv_oid_sbac
      AND v.taim_oid_tasa_impu=z.oid_tasa_impu
      AND x.nego_oid_nego(+)=y.nego_oid_nego
      AND x.taim_oid_tasa_impu=zz.oid_tasa_impu(+)
      AND y.oid_prod= lv_oid_prod;

      IF lv_ind_tipo_nega=1 THEN
        lv_ind_sign:=-1;
      ELSE
         lv_ind_sign:=1;
      END IF;

      -- Obtener la cantidad de Cargos Masivos a procesar
      SELECT COUNT(*)
      INTO lv_cant_carg_masi
      FROM ccc_carga_cadir_docle_masiv;

      gv_des_log:='Cantidad de CAD a Procesar : ' || lv_cant_carg_masi;
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      lv_num_iden_cuot_inic:=ccc_pkg_gener.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(p_cod_pais,p_cod_soci,'000',lv_cant_carg_masi);

      gv_des_log:='Inicio : Insertando en PED_SOLIC_CABEC';
      fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      OPEN cur_carg_masi;
      LOOP
         FETCH cur_carg_masi BULK COLLECT INTO  lv_tab_ped_soli_cabe LIMIT w_filas;

         IF lv_tab_ped_soli_cabe.COUNT > 0 THEN

            FORALL x IN lv_tab_ped_soli_cabe.FIRST .. lv_tab_ped_soli_cabe.LAST
                INSERT INTO ped_solic_cabec VALUES lv_tab_ped_soli_cabe(x)
                RETURNING oid_soli_cabe ,
                          clie_oid_clie,
                          val_tota_paga_loca,
                          soca_oid_docu_refe
                BULK COLLECT INTO lv_tab_oid_soli_cabe,
                                  lv_tab_oid_clie,
                                  lv_tab_imp_movi,
                                  lv_tab_soca_oid_docu_refe;

             FORALL y IN lv_tab_ped_soli_cabe.FIRST .. lv_tab_ped_soli_cabe.LAST
                UPDATE ccc_carga_cadir_docle_masiv cad
                SET cad.soca_oid_soli_cabe = lv_tab_oid_soli_cabe(y)
                WHERE cad.soca_oid_docu_refe = lv_tab_soca_oid_docu_refe(y)
                AND cad.num_lote = p_num_lote;

         END IF;
         EXIT WHEN cur_carg_masi%NOTFOUND;
      END LOOP;
      CLOSE cur_carg_masi;

       gv_des_log:='Inicio : Insertando en PED_SOLIC_POSIC';
      fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      OPEN cur_carg_masi_deta;
      LOOP
         FETCH cur_carg_masi_deta BULK COLLECT INTO  lv_tab_ped_soli_posi LIMIT w_filas;
            IF lv_tab_ped_soli_posi.COUNT > 0 THEN

               FORALL z IN 1 .. lv_tab_ped_soli_posi.COUNT
                  INSERT INTO ped_solic_posic VALUES lv_tab_ped_soli_posi(z);

            END IF;

         EXIT WHEN cur_carg_masi_deta%NOTFOUND;
      END LOOP;

      CLOSE cur_carg_masi_deta;

      gv_des_log:='Registrando en el Historico de Cargos Procesados';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

         INSERT INTO ccc_histo_cadir_docle_masiv
            SELECT *
            FROM ccc_carga_cadir_docle_masiv  cdm
            WHERE cdm.num_lote=p_num_lote;

         DELETE FROM ccc_carga_cadir_docle_masiv  cdm
         WHERE cdm.num_lote=p_num_lote;

      ---- Proceso para ejecutar el cargo / abono en linea
      IF ((lsparametroconso is not null) and lsparametroCAL = '1') THEN

        if lv_ind_tipo_nega = 1 then
           lstipoproceso := 'A';
        else
           lstipoproceso := 'C';
        end if;


          OPEN c_cursor;
          LOOP
            FETCH c_cursor BULK COLLECT
              INTO lv_oid_soli_cabe LIMIT w_filas;

            IF lv_oid_soli_cabe.count > 0 THEN

              FOR i IN lv_oid_soli_cabe.first .. lv_oid_soli_cabe.last
              LOOP
                    varoidsolicabe := lv_oid_soli_cabe(i);

                    sto_pkg_envio_valid_sicc.sto_pr_genera_consolidado(lv_oid_soli_cabe(i),
                                                                       lsparametrofecha,
                                                                       p_cod_pais,
                                                                       lsparametroconso,
                                                                       lstipoproceso);
              END LOOP;
            END IF;
            EXIT WHEN c_cursor%NOTFOUND;
          END LOOP;
          CLOSE c_cursor;


          gv_des_log:='Realizando el Cargo/abono en linea';
          FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);
      end if;

      gv_des_log:='Fin CCC_PR_CARGA_CARGO_ABONO_MASIV';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
      FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);


   EXCEPTION
      WHEN OTHERS THEN
         gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
     gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
     raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

   END CCC_PR_PROCE_CADIR_DOCLE_MASIV;

 PROCEDURE CCC_PR_ELIMI_BLOQU_FINAN_MASIV(
  p_num_lote                       IN   VARCHAR2)
 IS
 BEGIN

  DELETE FROM ccc_carga_bloqu_finan_masiv;

  DELETE FROM ccc_error_bloqu_finan_masiv;

 EXCEPTION
  WHEN OTHERS THEN
   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(sqlerrm,1,250);
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_ELIMI_BLOQU_FINAN_MASIV: '||ls_sqlerrm);

 END CCC_PR_ELIMI_BLOQU_FINAN_MASIV;

 PROCEDURE CCC_PR_VALID_BLOQU_FINAN_MASIV(
  p_num_lote                   IN   VARCHAR2,
  p_cant_regi_carg             OUT  VARCHAR2,
  p_cod_error                  OUT  VARCHAR2)
 IS

 CURSOR c_load_bloq_masi
 IS
  SELECT *
  FROM   ccc_carga_bloqu_finan_masiv
  WHERE num_lote = p_num_lote
  ORDER  BY val_fila;

  TYPE t_tab_ccc_load_bloq_masi         IS TABLE OF ccc_carga_bloqu_finan_masiv%ROWTYPE;
  lv_tab_ccc_load_bloq_masi             t_tab_ccc_load_bloq_masi;
  lv_reg_ccc_load_bloq_masi             ccc_carga_bloqu_finan_masiv%ROWTYPE;
  lv_reg_ccc_erro_bloq_masi             ccc_error_bloqu_finan_masiv%ROWTYPE;
  lv_oid_clie                           mae_clien.oid_clie%TYPE;
      lv_cant_erro                          NUMBER(12);
      lv_ind_dupl                           NUMBER(12);
      lv_ind_bloq                           NUMBER(12);
      lv_ind_desb                           NUMBER(12);

   BEGIN

      OPEN c_load_bloq_masi;
      LOOP
         FETCH c_load_bloq_masi BULK COLLECT INTO lv_tab_ccc_load_bloq_masi LIMIT W_FILAS;
            IF lv_tab_ccc_load_bloq_masi.COUNT > 0 THEN

               FOR x IN lv_tab_ccc_load_bloq_masi.FIRST .. lv_tab_ccc_load_bloq_masi.LAST LOOP

                  lv_reg_ccc_load_bloq_masi := lv_tab_ccc_load_bloq_masi(x);
                  lv_reg_ccc_erro_bloq_masi.num_lote := lv_reg_ccc_load_bloq_masi.num_lote;
                  lv_reg_ccc_erro_bloq_masi.val_fila := lv_reg_ccc_load_bloq_masi.val_fila;

                  --01) Validando los datos Obligatorios
                  IF (lv_reg_ccc_load_bloq_masi.cod_clie IS NULL) THEN
                     lv_reg_ccc_erro_bloq_masi.cod_erro := '01';
                     lv_reg_ccc_erro_bloq_masi.des_erro := 'Dato obligatorio en nulo - Codigo Consultora';

                     INSERT INTO ccc_error_bloqu_finan_masiv VALUES lv_reg_ccc_erro_bloq_masi;

                  END IF;

                  IF lv_reg_ccc_load_bloq_masi.cod_clie IS NOT NULL THEN

                     --02) El codigo consultora no existe
                     BEGIN

                        SELECT mc.oid_clie
                        INTO lv_oid_clie
                        FROM mae_clien mc
                        WHERE mc.cod_clie=lv_reg_ccc_load_bloq_masi.cod_clie;

                        SELECT COUNT(1)
                        INTO lv_ind_dupl
                        FROM ccc_carga_bloqu_finan_masiv fin
                        WHERE fin.num_lote = lv_reg_ccc_load_bloq_masi.num_lote
                        AND fin.cod_clie = lv_reg_ccc_load_bloq_masi.cod_clie;

                        IF lv_ind_dupl > 1 THEN

                              lv_reg_ccc_erro_bloq_masi.cod_erro := '05';
                              lv_reg_ccc_erro_bloq_masi.des_erro := 'Consultora esta duplicada';

                              INSERT INTO ccc_error_bloqu_finan_masiv VALUES lv_reg_ccc_erro_bloq_masi;

                        END IF;

                        --03) Validacion Si Esta Bloqueado
                        IF lv_reg_ccc_load_bloq_masi.cod_tipo_acci = 'B' THEN


                           SELECT COUNT(1)
                           INTO lv_ind_bloq
                           FROM
                              mae_clien_bloqu mcb,
                              mae_tipo_bloqu mtb
                           WHERE mcb.tibq_oid_tipo_bloq = mtb.oid_tipo_bloq
                             AND mtb.cod_tipo_bloq = lv_reg_ccc_load_bloq_masi.cod_tipo_bloq
                             AND mcb.clie_oid_clie = lv_oid_clie
                             AND mcb.fec_desb IS NULL;

                           IF lv_ind_bloq > 0 THEN

                              DELETE FROM   ccc_carga_bloqu_finan_masiv
                              WHERE num_lote = p_num_lote
                              AND val_fila = lv_reg_ccc_load_bloq_masi.val_fila;

                           END IF;

                         ELSE

                           SELECT COUNT(1)
                           INTO lv_ind_bloq
                           FROM
                              mae_clien_bloqu mcb,
                              mae_tipo_bloqu mtb
                           WHERE mcb.tibq_oid_tipo_bloq = mtb.oid_tipo_bloq
                             AND mtb.cod_tipo_bloq = lv_reg_ccc_load_bloq_masi.cod_tipo_bloq
                             AND mcb.clie_oid_clie = lv_oid_clie
                             AND mcb.fec_desb IS NULL;


                           IF lv_ind_desb = 0 THEN

                              DELETE FROM   ccc_carga_bloqu_finan_masiv
                              WHERE num_lote = p_num_lote
                              AND val_fila = lv_reg_ccc_load_bloq_masi.val_fila;

                           END IF;

                        END IF;

                     EXCEPTION

                        WHEN NO_DATA_FOUND THEN
                           lv_reg_ccc_erro_bloq_masi.cod_erro := '02';
                           lv_reg_ccc_erro_bloq_masi.des_erro := 'Codigo de Consultora No Existe';

                           INSERT INTO ccc_error_bloqu_finan_masiv VALUES lv_reg_ccc_erro_bloq_masi;

                     END;


                  END IF;

               END LOOP;

            END IF;

         EXIT WHEN c_load_bloq_masi%NOTFOUND;
      END LOOP;
   CLOSE c_load_bloq_masi;

   SELECT COUNT(*)
   INTO  lv_cant_erro
   FROM  ccc_error_bloqu_finan_masiv
   WHERE num_lote = p_num_lote;

   p_cod_error := lv_cant_erro;

   SELECT TO_CHAR(COUNT(*))
   INTO p_cant_regi_carg
   FROM ccc_carga_bloqu_finan_masiv cad
   WHERE cad.num_lote = p_num_lote;

EXCEPTION
   WHEN OTHERS THEN
      ln_sqlcode := SQLCODE;
      ls_sqlerrm := substr(sqlerrm,1,250);
      RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_VALID_BLOQU_FINAN_MASIV: '||ls_sqlerrm);

END CCC_PR_VALID_BLOQU_FINAN_MASIV;


/***************************************************************************
   Descripcion       : Procesa los Cargos que generan Documento Legal cargados en
                        la tabla de carga de cargos y abonos directos masivos
                        (CCC_CARGA_CARGO_DOCUM_MASIV).
   Fecha Creacion    : 22/05/2009
   Autor             : Jorge Florencio
***************************************************************************/
PROCEDURE CCC_PR_PROCE_BLOQU_FINAN_MASIV(
   p_cod_pais                      IN   seg_pais.cod_pais%TYPE,
   p_cod_tipo_acci                 IN   seg_socie.cod_soci%TYPE,
   p_cod_tipo_bloq                 IN   ped_tipo_solic.cod_tipo_soli%TYPE,
   p_val_moti_bloq                 IN   ped_tipo_solic.cod_tipo_soli%TYPE,
   p_num_lote                      IN   ccc_carga_cadir_docle_masiv.num_lote%TYPE,
   p_cod_usu                       IN   seg_usuar.use_usua%TYPE,
   p_cod_modu                      IN   fin_proce_modul.cod_modu%TYPE,
   p_cod_proce                     IN   fin_proce_modul.cod_proc%TYPE)
IS

   lv_oid_tipo_bloq                mae_tipo_bloqu.oid_tipo_bloq%TYPE;
   lv_oid_acci_bloq_desb           mae_accio_bloqu.oid_acci_bloq%TYPE;
   lv_cod_erro                     VARCHAR2(50);

BEGIN

   /* inicializa variables globales  para registro de log  */
   gv_log_cod_pais := p_cod_pais;
   gv_log_user     := p_cod_usu;
   gv_log_cod_modu := p_cod_modu;
   gv_log_cod_proc := p_cod_proce;

   FIN_PKG_GENER.FIN_PR_REGIS_PROCE_LOG(gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec,lv_cod_erro);

   gv_des_log:='Inicio CCC_PR_PROCE_BLOQU_FINAN_MASIV';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,  gv_log_cod_modu, gv_log_cod_proc,gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='Numero de Lote : ' || p_num_lote;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,  gv_log_cod_modu, gv_log_cod_proc,gv_cod_proc_ejec, gv_des_log);

   -- Obteniendo el Tipo de Bloqueo
   SELECT mtb.oid_tipo_bloq
   INTO lv_oid_tipo_bloq
   FROM mae_tipo_bloqu mtb
   WHERE mtb.cod_tipo_bloq = p_cod_tipo_bloq ;

   --Obteniendo el Valor Accion de Bloqueo
   SELECT vab.oid_valo_acci_bloq
   INTO lv_oid_acci_bloq_desb
   FROM mae_valor_accio_bloqu vab
   WHERE vab.cod_valo_bloq = 'A';

   IF p_cod_tipo_acci = 'B' THEN

      INSERT INTO mae_clien_bloqu
       (oid_bloq,
        clie_oid_clie,
        tibq_oid_tipo_bloq,
        fec_bloq,
        val_moti_bloq,
        val_usua_bloq,
        obs_bloq,
        fec_desb,
        val_usua_desb,
        maab_oid_valo_acci_bloq,
        maab_oid_valo_acci_desb,
        obs_desb)
         SELECT
            mae_clbl_seq.NEXTVAL,     -- oid_bloq    number(12)
            clie_oid_clie,            --clie_oid_clie    number(12)
           lv_oid_tipo_bloq,         --tibq_oid_tipo_bloq    number(12)
            TRUNC(SYSDATE),           --fec_bloq    date
            p_val_moti_bloq,          --val_moti_bloq    varchar2(50)
            p_cod_usu,                --val_usua_bloq    varchar2(20)
            'BLOQUEO MASIVO MEDIANTE EXCEL' ,                     --obs_bloq    varchar2(100)
            NULL,                     --fec_desb    date
            NULL,                     --val_usua_desb    varchar2(20)
            lv_oid_acci_bloq_desb,    --maab_oid_valo_acci_bloq    number(12)
            NULL,                     --maab_oid_valo_acci_desb    number(12)
            NULL                      --obs_desb    varchar2(100)
         FROM
            ( SELECT DISTINCT mc.oid_clie clie_oid_clie
              FROM
                 mae_clien mc,
                 ccc_carga_bloqu_finan_masiv fin
              WHERE mc.cod_clie = fin.cod_clie
              AND fin.num_lote = p_num_lote);


         gv_des_log:='Se bloquearon ' || SQL%ROWCOUNT || ' consultoras';
         FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,  gv_log_cod_modu, gv_log_cod_proc,gv_cod_proc_ejec, gv_des_log);

   ELSE

     UPDATE mae_clien_bloqu mcb
     SET mcb.fec_desb = trunc(SYSDATE),
         mcb.val_usua_desb = p_cod_usu,
         mcb.maab_oid_valo_acci_desb = lv_oid_acci_bloq_desb,
         mcb.obs_desb = 'DESBLOQUEO MASIVO MEDIANTE EXCEL'
     WHERE EXISTS (
        SELECT NULL
        FROM
           mae_clien mc,
           ccc_carga_bloqu_finan_masiv fin
        WHERE mc.cod_clie = fin.cod_clie
          AND mc.oid_clie = mcb.clie_oid_clie
          AND fin.num_lote = p_num_lote);

     gv_des_log:='Se bloquearon ' || SQL%ROWCOUNT || ' consultoras';
     FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,  gv_log_cod_modu, gv_log_cod_proc,gv_cod_proc_ejec, gv_des_log);

   END IF;

   INSERT INTO ccc_histo_bloqu_finan_masiv
      SELECT *
      FROM ccc_carga_bloqu_finan_masiv  cdm
      WHERE cdm.num_lote=p_num_lote;

   DELETE FROM ccc_carga_bloqu_finan_masiv  cdm
   WHERE cdm.num_lote=p_num_lote;


   gv_des_log:='Fin CCC_PR_PROCE_BLOQU_FINAN_MASIV';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,  gv_log_cod_modu, gv_log_cod_proc,gv_cod_proc_ejec, gv_des_log);

   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);


EXCEPTION

   WHEN OTHERS THEN
      ln_sqlcode := SQLCODE;
      ls_sqlerrm := substr(SQLERRM, 1, 250);
      gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;

      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG( gv_log_cod_pais,  gv_log_cod_modu, gv_log_cod_proc,gv_cod_proc_ejec, gv_des_log);
      FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(gv_log_cod_pais,gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
      RAISE_application_error(-20123,
                              'ERROR CCC_PR_PROCE_BLOQU_FINAN_MASIV: ' ||
                               ls_sqlerrm);

END CCC_PR_PROCE_BLOQU_FINAN_MASIV;

PROCEDURE CCC_PR_ELIMI_PAGOS_BANCA_MASIV
IS
BEGIN
  DELETE FROM CCC_CARGA_PAGOS_BANCA_MASIV;
  DELETE FROM CCC_ERROR_PAGOS_BANCA_MASIV;

END CCC_PR_ELIMI_PAGOS_BANCA_MASIV;

 PROCEDURE CCC_PR_VALID_PAGOS_BANCA_MASIV(
  p_ind_tipo_carg                  IN    VARCHAR2,
  p_cant_regi_carg                 OUT   VARCHAR2,
  p_imp_tota_carg                  OUT   VARCHAR2,
  p_cod_error                      OUT   VARCHAR2)
 IS

  CURSOR c_carga_pagos_masiv
  IS
  SELECT *
  FROM CCC_CARGA_PAGOS_BANCA_MASIV
  ORDER BY VAL_FILA;

  TYPE t_tab_ccc_carga_pagos_masiv  IS TABLE OF CCC_CARGA_PAGOS_BANCA_MASIV%ROWTYPE;
  lv_tab_ccc_carga_pagos_masiv           t_tab_ccc_carga_pagos_masiv;
  lv_reg_ccc_carga_pagos_masiv           CCC_CARGA_PAGOS_BANCA_MASIV%ROWTYPE;

  lv_imp_pago                      NUMBER;
  lv_fec_pago                      DATE;
  lv_cant_Erro                     NUMBER;
  lv_oid_clie                      mae_clien.oid_clie%TYPE;
  lv_cod_clie                      mae_clien.cod_clie%TYPE;
  lv_ind_cod_clie_banc_fict        ccc_pais_socie_param.ind_cod_clie_banc_fict%TYPE;
  lv_val_cod_clie_banc_fict        ccc_pais_socie_param.val_cod_clie_banc_fict%TYPE;

 BEGIN

  SELECT pa.ind_cod_clie_banc_fict,pa.val_cod_clie_banc_fict
  INTO lv_ind_cod_clie_banc_fict,lv_val_cod_clie_banc_fict
  FROM ccc_pais_socie_param pa;


  OPEN c_carga_pagos_masiv;
  LOOP
   FETCH c_carga_pagos_masiv BULK COLLECT INTO lv_tab_ccc_carga_pagos_masiv LIMIT W_FILAS;
   IF lv_tab_ccc_carga_pagos_masiv.COUNT > 0 THEN

    FOR x IN lv_tab_ccc_carga_pagos_masiv.FIRST .. lv_tab_ccc_carga_pagos_masiv.LAST LOOP
     lv_reg_ccc_carga_pagos_masiv := lv_tab_ccc_carga_pagos_masiv(x);

     --01) Validando los datos Obligatorios
     IF (lv_reg_ccc_carga_pagos_masiv.Cod_clie IS NULL) THEN
      INSERT INTO CCC_ERROR_PAGOS_BANCA_MASIV(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_carga_pagos_masiv.Val_Fila, '01', 'Dato oblligatorio en nulo - Codigo Consultora');
     END IF;

     IF (lv_reg_ccc_carga_pagos_masiv.fec_pago IS NULL) THEN
      INSERT INTO CCC_ERROR_PAGOS_BANCA_MASIV(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_carga_pagos_masiv.Val_Fila, '01', 'Dato oblligatorio en nulo - Fecha Pago');
     END IF;

     IF (to_date(lv_reg_ccc_carga_pagos_masiv.fec_pago,'dd/mm/yyyy') > TRUNC(SYSDATE)) THEN
     --IF (lv_reg_ccc_carga_pagos_masiv.fec_pago > TRUNC(SYSDATE)) THEN
      INSERT INTO CCC_ERROR_PAGOS_BANCA_MASIV(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_carga_pagos_masiv.Val_Fila, '01', 'Fecha Pago Incorrecta');
     END IF;

     IF (lv_reg_ccc_carga_pagos_masiv.imp_pago IS NULL) THEN
      INSERT INTO CCC_ERROR_PAGOS_BANCA_MASIV(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_carga_pagos_masiv.Val_Fila, '01', 'Dato oblligatorio en nulo - Importe Pago');
     END IF;

     --02) El codigo consultora no existe
     IF p_ind_tipo_carg <> gc_ind_tipo_carg_cedu THEN

      BEGIN

       SELECT mc.oid_clie
       INTO lv_oid_clie
       FROM mae_clien mc
       WHERE mc.cod_clie = lv_reg_ccc_carga_pagos_masiv.cod_clie;

      EXCEPTION

       WHEN NO_DATA_FOUND THEN
        IF lv_reg_ccc_carga_pagos_masiv.cod_clie <> lv_val_cod_clie_banc_fict THEN
         INSERT INTO CCC_ERROR_PAGOS_BANCA_MASIV(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_carga_pagos_masiv.val_fila, '02', 'Codigo de Consultora No Existe');
        END IF;

      END;

     ELSE

      -- Validacion por Documento de Identidad
      BEGIN
       SELECT mc.oid_clie, mc.cod_clie
       INTO lv_oid_clie, lv_cod_clie
       FROM
        mae_clien mc,
        mae_clien_ident mci
       WHERE mc.oid_clie = mci.clie_oid_clie
       AND mci.num_docu_iden = lv_reg_ccc_carga_pagos_masiv.cod_clie;

       UPDATE ccc_carga_pagos_banca_masiv pm
       SET pm.cod_clie = lv_cod_clie
       WHERE pm.val_fila = lv_reg_ccc_carga_pagos_masiv.val_fila;

      EXCEPTION

       WHEN NO_DATA_FOUND THEN
        INSERT INTO CCC_ERROR_PAGOS_BANCA_MASIV(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_carga_pagos_masiv.val_fila, '20', 'Documento de Identidad ' || lv_reg_ccc_carga_pagos_masiv.cod_clie || ' No Existe');

      END;

     END IF;


     --03) El Importe de Pago es Incorrecto
     BEGIN

      IF (lv_reg_ccc_carga_pagos_masiv.imp_pago IS NOT NULL) THEN
       lv_imp_pago := TO_NUMBER(lv_reg_ccc_carga_pagos_masiv.imp_pago,'9999999999.99');
      END IF;

     EXCEPTION

      WHEN VALUE_ERROR THEN
       INSERT INTO CCC_ERROR_PAGOS_BANCA_MASIV(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_carga_pagos_masiv.Val_Fila, '03', 'Dato no es numerico - Importe Movimiento');

     END;

                   --04) La Fecha de Pago es Incorrecto
                   BEGIN

                     IF (lv_reg_ccc_carga_pagos_masiv.fec_pago IS NOT NULL) THEN
                        lv_fec_pago := TO_DATE(lv_reg_ccc_carga_pagos_masiv.fec_pago,'DD/MM/YYYY');
                     END IF;

                   EXCEPTION
                      WHEN OTHERS THEN
                         INSERT INTO CCC_ERROR_PAGOS_BANCA_MASIV(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_carga_pagos_masiv.Val_Fila, '04', 'Dato no es una fecha valida -Fecha Pago');
                   END;
          END LOOP;
       END IF;

      EXIT WHEN c_carga_pagos_masiv%NOTFOUND;
         END LOOP;
      CLOSE c_carga_pagos_masiv;

  SELECT
   TO_CHAR(COUNT(1)),
   TO_CHAR(SUM(to_number(pb.imp_pago,'99999999999.999999999')))
  INTO
   p_cant_regi_carg ,
   p_imp_tota_carg
  FROM ccc_carga_pagos_banca_masiv pb;

  SELECT COUNT(*)
  INTO  lv_cant_Erro
  FROM  ccc_error_pagos_banca_masiv;

  p_cod_error := lv_cant_erro;

 EXCEPTION

  WHEN OTHERS THEN

   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(sqlerrm,1,250);
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_VALID_PAGOS_BANCA_MASIV: '||ls_sqlerrm);
 END CCC_PR_VALID_PAGOS_BANCA_MASIV;

 PROCEDURE CCC_PR_PROCE_PAGOS_BANCO_MASIV(
  p_cod_cban                       IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE,
  p_num_lote                       OUT  ccc_movim_banca.num_lote%TYPE)

 IS

  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_oid_supb_crea                 ccc_subpr.oid_subp%TYPE;
  lv_oid_tipo_abon_crea            ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
  lv_oid_tipo_trans                ccc_tipo_trans.oid_tipo_tran%TYPE;
  lv_oid_cc_banc                   ccc_cuent_corri_banca.cod_cc%TYPE;
  lv_num_lote                      ccc_movim_banca.num_lote%TYPE;


  lc_cod_erro                      CONSTANT VARCHAR2(2):='CC';
  lc_val_esta_movi_pend            CONSTANT VARCHAR2(1):='P';
  lc_val_cod_iden_proc_ok          CONSTANT VARCHAR2(1):='T';
  lc_val_cod_iden_proc_erro        CONSTANT VARCHAR2(1):='I';
  lc_cod_proc_reca                 CONSTANT VARCHAR2(6):='TES001';
  lc_cod_subp_reca_manu            CONSTANT NUMBER(1):=2;
  lc_cod_tipo_tran                 CONSTANT VARCHAR2(5):='TBEFE';

 BEGIN

  /* inicializa variables globales  para registro de log  */
  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');

  /* inicializa variables globales  para registro de log  */
  gv_log_cod_pais := lv_cod_pais;
  gv_log_cod_soci := lv_cod_soci;
  gv_log_user     := p_cod_usua;
  gv_log_cod_modu := 'CCC';
  gv_log_cod_proc := '17';

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

  gv_des_log:='Inicio CCC_PR_PROCE_PAGOS_BANCO_MASIV parametros ' ||
                  ' 1: '  || lv_cod_pais ||
                  ' 2: '  || lv_cod_soci ||
                  ' 3: '  || p_cod_cban ||
                  ' 4: '  || p_cod_usua ;

  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  lv_oid_pais:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);
  lv_oid_soci:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);

  lv_oid_supb_crea:=CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_OID_SUBPR(lc_cod_proc_reca,lc_cod_subp_reca_manu);
  lv_oid_tipo_abon_crea := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_OID_TICAB(lv_oid_supb_crea);

  SELECT ccb.oid_cuen_corr_banc
  INTO lv_oid_cc_banc
  FROM ccc_cuent_corri_banca ccb
  WHERE ccb.cod_cc = p_cod_cban;

  SELECT tt.oid_tipo_tran
  INTO lv_oid_tipo_trans
  FROM ccc_tipo_trans tt
  WHERE tt.cod_tipo_tran = lc_cod_tipo_tran;

  lv_num_lote:= TO_NUMBER(INT_PKG_CCC.CCC_FN_OBTIE_NUMER_LOTE);
  p_num_lote := lv_num_lote;

  gv_des_log:='Numeto de Lote a Generar ' || lv_num_lote;
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


  gv_des_log:='Inicio Insercion de Pagos Bancarios';
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  INSERT INTO ccc_movim_banca
   SELECT
    ccc_cmba_seq.NEXTVAL,          --oid_movi_banc
    lv_oid_soci,                                 --soci_oid_soci
    lv_oid_supb_crea,                       --subp_oid_marc_ulti
    lv_oid_supb_crea,                       --subp_oid_marc_crea
    lv_oid_tipo_abon_crea,               --tcab_oid_abon_ulti
    lv_oid_tipo_abon_crea,               --tcab_oid_abon_crea
    lv_oid_tipo_trans,                       --ttra_oid_tipo_trans
    lv_oid_cc_banc,                          --ccba_oid_cc_banc
    ban.val_fila,                                   --num_cons_tran
    lv_num_lote,                                --num_lote
    ban.cod_clie,                               --cod_cons
    CASE
     WHEN FIN_PKG_GENER.FIN_FN_OBTIE_OID_CLIEN(ban.cod_clie)
          IS NOT NULL THEN
      NULL
     ELSE
     lc_cod_erro
    END,         -- cod_erro
    NULL,                                           --val_digi_cheq_fact
    NULL,                                           --val_docu_apli_anio
    NULL,                                           --val_docu_apli_mes_seri
    NULL,                                           --val_docu_apli_nume
    NULL,                                           --val_docu_crea_anio
    NULL,                                           --val_docu_crea_mes_seri
    NULL,                                           --val_docu_crea_nume
    lc_val_esta_movi_pend,               --val_esta_movi_pend
    NULL,                                           --fec_cont
    TO_DATE(ban.fec_pago, 'DD/MM/YYYY'),                              --fec_pago
    TRUNC(SYSDATE),                                    --fec_proc
    NULL,                                            --val_hora_proc
    CASE
     WHEN FIN_PKG_GENER.FIN_FN_OBTIE_OID_CLIEN(ban.cod_clie)
          IS NOT NULL THEN
      'N'
     ELSE
     'P'
    END,           --val_hora_norm_adic
    CASE
     WHEN FIN_PKG_GENER.FIN_FN_OBTIE_OID_CLIEN(ban.cod_clie)
      IS NOT NULL THEN
      lc_val_cod_iden_proc_ok
     ELSE
     lc_val_cod_iden_proc_erro
    END ,           --cod_iden_proc
    TO_NUMBER(ban.imp_pago,'9999999999.99'),                                --imp_pago
    NULL,                          --val_nomb_ofic
    NULL,                          --num_cupo
    NULL,                          --val_nume_docu
    NULL,                          --num_fact_bole
    NULL,                          --val_nume_lote_cont
    'CARGA MASIVA EXCEL',          --val_obse
    NULL,                          --cod_ofic_reca
    p_cod_usua,                    --val_usua_proc
    SYSDATE,                       --fec_movi_apli
    TO_NUMBER(ban.imp_pago,'9999999999.99'),                  --val_impo_movi
    p_cod_usua,                    --cod_usua
    NULL,                          --num_lote_exte
    0,                             --num_hist
    0,                             --imp_apli
    TO_NUMBER(ban.imp_pago,'9999999999.99'),                  --imp_sald_pend
    lv_oid_pais,                   --pais_oid_pais
    NULL,                          --sbac_oid_sbac
    NULL,                          --tier_oid_erro
    FIN_PKG_GENER.FIN_FN_OBTIE_OID_CLIEN(ban.cod_clie),                   --clie_oid_clie
    NULL,                           --mcac_oid_cabe,
    NULL,                           -- cod_usua_rece  varchar2(25)
    NULL,                           -- val_hora_rece  date
    NULL,                           -- cod_usua_liqu  varchar2(25)
    NULL,                           -- val_hora_liqu  date
    NULL,                           -- cod_usua_regu  varchar2(25)
    NULL,                           -- val_hora_regu  date
    p_cod_usua,                     -- cod_usu_carg_exce  varchar2(25)
    SYSDATE,                         -- val_hora_carg_exce  date
    0,                               -- ind_pago_regu
    NULL,                            -- cod_digi_cheq
    NULL,                             -- num_docu_iden,
    NULL,                             -- oid_banc_sucu_cheq
    NULL,                            -- ind_tipo_cheq
    NULL,                             -- fec_cobr_cheq,
    NULL,                             -- cod_banc_cheq,
    NULL,                              -- cod_sucu_cheq
    NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
    0,                             -- ind_erro_gest
    NULL,                         -- imp_pago_tota
    NULL,                          -- imp_perc
    0,                             -- ind_pago_inco
    0,                            -- ind_pago_exce
    0,                             --ind_exce_vali
    0,                             --imp_apli_clie NUMBER(15,2)
    0,                             -- imp_apli_exce NUMBER(15,2)
    0,                             --imp_apli_inco NUMBER(15,2)
    0,                             --imp_apli_cobr_exte NUMBER(15,2)
    0,                             --imp_apli_cobr_pend_regu NUMBER(15,2));
    0,                              --imp_apli_fami_prot NUMBER(15,2));
    0,                               -- ind_elim
    0                               -- ind_pago_reve
   FROM ccc_carga_pagos_banca_masiv ban;

  gv_des_log:='Fin Insercion de Pagos Bancarios';
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  CCC_PKG_GENER.CCC_PR_REGIS_LOTE_BANCA(p_cod_cban,gc_cod_tipo_orig_exce, lv_num_lote,p_cod_usua);
  gv_des_log:='Registrando Lote Bancario';
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

 EXCEPTION

  WHEN OTHERS THEN

   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(SQLERRM, 1, 250);
   gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
   RAISE_application_error(-20123,
                              'ERROR CCC_PR_PROCE_PAGOS_BANCO_MASIV: ' ||
                               ls_sqlerrm);

 END CCC_PR_PROCE_PAGOS_BANCO_MASIV;

 PROCEDURE CCC_PR_CARGA_PAGOS_BANCO_LINEA(
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)

 IS

  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_num_lote                      ccc_movim_banca.num_lote%TYPE;
  lv_oid_pago_inic                 ccc_carga_pagos_linea.oid_pago%TYPE;
  lv_oid_pago_fina                 ccc_carga_pagos_linea.oid_pago%TYPE;
  lv_cod_tipo_orig_dato            per_tipo_orige_datos.cod_tipo_orig_dato%TYPE;
  lv_num_lote_exte                 per_movim_banca_cabec.num_lote_inte%TYPE;

  lc_val_esta_movi_pend            CONSTANT VARCHAR2(1):='P';
  lc_cod_tipo_tran                 CONSTANT VARCHAR2(5):='TBEFE';

  CURSOR c_banc(
   p_oid_pago_inic   NUMBER,
   p_oid_pago_fina   NUMBER)
  IS
   SELECT pl.cod_banc
   FROM ccc_carga_pagos_linea pl
   WHERE pl.oid_pago > p_oid_pago_inic
     AND pl.oid_pago <= p_oid_pago_fina
     AND pl.ind_esta = 0
     AND pl.cod_banc is not null
   GROUP BY pl.cod_banc;

  CURSOR c_pago(
   p_oid_pago_inic   NUMBER,
   p_oid_pago_fina   NUMBER,
   p_cod_banc        VARCHAR2)
  IS
   SELECT pl.oid_pago, pl.cod_clie, trunc(pl.fec_pago) fec_pago, pl.imp_pago
   FROM ccc_carga_pagos_linea pl
   WHERE pl.oid_pago > p_oid_pago_inic
     AND pl.oid_pago <= p_oid_pago_fina
     AND pl.ind_esta = 0
      AND pl.cod_banc is not null
     AND pl.cod_banc = p_cod_banc;

  CURSOR c_exto_anul
  IS
   SELECT a.oid_pago,a.cod_banc, a.cod_clie, a.cod_oper
   FROM ccc_carga_pagos_linea a
   WHERE a.tip_oper = 'N'
   AND a.ind_esta = 0;

  CURSOR c_exto_pago
  IS
   SELECT b.oid_pago,b.cod_banc, b.cod_clie, b.cod_trac
   FROM ccc_carga_pagos_linea b
   WHERE b.tip_oper = 'A'
     AND b.ind_esta = 0;

  CURSOR c_anul_pago
  IS
   SELECT a.oid_pago,a.cod_banc, a.cod_clie, a.cod_oper
   FROM ccc_carga_pagos_linea a
   WHERE a.tip_oper = 'E'
   AND a.ind_esta = 0;

  lv_oid_pago                      NUMBER(12);
  lv_lote_exte                     VARCHAR2(5);
  cont                             NUMBER(8);

 BEGIN

  /* inicializa variables globales  para registro de log  */
  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');

  /* inicializa variables globales  para registro de log  */
  gv_log_cod_pais := lv_cod_pais;
  gv_log_cod_soci := lv_cod_soci;
  gv_log_user     := p_cod_usua;
  gv_log_cod_modu := 'CCC';
  gv_log_cod_proc := 'REPW';

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

  gv_des_log:='Inicio CCC_PR_CARGA_PAGOS_BANCO_LINEA parametros 1: '  || p_cod_usua ;

  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  lv_cod_tipo_orig_dato := gen_pkg_gener.gen_fn_param_pais(lv_cod_pais,'CCC','010');

  -- Determinar Ultimo Oid Pago a Procesar

/*  BEGIN

   SELECT pl.oid_pago - 1
   INTO lv_oid_pago_inic
   FROM ccc_carga_pagos_linea pl
   WHERE pl.oid_pago= (SELECT fin.oid_ulti_regi_proc
                       FROM fin_contr_regis_progr fin
                       WHERE fin.cod_modu = gv_log_cod_modu
                         AND fin.cod_prog = gv_log_cod_proc) + 1
    AND TO_CHAR(pl.fec_pago,'DD/MM/YYYY') = TO_CHAR(SYSDATE,'DD/MM/YYYY') ;

  EXCEPTION

    WHEN NO_DATA_FOUND THEN

     SELECT MIN(pl.oid_pago) - 1
     INTO lv_oid_pago_inic
     FROM ccc_carga_pagos_linea pl
     WHERE TO_CHAR(pl.fec_pago,'DD/MM/YYYY') = TO_CHAR(sysdate,'DD/MM/YYYY') ;

  END;*/

  SELECT fin.oid_ulti_regi_proc
    INTO lv_oid_pago_inic
    FROM fin_contr_regis_progr fin
   WHERE fin.cod_modu = gv_log_cod_modu
     AND fin.cod_prog = gv_log_cod_proc;

  SELECT MAX(pl.oid_pago)
  INTO lv_oid_pago_fina
  FROM ccc_carga_pagos_linea pl
  WHERE pl.oid_pago > lv_oid_pago_inic;
   -- AND pl.fec_pago <= SYSDATE;-- - (20/(24*60));



  /*
   C  Consulta de Deuda
   P  Pago Parcial
   P  Pago Total
   E  Anulaci?n de Pago
   A  Extorno de Pago
   N  Extorno de Anulaci?n
   */

  --- Inicio Procesando los Extorno de las Anulaciones ---
  FOR v_exto_anul IN c_exto_anul LOOP

   BEGIN

    SELECT pl.oid_pago
    INTO lv_oid_pago
    FROM ccc_carga_pagos_linea pl
    WHERE pl.ind_esta = 0
      AND pl.tip_oper = 'E'
      AND pl.cod_banc = v_exto_anul.cod_banc
      AND pl.cod_clie = v_exto_anul.cod_clie
      AND pl.cod_oper = v_exto_anul.cod_oper
      AND ROWNUM < 2;

    UPDATE ccc_carga_pagos_linea a
    SET a.ind_esta = 9,
         a.oid_pago_elim = v_exto_anul.oid_pago
    WHERE a.oid_Pago  = lv_oid_pago;

    UPDATE ccc_carga_pagos_linea a
    SET a.ind_esta = 1
    WHERE a.oid_Pago  = v_exto_anul.oid_pago;

   EXCEPTION

    WHEN NO_DATA_FOUND THEN

     NULL;

   END;

  END LOOP;

   --- Inicio Procesando los Extorno de los Pagos ---
   FOR v_exto_pago IN c_exto_pago LOOP

    BEGIN

     SELECT pl.oid_pago
     INTO lv_oid_pago
     FROM ccc_carga_pagos_linea pl
     WHERE pl.ind_esta = 0
       AND pl.tip_oper = 'P'
       AND pl.cod_banc = v_exto_pago.cod_banc
       AND pl.cod_clie = v_exto_pago.cod_clie
       AND pl.cod_trac = v_exto_pago.cod_trac
       AND ROWNUM < 2;

     UPDATE ccc_carga_pagos_linea a
     SET a.ind_esta = 9,
         a.oid_pago_elim = v_exto_pago.oid_pago
     WHERE a.oid_pago  = lv_oid_pago;

     UPDATE ccc_carga_pagos_linea a
     SET a.ind_esta = 1
     WHERE a.oid_Pago  = v_exto_pago.oid_pago;

    EXCEPTION

      WHEN NO_DATA_FOUND THEN
        NULL;

    END;

   END LOOP;

    --- Inicio Procesando las Anulaciones de los Pagos ---
   FOR v_anul_pago IN c_anul_pago LOOP

    BEGIN

     SELECT pl.oid_pago
     INTO lv_oid_pago
     FROM ccc_carga_pagos_linea pl
     WHERE pl.ind_esta = 0
       AND pl.tip_oper = 'P'
       AND pl.cod_banc = v_anul_pago.cod_banc
       AND pl.cod_clie = v_anul_pago.cod_clie
       AND pl.cod_oper = v_anul_pago.cod_oper
       AND ROWNUM < 2;

     UPDATE ccc_carga_pagos_linea a
     SET a.ind_esta = 9,
         a.oid_pago_elim = v_anul_pago.oid_pago
     WHERE a.oid_pago  = lv_oid_pago;

     UPDATE ccc_carga_pagos_linea a
     SET a.ind_esta = 1
     WHERE a.oid_Pago  = v_anul_pago.oid_pago;

    EXCEPTION

      WHEN NO_DATA_FOUND THEN
        NULL;

    END;

   END LOOP;
   
   IF (lv_cod_pais = 'PE') THEN --para PE
     
   /*
     --Numero Lote del PER--
      SELECT DECODE(SUBSTR(MAX(NUM_LOTE_INTE), 1, 8),
                    TO_CHAR(SYSDATE, 'YYYYMMDD'),
                    MAX(NUM_LOTE_INTE) + 1,
                    TO_CHAR(SYSDATE, 'YYYYMMDD') || '0001')
        INTO lv_num_lote
        FROM PER_MOVIM_BANCA_CABEC
       WHERE PAIS_COD_PAIS = lv_cod_pais
       and SUBSTR(NUM_LOTE_INTE, 1, 4) <= TO_CHAR(SYSDATE, 'YYYY');
        -- AND TIOR_TIPO_ORIG_DATO = lv_cod_tipo_orig_dato;
    */
    INT_PKG_CCC.CCC_PR_OBTIE_NUMER_LOTE(lv_num_lote);    
    
     IF (gen_pkg_gener.gen_fn_param_pais(lv_cod_pais,'CCC','008') = '1') THEN
       -- Procesar Pagos por Cada Banco --
       FOR v_banc IN c_banc(lv_oid_pago_inic,lv_oid_pago_fina) LOOP

          gv_des_log:='Numeto de Lote a Generar ' || lv_num_lote ||' del banco '|| v_banc.cod_banc;
          FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                       gv_cod_proc_ejec, gv_des_log);


          gv_des_log:='Inicio Insercion de Pagos Bancarios PER';
          FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                       gv_cod_proc_ejec, gv_des_log);

          INSERT INTO PER_MOVIM_BANCA_CABEC
            (
          PAIS_COD_PAIS,
          NUM_LOTE_INTE,
          NUM_LOTE_EXTE,
          FEC_PROC,
          COD_SOCI,
          COD_CCBA,
          TIOR_TIPO_ORIG_DATO,
          STA_LOTE,
          USU_DIGI,
          FEC_DIGI,
          EST_MOCA
          )
            VALUES
            (
          lv_cod_pais,
          lv_num_lote,
          null,                                        --#numeroLoteExterno#,
          SYSDATE,
          lv_cod_soci,                                 --#codigoSociedad#,
          v_banc.cod_banc,                             --#codigoBancoSicc#,
          lv_cod_tipo_orig_dato,                       --#codigoTipoOrigenDatos#,
          lc_val_esta_movi_pend,                       --#statusLote#,
          p_cod_usua,                                  --#auditInfo.createdBy#,
          sysdate,                                     --#auditInfo.created#,
          1                                            --#estado#
            ) RETURNING NUM_LOTE_INTE into lv_num_lote;
            
               cont:=0;

               FOR v_pago IN c_pago(lv_oid_pago_inic, lv_oid_pago_fina, v_banc.cod_banc) LOOP

                   INSERT INTO PER_MOVIM_BANCA_DETAL
                      (
                     PAIS_COD_PAIS,
                    TIOR_TIPO_ORIG_DATO,
                    MOCA_NUM_LOTE_INTE,
                    FEC_PAGO,
                    CON_TRAN,
                    VAL_PAGO,
                    NUM_CUPO,
                    COD_CONS,
                    DIG_CHEQ,
                    OFI_RECA,
                    NOM_OFIC,
                    TIP_TRAN,
                    NUM_DOCU,
                    VAL_HORA,
                    USU_PROC,
                    FEC_PROC,
                    HOR_PROC,
                    DES_OBSE,
                    IMP_PAGO_APLI,
                    IMP_PAGO_PEND,
                    IMP_RECA_GENE,
                    IMP_PERC,
                    STA_MOVI,
                    USU_DIGI,
                    FEC_DIGI,
                    EST_MODE,
                    COD_PLAN_EMPL,
                    IND_REPE
                    )
                      VALUES
                      (
                    lv_cod_pais,                              --#codigoPais#,
                    lv_cod_tipo_orig_dato,                    --#codigoTipoOrigenDatos#,
                    lv_num_lote,                              --#numeroLoteInterno#,
                    v_pago.fec_pago,                          --#fechaPago#,
                    --v_pago.oid_pago,                          --#consecutivo#,
                    cont,                                     --#consecutivo#,
                    v_pago.imp_pago,                          --#importePago#,
                    null,                                     --#numeroCupon#,
                    v_pago.cod_clie,                          --#codigoConsultora#,
                    null,                                     --#digitoChequeo#,
                    null,                                     --#oficinaRecaudadora#,
                    null,                                     --#nombreOficina#,
                    lc_cod_tipo_tran,                         --#tipoTransaccion#,
                    null,                                     --#numeroDocumento#,
                    'N',                                      --#horario#,
                    p_cod_usua,                               --#usuarioProceso#,
                    sysdate,                                  --#fechaProceso#,
                    TO_CHAR(sysdate,'hh24:mi:ss'),            --#horaProceso#,
                    null,                                     --#observacion#,
                    0,                                        --#importePagoAplicado#,
                    v_pago.imp_pago,                          --#importePagoPendiente#,
                    0,                                        --#importeRecaudoGenerado#,
                    0,                                        --#importePercepcion#,
                    lc_val_esta_movi_pend,                    --#statusMovimiento#,
                    p_cod_usua,                               --#auditInfo.createdBy#,
                    sysdate,                                  --#auditInfo.created#,
                    '1',                                      --#estado#,
                    null,                                     --#codigoPlanilla#
                    0                                         --ind_repe
                      );
                    cont:=cont+1;
                   END LOOP;

         gv_des_log:='Inicio Liquidando Pagos Bancarios PER '|| v_banc.cod_banc;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         IF (gen_pkg_gener.gen_fn_param_pais(lv_cod_pais,'CCC','009') = '1') THEN
            PER_PKG_PROCE_PERCE.PER_PE_PROCE_MOVIM(lv_cod_pais,lv_cod_tipo_orig_dato,lv_num_lote,lv_num_lote_exte);
         END IF;

         INT_PKG_CCC.CCC_PR_OBTIE_NUMER_LOTE(lv_num_lote);    

      END LOOP;   

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);
  
   END IF;  
  
   ELSE --otro pais
    
      IF (gen_pkg_gener.gen_fn_param_pais(lv_cod_pais,'CCC','008') = '1') THEN
      
          FOR v_banc IN c_banc(lv_oid_pago_inic,lv_oid_pago_fina) LOOP

          gv_des_log:='Numeto de Lote a Generar ' || lv_num_lote ||' del banco '|| v_banc.cod_banc;
          FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                       gv_cod_proc_ejec, gv_des_log);

          INT_PKG_CCC.CCC_PR_OBTIE_NUMER_LOTE(lv_num_lote);        
          DELETE FROM CCC_TEMPO_MOVIM_BANCA; 
          
          lv_lote_exte := substr(lv_num_lote,10,3);                                           
               
          cont:=0;
          
               FOR v_pago IN c_pago(lv_oid_pago_inic, lv_oid_pago_fina, v_banc.cod_banc) LOOP
                 
                gv_des_log:='Inicio Insercion de Pagos Bancarios CCC';
                FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                             gv_cod_proc_ejec, gv_des_log);

                   
                INSERT INTO CCC_TEMPO_MOVIM_BANCA ( 
                        COD_PAIS,
                        COD_SOCI,
                        NUM_LOTE_EXTE,
                        NUM_CONS_TRAN,
                        NUM_FACT_BOLE,
                        FEC_PAGO,
                        IMP_PAGO,
                        COD_BANC_SICC,
                        NUM_CUPO,
                        COD_CLIE,
                        VAL_DIGI_CHEQ,
                        VAL_OFIC_RECA,
                        VAL_NOMB_OFIC,
                        VAL_TIPO_TRAN,
                        NUM_DOCU,
                        VAL_HORA,
                        COD_USUA_PROC,
                        COD_TIPO_ORIG) VALUES
                      (
                        lv_cod_pais,                
                        lv_cod_soci,
                        lv_lote_exte,                --#numeroLoteExterno#,                    
                        cont,--v_pago.oid_pago,             --#consecutivo#,                          
                        null,                        --#numeroFacturaBoleta#,                  
                        TO_CHAR(v_pago.fec_pago,'YYYYMMDD'),             --#fechaPago#,                            
                        v_pago.imp_pago,             --#importePago#,                          
                        v_banc.cod_banc,             --#codigoBancoSicc#,                      
                        null,                        --#numeroCupon#,                          
                        v_pago.cod_clie,             --#codigoConsultora#,                     
                        '00',                        --#digitoChequeo#,                        
                        null,                        --#oficinaRecaudadora#,                   
                        null,                        --#nombreOficina#,                        
                        lc_cod_tipo_tran,            --#tipoTransaccion#,                      
                        null,                        --#numeroDocumento#,                      
                        'N',                         --#horario#,
                        p_cod_usua,                   --#usuarioProceso#                             
                        'WEB'                         --#codigoTipoOrigen#
                          );                
                        cont:=cont+1;
                   END LOOP;
                   
             INT_PKG_CCC.CCC_PR_CARGA_MOVIM_BANCA(lv_cod_pais,lv_cod_soci,v_banc.cod_banc,lv_num_lote,to_number(lv_lote_exte),p_cod_usua);             

           gv_des_log:='Inicio Liquidando Pagos Bancarios CCC '|| v_banc.cod_banc;
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                       gv_cod_proc_ejec, gv_des_log);

           IF (gen_pkg_gener.gen_fn_param_pais(lv_cod_pais,'CCC','009') = '1') THEN
              CCC_PR_LIQUI_LOTE_BANCA(lv_num_lote, p_cod_usua );              
           END IF;


        END LOOP;
        
        FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);
        
      END IF;
      
    END IF;


  
    
 EXCEPTION

  WHEN OTHERS THEN

   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(SQLERRM, 1, 250);
   gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
   RAISE_application_error(-20123,
                              'ERROR CCC_PR_CARGA_PAGOS_BANCO_LINEA: ' ||
                               ls_sqlerrm);

 END CCC_PR_CARGA_PAGOS_BANCO_LINEA;

   PROCEDURE CCC_PR_ELIMI_REGUL_PAGOS_MASIV
   IS
   BEGIN

      DELETE FROM CCC_CARGA_REGUL_PAGOS_MASIV;
      DELETE FROM CCC_ERROR_REGUL_PAGOS_MASIV;

   END CCC_PR_ELIMI_REGUL_PAGOS_MASIV;

   PROCEDURE CCC_PR_VALID_REGUL_PAGOS_MASIV(
      p_cod_pais                              IN seg_pais.cod_pais%TYPE,
      p_cod_soci                               IN seg_socie.cod_soci%TYPE,
      p_cod_cban                             IN    ccc_cuent_corri_banca.cod_cc%TYPE,
      p_cod_error                           OUT VARCHAR2)
   IS
      CURSOR c_pend_regu IS
      SELECT reg.val_fila,
                    reg.cod_clie,
                    TO_DATE(reg.fec_pago,'DD/MM/YYYY'),
                    TO_NUMBER(reg.imp_pago,'9999999999.99'),
                    reg.oid_movi_banc
      FROM   ccc_carga_regul_pagos_masiv reg
      ORDER  BY val_fila;

      TYPE t_tab_ccc_pend_regu_masi  IS TABLE OF ccc_carga_regul_pagos_masiv%ROWTYPE;
      lv_tab_ccc_pend_regu_masi           t_tab_ccc_pend_regu_masi;
      lv_reg_ccc_pend_regu_masi           ccc_carga_regul_pagos_masiv%ROWTYPE;

      lv_imp_pago                  NUMBER;
      lv_fec_pago                  DATE;
      lv_cant_Erro                NUMBER;
      lv_oid_clie                    mae_clien.oid_clie%TYPE;
      lv_oid_cban                  ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
      lv_oid_movi_banc        ccc_movim_banca.oid_movi_banc%TYPE;
      lv_oid_pais                   seg_pais.oid_pais%TYPE;
      lv_oid_soci                   seg_socie.oid_soci%TYPE;

   BEGIN

      lv_oid_pais:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_cod_pais);
      lv_oid_soci:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(p_cod_soci);
      lv_oid_cban := CCC_PKG_GENER.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cban);

      OPEN c_pend_regu;
      LOOP
         FETCH c_pend_regu BULK COLLECT INTO lv_tab_ccc_pend_regu_masi LIMIT W_FILAS;
            IF lv_tab_ccc_pend_regu_masi.COUNT > 0 THEN

               FOR x IN lv_tab_ccc_pend_regu_masi.FIRST .. lv_tab_ccc_pend_regu_masi.LAST LOOP
                  lv_reg_ccc_pend_regu_masi := lv_tab_ccc_pend_regu_masi(x);

                  --01) Validando los datos Obligatorios
                  IF (lv_reg_ccc_pend_regu_masi.cod_clie IS NULL) THEN
                     INSERT INTO ccc_error_regul_pagos_masiv (VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_pend_regu_masi.Val_Fila, '01', 'Dato oblligatorio en nulo - Codigo Consultora');
                  END IF;

                  IF (lv_reg_ccc_pend_regu_masi.fec_pago IS NULL) THEN
                     INSERT INTO ccc_error_regul_pagos_masiv(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_pend_regu_masi.Val_Fila, '01', 'Dato oblligatorio en nulo - Fecha Pago');
                  END IF;

                  IF (lv_reg_ccc_pend_regu_masi.imp_pago IS NULL) THEN
                     INSERT INTO ccc_error_regul_pagos_masiv(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_pend_regu_masi.Val_Fila, '01', 'Dato oblligatorio en nulo - Importe Pago');
                  END IF;

                  --02) El codigo consultora no existe
                  BEGIN

                     SELECT mc.oid_clie
                     INTO lv_oid_clie
                     FROM mae_clien mc
                     WHERE mc.cod_clie=lv_reg_ccc_pend_regu_masi.cod_clie;

                  EXCEPTION
                     WHEN NO_DATA_FOUND THEN
                        INSERT INTO ccc_error_regul_pagos_masiv(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_pend_regu_masi.val_fila, '02', 'Codigo de Consultora No Existe');
                  END;

                  --03) El Importe de Pago es Incorrecto
                  BEGIN

                     IF (lv_reg_ccc_pend_regu_masi.imp_pago IS NOT NULL) THEN
                        lv_imp_pago := TO_NUMBER(lv_reg_ccc_pend_regu_masi.imp_pago,'9999999999.99');
                     END IF;

                   EXCEPTION
                      WHEN VALUE_ERROR THEN
                         INSERT INTO ccc_error_regul_pagos_masiv(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_pend_regu_masi.Val_Fila, '03', 'Dato no es numerico - Importe Pago');
                   END;

                   --04) La Fecha de Pago es Incorrecto
                   BEGIN

                     IF (lv_reg_ccc_pend_regu_masi.fec_pago IS NOT NULL) THEN
                        lv_fec_pago := TO_DATE(lv_reg_ccc_pend_regu_masi.fec_pago,'DD/MM/YYYY');
                     END IF;

                   EXCEPTION
                      WHEN OTHERS THEN
                         INSERT INTO ccc_error_regul_pagos_masiv(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_pend_regu_masi.Val_Fila, '04', 'Dato no es una fecha valida -Fecha Pago');
                   END;

                   --05) Validando que Existe El Pago Por Regularizar
                   BEGIN

                      SELECT mb.oid_movi_banc
                      INTO lv_oid_movi_banc
                      FROM ccc_movim_banca mb
                      WHERE mb.pais_oid_pais = lv_oid_pais
                      AND mb.soci_oid_soci = lv_oid_soci
                      AND mb.ccba_oid_cc_banc = lv_oid_cban
                      AND mb.fec_pago = lv_reg_ccc_pend_regu_masi.fec_pago
                      AND mb.imp_pago = lv_reg_ccc_pend_regu_masi.imp_pago
                      AND mb.cod_iden_proc='I'
                      AND mb.clie_oid_clie IS NULL
                      AND ROWNUM < 2;

                      UPDATE  ccc_carga_regul_pagos_masiv reg
                      SET reg.oid_movi_banc=lv_oid_movi_banc
                      WHERE reg.val_fila = lv_reg_ccc_pend_regu_masi.val_fila;

                   EXCEPTION
                      WHEN NO_DATA_FOUND THEN
                         INSERT INTO ccc_error_regul_pagos_masiv(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_pend_regu_masi.Val_Fila, '05', 'No se ha encontrado el pago por regularizar');
                       WHEN OTHERS THEN
                          INSERT INTO ccc_error_regul_pagos_masiv(VAL_FILA,COD_ERRO,DES_ERRO) VALUES(lv_reg_ccc_pend_regu_masi.Val_Fila, '05', 'No se ha encontrado el pago por regularizar');
                    END;

                 END LOOP;
             END IF;

             EXIT WHEN c_pend_regu%NOTFOUND;

         END LOOP;

      CLOSE c_pend_regu;

      SELECT COUNT(*)
      INTO  lv_cant_Erro
      FROM  ccc_error_regul_pagos_masiv;

       p_cod_error := lv_cant_Erro;

   EXCEPTION
      WHEN OTHERS THEN
          ln_sqlcode := SQLCODE;
          ls_sqlerrm := substr(sqlerrm,1,250);
          RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_VALID_REGUL_PAGOS_MASIV: '||ls_sqlerrm);

   END CCC_PR_VALID_REGUL_PAGOS_MASIV;

   PROCEDURE CCC_PR_PROCE_REGUL_PAGOS_MASIV(
     p_cod_pais                                 IN   seg_pais.cod_pais%TYPE,
      p_cod_soci                                IN   seg_socie.cod_soci%TYPE,
      p_cod_cban                               IN  ccc_cuent_corri_banca.cod_cc%TYPE,
      p_cod_usua                                IN   seg_usuar.use_usua%TYPE,
      p_cod_modu                                 IN  fin_proce_modul.cod_modu%TYPE,
      p_cod_proc                                IN  fin_proce_modul.cod_proc%TYPE)
   IS

      lv_reg_ccc_movim_banca        ccc_movim_banca%ROWTYPE;

   CURSOR c_pend_regu
   IS
      SELECT
             reg.val_fila,
             reg.cod_clie,
             TO_DATE(reg.fec_pago,'DD/MM/YYYY') fec_pago,
             TO_NUMBER(reg.imp_pago,'9999999999.99') imp_pago,
             (SELECT mc.oid_clie
              FROM mae_clien mc
              WHERE mc.cod_clie =  reg.cod_clie) oid_clie,
             reg.oid_movi_banc
      FROM ccc_carga_regul_pagos_masiv reg;

       TYPE t_tab_pend_regu           IS TABLE OF c_pend_regu%ROWTYPE;
       lv_tab_pend_reg                      t_tab_pend_regu;
       lv_num_lote                               ccc_movim_banca.num_lote%TYPE;
       lv_oid_subp_regu                      ccc_subpr.oid_subp%TYPE;
       lv_oid_tcab_regu                      ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;

   BEGIN

     /* Inicializa variables globales  para registro de log  */
      gv_log_cod_pais := p_cod_pais;
      gv_log_cod_soci := p_cod_soci;
      gv_log_user     := p_cod_usua;
      gv_log_cod_modu := p_cod_modu;
      gv_log_cod_proc := p_cod_proc;

      FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

      gv_des_log:='Inicio CCC_PR_PROCE_REGUL_PAGOS_MASIV';

      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      lv_num_lote:=CCC_PKG_GENER.CCC_FN_OBTIE_NUMER_LOTE;

      gv_des_log:='El Numero de Lote Generado es : ' || lv_num_lote;

      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      gv_des_log:='Inicio Proceso de Regularizacion : ' || lv_num_lote;

      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      -- Obteniendo el Proceso bancario de Regularizacion --
      SELECT cs.oid_subp, tas.tcab_oid_tcab
      INTO lv_oid_subp_regu,lv_oid_tcab_regu
      FROM ccc_proce cp,
                 ccc_subpr cs,
                 ccc_tipo_abono_subpr tas
      WHERE cp.oid_proc=cs.ccpr_oid_proc
      AND tas.subp_oid_subp=cs.oid_subp
      AND cp.cod_proc =   gc_cod_proc_banc
      AND cs.cod_subp =  gc_cod_subp_regu;

      OPEN c_pend_regu;
         LOOP
            FETCH c_pend_regu BULK COLLECT INTO  lv_tab_pend_reg LIMIT w_filas;
               IF lv_tab_pend_reg.COUNT > 0 THEN
                  FOR x IN lv_tab_pend_reg.FIRST .. lv_tab_pend_reg.LAST LOOP

                  -- Regularizando
                  UPDATE ccc_movim_banca mb
                  SET mb.clie_oid_clie = lv_tab_pend_reg(x).oid_clie,
                          mb.cod_cons = lv_tab_pend_reg(x).cod_clie,
                          mb.cod_iden_proc = gc_cod_iden_proc_erro,
                          mb.val_hora_norm_adic = 'P',
                          mb.ind_pago_regu = 1
                  WHERE mb.oid_movi_banc = lv_tab_pend_reg(x).oid_movi_banc;

                  SELECT mb.*
                  INTO lv_reg_ccc_movim_banca
                  FROM ccc_movim_banca mb
                  WHERE mb.oid_movi_banc=lv_tab_pend_reg(x).oid_movi_banc;

                  -- Ingresar Pago Bancario x Regularizar --
                  SELECT ccc_cmba_seq.nextval
                  INTO lv_reg_ccc_movim_banca.oid_movi_banc
                  FROM dual;

                  lv_reg_ccc_movim_banca.num_lote:=lv_num_lote;
                  lv_reg_ccc_movim_banca.num_cons_tran:=lv_tab_pend_reg(x).val_fila;

                  lv_reg_ccc_movim_banca.subp_oid_marc_crea:=lv_oid_subp_regu;
                  lv_reg_ccc_movim_banca.tcab_oid_abon_crea:=lv_oid_tcab_regu;
                  lv_reg_ccc_movim_banca.cod_iden_proc:=gc_cod_iden_proc_tran;
                  lv_reg_ccc_movim_banca.val_hora_norm_adic:='R';
                  lv_reg_ccc_movim_banca.fec_proc:=TRUNC(SYSDATE);

                 INSERT INTO ccc_movim_banca vales VALUES lv_reg_ccc_movim_banca;

              END LOOP;

           END IF;

           EXIT WHEN c_pend_regu%NOTFOUND;
         END LOOP;

      CLOSE c_pend_regu;

      gv_des_log:='Fin Proceso de Regularizacion : ' || lv_num_lote;
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


      BEGIN
       CCC_PKG_GENER.CCC_PR_REGIS_LOTE_BANCA(p_cod_cban,gc_cod_tipo_orig_regu_exce,lv_num_lote,p_cod_usua);
      EXCEPTION
       WHEN OTHERS THEN
        NULL;
       END;

      gv_des_log:='Lote Bancario Registrado';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

   EXCEPTION
     WHEN OTHERS THEN
        ln_sqlcode := SQLCODE;
         ls_sqlerrm := substr(SQLERRM, 1, 250);
         gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;

         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
         FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
         RAISE_application_error(-20123,
                              'ERROR CCC_PR_PROCE_REGUL_PAGOS_MASIV: ' ||
                               ls_sqlerrm);

   END CCC_PR_PROCE_REGUL_PAGOS_MASIV;

 PROCEDURE ccc_pr_vaban_pagos_incob_cedul(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_oid_clie_migr                 mae_clien.oid_clie%TYPE;
  lv_oid_mae_tipo_docu             mae_tipo_docum.oid_tipo_docu%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                      VARCHAR2(250);
  lv_long_docu_iden                NUMBER(2);

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_tipo_clie,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  -- Actualizando la Cedula de Identidad
  lv_long_docu_iden := TO_NUMBER(CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('LongitudDocumentoIdentidad'));
  lv_oid_clie_migr := TO_NUMBER(CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('OidClieMigracion'));

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_tipo_clie,lv_id_proc_ejec,gv_des_log);

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

 -- Primero Rellenar
  UPDATE ccc_movim_banca_valid mb
  SET mb.val_nume_docu = LPAD(mb.cod_cons,lv_long_docu_iden,'0')
  WHERE mb.cod_erro IS NULL
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  -- Luego Extraer los 10
  UPDATE ccc_movim_banca_valid mb
  SET mb.num_docu_iden = substr(mb.val_nume_docu,length(mb.val_nume_docu) - lv_long_docu_iden + 1,lv_long_docu_iden)
  WHERE mb.cod_erro IS NULL
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  SELECT mtd.oid_tipo_docu
  INTO lv_oid_mae_tipo_docu
  FROM mae_tipo_docum mtd
  WHERE mtd.cod_tipo_docu = gc_tipo_docu_cedu;

  -- Obteniendo el codigo de consultora para las cedulas
  UPDATE ccc_movim_banca_valid mb
  SET
   mb.ind_pago_inco = 1,
   mb.clie_oid_clie = lv_oid_clie_migr,
   mb.cod_iden_proc = p_cod_iden_proc,
   mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND EXISTS (
            SELECT 1
            FROM ccc_consu_casti_cabec c
            WHERE c.num_docu_iden = mb.num_docu_iden
              AND c.ind_acti = 1);

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios de consultoras con tipologia incorrecta';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_tipo_clie,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_tipo_clie,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_tipo_clie,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_pagos_incob_cedul;

 PROCEDURE ccc_pr_vaban_tipol_consu(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                      VARCHAR2(250);

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_tipo_clie,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_tipo_clie,lv_id_proc_ejec,gv_des_log);

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_erro = p_cod_tipo_erro,
   mb.cod_iden_proc = p_cod_iden_proc,
   mb.val_esta_movi_pend = p_cod_esta_movi,
   mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND EXISTS (
               SELECT NULL
               FROM
                ccc_movim_banca_valid ba,
                mae_clien_tipo_subti mcts
               WHERE ba.clie_oid_clie = mcts.clie_oid_clie
                 AND mcts.ticl_oid_tipo_clie NOT IN (2,4)
                 AND ba.oid_movi_banc = mb.oid_movi_banc);

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios de consultoras con tipologia incorrecta';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_tipo_clie,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_tipo_clie,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_tipo_clie,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_tipol_consu;

 PROCEDURE ccc_pr_vaban_codig_consu(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cant_digi_codi_clie           NUMBER(2);
  lv_ind_rec_banc_conv_nume        NUMBER(1);
  lv_cod_erro                      VARCHAR2(250);

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_codi_cons,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log := 'Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_codi_cons,lv_id_proc_ejec,gv_des_log);

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  -- Obtener el Numero de Digitos del Codigo de la Consultora
  lv_cant_digi_codi_clie := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CantidadDigitosCodigoConsultora');

  SELECT ind_rece_banc_conv_nume
  INTO lv_ind_rec_banc_conv_nume
  FROM ccc_pais_socie_param;

  IF lv_ind_rec_banc_conv_nume=1 THEN

   UPDATE ccc_movim_banca_valid mb
   SET mb.cod_cons = LPAD(TO_NUMBER(mb.cod_cons),lv_cant_digi_codi_clie,'0')
   WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  END IF;

  -- Obteniendo el Codigo de Consultora y el Digito de Chequeo
  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_cons      = TRIM(SUBSTR(mb.cod_cons,1,lv_cant_digi_codi_clie)),
   mb.cod_digi_ctrl = TRIM(SUBSTR(mb.cod_cons,lv_cant_digi_codi_clie+1))
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  gv_des_log:='Obteniendo el Codigo de Consultora y el Digito de Chequeo';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_codi_cons,lv_id_proc_ejec,gv_des_log);

  UPDATE ccc_movim_banca_valid mb
  SET mb.cod_erro = p_cod_tipo_erro,
      mb.cod_iden_proc = p_cod_iden_proc,
      mb.val_esta_movi_pend = p_cod_esta_movi,
      mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND NOT EXISTS (
            SELECT NULL
            FROM mae_clien mc
            WHERE mc.cod_clie = mb.cod_cons);

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios incorrectos';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_codi_cons,lv_id_proc_ejec,gv_des_log);

  UPDATE ccc_movim_banca_valid mb
  SET mb.clie_oid_clie = ( SELECT mc.oid_clie
                           FROM mae_clien mc
                           WHERE mc.cod_clie = mb.cod_cons)
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  gv_des_log:='Actualizando el Oid Clie a ' || SQL%ROWCOUNT || ' pagos bancarios';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_codi_cons,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_codi_cons,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_codi_cons,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_codig_consu;

 PROCEDURE ccc_pr_vaban_digit_contr(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                      VARCHAR2(250);

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_digi_ctrl,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_digi_ctrl,lv_id_proc_ejec,gv_des_log);

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_erro = p_cod_tipo_erro,
   mb.cod_iden_proc = p_cod_iden_proc,
   mb.val_esta_movi_pend = p_cod_esta_movi,
   mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND mb.cod_digi_ctrl <> (SELECT mc.cod_digi_ctrl
                             FROM mae_clien mc
                             WHERE mc.oid_clie = mb.clie_oid_clie);

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios incorrectos';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_digi_ctrl,lv_id_proc_ejec,gv_des_log);

  UPDATE ccc_movim_banca_valid mb
  SET mb.clie_oid_clie = ( SELECT mc.oid_clie
                           FROM mae_clien mc
                           WHERE mc.cod_clie = mb.cod_cons)
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  gv_des_log:='Actualizando el Oid Clie a ' || SQL%ROWCOUNT || ' pagos bancarios';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_digi_ctrl,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_digi_ctrl,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_digi_ctrl,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_digit_contr;

 PROCEDURE ccc_pr_vaban_docum_ident(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                      VARCHAR2(250);
  lv_long_docu_iden                NUMBER;

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,lv_id_proc_ejec,gv_des_log);

  -- Actualizando la Cedula de Identidad
  lv_long_docu_iden := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('LongitudDocumentoIdentidad');

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  UPDATE ccc_movim_banca_valid mb
  SET mb.num_docu_iden = substr(mb.num_docu_iden,length(mb.num_docu_iden) - lv_long_docu_iden + 1,lv_long_docu_iden)
  WHERE mb.cod_erro IS NULL
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  -- Obteniendo el codigo de consultora para las cedulas
  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_cons = ( SELECT mc.cod_clie
                   FROM
                    mae_clien_ident mci,
                    mae_clien mc
                   WHERE mc.oid_clie = mci.clie_oid_clie
                     AND mci.num_docu_iden = mb.num_docu_iden),
   mb.cod_iden_proc = gc_cod_iden_proc_tran
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND EXISTS (
            SELECT 1
            FROM mae_clien_ident mci
            WHERE mci.num_docu_iden = mb.num_docu_iden);


  -- Marcando los Erroneos --
  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_erro = p_cod_tipo_erro,
   mb.cod_iden_proc = p_cod_iden_proc,
   mb.val_esta_movi_pend = p_cod_esta_movi,
   mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND NOT EXISTS (
            SELECT 1
            FROM mae_clien_ident mci
            WHERE mci.num_docu_iden = mb.num_docu_iden);

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios incorrectos';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,lv_id_proc_ejec,gv_des_log);

  UPDATE ccc_movim_banca_valid mb
  SET mb.clie_oid_clie = ( SELECT mc.oid_clie
                           FROM mae_clien mc
                           WHERE mc.cod_clie = mb.cod_cons)
  WHERE mb.cod_erro IS NULL
     AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  gv_des_log:='Actualizando el Oid Clie a ' || SQL%ROWCOUNT || ' pagos bancarios';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_docum_ident;

 PROCEDURE ccc_pr_vaban_docum_ident_final(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                      VARCHAR2(250);
  lv_long_docu_iden                NUMBER;

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,lv_id_proc_ejec,gv_des_log);

  -- Actualizando la Cedula de Identidad
  lv_long_docu_iden := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('LongitudDocumentoIdentidad');

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  -- Primero Rellenar
  UPDATE ccc_movim_banca_valid mb
  SET mb.cod_cons = LPAD(mb.cod_cons,lv_long_docu_iden,'0')
  WHERE mb.cod_erro IS NULL
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  -- Luego Extraer los 10
  UPDATE ccc_movim_banca_valid mb
  SET mb.num_docu_iden = substr(mb.cod_cons,length(mb.cod_cons) - lv_long_docu_iden + 1,lv_long_docu_iden)
  WHERE mb.cod_erro IS NULL
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  -- Obteniendo el codigo de consultora para las cedulas
  begin
  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_cons = ( SELECT mc.cod_clie
                   FROM
                    mae_clien_ident mci,
                    mae_clien mc
                   WHERE mc.oid_clie = mci.clie_oid_clie
                     AND mci.num_docu_iden = mb.num_docu_iden
                     ),
   mb.cod_iden_proc = 'T'
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND EXISTS (
            SELECT 1
            FROM mae_clien_ident mci
            WHERE mci.num_docu_iden = mb.num_docu_iden);
  
  exception when others then
  
        begin
        UPDATE ccc_movim_banca_valid mb
        SET
         mb.cod_cons = ( SELECT mc.cod_clie
                         FROM
                          mae_clien_ident mci,
                          mae_clien mc
                         WHERE mc.oid_clie = mci.clie_oid_clie
                           AND mci.num_docu_iden = mb.num_docu_iden
                           and mci.val_iden_docu_prin=1
                           ),
         mb.cod_iden_proc = 'T'
        WHERE mb.cod_erro IS NULL
          AND mb.ind_exce_vali = 0
          AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
          AND EXISTS (
                  SELECT 1
                  FROM mae_clien_ident mci
                  WHERE mci.num_docu_iden = mb.num_docu_iden);  
                       
         exception when others then

                UPDATE ccc_movim_banca_valid mb
                SET
                 mb.cod_cons = ( SELECT mc.cod_clie
                                 FROM
                                  mae_clien_ident mci,
                                  mae_clien mc
                                 WHERE mc.oid_clie = mci.clie_oid_clie
                                   AND mci.num_docu_iden = mb.num_docu_iden
                                   and rownum=1
                                   ),
                 mb.cod_iden_proc = 'T'
                WHERE mb.cod_erro IS NULL
                  AND mb.ind_exce_vali = 0
                  AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
                  AND EXISTS (
                          SELECT 1
                          FROM mae_clien_ident mci
                          WHERE mci.num_docu_iden = mb.num_docu_iden);  
         
         end;     
  
  end;


  -- Marcando los Erroneos --
  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_erro = p_cod_tipo_erro,
   mb.cod_iden_proc = p_cod_iden_proc,
   mb.val_esta_movi_pend = p_cod_esta_movi,
   mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND NOT EXISTS (
            SELECT 1
            FROM mae_clien_ident mci
            WHERE mci.num_docu_iden = mb.num_docu_iden);

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios incorrectos';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,lv_id_proc_ejec,gv_des_log);

  UPDATE ccc_movim_banca_valid mb
  SET mb.clie_oid_clie = ( SELECT mc.oid_clie
                           FROM mae_clien mc
                           WHERE mc.cod_clie = mb.cod_cons)
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  gv_des_log:='Actualizando el Oid Clie a ' || SQL%ROWCOUNT || ' pagos bancarios';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_docu_iden,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_docum_ident_final;

 PROCEDURE ccc_pr_vaban_pagos_dobles(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                      VARCHAR2(250);

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_dobl,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_dobl,lv_id_proc_ejec,gv_des_log);

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_erro = p_cod_tipo_erro,
   mb.cod_iden_proc = p_cod_iden_proc,
   mb.val_esta_movi_pend = p_cod_esta_movi,
   mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND EXISTS (
      SELECT NULL
      FROM ccc_movim_banca ban
      WHERE ban.cod_iden_proc = gc_cod_iden_proc_proc
      AND ban.clie_oid_clie = mb.clie_oid_clie
      AND ban.fec_pago = mb.fec_pago
      AND ban.ccba_oid_cc_banc = mb.ccba_oid_cc_banc
      AND ban.imp_pago = mb.imp_pago);

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios duplicados';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_dobl,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_dobl,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_dobl,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_pagos_dobles;

 PROCEDURE ccc_pr_vaban_pagos_negat(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                      VARCHAR2(250);

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_dobl,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_dobl,lv_id_proc_ejec,gv_des_log);

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_erro = p_cod_tipo_erro,
   mb.cod_iden_proc = p_cod_iden_proc,
   mb.val_esta_movi_pend = p_cod_esta_movi,
   mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND mb.imp_pago < 0;

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios negativos';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_dobl,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_dobl,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_dobl,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_pagos_negat;

 PROCEDURE ccc_pr_vaban_pagos_excsu(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                      VARCHAR2(250);
  lv_imp_maxi_pago_exce            NUMBER(12);

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_supe_exce,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_supe_exce,lv_id_proc_ejec,gv_des_log);

  lv_imp_maxi_pago_exce := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('ImporteMaximoPagoEnExceso');

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  UPDATE ccc_movim_banca_valid mb
  SET mb.val_impo_movi = ccc_pkg_gener.CCC_FN_OBTIE_SALDO_TOTAL(mb.cod_cons)
  WHERE mb.cod_erro IS NULL
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_erro = p_cod_tipo_erro,
   mb.cod_iden_proc = p_cod_iden_proc,
   mb.val_esta_movi_pend = p_cod_esta_movi,
   mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND mb.imp_pago - mb.val_impo_movi > lv_imp_maxi_pago_exce;

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios en exceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_supe_exce,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_supe_exce,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_supe_exce,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_pagos_excsu;

 PROCEDURE ccc_pr_vaban_saldo_negat(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                      VARCHAR2(250);

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_sin_deud,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_sin_deud,lv_id_proc_ejec,gv_des_log);

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_erro = p_cod_tipo_erro,
   mb.cod_iden_proc = p_cod_iden_proc,
   mb.val_esta_movi_pend = p_cod_esta_movi,
   mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND EXISTS (
     SELECT NULL
     FROM mae_clien mc
     WHERE mc.oid_clie = mb.clie_oid_clie
       AND mc.sal_deud_ante <= 0);

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios en exceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_sin_deud,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_sin_deud,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_sin_deud,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_saldo_negat;

 PROCEDURE ccc_pr_vaban_pagos_banca_antig(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                      VARCHAR2(250);
  lv_cant_dias_anti_pago           NUMBER(12);

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_anti,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  lv_cant_dias_anti_pago := TO_NUMBER(CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CantidadDiasAntiguedadPagoBancario'));

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_anti,lv_id_proc_ejec,gv_des_log);

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  UPDATE ccc_movim_banca_valid mb
  SET
   mb.cod_erro = p_cod_tipo_erro,
   mb.cod_iden_proc = p_cod_iden_proc,
   mb.val_esta_movi_pend = p_cod_esta_movi,
   mb.ind_exce_vali = p_ind_exce_vali
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba)
    AND TRUNC(SYSDATE) - mb.fec_pago >= lv_cant_dias_anti_pago;

  gv_des_log:='Se encontraron ' || SQL%ROWCOUNT || ' pagos bancarios en exceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_anti,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_anti,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_pago_anti,lv_id_proc_ejec, 2);

 END ccc_pr_vaban_pagos_banca_antig;

 PROCEDURE ccc_pr_valid_banca_banco_agric(
  p_cod_cuen_corr_banc             IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_ccba                      ccc_cuent_corri_banca.oid_cuen_corr_banc%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;

  lv_cod_erro                      VARCHAR2(250);
  lv_imp_suma                      NUMBER(12):=0;
  lv_imp_rem                       NUMBER(12):=0;
  lv_valo_npe                      VARCHAR2(30);
  lv_valo_digi                     NUMBER(1);

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,gc_cod_proc_vali_banc_agri,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio de la Validacion';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_banc_agri,lv_id_proc_ejec,gv_des_log);

  IF p_cod_cuen_corr_banc = 'T' THEN
   lv_oid_ccba := 999;
  ELSE
   lv_oid_ccba := ccc_pkg_gener.CCC_FN_OBTIE_OID_BANCO_CCBAN(p_cod_cuen_corr_banc);
  END IF;

  FOR v_ccc IN (SELECT
                 mb.oid_movi_banc,
                 mb.cod_cons,
                 mb.val_nomb_ofic
                FROM ccc_movim_banca_valid mb)  LOOP

   lv_imp_suma := 0;
   lv_valo_npe :=   substr(v_ccc.val_nomb_ofic,1,12) || v_ccc.cod_cons ||   substr(v_ccc.val_nomb_ofic,13,1);

   FOR x IN 1 .. 19 LOOP

    lv_valo_digi:= SUBSTR(lv_valo_npe,x,1);

    IF MOD(x,2) = 0 THEN

     lv_imp_suma := lv_imp_suma + lv_valo_digi;

    ELSE

     lv_imp_suma := lv_imp_suma + ( lv_valo_digi * 2 ) ;

     IF lv_valo_digi > 4 THEN

      lv_imp_suma := lv_imp_suma + 1;

     END IF;

    END IF;

   END LOOP;

   lv_imp_rem:= MOD((10 - MOD(lv_imp_suma,10)),10);

   IF lv_imp_rem <> substr(v_ccc.val_nomb_ofic,13,1) THEN

    UPDATE ccc_movim_banca_valid mb
    SET
     mb.cod_erro = p_cod_tipo_erro,
     mb.cod_iden_proc = p_cod_iden_proc,
     mb.val_esta_movi_pend = p_cod_esta_movi,
     mb.ind_exce_vali = p_ind_exce_vali,
     mb.clie_oid_clie = (SELECT oid_clie FROM mae_clien WHERE cod_clie = v_ccc.cod_cons)
    WHERE mb.oid_movi_banc = v_ccc.oid_movi_banc
      AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

   END IF;

  END LOOP;

  UPDATE ccc_movim_banca_valid mb
  SET mb.clie_oid_clie = ( SELECT mc.oid_clie
                           FROM mae_clien mc
                           WHERE mc.cod_clie = mb.cod_cons)
  WHERE mb.cod_erro IS NULL
    AND mb.ind_exce_vali = 0
    AND mb.ccba_oid_cc_banc = DECODE(lv_oid_ccba,999,mb.ccba_oid_cc_banc,lv_oid_ccba);

  gv_des_log:='Actualizando el Oid Clie a ' || SQL%ROWCOUNT || ' pagos bancarios';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_banc_agri,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Fin del proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,gc_cod_proc_vali_banc_agri,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,gc_cod_proc_vali_banc_agri,lv_id_proc_ejec, 2);

 END ccc_pr_valid_banca_banco_agric;

 PROCEDURE ccc_pr_valid_banca_indiv(
  p_cod_cuen_banc                  IN   ccc_cuent_corri_banca.cod_cc%TYPE,
  p_val_nom_prog                   IN   ccc_param_valid_lotes_banca.val_nomb_prog%TYPE,
  p_cod_iden_proc                  IN   ccc_param_valid_lotes_banca.cod_iden_proc%TYPE,
  p_cod_esta_movi                  IN   ccc_param_valid_lotes_banca.cod_esta_movi%TYPE,
  p_cod_tipo_erro                  IN   ccc_param_valid_lotes_banca.cod_tipo_erro%TYPE,
  p_ind_exce_vali                  IN   ccc_param_valid_lotes_banca.ind_exce_vali%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_sql            VARCHAR2(250);

 BEGIN

  lv_sql:='BEGIN ' || p_val_nom_prog || '(:1,:2,:3,:4,:5,:6); END;';
  EXECUTE IMMEDIATE lv_sql
  USING IN p_cod_cuen_banc,IN p_cod_iden_proc, IN p_cod_esta_movi,IN p_cod_tipo_erro,IN p_ind_exce_vali,IN p_cod_usua;

 END ccc_pr_valid_banca_indiv;

 PROCEDURE CCC_PR_VALID_LOTES_BANCA(
  p_cod_tipo_orig                  IN   ccc_tipos_orige_lotes_banca.cod_tipo_orig%TYPE,
  p_cod_usua           IN seg_usuar.use_usua%TYPE)
 IS

 CURSOR c_vali
 IS
  SELECT
   vb.val_nomb_prog,
   vb.cod_iden_proc,
   vb.cod_esta_movi,
   vb.cod_tipo_erro,
   vb.ind_exce_vali,
   vb.cod_cuen_corr_banc
  FROM ccc_param_valid_lotes_banca vb
  WHERE vb.cod_tipo_orig = p_cod_tipo_orig
    AND vb.ind_acti = 1
  ORDER BY vb.num_orde_vali ASC;

 BEGIN

  FOR v_vali IN c_vali LOOP

   ccc_pr_valid_banca_indiv(v_vali.cod_cuen_corr_banc,v_vali.val_nomb_prog,v_vali.cod_iden_proc,v_vali.cod_esta_movi,v_vali.cod_tipo_erro,v_vali.ind_exce_vali, p_cod_usua);

  END LOOP;

  -- Eliminando Gestiones Parametrizadas con Eliminacion Automatica
  DELETE FROM ccc_movim_banca_valid ba
  WHERE EXISTS (
   SELECT NULL
   FROM ccc_movim_banca_valid mb,
       ccc_param_valid_lotes_banca va
   WHERE mb.cod_erro = va.cod_tipo_erro
     AND va.cod_tipo_orig = p_cod_tipo_orig
     AND va.ind_elim = 1
     AND mb.oid_movi_banc = ba.oid_movi_banc);

 END CCC_PR_VALID_LOTES_BANCA;

 PROCEDURE CCC_PR_LIQUI_LOTE_BANCA(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE,
  p_cod_usua                       IN   VARCHAR2)
 IS

  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_oid_proc_crea                 ccc_proce.oid_proc%TYPE;
  lv_oid_subp_crea                 ccc_subpr.oid_subp%TYPE;
  lv_oid_cabe_carg_crea            ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_num_anio_crea                 ccc_cabec_carga_abono_direc.anio%TYPE;
  lv_num_mes_crea                  ccc_cabec_carga_abono_direc.val_peri_mes%TYPE;
  lv_num_cabe_crea                 ccc_cabec_carga_abono_direc.num_cabe%TYPE;
  lv_oid_tipo_abon_subp_crea       ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
  lv_cod_iden_proc                 ccc_movim_banca.cod_iden_proc%TYPE;
  lv_ind_inte_rece_banc            ccc_pais_socie_param.ind_inte_rece_banc%TYPE;
  lv_ind_conc_pago_pend            ccc_param_gener.val_para%TYPE;
  lv_ind_cont_cuen_espe            ccc_param_gener.val_para%TYPE;
  lv_ind_apli_cobr_exte            ccc_param_gener.val_para%TYPE;
  lv_ind_apli_inco                 ccc_param_gener.val_para%TYPE;


  CURSOR cur_movi_banc(
   p_oid_pais   seg_pais.oid_pais%TYPE)
  IS
   SELECT mb.clie_oid_clie
   FROM ccc_movim_banca mb
   WHERE mb.pais_oid_pais = p_oid_pais
     AND mb.num_lote = p_num_lote
     AND mb.cod_iden_proc = gc_cod_iden_proc_proc;

  lv_num_filas_bulk                NUMBER(12):= 5000;
  lv_cant_regi_ok                  NUMBER(12):=0;
  lv_tab_oid_clie                  gt_tab_oid_clie;

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');

  /* inicializa variables globales  para registro de log  */
  gv_log_cod_pais := lv_cod_pais;
  gv_log_cod_soci := lv_cod_soci;
  gv_log_user     := p_cod_usua;
  gv_log_cod_modu := 'CCC';
  gv_log_cod_proc := '01';

  lv_ind_conc_pago_pend := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndConcPagoPend');
  lv_ind_cont_cuen_espe := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndContabilizacionCuentasEspeciales');
  lv_ind_apli_cobr_exte := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndAplicacionCobranzaExterna');
  lv_ind_apli_inco := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndAplicacionIncobrable');

  UPDATE ccc_numer_lote_banca_recep r
  SET r.fec_inic_liqu = SYSDATE,
      r.cod_usua_liqu = p_cod_usua
  WHERE r.num_lote = p_num_lote;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

  gv_des_log:='Inicio CCC_PR_LIQUI_LOTE_BANCA parametros ' ||
                    ' 1: '  || p_num_lote ;
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  lv_num_filas_bulk := TO_NUMBER(NVL(CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('NumeroFilasBulkCollectLiquidacion'),5000));

  SELECT ps.ind_inte_rece_banc
  INTO  lv_ind_inte_rece_banc
  FROM ccc_pais_socie_param ps;

  IF lv_ind_inte_rece_banc = 1 THEN
   gv_des_log:='Validando Lote bancario';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);
   -- Validando que el lote este sin procesar
   BEGIN
    SELECT nl.cod_iden_proc
    INTO lv_cod_iden_proc
    FROM ccc_numer_lote_banca_recep nl
    WHERE nl.num_lote=p_num_lote;
   EXCEPTION
    WHEN no_data_found THEN
     gv_des_log:='Lote bancario no ha sido recepcionado';
     FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

     FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);

     RAISE_application_error(-20123,
                              'ERROR CCC_PR_LIQUI_LOTE_BANCA: Lote bancario no ha sido recepcionado');

    END;

    IF lv_cod_iden_proc<>'T' THEN
     gv_des_log:='Lote bancario no valido para liquidar';
     FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

     FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);

     RAISE_application_error(-20123,
                              'ERROR CCC_PR_LIQUI_LOTE_BANCA: Lote bancario no valido para liquidar');
    END IF;

   ELSE
    gv_des_log:='Interfaz de Recepcion de Bancos no se encuentra Activa';
    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);
   END IF;

   lv_oid_pais:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);
   lv_oid_soci:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);

   SELECT mb.subp_oid_marc_crea
   INTO lv_oid_subp_crea
   FROM ccc_movim_banca mb
   WHERE mb.pais_oid_pais=lv_oid_pais
     AND mb.num_lote=p_num_lote
     AND rownum < 2;

   gv_des_log:='   Subproceso Creacion : ' || lv_oid_subp_crea;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   SELECT cs.ccpr_oid_proc
   INTO lv_oid_proc_crea
   FROM ccc_subpr cs
   WHERE cs.oid_subp=lv_oid_subp_crea;

   gv_des_log:='   Proceso Creacion : ' || lv_oid_proc_crea;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   SELECT tas.oid_tipo_abon_subp
   INTO lv_oid_tipo_abon_subp_crea
      FROM ccc_tipo_abono_subpr tas
      WHERE tas.subp_oid_subp=lv_oid_subp_crea;

   gv_des_log:='   Tipo Abono Subproceso Creacion : ' || lv_oid_tipo_abon_subp_crea;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   -- Generando Cabecera de Creacion --
   gv_des_log:='Inicio Generando Cabecera de Creacion : ';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(
   lv_oid_pais,lv_oid_soci,lv_oid_proc_crea,lv_oid_tipo_abon_subp_crea,lv_oid_cabe_carg_crea);

   SELECT cab.anio,cab.val_peri_mes, cab.num_cabe
   INTO   lv_num_anio_crea,  lv_num_mes_crea, lv_num_cabe_crea
   FROM  ccc_cabec_carga_abono_direc cab
   WHERE cab.oid_cabe_carg = lv_oid_cabe_carg_crea;

   gv_des_log:='Fin Generando Cabecera de Creacion : Oid Cabe Carg Creacion ' || lv_oid_cabe_carg_crea;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='Inicio Actualizando Lote Bancario Procesado';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   UPDATE ccc_movim_banca mb
   SET
      mb.cod_iden_proc = gc_cod_iden_proc_proc,
      mb.val_docu_crea_anio = lv_num_anio_crea,
      mb.val_docu_crea_mes_seri = lv_num_mes_crea,
      mb.val_docu_crea_nume = lv_num_cabe_crea,
      mb.cod_usua_liqu = p_cod_usua,
      mb.val_hora_liqu = SYSDATE
   WHERE mb.pais_oid_pais = lv_oid_pais
     AND mb.num_lote=p_num_lote
     AND mb.cod_iden_proc=gc_cod_iden_proc_tran;

   gv_des_log:='Fin Actualizando Lote Bancario Procesado';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='Inicio Generando Detalle de CAD Bancarios';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   INSERT INTO ccc_detal_cargo_abono_direc
      SELECT
         ccc_dcad_seq.NEXTVAL,          -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
         lv_oid_cabe_carg_crea,         --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
         mb.clie_oid_clie,              --  CLIE_OID_CLIE                 NUMBER(12),
         mb.num_cons_tran,              --  NUM_LINE                      NUMBER(6),
         0,                             --  NUM_HIST_GENE                 NUMBER(3),
         TRUNC(SYSDATE),                --  FEC_MOVI                      DATE,
         0,                             --  IMP_MONE                      NUMBER(12,2),
         mb.imp_pago ,                  --  IMP                           NUMBER(12,2),
         NULL,                          --  VAL_REFE                      VARCHAR2(20 BYTE),
         mb.num_lote,                   --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
         NULL,                          --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
         NULL,                          --  MONE_OID_MONE                 NUMBER(12),
         mb.oid_movi_banc,              --  CMBA_OID_MOVI_BANC            NUMBER(12),
         NULL,                          --  MPAB_OID_MEDI_PAGO            NUMBER(12),
         NULL,                          --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
         NULL,                          --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
         NULL,                          --  MVCC_OID_MOVI_CC              NUMBER(12),
         mb.ccba_oid_cc_banc,           --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
         mb.fec_pago,                   --  FEC_PAGO_BANC                 DATE,
         p_cod_usua,                    --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
         lv_oid_soci,                   --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
         lv_oid_tipo_abon_subp_crea,    -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
         SYSDATE                        --  FEC_CREA                      DATE            NOT NULL
      FROM ccc_movim_banca mb
      WHERE mb.pais_oid_pais = lv_oid_pais
        AND mb.num_lote=p_num_lote
        AND mb.cod_iden_proc=gc_cod_iden_proc_proc;

   gv_des_log:='Fin Generando Detalle de CAD Bancarios';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      -- Liberando el Secuencial de CCC ---
      /*
      gv_des_log:='Liberando Secuencial de Creacion de CCC';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

      CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(p_cod_pais, lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea);

      -- Generando Cabecera de Aplicacion --

      lv_oid_proc_apli:=CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_OID_PROCE('TES002');
      lv_oid_subp_apli:=CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_OID_SUBPR('TES002','1');

      SELECT tas.oid_tipo_abon_subp
      INTO lv_oid_tipo_abon_subp_apli
      FROM ccc_tipo_abono_subpr tas
      WHERE tas.subp_oid_subp=lv_oid_subp_apli;

      CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(
       lv_oid_pais,lv_oid_soci,lv_oid_proc_apli,lv_oid_tipo_abon_subp_apli,lv_oid_cabe_carg_apli);

      SELECT cab.anio,     cab.val_peri_mes, cab.num_cabe
      INTO   lv_num_anio_apli,  lv_num_mes_apli, lv_num_cabe_apli
      FROM  ccc_cabec_carga_abono_direc cab
      WHERE cab.oid_cabe_carg = lv_oid_cabe_carg_apli;

      gv_des_log:='Generando Cabecera de Aplicacion : Oid Cabe Carg ' || lv_oid_cabe_carg_apli;
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
      */

   gv_des_log:='Inicio del Proceso de Aplicacion del Lote Bancario';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  SELECT br.val_cant_regi_ok
  INTO lv_cant_regi_ok
  FROM ccc_numer_lote_banca_recep br
  WHERE br.num_lote = p_num_lote;

  gv_des_log:='Cantidad de Pagos Bancarios' || lv_cant_regi_ok;
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


  OPEN cur_movi_banc (lv_oid_pais);
  LOOP
   FETCH cur_movi_banc BULK COLLECT INTO lv_tab_oid_clie LIMIT lv_num_filas_bulk;
   IF lv_tab_oid_clie.COUNT > 0 THEN

    gv_des_log:='   Bulk Collect ' || lv_num_filas_bulk;
    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

    FOR x IN lv_tab_oid_clie.FIRST .. lv_tab_oid_clie.LAST LOOP

     --lv_cont_regi := lv_cont_regi + 1;
     -- gv_des_log:='Procesando ' || lv_cont_regi  ;

     CCC_PR_APLIC_ABONO_CARGO_CLIEN(lv_tab_oid_clie(x));

     END LOOP;
    END IF;

   EXIT WHEN cur_movi_banc%NOTFOUND;
  END LOOP;
  CLOSE cur_movi_banc;

  gv_des_log:='Fin  del Proceso de Aplicacion del Lote Bancario';
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);



  gv_des_log:='Registrando Lote Bancario como procesado';
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  UPDATE ccc_numer_lote_banca_recep nl
  SET nl.cod_iden_proc = gc_cod_iden_proc_proc
  WHERE nl.num_lote = p_num_lote;

  gv_des_log:='Liberando Secuencial de Creacion de CCC';
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

  CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(lv_cod_pais, lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea);



  IF lv_ind_conc_pago_pend= '1' THEN

   gv_des_log:='Conciliacion de Pagos Pendientes de Liquidar';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

   CCC_PR_CONCI_BANCA_CUPON_LOTE(p_num_lote);

  END IF;

  IF lv_ind_apli_inco = 'S' THEN

   gv_des_log:='Aplicacion de los Pagos a las Incobrables';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

   CCC_PR_APLIC_ABONO_CASTI(p_num_lote);

  END IF;

  IF lv_ind_cont_cuen_espe = '1' THEN

   gv_des_log:='Contabilizacion por Cuentas Especiales';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

   CCC_PR_CONTA_BANCA_CUENT_ESPEC(p_num_lote);

  END IF;

  IF lv_ind_apli_cobr_exte = 'S' THEN

   gv_des_log:='Generacion de Cargos x Cobranza Externa';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

   CCC_PR_GENER_CARGO_COBRA_EXTER(p_num_lote);

  END IF;
  -- Actualizando la auditoria de la liquidacion --
  UPDATE ccc_movim_banca mb
  SET mb.cod_usua_liqu = p_cod_usua,
       mb.val_hora_liqu = SYSDATE
  WHERE mb.num_lote = p_num_lote;

  UPDATE ccc_numer_lote_banca_recep r
  SET r.fec_fina_liqu = SYSDATE
  WHERE r.num_lote = p_num_lote;

  gv_des_log:='Fin del proceso de manera correcta';
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

 EXCEPTION

  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_LIQUI_LOTE_BANCA;

PROCEDURE CCC_PR_REGIS_LOTE_BANCA_PERCE(
   p_cod_pais                   IN   seg_pais.cod_pais%TYPE,
   p_cod_soci                   IN   seg_socie.cod_soci%TYPE,
   p_num_lote                   IN   ccc_movim_banca.num_lote%TYPE,
   p_cod_usua                   IN   VARCHAR2)
IS

   lv_oid_pais                  seg_pais.oid_pais%TYPE;
   lv_oid_soci                  seg_socie.oid_soci%TYPE;
   lv_oid_proc_crea             ccc_proce.oid_proc%TYPE;
   lv_oid_subp_crea             ccc_subpr.oid_subp%TYPE;
   lv_oid_cabe_carg_crea        ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
   lv_num_anio_crea             ccc_cabec_carga_abono_direc.anio%TYPE;
   lv_num_mes_crea              ccc_cabec_carga_abono_direc.val_peri_mes%TYPE;
   lv_num_cabe_crea             ccc_cabec_carga_abono_direc.num_cabe%TYPE;
   lv_oid_tipo_abon_subp_crea   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;


BEGIN

   /* inicializa variables globales  para registro de log  */
   gv_log_cod_pais := p_cod_pais;
   gv_log_cod_soci := p_cod_soci;
   gv_log_user     := p_cod_usua;
   gv_log_cod_modu := 'CCC';
   gv_log_cod_proc := '01';

   FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

   gv_des_log:='Inicio CCC_PR_REGIS_LOTE_BANCA_PERCE parametros ' ||
                    ' 1: '  || p_num_lote ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   lv_oid_pais:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_cod_pais);
   lv_oid_soci:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(p_cod_soci);

   SELECT mb.subp_oid_marc_crea
   INTO lv_oid_subp_crea
   FROM ccc_movim_banca mb
   WHERE mb.pais_oid_pais=lv_oid_pais
     AND mb.num_lote=p_num_lote
     AND rownum < 2;

   gv_des_log:='   Subproceso Creacion : ' || lv_oid_subp_crea;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   SELECT cs.ccpr_oid_proc
   INTO lv_oid_proc_crea
   FROM ccc_subpr cs
   WHERE cs.oid_subp=lv_oid_subp_crea;

   gv_des_log:='   Proceso Creacion : ' || lv_oid_proc_crea;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   SELECT tas.oid_tipo_abon_subp
   INTO lv_oid_tipo_abon_subp_crea
   FROM ccc_tipo_abono_subpr tas
   WHERE tas.subp_oid_subp=lv_oid_subp_crea;

   gv_des_log:='   Tipo Abono Subproceso Creacion : ' || lv_oid_tipo_abon_subp_crea;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   -- Generando Cabecera de Creacion --
   gv_des_log:='Inicio Generando Cabecera de Creacion : ';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(
      lv_oid_pais,lv_oid_soci,lv_oid_proc_crea,lv_oid_tipo_abon_subp_crea,lv_oid_cabe_carg_crea);

   SELECT cab.anio,     cab.val_peri_mes, cab.num_cabe
   INTO   lv_num_anio_crea,  lv_num_mes_crea, lv_num_cabe_crea
   FROM  ccc_cabec_carga_abono_direc cab
   WHERE cab.oid_cabe_carg = lv_oid_cabe_carg_crea;

   gv_des_log:='Fin Generando Cabecera de Creacion : Oid Cabe Carg Creacion ' || lv_oid_cabe_carg_crea;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='Inicio Actualizando Lote Bancario Procesado';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   UPDATE ccc_movim_banca mb
   SET
      mb.cod_iden_proc=gc_cod_iden_proc_proc,
      mb.val_docu_crea_anio=lv_num_anio_crea,
      mb.val_docu_crea_mes_seri=lv_num_mes_crea,
      mb.val_docu_crea_nume=lv_num_cabe_crea
   WHERE mb.pais_oid_pais = lv_oid_pais
     AND mb.num_lote=p_num_lote
     AND mb.cod_iden_proc=gc_cod_iden_proc_tran;

   gv_des_log:='Fin Actualizando Lote Bancario Procesado';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='Inicio Generando Detalle de Pagos Bancarios';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   INSERT INTO ccc_detal_cargo_abono_direc
      SELECT
         ccc_dcad_seq.NEXTVAL,             -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
         lv_oid_cabe_carg_crea,           --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
         mb.clie_oid_clie,                       --  CLIE_OID_CLIE                 NUMBER(12),
         mb.num_cons_tran,                   --  NUM_LINE                      NUMBER(6),
         0,                                                --  NUM_HIST_GENE                 NUMBER(3),
         TRUNC(SYSDATE),                   --  FEC_MOVI                      DATE,
         0,                                                --  IMP_MONE                      NUMBER(12,2),
         mb.imp_pago ,                             --  IMP                           NUMBER(12,2),
         NULL,                                         --  VAL_REFE                      VARCHAR2(20 BYTE),
         mb.num_lote,                               --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
         NULL,                                         --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
         NULL,                                         --  MONE_OID_MONE                 NUMBER(12),
         mb.oid_movi_banc,                      --  CMBA_OID_MOVI_BANC            NUMBER(12),
         NULL,                                         --  MPAB_OID_MEDI_PAGO            NUMBER(12),
         NULL,                                           --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
         NULL,                                           --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
         NULL,                                          --  MVCC_OID_MOVI_CC              NUMBER(12),
         mb.ccba_oid_cc_banc,                --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
         mb.fec_pago,                                --  FEC_PAGO_BANC                 DATE,
         p_cod_usua,                                 --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
         lv_oid_soci,                                  --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
         lv_oid_tipo_abon_subp_crea,     -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
         SYSDATE                                    --  FEC_CREA                      DATE            NOT NULL
      FROM ccc_movim_banca mb
      WHERE mb.pais_oid_pais = lv_oid_pais
        AND mb.num_lote=p_num_lote
        AND mb.cod_iden_proc=gc_cod_iden_proc_proc;

   gv_des_log:='Fin Generando Detalle de Pagos Bancarios';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   -- Liberando el Secuencial de CCC ---
   gv_des_log:='Liberando Secuencial de Creacion de CCC';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

   CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(p_cod_pais, lv_num_anio_crea,lv_num_mes_crea,lv_num_cabe_crea);


   gv_des_log:='Fin  del Proceso de Registro del Lote Bancario';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);


   gv_des_log:='Fin del proceso de manera correcta';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                    gv_cod_proc_ejec, gv_des_log);

   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

EXCEPTION
   WHEN OTHERS THEN

      ln_sqlcode := SQLCODE;
      ls_sqlerrm := substr(SQLERRM, 1, 250);

      gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
      FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
      RAISE_application_error(-20123,
                              'ERROR CCC_PR_REGIS_LOTE_BANCA_PERCE: ' ||
                               ls_sqlerrm);

END CCC_PR_REGIS_LOTE_BANCA_PERCE;

 PROCEDURE CCC_PR_ELIMI_LOTE_BANCA(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE,
  p_cod_usua                       IN   VARCHAR2)
 IS

 BEGIN

  INSERT INTO ccc_gesti_movim_banca
   SELECT
    mb.oid_movi_banc,     -- oid_movi_banc  number(12)
    gc_gest_movi_banc_elim,                  -- val_tipo_gest  varchar2(2)
    p_cod_usua,           -- cod_usua_gest  varchar2(20)
    SYSDATE               -- fec_gest  date
   FROM ccc_movim_banca mb
   WHERE mb.num_lote = p_num_lote;

  INSERT INTO ccc_movim_banca_elimi
   SELECT
    mb.*
  FROM ccc_movim_banca mb
  WHERE mb.num_lote = p_num_lote;

  DELETE FROM ccc_movim_banca mb
  WHERE mb.num_lote = p_num_lote;

  DELETE FROM ccc_numer_lote_banca_recep br
  WHERE br.num_lote = p_num_lote;

 EXCEPTION

  WHEN OTHERS THEN

   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(SQLERRM, 1, 250);

   RAISE_application_error(-20123,
                              'ERROR CCC_PR_ELIMI_LOTE_BANCA: ' ||
                               ls_sqlerrm);
 END CCC_PR_ELIMI_LOTE_BANCA;

 PROCEDURE CCC_PR_CONCI_BANCA_CUPON
 IS

 CURSOR c_cupo_pend
 IS
  SELECT
   cup.oid_deta_cupo_tram_depu oid_cup,
   cup.clie_oid_clie oid_clie,
   cup.fec_docu fec_pago,
   cup.imp_deta imp_pago
  FROM  ccc_detal_cupon_trami_depur cup
  WHERE cup.sicu_oid_situ_cupo <> 3;

  TYPE t_cupo_pend                 IS TABLE OF c_cupo_pend%ROWTYPE;
  lv_oid_situ_cupo                 ccc_situa_cupon.oid_situ_cupo%TYPE;
  lv_tab_cupo_pend                 t_cupo_pend;
  lv_ind_cup                       NUMBER(12);
  lv_ind_nive_conc                 VARCHAR2(1);

 BEGIN

  lv_ind_nive_conc := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndicadorNivelConciliacion');

  SELECT sc.oid_situ_cupo
  INTO lv_oid_situ_cupo
  FROM ccc_situa_cupon sc
  WHERE sc.cod_situ_cupo = gc_cod_cupo_conc;

  IF lv_ind_nive_conc = '1' THEN

   OPEN c_cupo_pend;
   LOOP
    FETCH c_cupo_pend BULK COLLECT INTO  lv_tab_cupo_pend LIMIT W_FILAS;
    IF lv_tab_cupo_pend.COUNT > 0 THEN
     FOR i IN lv_tab_cupo_pend.FIRST .. lv_tab_cupo_pend.LAST LOOP

      SELECT COUNT(*)
      INTO lv_ind_cup
      FROM ccc_movim_banca mb
      WHERE mb.clie_oid_clie = lv_tab_cupo_pend(i).oid_clie
        AND mb.imp_pago = lv_tab_cupo_pend(i).imp_pago;

      IF lv_ind_cup > 0 THEN

       UPDATE ccc_detal_cupon_trami_depur x
       SET x.sicu_oid_situ_cupo = lv_oid_situ_cupo
       WHERE x.oid_deta_cupo_tram_depu = lv_tab_cupo_pend(i).oid_cup;

      END IF;

     END LOOP;
    END IF;

    EXIT WHEN c_cupo_pend%NOTFOUND;
   END LOOP;
   CLOSE c_cupo_pend;

  ELSE

   OPEN c_cupo_pend;
    LOOP
     FETCH c_cupo_pend BULK COLLECT INTO  lv_tab_cupo_pend LIMIT W_FILAS;
      IF lv_tab_cupo_pend.COUNT > 0 THEN
       FOR i IN lv_tab_cupo_pend.FIRST .. lv_tab_cupo_pend.LAST LOOP

        SELECT COUNT(*)
        INTO lv_ind_cup
        FROM ccc_movim_banca mb
        WHERE mb.clie_oid_clie = lv_tab_cupo_pend(i).oid_clie
          AND mb.fec_pago = lv_tab_cupo_pend(i).fec_pago
          AND mb.imp_pago = lv_tab_cupo_pend(i).imp_pago;

        IF lv_ind_cup > 0 THEN

         UPDATE ccc_detal_cupon_trami_depur x
         SET x.sicu_oid_situ_cupo = lv_oid_situ_cupo
         WHERE x.oid_deta_cupo_tram_depu = lv_tab_cupo_pend(i).oid_cup;

        END IF;

       END LOOP;
      END IF;

     EXIT WHEN c_cupo_pend%NOTFOUND;
    END LOOP;
    CLOSE c_cupo_pend;

  END IF;

 END CCC_PR_CONCI_BANCA_CUPON;

 PROCEDURE CCC_PR_CONTA_BANCA_PREVI_SAPFI
 IS

  lv_ulti_oid                      NUMBER(12);

 CURSOR c_movi_banc
 IS
 SELECT mb.oid_movi_banc
 FROM ccc_movim_banca mb
 WHERE mb.imp_pago <> imp_apli_clie + imp_apli_exce  + imp_apli_inco + imp_apli_cobr_exte + imp_apli_cobr_pend_regu + imp_apli_fami_prot
   AND mb.oid_movi_banc >= lv_ulti_oid
   AND mb.cod_iden_proc = gc_cod_iden_proc_erro;

 BEGIN

  SELECT fin.oid_ulti_regi_proc
  INTO lv_ulti_oid
  FROM fin_contr_regis_progr fin
  WHERE fin.cod_modu = gc_cod_modu
  AND fin.cod_prog = gc_cod_inte_sapf_cobr;

  FOR v_movi_banc IN c_movi_banc LOOP

   UPDATE ccc_movim_banca mb
   SET mb.imp_apli_cobr_pend_regu = mb.imp_pago
   WHERE mb.imp_pago <> imp_apli_clie + imp_apli_exce  + imp_apli_inco + imp_apli_cobr_exte + imp_apli_cobr_pend_regu + imp_apli_fami_prot
     AND mb.oid_movi_banc = v_movi_banc.oid_movi_banc;

   --CCC_PR_CONTA_BANCA_CUENT_SAPFI(v_lote_banc.num_lote);

  END LOOP;

 END CCC_PR_CONTA_BANCA_PREVI_SAPFI;

 PROCEDURE CCC_PR_CONTA_BANCA_CUENT_SAPFI(
  p_num_lote                     IN   ccc_movim_banca.num_lote%TYPE)
 IS

 BEGIN

  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_inco = 0,
      mb.imp_apli_cobr_pend_regu = 0,
      mb.imp_apli_fami_prot = 0,
      mb.imp_apli_exce = 0,
      mb.imp_apli_cobr_exte = 0,
      mb.imp_apli_clie = 0
  WHERE mb.num_lote = p_num_lote;

  /*
  -- Incobrable
  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_inco = mb.imp_pago
  WHERE mb.num_lote = p_num_lote
    AND mb.ind_pago_inco = 1
    AND mb.cod_iden_proc = gc_cod_iden_proc_proc;
  */



  -- Cobranza x Regularizar
  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_cobr_pend_regu = mb.imp_pago
  WHERE mb.num_lote = p_num_lote
    AND mb.cod_iden_proc = gc_cod_iden_proc_erro;

  /*
  -- Familia Protegida --
  UPDATE ccc_aplic_abono_cargo cc
  SET cc.ind_fami_prot = 1
  WHERE EXISTS (
   SELECT NULL
   FROM
    ccc_movim_banca mb,
    ccc_aplic_abono_cargo ap,
    ccc_movim_cuent_corri mcc,
    ccc_proce cp,
    ccc_subpr su
   WHERE ap.cmba_oid_movi_banc = mb.oid_movi_banc
     AND ap.mvcc_oid_movi_carg = mcc.oid_movi_cc
     AND mcc.subp_oid_subp_crea = su.oid_subp
     AND cp.oid_proc = su.ccpr_oid_proc
     AND cp.cod_proc = gc_cod_proc_carg_dire
     AND su.cod_subp = gc_cod_subp_carg_fase
     AND mb.num_lote = p_num_lote
     AND ap.oid_movi_abon = cc.oid_movi_abon)
   AND EXISTS (
    SELECT NULL
    FROM ccc_movim_banca mb
    WHERE mb.num_lote = p_num_lote
      AND mb.oid_movi_banc = cc.cmba_oid_movi_banc);


  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_fami_prot =
      NVL((SELECT SUM(aac.imp_abon)
       FROM ccc_aplic_abono_cargo aac
       WHERE aac.ind_fami_prot = 1
         AND aac.cmba_oid_movi_banc = mb.oid_movi_banc),0)
  WHERE mb.num_lote = p_num_lote
    AND mb.cod_iden_proc = gc_cod_iden_proc_proc;
  */

  /*
   --Notas en exceso --
  UPDATE ccc_movim_banca mb
  SET mb.ind_pago_exce = 1,
      mb.imp_apli_exce = mb.imp_sald_pend
  WHERE mb.num_lote = p_num_lote
    AND mb.imp_sald_pend > 0
    AND mb.cod_iden_proc = 'P'
    AND mb.ind_pago_inco = 0;
  */

  /*
  --Cobranza Externa --
  lv_ind_cobr_exte := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndAplicCobrExteV2');

  IF lv_ind_cobr_exte IS NULL THEN

   UPDATE ccc_aplic_abono_cargo cc
   SET cc.ind_cobr_exte = 1
   WHERE EXISTS (
            SELECT NULL
            FROM ccc_movim_cuent_corri mcc
            WHERE cc.mvcc_oid_movi_carg = mcc.oid_movi_cc
              AND TRUNC(SYSDATE) - mcc.fec_docu > 63)
     AND EXISTS (
            SELECT NULL
            FROM ccc_movim_banca mb
            WHERE mb.num_lote = p_num_lote
              AND mb.oid_movi_banc = cc.cmba_oid_movi_banc);

  ELSE

   UPDATE ccc_aplic_abono_cargo cc
   SET cc.ind_cobr_exte = 1
   WHERE EXISTS (
            SELECT NULL
            FROM cob_detal_movim_carte dm,
                 cob_etapa_deuda_pais ed
            WHERE dm.cod_etap_deud = ed.cod_etap_deud
              AND ed.ind_cobr_exte = 1
              AND dm.mvcc_oid_movi_cc = cc.mvcc_oid_movi_carg
              AND dm.fec_cier >= TRUNC(SYSDATE))
     AND EXISTS (
            SELECT NULL
            FROM ccc_movim_banca mb
            WHERE mb.num_lote = p_num_lote
              AND mb.oid_movi_banc = cc.cmba_oid_movi_banc);

  END IF;

  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_cobr_exte = mb.imp_sald_pend
  WHERE mb.num_lote = p_num_lote
    AND mb.imp_sald_pend > 0
    AND mb.cod_iden_proc = 'P'
    AND EXISTS (
     SELECT NULL
     FROM ccc_aplic_abono_cargo aa
     WHERE aa.cmba_oid_movi_banc = mb.oid_movi_banc
       AND aa.ind_cobr_exte = 1);
  */

  -- Cliente
  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_clie = mb.imp_pago - (NVL(mb.imp_apli_exce,0) + NVL(mb.imp_apli_cobr_exte,0) + NVL(mb.imp_apli_inco,0) + NVL(mb.imp_apli_cobr_pend_regu,0) + NVL(mb.imp_apli_fami_prot,0))
  WHERE mb.num_lote = p_num_lote
   AND mb.cod_iden_proc = gc_cod_iden_proc_proc;

 END CCC_PR_CONTA_BANCA_CUENT_SAPFI;

 PROCEDURE CCC_PR_CONTA_BANCA_CUENT_ESPEC(
  p_num_lote                     IN   ccc_movim_banca.num_lote%TYPE)
 IS

  lv_ind_cobr_exte               ccc_param_gener.val_para%TYPE;

 BEGIN

  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_inco = 0,
      mb.imp_apli_cobr_pend_regu = 0,
      mb.imp_apli_fami_prot = 0,
      mb.imp_apli_exce = 0,
      mb.imp_apli_cobr_exte = 0,
      mb.imp_apli_clie = 0
  WHERE mb.num_lote = p_num_lote;

  -- Incobrable
  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_inco = mb.imp_pago
  WHERE mb.num_lote = p_num_lote
    AND mb.ind_pago_inco = 1
    AND mb.cod_iden_proc = gc_cod_iden_proc_proc;

  -- Cobranza x Regularizar
  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_cobr_pend_regu = mb.imp_pago
  WHERE mb.num_lote = p_num_lote
    AND mb.cod_iden_proc = gc_cod_iden_proc_erro;

  -- Familia Protegida --
  UPDATE ccc_aplic_abono_cargo cc
  SET cc.ind_fami_prot = 1
  WHERE EXISTS (
   SELECT NULL
   FROM
    ccc_movim_banca mb,
    ccc_aplic_abono_cargo ap,
    ccc_movim_cuent_corri mcc,
    ccc_proce cp,
    ccc_subpr su
   WHERE ap.cmba_oid_movi_banc = mb.oid_movi_banc
     AND ap.mvcc_oid_movi_carg = mcc.oid_movi_cc
     AND mcc.subp_oid_subp_crea = su.oid_subp
     AND cp.oid_proc = su.ccpr_oid_proc
     AND cp.cod_proc = gc_cod_proc_carg_dire
     AND su.cod_subp = gc_cod_subp_carg_fase
     AND mb.num_lote = p_num_lote
     AND ap.oid_movi_abon = cc.oid_movi_abon)
   AND EXISTS (
    SELECT NULL
    FROM ccc_movim_banca mb
    WHERE mb.num_lote = p_num_lote
      AND mb.oid_movi_banc = cc.cmba_oid_movi_banc);

  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_fami_prot =
      NVL((SELECT SUM(aac.imp_abon)
       FROM ccc_aplic_abono_cargo aac
       WHERE aac.ind_fami_prot = 1
         AND aac.cmba_oid_movi_banc = mb.oid_movi_banc),0)
  WHERE mb.num_lote = p_num_lote
    AND mb.cod_iden_proc = gc_cod_iden_proc_proc;

   --Notas en exceso --
  /*
  UPDATE ccc_movim_banca mb
  SET mb.ind_pago_exce = 1,
      mb.imp_apli_exce = mb.imp_sald_pend
  WHERE mb.num_lote = p_num_lote
    AND mb.imp_sald_pend > 0
    AND mb.cod_iden_proc = 'P'
    AND mb.ind_pago_inco = 0;
  */

  --Cobranza Externa --
  lv_ind_cobr_exte := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndAplicCobrExteV2');

  IF lv_ind_cobr_exte IS NULL THEN

   UPDATE ccc_aplic_abono_cargo cc
   SET cc.ind_cobr_exte = 1
   WHERE EXISTS (
            SELECT NULL
            FROM ccc_movim_cuent_corri mcc
            WHERE cc.mvcc_oid_movi_carg = mcc.oid_movi_cc
              AND TRUNC(SYSDATE) - mcc.fec_docu > 63)
     AND EXISTS (
            SELECT NULL
            FROM ccc_movim_banca mb
            WHERE mb.num_lote = p_num_lote
              AND mb.oid_movi_banc = cc.cmba_oid_movi_banc);

  ELSE

   UPDATE ccc_aplic_abono_cargo cc
   SET cc.ind_cobr_exte = 1
   WHERE EXISTS (
            SELECT NULL
            FROM cob_detal_movim_carte dm,
                 cob_etapa_deuda_pais ed
            WHERE dm.cod_etap_deud = ed.cod_etap_deud
              AND ed.ind_cobr_exte = 1
              AND dm.mvcc_oid_movi_cc = cc.mvcc_oid_movi_carg
              AND dm.fec_cier >= TRUNC(SYSDATE))
     AND EXISTS (
            SELECT NULL
            FROM ccc_movim_banca mb
            WHERE mb.num_lote = p_num_lote
              AND mb.oid_movi_banc = cc.cmba_oid_movi_banc);

  END IF;

  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_cobr_exte = mb.imp_sald_pend
  WHERE mb.num_lote = p_num_lote
    AND mb.imp_sald_pend > 0
    AND mb.cod_iden_proc = 'P'
    AND EXISTS (
     SELECT NULL
     FROM ccc_aplic_abono_cargo aa
     WHERE aa.cmba_oid_movi_banc = mb.oid_movi_banc
       AND aa.ind_cobr_exte = 1);

  -- Cliente
  UPDATE ccc_movim_banca mb
  SET mb.imp_apli_clie = mb.imp_pago - (NVL(mb.imp_apli_exce,0) + NVL(mb.imp_apli_cobr_exte,0) + NVL(mb.imp_apli_inco,0) + NVL(mb.imp_apli_cobr_pend_regu,0) + NVL(mb.imp_apli_fami_prot,0))
  WHERE mb.num_lote = p_num_lote
   AND mb.cod_iden_proc = gc_cod_iden_proc_proc;

 END CCC_PR_CONTA_BANCA_CUENT_ESPEC;

 PROCEDURE CCC_PR_CONCI_BANCA_CUPON_LOTE(
  p_num_lote                     IN   ccc_movim_banca.num_lote%TYPE)
 IS

 CURSOR c_cupo_pend(
  p_num_lote_banc   NUMBER,
  p_oid_situ_cupo   NUMBER)

 IS
  SELECT
   cup.oid_deta_cupo_tram_depu oid_cupo,
   cup.clie_oid_clie oid_clie,
   cup.fec_docu fec_pago,
   cup.imp_deta imp_pago
  FROM
   ccc_detal_cupon_trami_depur cup
  WHERE cup.sicu_oid_situ_cupo <> p_oid_situ_cupo
    AND cup.cmba_oid_movi_banc IS NULL
    AND EXISTS (
     SELECT NULL
     FROM ccc_movim_banca mb
     WHERE mb.num_lote = p_num_lote_banc
     AND mb.clie_oid_clie = cup.clie_oid_clie
     AND mb.cod_iden_proc = gc_cod_iden_proc_proc);

 TYPE t_cupo_pend                  IS TABLE OF c_cupo_pend%ROWTYPE;
 lv_tab_cupo_pend                  t_cupo_pend;
 lv_ind_nive_conc                  VARCHAR2(1);
 lv_ind_dias_depu                  NUMBER(2);
 lv_oid_situ_cupo                  ccc_situa_cupon.oid_situ_cupo%TYPE;
 lv_oid_situ_cupo_depu             ccc_situa_cupon.oid_situ_cupo%TYPE;
 lv_oid_movi_banc                  ccc_movim_banca.oid_movi_banc%TYPE;

 BEGIN

  lv_ind_nive_conc := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndicadorNivelConciliacion');
  lv_ind_dias_depu := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('IndicadorDuracionCupon');

  SELECT sc.oid_situ_cupo
  INTO lv_oid_situ_cupo
  FROM ccc_situa_cupon sc
  WHERE sc.cod_situ_cupo = gc_cod_cupo_conc;

  IF lv_ind_nive_conc = '1' THEN
    OPEN c_cupo_pend(p_num_lote,lv_oid_situ_cupo);
    LOOP
     FETCH c_cupo_pend BULK COLLECT INTO  lv_tab_cupo_pend LIMIT W_FILAS;
      IF lv_tab_cupo_pend.COUNT > 0 THEN
       FOR i IN lv_tab_cupo_pend.FIRST .. lv_tab_cupo_pend.LAST LOOP

        SELECT MIN(mb.oid_movi_banc)
        INTO lv_oid_movi_banc
        FROM ccc_movim_banca mb
        WHERE mb.cod_iden_proc = gc_cod_iden_proc_proc
          AND mb.clie_oid_clie = lv_tab_cupo_pend(i).oid_clie
          AND mb.imp_pago = lv_tab_cupo_pend(i).imp_pago
          AND mb.num_lote = p_num_lote
          AND NOT EXISTS (
             SELECT 1
             FROM ccc_detal_cupon_trami_depur x
             WHERE x.cmba_oid_movi_banc = mb.oid_movi_banc);

        IF lv_oid_movi_banc IS NOT NULL THEN

         UPDATE ccc_detal_cupon_trami_depur x
         SET x.sicu_oid_situ_cupo = lv_oid_situ_cupo,
             x.cmba_oid_movi_banc = lv_oid_movi_banc
         WHERE x.oid_deta_cupo_tram_depu = lv_tab_cupo_pend(i).oid_cupo
         AND x.cmba_oid_movi_banc IS NULL;

        END IF;

       END LOOP;
      END IF;

     EXIT WHEN c_cupo_pend%NOTFOUND;

    END LOOP;
    CLOSE c_cupo_pend;

  ELSE

    OPEN c_cupo_pend(p_num_lote,lv_oid_situ_cupo);
    LOOP
     FETCH c_cupo_pend BULK COLLECT INTO  lv_tab_cupo_pend LIMIT W_FILAS;
      IF lv_tab_cupo_pend.COUNT > 0 THEN
       FOR i IN lv_tab_cupo_pend.FIRST .. lv_tab_cupo_pend.LAST LOOP

        SELECT MIN(mb.oid_movi_banc)
        INTO lv_oid_movi_banc
        FROM ccc_movim_banca mb
        WHERE mb.cod_iden_proc = gc_cod_iden_proc_proc
          AND mb.clie_oid_clie = lv_tab_cupo_pend(i).oid_clie
          AND mb.fec_pago = lv_tab_cupo_pend(i).fec_pago
          AND mb.imp_pago = lv_tab_cupo_pend(i).imp_pago
          AND mb.num_lote = p_num_lote
          AND NOT EXISTS (
             SELECT 1
             FROM ccc_detal_cupon_trami_depur x
             WHERE x.cmba_oid_movi_banc = mb.oid_movi_banc);

        IF lv_oid_movi_banc IS NOT NULL THEN

         UPDATE ccc_detal_cupon_trami_depur x
         SET x.sicu_oid_situ_cupo = lv_oid_situ_cupo,
             x.cmba_oid_movi_banc = lv_oid_movi_banc
         WHERE x.oid_deta_cupo_tram_depu = lv_tab_cupo_pend(i).oid_cupo
         AND x.cmba_oid_movi_banc IS NULL;

        END IF;

       END LOOP;
      END IF;

     EXIT WHEN c_cupo_pend%NOTFOUND;

    END LOOP;
    CLOSE c_cupo_pend;

  END IF;

  -- Depuracion de Cupones --
  IF lv_ind_dias_depu IS NOT NULL THEN

   SELECT sc.oid_situ_cupo
   INTO lv_oid_situ_cupo_depu
   FROM ccc_situa_cupon sc
   WHERE sc.cod_situ_cupo = gc_cod_cupo_depu;

   UPDATE ccc_detal_cupon_trami_depur x
   SET x.sicu_oid_situ_cupo = lv_oid_situ_cupo_depu,
       x.obs_deta_cupo = 'DEPURACION POR CADUCIDAD'
   WHERE TRUNC(SYSDATE) - x.fec_docu > lv_ind_dias_depu;

  END IF;

 END CCC_PR_CONCI_BANCA_CUPON_LOTE;

 PROCEDURE CCC_PR_GENER_CONSU_CUPON(
  p_cod_pais                            IN   seg_pais.cod_pais%TYPE,
  p_cod_soci                            IN   seg_socie.cod_soci%TYPE,
  p_cod_peri                            IN   seg_perio_corpo.cod_peri%TYPE)
 IS

  lv_imp_deud_ante_vene NUMBER(12,2);

 BEGIN

  DELETE FROM  ccc_gener_consu_cupon;

  SELECT cp.imp_deud_ante_vene
  INTO lv_imp_deud_ante_vene
  FROM ccc_pais_socie_param cp
  WHERE cp.cod_pais = p_cod_pais
    AND cp.cod_soci = p_cod_soci;

  INSERT INTO  ccc_gener_consu_cupon
    WITH
         ccc AS (
            SELECT mcc.clie_oid_clie
            FROM ccc_movim_cuent_corri mcc
            WHERE mcc.imp_pend <> 0
            HAVING SUM(mcc.imp_pend) > 0
            GROUP BY mcc.clie_oid_clie),
         temp1 AS
               (SELECT
                   mc.cod_clie,
                   mcc.clie_oid_clie oid_clie,
                   MAX(cp.oid_peri) oid_ulti_pedi,
                   MAX(spc.cod_peri) cod_ulti_peri
                 FROM
                    ccc_movim_cuent_corri mcc,
                    ccc,
                    mae_clien mc,
                    cra_perio cp,
                    seg_perio_corpo spc
                 WHERE mcc.clie_oid_clie = mc.oid_clie
                 AND mcc.clie_oid_clie = ccc.clie_oid_clie
                 AND mcc.perd_oid_peri=cp.oid_peri
                 AND cp.peri_oid_peri=spc.oid_peri
                 AND mcc.subp_oid_subp_crea = 2001
                 AND mcc.imp_movi > 0
                 GROUP BY mc.cod_clie,mcc.clie_oid_clie),
            temp2 AS
               (SELECT t1.cod_clie, t1.oid_clie, t1.cod_ulti_peri, SUM(mcc.imp_movi) imp_ulti_pedi
                FROM temp1 t1,
                     ccc_movim_cuent_corri mcc
                WHERE t1.oid_clie = mcc.clie_oid_clie
                AND t1.oid_ulti_pedi = mcc.perd_oid_peri
                AND mcc.subp_oid_subp_crea = 2001
                AND mcc.imp_movi > 0
                GROUP BY t1.cod_clie, t1.oid_clie, t1.cod_ulti_peri),
            temp3 as
               (SELECT t2.cod_clie,t2.oid_clie, t2.cod_ulti_peri,t2.imp_ulti_pedi,SUM(mcc.imp_pend) imp_deud_pend
               FROM ccc_movim_cuent_corri mcc,
                    temp2 t2
               WHERE mcc.clie_oid_clie = t2.oid_clie
               AND mcc.imp_pend <> 0
               HAVING SUM(mcc.imp_pend)> 0
               GROUP BY t2.cod_clie,t2.oid_clie, t2.cod_ulti_peri,t2.imp_ulti_pedi)
               SELECT  *
               FROM temp3 t3
               WHERE t3.imp_deud_pend > t3.imp_ulti_pedi + NVL(lv_imp_deud_ante_vene,0);

   EXCEPTION
     WHEN OTHERS THEN

           ln_sqlcode := SQLCODE;
           ls_sqlerrm := substr(SQLERRM, 1, 250);
           RAISE_application_error(-20123,'ERROR CCC_PR_GENER_CONSU_CUPON: ' ||ls_sqlerrm);

 END CCC_PR_GENER_CONSU_CUPON;

 PROCEDURE CCC_PR_GENER_CARGO_COBRA_EXTER(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE)
 IS

 CURSOR c_apli_cobr_exte
 IS
 SELECT
  mb.cod_cons,
  mb.fec_proc,
  mb.imp_apli_cobr_exte
 FROM
  ccc_numer_lote_banca_recep br,
  ccc_movim_banca mb
 WHERE br.num_lote = mb.num_lote
   AND mb.num_lote = p_num_lote
   AND mb.imp_apli_cobr_exte > 0
   AND br.cod_tipo_orig IN (gc_cod_tipo_orig_inte,gc_cod_tipo_orig_digi,gc_cod_tipo_orig_exce);

  lv_oid_subp_carg_cobr_exte       NUMBER(12);

 BEGIN

  lv_oid_subp_carg_cobr_exte := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('OidTipoSubprocesoCargoCobranzaExterna');

  IF lv_oid_subp_carg_cobr_exte IS NOT NULL THEN

   FOR v_apli_cobr_exte IN c_apli_cobr_exte LOOP

    CCC_PKG_PROCE.CCC_PR_GENER_CARGO_ABONO_INTER(lv_oid_subp_carg_cobr_exte,v_apli_cobr_exte.cod_cons,v_apli_cobr_exte.fec_proc, v_apli_cobr_exte.Imp_Apli_Cobr_Exte,USER);

   END LOOP;

  END IF;

 END CCC_PR_GENER_CARGO_COBRA_EXTER;

 PROCEDURE CCC_PR_APLIC_ABONO_CASTI(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE)
 IS

  lv_ind_exis_cons                 NUMBER(12);
  lv_ind_deud_pend                 NUMBER(12);
  lv_oid_clie                      mae_clien.oid_clie%TYPE;
  lv_oid_clie_migr                 mae_clien.oid_clie%TYPE;
  lv_cod_clie                      mae_clien.cod_clie%TYPE;
  lv_oid_tipo_abon_subp_inco       ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
  lv_mont_depu_inco                NUMBER(12,2);

 CURSOR c_ban_cast
 IS
  SELECT
   mb.oid_movi_banc,
   mb.num_docu_iden,
   mb.fec_proc,
   mb.imp_pago
  FROM ccc_movim_banca mb
  WHERE mb.num_lote = p_num_lote
    AND mb.ind_pago_inco = 1
    AND NOT EXISTS (
     SELECT NULL
     FROM mae_clien_ident mci
     WHERE mci.num_docu_iden = mb.num_docu_iden);

 CURSOR c_ban_cast_abon
 IS
  SELECT
   mb.oid_movi_banc,
   mb.num_docu_iden,
   mb.fec_proc,
   mb.imp_pago
  FROM ccc_movim_banca mb
  WHERE mb.num_lote = p_num_lote
    AND mb.ind_pago_inco = 1
    AND mb.clie_oid_clie = lv_oid_clie_migr
    AND EXISTS (
     SELECT NULL
     FROM mae_clien_ident mci
     WHERE mci.num_docu_iden = mb.num_docu_iden);

 BEGIN

  lv_oid_clie_migr := TO_NUMBER(CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('OidClieMigracion'));
  lv_mont_depu_inco := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('MontoDepuracionSaldoIncobrable');
  lv_oid_tipo_abon_subp_inco := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('OidTipoAbonoSubprocesoIncobrable');

  FOR v_banc_cast IN c_ban_cast LOOP

   BEGIN

    CCC_PR_REGIS_CLIEN_INCOB(v_banc_cast.num_docu_iden);

   EXCEPTION
    WHEN OTHERS THEN
     NULL;
   END;

   SELECT COUNT(*)
   INTO lv_ind_exis_cons
   FROM mae_clien_ident mci
   WHERE mci.num_docu_iden = v_banc_cast.num_docu_iden
     AND mci.val_iden_docu_prin = 1;

   IF lv_ind_exis_cons > 0 THEN

   SELECT mc.cod_clie, mc.oid_clie
   INTO lv_cod_clie, lv_oid_clie
   FROM
    mae_clien_ident mci,
    mae_clien mc
   WHERE mc.oid_clie = mci.clie_oid_clie
     AND mci.num_docu_iden = v_banc_cast.num_docu_iden
     AND mci.val_iden_docu_prin = 1;

    -- Generar Cargo x Deuda Incobrable --
    CCC_PR_GENER_CARGO_ABONO_INTER(lv_oid_tipo_abon_subp_inco,lv_cod_clie,v_banc_cast.fec_proc,v_banc_cast.imp_pago,USER);

    --Validando el Saldo de la Deuda Incobrable
    UPDATE ccc_consu_casti_cabec ccc
    SET ccc.imp_deud_paga = ccc.imp_deud_paga + v_banc_cast.imp_pago,
        ccc.imp_deud_actu = ccc.imp_deud_actu - v_banc_cast.imp_pago,
        ccc.ind_acti = CASE
                        WHEN ccc.imp_deud_actu - v_banc_cast.imp_pago <= lv_mont_depu_inco THEN
                          9
                        ELSE
                         1
                        END,
         ccc.fec_modi = SYSDATE,
         ccc.cod_clie = lv_cod_clie,
         ccc.oid_clie = lv_oid_clie
    WHERE ccc.num_docu_iden = v_banc_cast.num_docu_iden;

    BEGIN

     SELECT ccc.ind_acti
     INTO lv_ind_deud_pend
     FROM ccc_consu_casti_cabec ccc
     WHERE ccc.num_docu_iden = v_banc_cast.num_docu_iden;

     IF lv_ind_deud_pend = 1 THEN
      CCC_PR_BLOQU_CASTI_CLIEN_INDIV(lv_oid_clie);
     END IF;
    EXCEPTION
     WHEN OTHERS THEN
      NULL;
    END;

    UPDATE ccc_movim_banca mb
    SET
     mb.clie_oid_clie =  lv_oid_clie,
     mb.cod_cons = lv_cod_clie
    WHERE mb.oid_movi_banc = v_banc_cast.oid_movi_banc;


   END IF;

  END LOOP;

  FOR v_ban_cast_abon IN c_ban_cast_abon LOOP

   SELECT mc.cod_clie, mc.oid_clie
   INTO lv_cod_clie, lv_oid_clie
   FROM
    mae_clien_ident mci,
    mae_clien mc
   WHERE mc.oid_clie = mci.clie_oid_clie
     AND mci.num_docu_iden = v_ban_cast_abon.num_docu_iden
     AND mci.val_iden_docu_prin = 1;

    -- Generar Cargo x Deuda Incobrable --
    CCC_PR_GENER_CARGO_ABONO_INTER(lv_oid_tipo_abon_subp_inco,lv_cod_clie,v_ban_cast_abon.fec_proc,v_ban_cast_abon.imp_pago,USER);

    --Validando el Saldo de la Deuda Incobrable
    UPDATE ccc_consu_casti_cabec ccc
    SET
     ccc.imp_deud_paga = ccc.imp_deud_paga + v_ban_cast_abon.imp_pago,
     ccc.imp_deud_actu = ccc.imp_deud_actu - v_ban_cast_abon.imp_pago,
     ccc.ind_acti = CASE
                        WHEN ccc.imp_deud_actu - v_ban_cast_abon.imp_pago <= lv_mont_depu_inco THEN
                          9
                        ELSE
                         1
                        END,
     ccc.fec_modi = SYSDATE
     WHERE ccc.num_docu_iden = v_ban_cast_abon.num_docu_iden;

     UPDATE ccc_movim_banca mb
     SET
      mb.clie_oid_clie =  lv_oid_clie,
      mb.cod_cons = lv_cod_clie
     WHERE mb.oid_movi_banc = v_ban_cast_abon.oid_movi_banc;

  END LOOP;

 END CCC_PR_APLIC_ABONO_CASTI;

 PROCEDURE CCC_PR_ACTUA_DEUDA_INCOB_REING
 IS

  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;
  lv_fec_fact                      bas_ctrl_fact.fec_proc%TYPE;
  lv_oid_tipo_soli_pais            ped_tipo_solic_pais.oid_tipo_soli_pais%TYPE;

 BEGIN

  FIN_PKG_GENER.FIN_PR_OBTIE_PARAM_FACTU(lv_oid_peri,lv_cod_peri,lv_fec_fact);

  lv_fec_fact := lv_fec_fact - 8;

  lv_oid_tipo_soli_pais := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SOLIC_PAIS('SOC');

  UPDATE ccc_consu_casti_cabec c
  SET c.ind_acti = 8,
      c.fec_modi = SYSDATE
  WHERE c.ind_acti = 1
    AND EXISTS (
   SELECT NULL
   FROM ped_solic_cabec psc,
        mae_clien_ident mci
   WHERE psc.clie_oid_clie = mci.clie_oid_clie
     AND mci.val_iden_docu_prin = 1
     AND psc.fec_fact = lv_fec_fact
     AND psc.perd_oid_peri = lv_oid_peri
     AND mci.num_docu_iden = c.num_docu_iden
     AND psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais);

 END CCC_PR_ACTUA_DEUDA_INCOB_REING;

 PROCEDURE CCC_PR_GENER_CUENT_CORRI_PERCE(
  p_cod_pais                     IN   seg_pais.cod_pais%TYPE,
  p_cod_soci                     IN   seg_socie.cod_soci%TYPE,
  p_num_lote                     IN   per_solic_monet.num_lote%TYPE)
 IS

  lv_num_lote                    per_solic_monet.num_lote%TYPE;
  lv_oid_soci                    seg_socie.oid_soci%TYPE;
  lv_oid_pais                    seg_pais.oid_pais%TYPE;
  lv_oid_mone                    seg_pais.mone_oid_mone%TYPE;

  lv_cod_proc                    ccc_proce.cod_proc%type;
  lv_oid_proc                    ccc_proce.oid_proc%type;
  lv_cod_subp                    ccc_subpr.cod_subp%type;
  lv_oid_subp                    ccc_subpr.oid_subp%type;
  lv_oid_cuen_corr_banc          ccc_asign_subpr_tipo_solic.ccba_oid_cuen_corr_banc%type;
  lv_oid_cuen_cont               ccc_tipo_abono_subpr.cuco_oid_cuen_cont%type;
  lv_oid_tipo_abon_subp          ccc_tipo_abono_subpr.oid_tipo_abon_subp%type;
  lv_cod_tipo_carg_abon          ccc_tipo_cargo_abono.cod_tipo_carg_abon%type;
  lv_oid_tipo_carg_abon          ccc_tipo_cargo_abono.oid_tipo_carg_abon%type;
  lv_masi_oid_marc_sali          ccc_marca_tipo_abono.masi_oid_marc_sali%type;
  lv_num_anio                    ccc_movim_cuent_corri.val_docu_anio%TYPE;
  lv_num_mes                     ccc_movim_cuent_corri.val_docu_mes_seri%TYPE;
  lv_num_secu                    ccc_secue_pais.num_secu%TYPE;
  lv_oid_cabe_carg               ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_oid_marc                    ped_tipo_solic.marc_oid_marc%TYPE;
  lv_oid_sbac                    ped_tipo_solic.sbac_oid_sbac%TYPE;
  lv_oid_medi_pago               bel_forma_pago_detal.mpab_oid_medi_pago%TYPE;
  lv_tsol_oid_tipo_cons          ped_tipo_solic_pais.tsol_oid_tipo_cons%TYPE;
  lv_num_iden_cuot_inic          ped_numer_solic.val_ulti_nume_soli%TYPE;
  lv_num_iden_cuot_fina          ped_numer_solic.val_ulti_nume_soli%TYPE;
  lv_ind_soli_nega               ped_tipo_solic.ind_soli_nega%TYPE;

  lv_chek_cod_peri               seg_perio_corpo.cod_peri%TYPE;
  lv_chek_fec_fact               per_solic_monet.fec_fact%TYPE;

  lv_wrk_oid_ccc_ini             NUMBER(12);
  lv_wrk_oid_ccc_fin             NUMBER(12);
  lv_wrk_oid_cab_ini             NUMBER(12);
  lv_wrk_oid_cab_fin             NUMBER(12);
  lv_wrk_cant_regi               NUMBER(12);
  lv_ind_apli_perc_banc          NUMBER(1);

  /* determina la relacion Tipos de Solicitud existentes en Solicitudes Monetarias */
  CURSOR c_tipos_sol
  IS
   SELECT DISTINCT psm.cod_tipo_soli, psm.cod_acce, psm.cod_sbac
   FROM  per_solic_monet psm
   WHERE psm.pais_cod_pais = p_cod_pais
     AND  psm.num_lote = lv_num_lote
     --AND psm.cod_tipo_soli NOT IN ('SC11','SC12','SP26')
      AND NOT EXISTS (
      SELECT 1
      FROM per_param_exclu_tipo_solic p
      WHERE p.cod_tipo_soli = psm.cod_tipo_soli);

  CURSOR c_mae
  IS
   SELECT DISTINCT mc.oid_clie
   FROM
     per_solic_monet psm,
     mae_clien mc
   WHERE psm.pais_cod_pais = p_cod_pais
     AND psm.num_lote = lv_num_lote
     AND psm.cod_clie = mc.cod_clie
     --AND psm.cod_tipo_soli NOT IN ('SC11','SC12','SP26')
     AND NOT EXISTS (
      SELECT 1
      FROM per_param_exclu_tipo_solic p
      WHERE p.cod_tipo_soli = psm.cod_tipo_soli);

   BEGIN

      gv_log_cod_pais := p_cod_pais;
      gv_log_cod_soci := p_cod_soci;
      gv_log_user := USER;
      gv_log_cod_modu := 'CCC';
      gv_log_cod_proc := '05';
      lv_num_lote := p_num_lote;

      FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc , gv_log_user, gv_cod_proc_ejec);

      gv_des_log:='Inicio CCC_PR_GENER_CUENT_CORRI_PERCE  Cod Pais: ' || p_cod_pais ||
                      ' Num Lote: ' ||  lv_num_lote ;
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

      /*   obtiene oid del pais  */
      SELECT pai.oid_pais, pai.mone_oid_mone
      INTO   lv_oid_pais, lv_oid_mone
      FROM   seg_pais pai
      WHERE  pai.cod_pais = p_cod_pais;

      /*  obtiene oid de sociedad  */
      lv_oid_soci:=GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(p_cod_soci);

      /*  verifica si  per_solic_monet tiene registrado el codigo de periodo */
      SELECT per.cod_peri, per.fec_fact
      INTO   lv_chek_cod_peri, lv_chek_fec_fact
      FROM   per_solic_monet per
      WHERE  per.pais_cod_pais = p_cod_pais
        AND    per.num_lote      =  lv_num_lote
        AND    rownum = 1;

      IF   lv_chek_cod_peri IS NULL THEN

         SELECT   cor.cod_peri
         INTO  lv_chek_cod_peri
         FROM
            cra_perio pe,
            seg_perio_corpo cor
         WHERE   cor.oid_peri  = pe.peri_oid_peri
         AND    pe.fec_inic =  ( SELECT   MIN(pe.fec_inic )
                                      FROM   cra_perio pe
                                      WHERE   lv_chek_fec_fact  <  pe.fec_inic  );

         UPDATE   per_solic_monet per
         SET      per.cod_peri = lv_chek_cod_peri
         WHERE  per.pais_cod_pais = p_cod_pais
         AND    per.num_lote      =  lv_num_lote;

      END IF;

      FOR v_tipos_sol IN c_tipos_sol LOOP

         gv_des_log:='*******  Inicio Loop por Tipo de Solicitud: ' || v_tipos_sol.cod_tipo_soli ||
                     ' Cod acce: ' || v_tipos_sol.cod_acce || ' cod subacce: ' ||
                                 v_tipos_sol.cod_sbac || ' Num Lote: ' ||  lv_num_lote ;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         /* obtiene parametria de Cta.Cte.  para el Tipo de solicitud */
         gv_des_log:='Obteniendo Parametria por Tipo de Solicitud' ;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         ccc_pr_obtie_param_tipo_solic( lv_oid_pais,  v_tipos_sol.cod_tipo_soli,  lv_cod_proc,
                                      lv_oid_proc,  lv_cod_subp,  lv_oid_subp,  lv_oid_cuen_corr_banc,
                                      lv_cod_tipo_carg_abon,  lv_oid_tipo_carg_abon,  lv_masi_oid_marc_sali,
                                      lv_oid_cuen_cont,   lv_oid_marc, lv_oid_sbac,   lv_oid_medi_pago,
                                      lv_tsol_oid_tipo_cons,   lv_oid_tipo_abon_subp, lv_ind_soli_nega);

         /*  obtiene numero de secuencia disponible */
         --  ccc_pr_obtie_numer_secue( p_cod_pais, lv_num_anio, lv_num_mes, lv_num_secu);

         gv_des_log:='Generando Cabecera de Creacion' ;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         /*  obtiene numero de secuencia disponible */
         CCC_PKG_GENER.ccc_pr_obtie_numer_secue( p_cod_pais, lv_num_anio, lv_num_mes, lv_num_secu);

             /*  Crea cabecera de Cargos y Abonos Directos   */
         CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO( lv_oid_pais,  lv_oid_soci, lv_oid_proc, lv_num_anio,
                                            lv_num_mes,  lv_num_secu, lv_num_lote, lv_oid_tipo_abon_subp,
                                            v_tipos_sol.cod_tipo_soli, lv_oid_cuen_corr_banc,
                                            lv_oid_sbac, lv_oid_cabe_carg  );

         gv_des_log:='Inicio:  Insertando percepciones en la tabla CCC_TEMPO_MOVIM_CREAR_PERCE' ;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         /*  Generar movimientos de percepciones de creacion  */
         CCC_PR_GENER_MOVIM_CREA_PERCE( p_cod_pais, p_cod_soci,lv_oid_soci,  lv_num_lote,
                                            v_tipos_sol.cod_tipo_soli, lv_num_anio, lv_num_mes,
                                            lv_num_secu, lv_oid_cabe_carg, lv_oid_proc, lv_oid_subp,
                                            lv_oid_cuen_corr_banc, lv_cod_tipo_carg_abon, lv_oid_tipo_carg_abon,
                                            lv_masi_oid_marc_sali, lv_oid_cuen_cont, lv_oid_marc, lv_oid_mone,
                                            lv_oid_sbac, lv_oid_medi_pago, lv_tsol_oid_tipo_cons,
                                            lv_ind_soli_nega, v_tipos_sol.cod_acce, v_tipos_sol.cod_sbac,
                                            lv_num_iden_cuot_inic, lv_num_iden_cuot_fina );

         gv_des_log:='Fin :  Insertando percepciones en la tabla CCC_TEMPO_MOVIM_CREAR_PERCE' ;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         SELECT MIN(tmp.oid_movi_cc),
                       MAX(tmp.oid_movi_cc),
                       MIN(tmp.oid_deta_carg_abon_dire),
                       MAX(tmp.oid_deta_carg_abon_dire),
                       COUNT(*)
         INTO lv_wrk_oid_ccc_ini,
                    lv_wrk_oid_ccc_fin,
                    lv_wrk_oid_cab_ini,
                    lv_wrk_oid_cab_fin,
                    lv_wrk_cant_regi
         FROM  ccc_tempo_movim_crear_perce tmp;

         gv_des_log:='Oid Movi CC Inicial: ' || lv_wrk_oid_ccc_ini || ' Final : ' || lv_wrk_oid_ccc_fin ;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         gv_des_log:='Oid Detal CAD Inicial: ' || lv_wrk_oid_cab_ini || ' Final : ' || lv_wrk_oid_cab_fin;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         gv_des_log:='Percepciones Cargadas : ' || lv_wrk_cant_regi;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         gv_des_log:='Inicio:  Insertando percepciones en la tabla CCC_MOVIM_CUENT_CORRI' ;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);
         /* Crea registros en ccc_movim_cuent_corri  */
         CCC_PR_GENER_MOVIM_CUENT_CORRI(lv_num_iden_cuot_inic);

         gv_des_log:='Fin:  Insertando percepciones en la tabla CCC_MOVIM_CUENT_CORRI' ;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         gv_des_log:='Inicio:  Insertando percepciones en la tabla CCC_DETAL_CARGO_ABONO_DIREC' ;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         /* crea registros en ccc_detal_cargo_abono_direc   */
         ccc_pr_gener_detal_cargo_abono(lv_oid_tipo_abon_subp);

         gv_des_log:='Fin:  Insertando percepciones en la tabla CCC_DETAL_CARGO_ABONO_DIREC' ;
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);


         /*  actualiza,  libera  numero de secuencia */
         gv_des_log:='Liberando el Tipo de Solicitud';
         FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);
         CCC_PKG_GENER.ccc_pr_liber_numer_secue(p_cod_pais, lv_num_anio, lv_num_mes, lv_num_secu);


          gv_des_log:='******* Fin  Loop  por Tipo Solicitud : ' || v_tipos_sol.cod_tipo_soli;
          fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

           gv_des_log:='*******';
          fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         END LOOP;

          gv_des_log:='Registrando en el  Historico lotes BAS_HISTO_LOTES '  ;
          fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         CCC_PR_INSER_HISTO_LOTES(p_cod_pais, lv_num_lote) ;


      lv_ind_apli_perc_banc := ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('IndicadorAplicacionPercepcionBancaria');

      -- Realizando la Aplicacion de Percepciones --
      IF lv_ind_apli_perc_banc = 1 THEN

         gv_des_log:='Inicio de Aplicacion de las Percepciones '  ;
         fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

         FOR v_mae IN c_mae LOOP
            CCC_PR_APLIC_ABONO_CARGO_CLIEN(v_mae.oid_clie);
         END LOOP;

         gv_des_log:='Fin de Aplicacion de las Percepciones '  ;
         fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

      END IF;

      gv_des_log:= 'Fin  CCC_PR_GENER_CUENT_CORRI_PERCE';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(p_cod_pais, p_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

/*
   EXCEPTION
      WHEN OTHERS THEN
           ln_sqlcode := SQLCODE;
           ls_sqlerrm := substr(SQLERRM, 1, 250);

           gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
           FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
           RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CUENT_CORRI_PERCE: ' ||
                               ls_sqlerrm);
*/
   END CCC_PR_GENER_CUENT_CORRI_PERCE;

 PROCEDURE CCC_PR_INSER_HISTO_LOTES(
  p_cod_pais                     IN   seg_pais.cod_pais%TYPE,
  p_num_lote                     IN   per_solic_monet.num_lote%TYPE)
 IS
      reg_bas_histo_lotes            bas_histo_lotes%ROWTYPE;
   BEGIN

      reg_bas_histo_lotes.pais_cod_pais := p_cod_pais ;
      reg_bas_histo_lotes.sist_cod_sist := 'PER';
      reg_bas_histo_lotes.Inte_Cod_Inte := 'PER-3';
      reg_bas_histo_lotes.Num_Lote      := P_NUM_LOTE;
      reg_bas_histo_lotes.Inpa_Cod_Inte := 'PER-P1';
      reg_bas_histo_lotes.Des_Lote      := 'PROCESAR MOVIMIENTOS';
      reg_bas_histo_lotes.Fec_Ipro      := SYSDATE;
      reg_bas_histo_lotes.Fec_Fpro      := SYSDATE;
      reg_bas_histo_lotes.Ind_Loer      := 'N';
      reg_bas_histo_lotes.Reg_Proc      := 0;
      reg_bas_histo_lotes.Reg_Erro      := 0;
      reg_bas_histo_lotes.Des_Obse      := 'PERCEPCIONES';
      reg_bas_histo_lotes.Des_Erro      := NULL;
      reg_bas_histo_lotes.Usu_Proc      := USER;
      reg_bas_histo_lotes.Ind_Espr      := 0;

      INSERT INTO bas_histo_lotes VALUES reg_bas_histo_lotes;

      reg_bas_histo_lotes.pais_cod_pais := p_cod_pais ;
      reg_bas_histo_lotes.sist_cod_sist := 'PER';
      reg_bas_histo_lotes.Inte_Cod_Inte := 'PER-P1';
      reg_bas_histo_lotes.Num_Lote      := P_NUM_LOTE;
      reg_bas_histo_lotes.Inpa_Cod_Inte := NULL;
      reg_bas_histo_lotes.Des_Lote      := 'PROCESAR MOVIMIENTOS';
      reg_bas_histo_lotes.Fec_Ipro      := SYSDATE;
      reg_bas_histo_lotes.Fec_Fpro      := SYSDATE;
      reg_bas_histo_lotes.Ind_Loer      := 'N';
      reg_bas_histo_lotes.Reg_Proc      := 0;
      reg_bas_histo_lotes.Reg_Erro      := 0;
      reg_bas_histo_lotes.Des_Obse      := 'PERCEPCIONES';
      reg_bas_histo_lotes.Des_Erro      := NULL;
      reg_bas_histo_lotes.Usu_Proc      := USER;
      reg_bas_histo_lotes.Ind_Espr      := 0;

      INSERT INTO bas_histo_lotes VALUES reg_bas_histo_lotes;

   END ccc_pr_inser_histo_lotes ;

 PROCEDURE CCC_PR_BLOQU_CASTI_CLIEN_INDIV(
  p_oid_clie                     IN   mae_clien.oid_clie%TYPE)
 IS

  lv_ind_bloq_acti               NUMBER(3);
  lv_cod_tipo_bloq               mae_tipo_bloqu.cod_tipo_bloq%TYPE;
  lv_oid_tipo_bloq               mae_tipo_bloqu.oid_tipo_bloq%TYPE;
  lv_oid_valo_acci_bloq          mae_valor_accio_bloqu.oid_valo_acci_bloq%TYPE;

 BEGIN

  lv_cod_tipo_bloq := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoBloqueoCastigada');

  --Obteniendo el Tipo De Bloqueo Financiero
  SELECT mtb.oid_tipo_bloq
  INTO lv_oid_tipo_bloq
  FROM mae_tipo_bloqu mtb
  WHERE mtb.cod_tipo_bloq = lv_cod_tipo_bloq;

  --Obteniendo el Valor Accion de Bloqueo
  SELECT vab.oid_valo_acci_bloq
  INTO lv_oid_valo_acci_bloq
  FROM mae_valor_accio_bloqu vab
  WHERE vab.cod_valo_bloq = 'A';

  SELECT COUNT(*)
  INTO lv_ind_bloq_acti
  FROM mae_clien_bloqu mcb
  WHERE mcb.clie_oid_clie =  p_oid_clie
    AND mcb.tibq_oid_tipo_bloq = lv_oid_tipo_bloq
    AND mcb.fec_desb IS NULL;

  IF lv_ind_bloq_acti = 0 THEN

   INSERT INTO mae_clien_bloqu
     (oid_bloq,
      clie_oid_clie,
      tibq_oid_tipo_bloq,
      fec_bloq,
      val_moti_bloq,
      val_usua_bloq,
      obs_bloq,
      maab_oid_valo_acci_bloq)
    VALUES (
      mae_clbl_seq.NEXTVAL,
      p_oid_clie,
      lv_oid_tipo_bloq,
      TRUNC(SYSDATE),
      'BLOQUEO AUTOMATICO POR DEUDA CASTIGADA',
      USER,
      'BLOQUEO AUTOMATICO POR DEUDA CASTIGADA',
      lv_oid_valo_acci_bloq);

   END IF;

 END CCC_PR_BLOQU_CASTI_CLIEN_INDIV;


 PROCEDURE CCC_PR_BLOQU_FINAN_DIAS_ATRAS(
  p_cod_pais                     seg_pais.cod_pais%TYPE,
  p_cod_soci                     seg_socie.cod_soci%TYPE,
  p_num_dias_atras               NUMBER,
  p_imp_desde                    NUMBER,
  p_cod_usua                     seg_usuar.use_usua%TYPE)
 IS

  lv_oid_tipo_bloq               mae_tipo_bloqu.oid_tipo_bloq%TYPE;
  lv_oid_valo_acci_bloq          mae_valor_accio_bloqu.oid_valo_acci_bloq%TYPE;

 BEGIN

  --Obteniendo el Tipo De Bloqueo Financiero
  SELECT mtb.oid_tipo_bloq
  INTO lv_oid_tipo_bloq
  FROM mae_tipo_bloqu mtb
  WHERE mtb.cod_tipo_bloq = '02';

  --Obteniendo el Valor Accion de Bloqueo
  SELECT vab.oid_valo_acci_bloq
  INTO lv_oid_valo_acci_bloq
  FROM mae_valor_accio_bloqu vab
  WHERE vab.cod_valo_bloq = 'A';

  INSERT INTO mae_clien_bloqu
   (oid_bloq,
    clie_oid_clie,
    tibq_oid_tipo_bloq,
    fec_bloq,
    val_moti_bloq,
    val_usua_bloq,
    obs_bloq,
    fec_desb,
    val_usua_desb,
    maab_oid_valo_acci_bloq,
    maab_oid_valo_acci_desb,
    obs_desb)
    SELECT
     mae_clbl_seq.NEXTVAL,          -- oid_bloq  number(12)
     clie_oid_clie,                            --clie_oid_clie  number(12)
     lv_oid_tipo_bloq,                       --tibq_oid_tipo_bloq  number(12)
     TRUNC(SYSDATE),                   --fec_bloq  date
     'BLOQUEO MASIVO POR DEUDA VENCIDA', --val_moti_bloq  varchar2(50)
     p_cod_usua,                                   --val_usua_bloq  varchar2(20)
     'BLOQUEO MASIVO POR DEUDA VENCIDA', --obs_bloq  varchar2(100)
     NULL,                                        --fec_desb  date
     NULL,                                        --val_usua_desb  varchar2(20)
     lv_oid_valo_acci_bloq,               --maab_oid_valo_acci_bloq  number(12)
     NULL,                                         --maab_oid_valo_acci_desb  number(12)
     NULL                                             --obs_desb  varchar2(100)
    FROM
     ( SELECT mcc.clie_oid_clie
       FROM ccc_movim_cuent_corri mcc
       WHERE mcc.imp_pend <> 0
         AND TRUNC(SYSDATE) - mcc.fec_docu >= p_num_dias_atras
         AND NOT EXISTS (
              SELECT NULL
              FROM mae_clien_bloqu mcb
              WHERE mcb.clie_oid_clie=mcc.clie_oid_clie
                   AND mcb.fec_desb IS NULL
                   AND mcb.tibq_oid_tipo_bloq= lv_oid_tipo_bloq)
               HAVING SUM(mcc.imp_pend) >= p_imp_desde
         GROUP BY mcc.clie_oid_clie);

   END ccc_pr_bloqu_finan_dias_atras;

 PROCEDURE CCC_PR_GENER_CARGO_FAMIL_SEGUR(
  p_cod_pais                    IN   seg_pais.cod_pais%TYPE,
  p_fec_fact                    IN   ped_solic_cabec.fec_fact%TYPE,
  p_cod_usua                    IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_tipo_soli_pais         ped_tipo_solic_pais.oid_tipo_soli_pais%TYPE;
  lv_num_lote                   ccc_carga_cargo_abono_masiv.num_lote%TYPE;
  lv_cod_soci                   seg_socie.cod_soci%TYPE;
  lv_cod_peri                   seg_perio_corpo.cod_peri%TYPE;
  lv_oid_tipo_abon_subp         ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
  lv_oid_subp                   ccc_subpr.oid_subp%TYPE;
  lv_id_proc_ejec               fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_fec_fact                   ped_solic_cabec.fec_prog_fact%TYPE;
  lv_fec_inic_vige              DATE;
  lv_fec_fina_vige              DATE;
  lv_cod_erro                   VARCHAR2(250);
  lv_cant_carg_gene             NUMBER(12):=0;
  lv_cant_carg_vali             NUMBER(12):=0;
  lv_ind_ejec                   NUMBER(1);
  lv_ind_bene_toda              NUMBER(12);
  lv_ind_bene_lide              NUMBER(12);
  lv_ind_bene_nuev              NUMBER(12);
  lv_ind_bene_clas              NUMBER(12);
  lv_ind_bene_inic_nume_poli    NUMBER(12);
  lv_inic_nume_poli_bene        ccc_param_gener.val_para%TYPE;
  lv_cant_inic_nume_poli_bene   ccc_param_gener.val_para%TYPE;

 CURSOR c_vige(p_fec_fact_vige DATE)
 IS
  SELECT
   his.cod_poli,
   his.cod_peri,
   his.cod_clie
  FROM ccc_histo_cargo_famil_segur his
  WHERE his.fec_fact = p_fec_fact_vige;

 BEGIN

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio Generacion Cargo familia Segura: Fecha Facturacion ' || p_fec_fact ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

   lv_ind_ejec:= ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('IND_EJEC_FAMI_PROT');

   IF lv_ind_ejec = 0 THEN
      gv_des_log:='Se cancela el proceso por parametria';
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

      FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec, 2);
      RAISE e_no_perm_para;
   END IF;

   SELECT z.fec_proc
   INTO lv_fec_fact
   FROM bas_ctrl_fact z
   WHERE z.ind_camp_act = 1
     AND z.sta_camp = 0;

   lv_cod_soci:= ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('COD_SOCI');

   IF lv_cod_soci IS NULL THEN
      gv_des_log:='ERROR!!! Codigo de Sociedad es Nulo';
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);
      RAISE e_codi_soci_null;
   END IF;

   lv_num_lote:= ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;

   gv_des_log:='Numero de Lote : ' || lv_num_lote ;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);


   BEGIN
      SELECT cf.cod_peri
      INTO lv_cod_peri
      FROM bas_ctrl_fact cf
      WHERE cf.ind_camp_act = 1
        AND cf.sta_camp = 0;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         gv_des_log:='ERROR!!! No Existe Campa?a Activa : ';
         FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);
         RAISE e_no_exis_camp_acti;
   END;

   gv_des_log:='Campa?a Activa : ' || lv_cod_peri ;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

   BEGIN
      SELECT ptsp.oid_tipo_soli_pais
      INTO lv_oid_tipo_soli_pais
      FROM
         ped_tipo_solic pts,
         ped_tipo_solic_pais ptsp
      WHERE pts.oid_tipo_soli = ptsp.tsol_oid_tipo_soli
        AND pts.cod_tipo_soli = 'SOC';
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         gv_des_log:='ERROR!!! No Existe parametria para el Tipo de Solicitud Pais : ';
         FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);
         RAISE e_no_para_tipo_soli;
   END;

   BEGIN
      SELECT tas.oid_tipo_abon_subp, cs.oid_subp
      INTO lv_oid_tipo_abon_subp, lv_oid_subp
      FROM
         ccc_proce cp,
         ccc_subpr cs,
         ccc_tipo_abono_subpr tas
      WHERE cp.oid_proc = cs.Ccpr_Oid_Proc
        AND cp.cod_proc = gc_cod_proc_carg_dire
        AND cs.cod_subp = gc_cod_subp_carg_fase
        AND tas.subp_oid_subp = cs.oid_subp;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RAISE e_no_para_carg_fase;
   END;


   SELECT COUNT(1)
   INTO lv_cant_carg_gene
   FROM
      ped_solic_cabec psc,
      sgr_famse_poliz_regis pr,
      sgr_famse_poliz mp,
      cra_perio cp,
      seg_perio_corpo spc
   WHERE psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
     AND pr.poli_cod_poli = mp.cod_poli
     AND psc.perd_oid_peri = cp.oid_peri
     AND cp.peri_oid_peri = spc.oid_peri
     AND psc.clie_oid_clie = pr.clie_oid_clie
     AND psc.fec_prog_fact = lv_fec_fact
     AND pr.est_poli = 3
     AND psc.grpr_oid_grup_proc = 3
     AND pr.est_regi = 1
     AND NOT EXISTS (
        SELECT NULL
        FROM ccc_histo_cargo_famil_segur hc
        WHERE hc.cod_peri = lv_cod_peri
          AND hc.cod_clie = pr.cod_clie);


   gv_des_log:='Insertando Cargos en CCC_TEMPO_CARGO_FAMIL_SEGUR : ' || lv_cant_carg_gene ;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

   IF lv_cant_carg_gene > 0 THEN

      INSERT INTO ccc_tempo_cargo_famil_segur
         SELECT
            lv_num_lote,
            spc.cod_peri,
            pr.cod_clie,
            psc.clie_oid_clie,
            pr.poli_cod_poli,
            pr.num_poli,
            mp.pre_poli,
            psc.val_tota_paga_loca,
            0,
            0,
            NULL,
            psc.oid_soli_cabe,
            NULL
         FROM
            ped_solic_cabec psc,
            sgr_famse_poliz_regis pr,
            sgr_famse_poliz mp,
            cra_perio cp,
            seg_perio_corpo spc
         WHERE psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
           AND pr.poli_cod_poli = mp.cod_poli
           AND psc.perd_oid_peri = cp.oid_peri
           AND cp.peri_oid_peri = spc.oid_peri
           AND psc.clie_oid_clie = pr.clie_oid_clie
           AND psc.fec_prog_fact = lv_fec_fact
           AND pr.est_poli = 3
           AND psc.grpr_oid_grup_proc = 3
           AND pr.est_regi = 1
           AND NOT EXISTS (
              SELECT NULL
              FROM ccc_histo_cargo_famil_segur hc
              WHERE hc.cod_peri = lv_cod_peri
                AND hc.cod_clie = pr.cod_clie);


      UPDATE ccc_tempo_cargo_famil_segur tfs
      SET tfs.imp_dsct = NVL(( SELECT dp.imp_desc
                           FROM sgr_famse_descu_poliz dp
                           WHERE dp.cam_inic >= tfs.cod_peri
                           AND dp.cam_fina <= tfs.cod_peri
                           AND dp.mon_vent_inic <= tfs.imp_vent
                           AND dp.mon_vent_fina >= tfs.imp_vent
                           AND dp.est_regi = 1),0)
      WHERE tfs.num_lote = lv_num_lote;

      UPDATE ccc_tempo_cargo_famil_segur tfs
      SET tfs.imp_carg = NVL(tfs.imp_poli,0) - NVL(tfs.imp_dsct,0)
      WHERE tfs.num_lote = lv_num_lote;

      -- Validando los beneficios de deuda
      SELECT COUNT(*)
      INTO lv_ind_bene_toda
      FROM sgr_famse_campa_grati cg
      WHERE cg.cam_inic <= lv_cod_peri
        AND cg.cam_fina >= lv_cod_peri
        AND cg.ind_bene = gc_ind_bene_toda
        AND cg.est_regi = 1;


      IF lv_ind_bene_toda > 0 THEN

       UPDATE ccc_tempo_cargo_famil_segur tfs
       SET
        tfs.imp_dsct = tfs.imp_poli,
        tfs.imp_carg = 0,
        tfs.ind_bene = gc_ind_bene_toda
       WHERE tfs.num_lote = lv_num_lote;

       gv_des_log:='Aplicando los beneficios de deuda a todas las consultoras ' || SQL%ROWCOUNT ;
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

      ELSE

       -- Beneficio para Nuevas
       SELECT COUNT(*)
       INTO lv_ind_bene_nuev
       FROM sgr_famse_campa_grati cg
       WHERE cg.cam_inic <= lv_cod_peri
         AND cg.cam_fina >= lv_cod_peri
         AND cg.ind_bene = gc_ind_bene_nuev
         AND cg.est_regi = 1;

       IF lv_ind_bene_nuev > 0 THEN

        UPDATE ccc_tempo_cargo_famil_segur tfs
        SET
         tfs.imp_dsct = tfs.imp_poli,
         tfs.imp_carg = 0,
         tfs.ind_bene = gc_ind_bene_nuev
        WHERE tfs.num_lote = lv_num_lote
          AND EXISTS (
                     SELECT NULL
                     FROM
                      mae_clien_histo_estat mce,
                      cra_perio cp,
                      seg_perio_corpo spc
                     WHERE cp.peri_oid_peri= spc.oid_peri
                       AND spc.cod_peri = tfs.cod_peri
                       AND mce.clie_oid_clie = tfs.oid_clie
                       AND mce.perd_oid_peri <= cp.oid_peri
                       AND NVL(mce.perd_oid_peri_peri_fin,999999999999) >= cp.oid_peri
                       AND mce.esta_oid_esta_clie in (1,7));

        gv_des_log:='Aplicando los beneficios de deuda a las nuevas ' || SQL%ROWCOUNT ;
        FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

       END IF;



       ---- Beneficio Por el Numero de Polizas  ----
       SELECT COUNT(*)
       INTO lv_ind_bene_inic_nume_poli
       FROM sgr_famse_campa_grati cg
       WHERE cg.cam_inic <= lv_cod_peri
         AND cg.cam_fina >= lv_cod_peri
         AND cg.ind_bene = gc_ind_bene_nume_poli
         AND cg.est_regi = 1;

       IF lv_ind_bene_inic_nume_poli > 0 THEN

        lv_cant_inic_nume_poli_bene := NVL(CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CantidadDigitosInicioNumeroPolizaBeneficio'),1);
        lv_inic_nume_poli_bene := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('InicioNumeroPolizaBeneficio');

        UPDATE ccc_tempo_cargo_famil_segur tfs
        SET
         tfs.imp_dsct = tfs.imp_poli,
         tfs.imp_carg = 0,
         tfs.ind_bene = gc_ind_bene_nume_poli
        WHERE tfs.num_lote = lv_num_lote
          AND SUBSTR(tfs.num_poli,1,lv_cant_inic_nume_poli_bene) = lv_inic_nume_poli_bene
          AND  0 = ( SELECT COUNT(*)
                     FROM ccc_histo_cargo_famil_segur his
                     WHERE his.cod_clie = tfs.cod_clie
                       AND his.ind_bene = gc_ind_bene_nume_poli);

        gv_des_log:='Aplicando los beneficios de deuda por el numero de poliza ' || SQL%ROWCOUNT ;
        FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

       END IF;
       -------------------

       ----- Lideres -----
       SELECT COUNT(*)
       INTO lv_ind_bene_lide
       FROM sgr_famse_campa_grati cg
       WHERE cg.cam_inic <= lv_cod_peri
         AND cg.cam_fina >= lv_cod_peri
         AND cg.ind_bene = gc_ind_bene_lide
         AND cg.est_regi = 1;

       IF lv_ind_bene_lide > 0 THEN

        UPDATE ccc_tempo_cargo_famil_segur tfs
        SET
         tfs.imp_dsct = tfs.imp_poli,
         tfs.imp_carg = 0,
         tfs.ind_bene = gc_ind_bene_lide
        WHERE tfs.num_lote = lv_num_lote
          AND EXISTS (
            SELECT NULL
            FROM zon_secci zs
            WHERE zs.clie_oid_clie = tfs.oid_clie
            AND zs.ind_borr = 0);

        gv_des_log:='Aplicando los beneficios de deuda a las lideres ' || SQL%ROWCOUNT ;
        FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

       END IF;


       begin
       -- Beneficio por Clasificacion
       SELECT COUNT(*)
       INTO lv_ind_bene_clas
       FROM sgr_famse_campa_grati cg
       WHERE cg.cam_inic <= lv_cod_peri
         AND cg.cam_fina >= lv_cod_peri
         AND cg.ind_bene = gc_ind_bene_clas
         AND cg.est_regi = 1;

       IF lv_ind_bene_clas > 0 THEN

        UPDATE ccc_tempo_cargo_famil_segur tfs
        SET
         tfs.imp_dsct = tfs.imp_poli,
         tfs.imp_carg = 0,
         tfs.ind_bene = gc_ind_bene_clas
        WHERE tfs.num_lote = lv_num_lote
          AND EXISTS (
                     SELECT NULL
                     FROM
                      mae_clien_tipo_subti mcts,
                      mae_clien_clasi mcc
                     WHERE mcts.oid_clie_tipo_subt=mcc.ctsu_oid_clie_tipo_subt
                       AND mcts.clie_oid_clie=tfs.oid_clie
                       AND mcc.clas_oid_clas IN
                        (SELECT  x.val_param from sto_param_gener_occrr x where x.cod_para like 'FSE_BENEF_CLASI%'));

        gv_des_log:='Aplicando los beneficios de deuda por Clasificacion ' || SQL%ROWCOUNT ;
        FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

       END IF;
       exception when others then
         NULL;
       end;

      END IF;


      SELECT COUNT(*)
      INTO lv_cant_carg_vali
      FROM ccc_tempo_cargo_famil_segur tfs
      WHERE tfs.imp_carg > 0;

      IF lv_cant_carg_vali > 0 THEN

         INSERT INTO ccc_carga_cargo_abono_masiv
            SELECT
               lv_num_lote,        -- NUM_LOTE      VARCHAR2(25) not null,
               rownum,             --VAL_FILA      NUMBER(10) not null,
               tfs.cod_clie,       --COD_CLIE      VARCHAR2(15),
               tfs.imp_carg,       --IMP_MOVI      NUMBER(12,2),
               NULL,               --IMP_MOVI_VALI VARCHAR2(250),
               p_cod_usua,         --COD_USUA      VARCHAR2(20),
               SYSDATE,             --FEC_PROC      DATE,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL                 -- VAL_OBSE
            FROM ccc_tempo_cargo_famil_segur tfs
            WHERE tfs.imp_carg > 0;

         gv_des_log:='Insertando Cargos en CCC_CARGA_CARGO_ABONO_MASIV : ' || SQL%ROWCOUNT ;
         FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

         CCC_PR_PROCE_CARGO_ABONO_INTER(
            lv_oid_tipo_abon_subp,
            lv_fec_fact,
            lv_num_lote,
            p_cod_usua);

         gv_des_log:='Cargos creados en Cuenta Corriente';
         FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

      ELSE

         gv_des_log:='No hay Cargos por generar en CCC_CARGA_CARGO_ABONO_MASIV ';
         FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

      END IF;

      INSERT INTO ccc_histo_cargo_famil_segur
       SELECT
        tfs.cod_poli,            --COD_POLI        VARCHAR2 (5) NOT NULL,
        tfs.cod_clie,            --COD_CLIE        VARCHAR2 (15) NOT NULL,
        tfs.num_poli,            --NUM_POLI        VARCHAR2 (20) NOT NULL,
        tfs.cod_peri,            --COD_PERI        VARCHAR2 (6) NOT NULL,
        lv_fec_fact,             --FEC_INIC_POLI   DATE NOT NULL,
        lv_fec_fact,             --FEC_FINA_POLI   DATE NOT NULL,
        zr.cod_regi,             --COD_REGI        VARCHAR2 (2) NOT NULL,
        zz.cod_zona,             --COD_ZONA        VARCHAR2 (4) NOT NULL,
        NULL,                    --OID_MOVI_CC     NUMBER (12),
        lv_fec_fact,             --FEC_FACT        DATE NOT NULL,
        tfs.imp_poli,            --VAL_IMPO_POLI   NUMBER (12, 2) NOT NULL,
        tfs.imp_dsct,            --VAL_DESC_POLI   NUMBER (12, 2) NOT NULL,
        tfs.imp_carg,             --VAL_IMPO_CARG   NUMBER (12, 2) NOT NULL
        tfs.ind_bene,              -- IND_BENE
        tfs.oid_soli_cabe,          -- OID_SOLI_CABE NUMBER(12)
        tfs.soca_oid_soli_cabe,     -- SOCA_OID_SOLI_CABE NUMBER(12)
        null,
        null,
        null,
        null
       FROM
        ccc_tempo_cargo_famil_segur tfs,
        mae_clien_unida_admin mcua,
        zon_terri_admin zta,
        zon_secci zs,
        zon_zona zz,
        zon_regio zr
       WHERE tfs.num_lote = lv_num_lote
         AND tfs.oid_clie = mcua.clie_oid_clie
         AND mcua.ind_acti = 1
         AND mcua.ztad_oid_terr_admi = zta.oid_terr_admi
         AND zta.zscc_oid_secc = zs.oid_secc
         AND zs.zzon_oid_zona = zz.oid_zona
         AND zz.zorg_oid_regi = zr.oid_regi;

         gv_des_log:='Insertando Cargos en CCC_HISTO_CARGO_FAMIL_SEGUR : ' || SQL%ROWCOUNT ;
         FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

         gv_des_log:='Actualizando las fecha de inicio y fin de vigencia';
         FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

         BEGIN

          FOR v_vige IN c_vige(lv_fec_fact) LOOP

           lv_fec_inic_vige := CCC_FN_OBTIE_FECHA_INICI_VIGEN(p_cod_pais,v_vige.cod_peri, v_vige.cod_poli,v_vige.cod_clie,lv_fec_fact);
           lv_fec_fina_vige := CCC_FN_OBTIE_FECHA_FINAL_VIGEN(p_cod_pais,v_vige.cod_peri, v_vige.cod_poli,v_vige.cod_clie);

           UPDATE ccc_histo_cargo_famil_segur his
           SET
              his.fec_inic_poli = NVL(lv_fec_inic_vige, lv_fec_fact),
              his.fec_fina_poli = NVL(lv_fec_fina_vige, lv_fec_fact + 21)
           WHERE his.cod_peri = v_vige.cod_peri
            AND his.cod_clie = v_vige.cod_clie;

          END LOOP;

         EXCEPTION
            WHEN OTHERS THEN
               NULL;
         END;

         BEGIN

            UPDATE ccc_histo_cargo_famil_segur his
            SET his.oid_movi_cc = (
                  SELECT mcc.oid_movi_cc
                  FROM ccc_movim_cuent_corri mcc,
                       mae_clien mc,
                       cra_perio cp,
                       seg_perio_corpo spc
                  WHERE mcc.clie_oid_clie = mc.oid_clie
                  AND mcc.subp_oid_subp_crea = lv_oid_subp
                  AND mc.cod_clie = his.cod_clie
                  AND mcc.perd_oid_peri = cp.oid_peri
                  AND cp.peri_oid_peri = spc.oid_peri
                  AND spc.cod_peri = his.cod_peri)
            WHERE his.oid_movi_cc IS NULL;

         EXCEPTION
            WHEN OTHERS THEN
               NULL;
         END;

         FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec, 2);

   ELSE

      gv_des_log:='No hay Cargos por generar';
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec,gv_des_log);

      FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(p_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_fase,lv_id_proc_ejec, 2);

   END IF;

 EXCEPTION
   WHEN e_no_perm_para THEN
      NULL;

   WHEN e_codi_soci_null THEN
      RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_FAMIL_SEGUR: Codigo de Sociedad es Nulo');

   WHEN e_no_exis_camp_acti THEN
      RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_FAMIL_SEGUR: No Existe Campa?a Activa');

   WHEN e_no_para_tipo_soli THEN
      RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_FAMIL_SEGUR: No Existe Parametria para el Tipo de Solicitud SOC');

   WHEN e_no_para_carg_fase THEN
      RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_FAMIL_SEGUR: No Existe Parametria para el Cargo Familia Segura');

   WHEN OTHERS THEN
      ln_sqlcode := SQLCODE;
      ls_sqlerrm := substr(sqlerrm,1,250);
      RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_FAMIL_SEGUR: '||ls_sqlerrm);

 END CCC_PR_GENER_CARGO_FAMIL_SEGUR;

 PROCEDURE CCC_PR_GENER_ANUL_FAMIL_SEGUR(
  p_oid_soli_cabe                IN   ped_solic_cabec.oid_soli_cabe%TYPE,
  p_cod_peri                     IN   seg_perio_corpo.cod_peri%TYPE,
  p_oid_soli_cabe_anul           IN   ped_solic_cabec.oid_soli_cabe%TYPE
    )
 IS

  lv_cod_clie                    mae_clien.cod_clie%TYPE;
  lv_imp_carg                    ccc_histo_cargo_famil_segur.val_impo_carg%TYPE;
  lv_ind_gene                    NUMBER(1);
  lv_oid_movi_cc                 ccc_histo_cargo_famil_segur.oid_movi_cc%TYPE;
  lv_oid_soli_cabe               ccc_histo_cargo_famil_segur.oid_soli_cabe%TYPE;

 BEGIN

  BEGIN

   SELECT f.cod_clie, f.val_impo_carg, f.oid_movi_cc, f.oid_soli_cabe
   INTO lv_cod_clie, lv_imp_carg, lv_oid_movi_cc, lv_oid_soli_cabe
   FROM
    ccc_histo_cargo_famil_segur f,
    ped_solic_cabec psc
   WHERE f.oid_soli_cabe = psc.oid_soli_cabe
    AND psc.soca_oid_soli_cabe = p_oid_soli_cabe
    AND ROWNUM < 2;

   lv_ind_gene := 1;

  EXCEPTION

   WHEN no_data_found THEN
    lv_ind_gene := 0;

  END;

  IF (lv_ind_gene = 1 AND lv_imp_carg > 0) THEN
   CCC_PR_GENER_CARGO_ABONO_INTER(gc_oid_abon_fami_segu,lv_cod_clie,TRUNC(SYSDATE),lv_imp_carg,USER);

   --- Actualiza la historia
   update ccc_histo_cargo_famil_segur
   set IND_ANUL = 'S', COD_PERI_ANUL = p_cod_peri,
       FEC_ANUL = TRUNC(sysdate), OID_SOLI_CABE_ANUL = p_oid_soli_cabe_anul
   where oid_movi_cc   = lv_oid_movi_cc
   and   oid_soli_cabe = lv_oid_soli_cabe;

  END IF;

 END CCC_PR_GENER_ANUL_FAMIL_SEGUR;

 FUNCTION CCC_FN_OBTIE_FECHA_INICI_VIGEN(
    p_cod_pais                    IN   seg_pais.cod_pais%TYPE,
    p_cod_peri                    IN   seg_perio_corpo.cod_peri%TYPE,
    p_cod_poli                    IN   sgr_famse_poliz.cod_poli%TYPE,
    p_cod_clie                    IN   mae_clien.cod_clie%TYPE,
    p_fec_fact                    IN   DATE)
 RETURN DATE
 IS

    lv_cod_peri_ante              seg_perio_corpo.cod_peri%TYPE;
    lv_fec_fina_poli_ante         DATE;
    lv_fec_inic_vige              DATE;
    lv_fec_fact_zona              DATE;
    lv_num_dias_inic              NUMBER;

 BEGIN

    BEGIN

       SELECT FIN_PKG_GENER.FIN_FN_OBTIE_NSGTE_CAMPA(p_cod_peri,-1)
       INTO lv_cod_peri_ante
       FROM dual;

       SELECT his.fec_fina_poli
       INTO lv_fec_fina_poli_ante
       FROM ccc_histo_cargo_famil_segur his
       WHERE his.cod_peri = lv_cod_peri_ante
       AND his.cod_clie = p_cod_clie;

    EXCEPTION
       WHEN NO_DATA_FOUND THEN
         NULL;
    END;

    IF lv_fec_fina_poli_ante IS NOT NULL THEN
       -- Estuvo Coberturada --
       lv_fec_inic_vige := lv_fec_fina_poli_ante + 1;

       RETURN lv_fec_inic_vige;

    ELSE
       -- No Estuvo Coberturada
       SELECT FIN_PKG_GENER.FIN_FN_OBTIE_FECHA_FACTU_CLIEN(p_cod_pais,p_cod_peri,p_cod_clie)
       INTO lv_fec_fact_zona
       FROM dual;

       IF lv_fec_fact_zona IS NOT NULL THEN

          SELECT sfp.num_dias_inic_vige
          INTO lv_num_dias_inic
          FROM sgr_famse_poliz sfp
          WHERE sfp.cod_poli = p_cod_poli;

          IF lv_num_dias_inic IS NOT NULL THEN
             lv_fec_inic_vige := FIN_PKG_GENER.FIN_PR_ADICI_DIAS_FECHA(lv_fec_fact_zona,lv_num_dias_inic);
          ELSE
             lv_fec_inic_vige := lv_fec_fact_zona;
          END IF;

          IF lv_fec_inic_vige > p_fec_fact THEN
             lv_fec_inic_vige := p_fec_fact;
          END IF;

       ELSE

          lv_fec_inic_vige := p_fec_fact;

       END IF;

       RETURN lv_fec_inic_vige;

    END IF;

 EXCEPTION
    WHEN OTHERS THEN
       RETURN NULL;

 END CCC_FN_OBTIE_FECHA_INICI_VIGEN;

 FUNCTION CCC_FN_OBTIE_FECHA_FINAL_VIGEN(
    p_cod_pais                    IN   seg_pais.cod_pais%TYPE,
    p_cod_peri                    IN   seg_perio_corpo.cod_peri%TYPE,
    p_cod_poli                    IN   sgr_famse_poliz.cod_poli%TYPE,
    p_cod_clie                    IN   mae_clien.cod_clie%TYPE)
 RETURN DATE
 IS

    lv_fec_fina_vige              DATE;
    lv_fec_fact_zona              DATE;
    lv_cod_peri_sigu              seg_perio_corpo.cod_peri%TYPE;
    lv_num_dias_inic              NUMBER;

 BEGIN

    lv_cod_peri_sigu := FIN_PKG_GENER.FIN_FN_OBTIE_NSGTE_CAMPA(p_cod_peri,1);
    lv_fec_fact_zona := FIN_PKG_GENER.FIN_FN_OBTIE_FECHA_FACTU_CLIEN(p_cod_pais,lv_cod_peri_sigu,p_cod_clie);

    IF lv_fec_fact_zona IS NOT NULL THEN

       SELECT sfp.num_dias_inic_vige
       INTO lv_num_dias_inic
       FROM sgr_famse_poliz sfp
       WHERE sfp.cod_poli = p_cod_poli;

       IF lv_num_dias_inic IS NOT NULL THEN
         lv_fec_fina_vige := FIN_PKG_GENER.FIN_PR_ADICI_DIAS_FECHA(lv_fec_fact_zona,lv_num_dias_inic-1);
       ELSE
         lv_fec_fina_vige := lv_fec_fact_zona;
       END IF;


    ELSE
       lv_fec_fina_vige := NULL;
    END IF;

    RETURN lv_fec_fina_vige;

 EXCEPTION
    WHEN OTHERS THEN
       RETURN NULL;

 END CCC_FN_OBTIE_FECHA_FINAL_VIGEN;

 PROCEDURE CCC_PR_PROCE_CONSU_HABIL_FLEXI
 IS

  lv_oid_tipo_soli_pais            ped_tipo_solic_pais.oid_tipo_soli_pais%TYPE;
  lv_num_lote                      ccc_carga_cargo_abono_masiv.num_lote%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_fec_fact                      ped_solic_cabec.fec_prog_fact%TYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;


  lv_cod_erro                      VARCHAR2(250);
  lv_oid_tipo_soli_pais_cons       NUMBER(12);
  lv_oid_peri                      NUMBER(12);
  lv_oid_form_pago                 NUMBER(12);
  lv_num_max_posi_deta             NUMBER(12);

  lv_tota_dema_cata                NUMBER(12,2);
  lv_tota_aten_cata                NUMBER(12,2);
  lv_tota_fact                     NUMBER(12,2);
  lv_fact_conv                     NUMBER(12,2);
  lv_tota_aten_supe                NUMBER(12,2);
  lv_imp_fina_flex_cata            NUMBER(12,2);
  lv_imp_fina_flex_fact            NUMBER(12,2);
  lv_imp_mini_flex                 NUMBER(12,2);
  lv_cant                          NUMBER(12);

 CURSOR c_cons_habi(p_fec_fact DATE)
 IS
  SELECT
   psc.oid_soli_cabe,
   psc.soca_oid_soli_cabe,
   mc.oid_clie,
   mc.cod_clie,
   psc.zzon_oid_zona oid_zona,
   ch.val_pedi_base,
   val_mnto_flex val_mont_soli_flex_cata,
   ch.val_line_cred - lc.val_line_cred_usad val_line_cred_disp_cata
  FROM
   ped_solic_cabec psc,
   mae_clien mc,
   flx_consu_habil_flexi ch,
   cra_perio cp,
   seg_perio_corpo spc,
   int_solic_conso_cabec con,
   flx_consu_linea_credi lc
  WHERE psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
    AND psc.perd_oid_peri = cp.oid_peri
    AND cp.peri_oid_peri = spc.oid_peri
    AND psc.clie_oid_clie = mc.oid_clie
    AND mc.cod_clie = ch.cod_clie
    AND mc.cod_clie = con.cod_clie
    AND ch.cod_clie = con.cod_clie
    AND mc.cod_clie = lc.cod_clie
    AND ch.cod_clie = lc.cod_clie
    AND con.cod_clie = lc.cod_clie
    AND ch.cod_peri_fact =  lv_cod_peri
    AND con.soca_oid_soli_cabe_refe = psc.oid_soli_cabe
    AND psc.grpr_oid_grup_proc = 5
    AND psc.fec_prog_fact = p_fec_fact
    AND con.ind_envi_sto = 1
    AND ch.ind_habi = 1
    AND ch.ind_acti = 1
    AND con.val_mnto_flex >= lv_imp_mini_flex
    AND lc.val_line_cred_usad < ch.val_line_cred;

  lv_reg_ccc_cuota_flexi_factu     flx_cuota_flexi_factu_cabec%ROWTYPE;
  TYPE t_tab_cons_habi             IS TABLE OF c_cons_habi%ROWTYPE;
  lv_tab_cons_habi                 t_tab_cons_habi;

 CURSOR c_form_pago_deta
  IS
   SELECT
    fpd.num_posi_deta,
    fpd.mpab_oid_medi_pago,
    fpd.val_porc_pago,
    fpd.cod_indi_dias,
    NVL(fpd.num_dias,0) num_dias,
    fpd.cact_oid_acti
   FROM bel_forma_pago_detal fpd
   WHERE fpd.fopa_oid_form_pago = lv_oid_form_pago
   ORDER BY fpd.num_posi_deta ASC;

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,gc_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio Generacion Consultoras Habiles Flexipago';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  lv_imp_mini_flex := TO_NUMBER(CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('MontoMinimoFlexipago'),'9999.99');
  gv_des_log:='Monto Minimo Flexipago : ' || lv_imp_mini_flex ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  BEGIN

   SELECT z.cod_peri,z.fec_proc
   INTO lv_cod_peri,lv_fec_fact
   FROM bas_ctrl_fact z
   WHERE z.ind_camp_act = 1
     AND z.sta_camp = 0;

   lv_reg_ccc_cuota_flexi_factu.cod_peri := lv_cod_peri;
   lv_reg_ccc_cuota_flexi_factu.fec_fact := lv_fec_fact;

  EXCEPTION

   WHEN NO_DATA_FOUND THEN
    gv_des_log:='ERROR!!! No Existe Campa?a Activa : ';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);
    RAISE e_no_exis_camp_acti;

  END;

  gv_des_log:='Fecha Facturacion ' || lv_fec_fact ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Campa?a Activa : ' || lv_cod_peri ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_PERIO(lv_cod_peri);
  lv_cod_soci:= ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('COD_SOCI');

  IF lv_cod_soci IS NULL THEN

   gv_des_log:='ERROR!!! Codigo de Sociedad es Nulo';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);
   RAISE e_codi_soci_null;

  END IF;

  lv_num_lote:= ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;

  gv_des_log:='Numero de Lote : ' || lv_num_lote ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  BEGIN

   SELECT ptsp.oid_tipo_soli_pais
   INTO lv_oid_tipo_soli_pais
   FROM
    ped_tipo_solic pts,
    ped_tipo_solic_pais ptsp
   WHERE pts.oid_tipo_soli = ptsp.tsol_oid_tipo_soli
     AND pts.cod_tipo_soli = 'SOC';

   SELECT ptsp.oid_tipo_soli_pais
   INTO lv_oid_tipo_soli_pais_cons
   FROM
    ped_tipo_solic pts,
    ped_tipo_solic_pais ptsp
   WHERE pts.oid_tipo_soli = ptsp.tsol_oid_tipo_soli
     AND pts.cod_tipo_soli = 'C1';

  EXCEPTION

   WHEN NO_DATA_FOUND THEN

    gv_des_log:='ERROR!!! No Existe parametria para el Tipo de Solicitud Pais : ';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);
    RAISE e_no_para_tipo_soli;

  END;

  OPEN c_cons_habi(lv_fec_fact);
  LOOP
   FETCH c_cons_habi BULK COLLECT INTO  lv_tab_cons_habi LIMIT W_FILAS;

    IF lv_tab_cons_habi.COUNT > 0 THEN

     FOR i IN lv_tab_cons_habi.FIRST .. lv_tab_cons_habi.LAST LOOP

      gv_des_log:=' ----------------------------------------';
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

      gv_des_log:=' Consultora ' ||  lv_tab_cons_habi(i).cod_clie;
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

      gv_des_log:=' Pedido Base Catalogo ' ||  lv_tab_cons_habi(i).val_pedi_base;
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

      -- Valor Total Factura
      SELECT  SUM(DECODE(psp.val_prec_cata_tota_loca,0,0,psp.val_prec_fact_tota_loca))
      INTO lv_tota_fact
      FROM
       ped_solic_cabec psc,
       ped_solic_posic psp
      WHERE psc.oid_soli_cabe = psp.soca_oid_soli_cabe
        AND psc.oid_soli_cabe = lv_tab_cons_habi(i).oid_soli_cabe
        AND psp.num_unid_aten > 0;

      gv_des_log:=' Valor Total Facturado : ' ||  lv_tota_fact;
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

      -- Valor Total Demandado Catalogo
      SELECT SUM(psp.val_prec_cata_tota_loca)
      INTO lv_tota_dema_cata
      FROM
       ped_solic_cabec psc,
       ped_solic_posic psp
      WHERE psc.oid_soli_cabe = psp.soca_oid_soli_cabe
        AND psc.oid_soli_cabe = lv_tab_cons_habi(i).oid_soli_cabe
        AND psp.num_unid_dema_real > 0;

      gv_des_log:=' Valor Total Demandado Catalogo : ' ||  lv_tota_dema_cata;
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

      -- Valor Total Atendido Catalogo
      SELECT SUM(psp.val_prec_cata_tota_loca)
      INTO lv_tota_aten_cata
      FROM
       ped_solic_cabec psc,
       ped_solic_posic psp
      WHERE psc.oid_soli_cabe = psp.soca_oid_soli_cabe
        AND psc.oid_soli_cabe = lv_tab_cons_habi(i).oid_soli_cabe
        AND psp.num_unid_aten > 0;

      gv_des_log:=' Valor Total Atendido Catalogo : ' ||  lv_tota_dema_cata;
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

      -- Se define si aplica flexipago --
      IF lv_tota_dema_cata > lv_tab_cons_habi(i).val_pedi_base THEN

       gv_des_log:=' Aplica Flexipago x Valor Total Demandado Catalogo es Mayor que el Pedido Base Catalago';
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_habi_flex,lv_id_proc_ejec,gv_des_log);

       lv_fact_conv := ROUND(lv_tota_fact/lv_tota_aten_cata,2);

       gv_des_log:=' Factor de Conversion : ' ||  lv_fact_conv;
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

       lv_tota_aten_supe := lv_tota_aten_cata - lv_tab_cons_habi(i).val_pedi_base;

       gv_des_log:=' Monto Atendido Catalogo Superior al Pedido Base : ' ||  lv_tota_aten_supe;
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

       gv_des_log:=' Linea de Credito Disponible Catalogo : ' ||  lv_tab_cons_habi(i).val_line_cred_disp_cata;
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

       gv_des_log:=' Monto Catalogo Flexipago Solicitado : ' ||  lv_tab_cons_habi(i).val_mont_soli_flex_cata;
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

       SELECT MIN(imp_fina_flex)
       INTO lv_imp_fina_flex_cata
       FROM
       (SELECT GREATEST(lv_tota_aten_supe,0) imp_fina_flex
        FROM dual
        UNION
        SELECT lv_tab_cons_habi(i).val_mont_soli_flex_cata imp_fina_flex
        FROM dual
        UNION
        SELECT lv_tab_cons_habi(i).val_line_cred_disp_cata imp_fina_flex
        FROM dual);

       gv_des_log:=' Monto Catalago Flexipago a Financiar : ' ||  lv_imp_fina_flex_cata;
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

       lv_imp_fina_flex_fact := ROUND(lv_imp_fina_flex_cata*lv_fact_conv,2);

       gv_des_log:=' Monto Facturado Flexipago a Financiar : ' ||  lv_imp_fina_flex_fact;
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

       lv_reg_ccc_cuota_flexi_factu.num_lote := lv_num_lote;
       lv_reg_ccc_cuota_flexi_factu.cod_clie := lv_tab_cons_habi(i).cod_clie;
       lv_reg_ccc_cuota_flexi_factu.oid_clie := lv_tab_cons_habi(i).oid_clie;
       lv_reg_ccc_cuota_flexi_factu.oid_zona := lv_tab_cons_habi(i).oid_zona;
       lv_reg_ccc_cuota_flexi_factu.oid_soli_cabe := lv_tab_cons_habi(i).oid_soli_cabe;
       lv_reg_ccc_cuota_flexi_factu.soca_oid_soli_cabe := lv_tab_cons_habi(i).soca_oid_soli_cabe;
       lv_reg_ccc_cuota_flexi_factu.val_pedi_base_cata := lv_tab_cons_habi(i).val_pedi_base;
       lv_reg_ccc_cuota_flexi_factu.val_mont_soli_fina := lv_tab_cons_habi(i).val_mont_soli_flex_cata;
       lv_reg_ccc_cuota_flexi_factu.val_mont_fina := lv_imp_fina_flex_fact;
       lv_reg_ccc_cuota_flexi_factu.val_fact_conv := lv_fact_conv;

       INSERT INTO flx_cuota_flexi_factu_cabec VALUES lv_reg_ccc_cuota_flexi_factu;

      ELSE

       gv_des_log:=' No Aplica Flexipago x Valor Total Demandado Catalogo es Menor que el Pedido Base Catalago';
       FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

      END IF;

      gv_des_log:=' ----------------------------------------';
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

     END LOOP;

    END IF;

   EXIT WHEN c_cons_habi%NOTFOUND;
  END LOOP;
  CLOSE c_cons_habi;

  SELECT COUNT(1)
  INTO lv_cant
  FROM flx_cuota_flexi_factu_cabec f
  WHERE f.num_lote = lv_num_lote;

  gv_des_log:='Consultoras Habiles Flexipago : ' || lv_cant ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Generando las Cuotas Flexipago ' ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  SELECT fp.oid_form_pago
  INTO lv_oid_form_pago
  FROM bel_forma_pago fp
  WHERE fp.cod_form_pago = gc_cod_form_pago_flex;

  SELECT MAX(fpd.num_posi_deta)
  INTO lv_num_max_posi_deta
  FROM bel_forma_pago_detal fpd
  WHERE fpd.fopa_oid_form_pago = lv_oid_form_pago;

  FOR v_form_pago_deta IN c_form_pago_deta LOOP

   IF v_form_pago_deta.num_posi_deta < lv_num_max_posi_deta THEN

    gv_des_log := 'Insertando las Cuotas Flexipago en flx_cuota_flexi_factu_detal';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

    INSERT INTO flx_cuota_flexi_factu_detal
     (num_lote,
      cod_peri,
      fec_fact,
      cod_clie,
      oid_clie,
      oid_zona,
      oid_form_pago,
      val_nume_soli,
      val_nume_orde_cuot,
      oid_peri_cuot_flex,
      fec_venc_cuot_flex,
      oid_movi_carg_flex,
      val_mont_cuot_flex,
      oid_movi_carg_uso,
      val_mont_carg_uso,
      oid_soli_cabe_carg_uso,
      oid_soli_cons_cabe_carg_uso,
      val_sald_cuot_flex,
      val_refe_nume_docu,
      fec_gene_inte)
     SELECT
      lv_num_lote,                     -- NUM_LOTE VARCHAR2(15),
      c.cod_peri,                      -- COD_PERI VARCHAR2(6),
      c.fec_fact,                      -- FEC_FACT DATE,
      c.cod_clie,                      -- COD_CLIE VARCHAR2(15),
      c.oid_clie,                      -- OID_CLIE NUMBER(12),
      c.oid_zona,                      -- OID_ZONA NUMBER(12),
      lv_oid_form_pago,                -- OID_FORM_PAGO NUMBER(12),
      NULL,                            -- VAL_NUME_SOLI       NUMBER(10),
      v_form_pago_deta.num_posi_deta,  -- VAL_NUME_ORDE_CUOT   NUMBER(12),
      lv_oid_peri + v_form_pago_deta.num_dias,    -- OID_PERI_CUOT_FLEX        NUMBER(12,2),
      NULL,                            -- FEC_VENC_CUOT_FLEX        DATE,
      NULL,                            -- OID_MOVI_CARG_FLEX       NUMBER(12),
      round((v_form_pago_deta.val_porc_pago*c.val_mont_fina)/100,2),  -- VAL_MONT_CUOT_FLEX        NUMBER(12,2),
      NULL,                             -- OID_MOVI_CARG_USO        NUMBER(12)
      NULL,                            -- VAL_MONT_CARGI_USO  NUMBER(12,2),
      NULL,
      NULL,
      NULL,
      NULL,
      NULL
     FROM flx_cuota_flexi_factu_cabec c
     WHERE c.num_lote = lv_num_lote;

    gv_des_log:='Actualizando las Fechas de Vencimiento en flx_cuota_flexi_factu_detal';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

    UPDATE flx_cuota_flexi_factu_detal d
    SET d.fec_venc_cuot_flex = NVL((
         SELECT cr.fec_inic
         FROM cra_crono cr
         WHERE cr.perd_oid_peri = lv_oid_peri
           AND cr.zzon_oid_zona = d.oid_zona
           AND cr.cact_oid_acti = v_form_pago_deta.cact_oid_acti),lv_fec_fact)
    WHERE d.num_lote = lv_num_lote
    AND d.val_nume_orde_cuot = v_form_pago_deta.num_posi_deta;


   ELSE

    gv_des_log := 'Actualizando el Monto Desglosado en flx_cuota_flexi_factu_cabec';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

    UPDATE flx_cuota_flexi_factu_cabec c
    SET c.val_mont_fina_desg = (SELECT SUM(d.val_mont_cuot_flex)
                                FROM flx_cuota_flexi_factu_detal d
                                WHERE d.num_lote = lv_num_lote
                                AND d.cod_peri = c.cod_peri
                                AND d.fec_fact = c.fec_fact
                                AND d.cod_clie = c.cod_clie)
    WHERE c.num_lote = lv_num_lote;


    gv_des_log := 'Insertando las Cuotas Flexipago en flx_cuota_flexi_factu_detal';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

    INSERT INTO flx_cuota_flexi_factu_detal
     (num_lote,
      cod_peri,
      fec_fact,
      cod_clie,
      oid_clie,
      oid_zona,
      oid_form_pago,
      val_nume_soli,
      val_nume_orde_cuot,
      oid_peri_cuot_flex,
      fec_venc_cuot_flex,
      oid_movi_carg_flex,
      val_mont_cuot_flex,
      oid_movi_carg_uso,
      val_mont_carg_uso,
      oid_soli_cabe_carg_uso,
      oid_soli_cons_cabe_carg_uso,
      val_sald_cuot_flex,
      val_refe_nume_docu,
      fec_gene_inte)
     SELECT
      lv_num_lote,                     -- NUM_LOTE VARCHAR2(15),
      c.cod_peri,                      -- COD_PERI VARCHAR2(6),
      c.fec_fact,                      -- FEC_FACT DATE,
      c.cod_clie,                      -- COD_CLIE VARCHAR2(15),
      c.oid_clie,                      -- OID_CLIE NUMBER(12),
      c.oid_zona,                      -- OID_ZONA NUMBER(12),
      lv_oid_form_pago,                 -- OID_FORM_PAGO NUMBER(12),
      NULL,                            -- VAL_NUME_SOLI       NUMBER(10),
      v_form_pago_deta.num_posi_deta,  -- VAL_NUME_ORDE_CUOT   NUMBER(12),
      lv_oid_peri + v_form_pago_deta.num_dias,    -- OID_PERI_CUOT_FLEX        NUMBER(12,2),
      NULL,                            -- FEC_VENC_CUOT_FLEX        DATE,
      NULL,                            -- OID_MOVI_CARG_FLEX       NUMBER(12),
      c.val_mont_fina - val_mont_fina_desg,  -- VAL_MONT_CUOT_FLEX        NUMBER(12,2),
      NULL,                             -- OID_MOVI_CARG_USO        NUMBER(12) ,
      NULL,                             -- VAL_MONT_CARGI_USO  NUMBER(12,2),
      NULL,
      NULL,
      NULL,
      NULL,
      NULL
     FROM flx_cuota_flexi_factu_cabec c
     WHERE c.num_lote = lv_num_lote;

    gv_des_log:='Actualizando las Fechas de Vencimiento';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

    UPDATE flx_cuota_flexi_factu_detal d
    SET d.fec_venc_cuot_flex = NVL((SELECT cr.fec_inic
                                    FROM
                                     cra_crono cr
                                    WHERE cr.perd_oid_peri = lv_oid_peri
                                      AND cr.zzon_oid_zona = d.oid_zona
                                      AND cr.cact_oid_acti = v_form_pago_deta.cact_oid_acti),lv_fec_fact)
    WHERE d.num_lote = lv_num_lote
    AND d.val_nume_orde_cuot = v_form_pago_deta.num_posi_deta;

   END IF;

  END LOOP;


  gv_des_log:='Proyectando el cargo por uso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  UPDATE flx_cuota_flexi_factu_detal d
  SET d.val_mont_carg_uso = NVL(( SELECT cu.val_cost_util_flex
                             FROM flx_costo_utili_flexi cu
                             WHERE cu.val_impo_fina_desd <= (SELECT mcc.imp_pend
                                                             FROM ccc_movim_cuent_corri mcc
                                                             where mcc.oid_movi_cc = d.oid_movi_carg_flex)
                               AND cu.val_impo_fina_hast >= (SELECT mcc.imp_pend
                                                             FROM ccc_movim_cuent_corri mcc
                                                             where mcc.oid_movi_cc = d.oid_movi_carg_flex)
                               AND cu.cod_peri_inic <= d.cod_peri
                               AND NVL(cu.cod_peri_fin,'9999') >= d.cod_peri),0)
  WHERE d.oid_movi_carg_uso IS NULL;

  gv_des_log:='Actualizando las lineas de credito disponible a Consultoras ya existente';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  UPDATE flx_consu_linea_credi lc
  SET lc.val_line_cred_usad = NVL((SELECT SUM(ROUND(mcc.imp_pend/ffc.val_fact_conv,2))
                                  FROM flx_cuota_flexi_factu_detal ffd,
                                       flx_cuota_flexi_factu_cabec ffc,
                                       ccc_movim_cuent_corri mcc
                                  WHERE ffd.oid_movi_carg_flex = mcc.oid_movi_cc
                                  AND ffc.cod_peri = ffd.cod_peri
                                  AND ffc.fec_fact = ffd.fec_fact
                                  AND ffd.cod_clie = ffc.cod_clie
                                  AND ffd.cod_clie = lc.cod_clie),0)
  WHERE EXISTS (
   SELECT 1
   FROM flx_cuota_flexi_factu_cabec c
   WHERE c.cod_clie = lc.cod_clie);

  gv_des_log:='Actualizando las lineas de credito disponible a Consultoras que utilizan por primera vez.';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  INSERT INTO flx_consu_linea_credi lc
   SELECT c.cod_clie , ROUND(c.val_mont_fina/lv_fact_conv,2)
   FROM flx_cuota_flexi_factu_cabec c
   WHERE c.num_lote = lv_num_lote
   AND NOT EXISTS (
    SELECT 1
    FROM flx_consu_linea_credi lc
    WHERE lc.cod_clie = c.cod_clie);

  gv_des_log:='Fin del Proceso Correctamente';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_proc_habi_flex,lv_id_proc_ejec, 2);

 EXCEPTION

  WHEN e_no_perm_para THEN
   NULL;

  WHEN e_codi_soci_null THEN
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_FAMIL_SEGUR: Codigo de Sociedad es Nulo');

  WHEN e_no_exis_camp_acti THEN
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_FAMIL_SEGUR: No Existe Campa?a Activa');

  WHEN e_no_para_tipo_soli THEN
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_FAMIL_SEGUR: No Existe Parametria para el Tipo de Solicitud SOC');

  WHEN e_no_para_carg_fase THEN
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_FAMIL_SEGUR: No Existe Parametria para el Cargo Familia Segura');

  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_PROCE_CONSU_HABIL_FLEXI;

 PROCEDURE CCC_PR_GENER_SOLIC_CARGO_FLEXI(
  p_num_lote                     IN   ccc_carga_cadir_docle_masiv.num_lote%TYPE)
 IS

  lv_oid_peri                    cra_perio.oid_peri%TYPE;
  lv_num_iden_cuot_inic          ccc_numer_ident_cuota.val_ulti_nume_iden_cuot%TYPE;
  lv_oid_esta_posi               ped_estad_posic.oid_esta_posi%TYPE;
  lv_oid_tipo_soli_pais          ped_tipo_solic_pais.oid_tipo_soli_pais%TYPE;
  lv_oid_alma                    ped_tipo_solic_pais.almc_oid_alma%TYPE;
  lv_oid_tipo_cons               ped_tipo_solic_pais.tsol_oid_tipo_cons%TYPE;
  lv_oid_tipo_docu               ped_tipo_solic_pais.tido_oid_tipo_docu%TYPE;
  lv_oid_acti                    ped_tipo_solic_pais.cact_oid_acti%TYPE;
  lv_oid_sbac                    ped_tipo_solic.sbac_oid_sbac%TYPE;
  lv_oid_soci                    ped_tipo_solic_pais.soci_oid_soci%TYPE;
  lv_oid_mone                    ped_tipo_solic_pais.mone_oid_mone%TYPE;
  lv_oid_clas_soli               ped_tipo_solic.clso_oid_clas_soli%TYPE;
  lv_oid_pais                    ped_tipo_solic_pais.pais_oid_pais%TYPE;
  lv_val_glos                    ped_tipo_solic_pais.val_glos%TYPE;
  lv_oid_tipo_posi               ped_tipo_solic_proce.tpos_oid_tipo_posi%TYPE;
  lv_oid_subt_posi               ped_tipo_solic_proce.stpo_oid_subt_posi%TYPE;
  lv_oid_prod                    ped_tipo_solic_proce.prod_oid_prod%TYPE;
  lv_ind_pedi_prue               ped_tipo_solic_pais.ind_pedi_prue%TYPE;
  lv_ind_perm_unio               ped_tipo_solic_pais.ind_perm_unio%TYPE;
  lv_oid_tipo_clie               ped_tipo_solic.ticl_oid_tipo_clie%TYPE;
  lv_ind_tipo_nega               ped_tipo_solic.ind_soli_nega%TYPE;
  lv_oid_form_pago_carg_flex     bel_forma_pago.oid_form_pago%TYPE;
  lv_oid_form_pago               bel_forma_pago.oid_form_pago%TYPE;
  lv_fec_fact                    bas_ctrl_fact.fec_proc%TYPE;
  lv_ind_sign                    NUMBER(1);
  lv_oid_tasa                    NUMBER(12);
  lv_tasa                        NUMBER(12,2);
  lv_id_proc_ejec                fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_cod_erro                    VARCHAR2(250);

  lv_cant_carg_masi              NUMBER(6);

  CURSOR cur_carg_masi
  IS
      SELECT
         ped_soca_seq.NEXTVAL                     OID_SOLI_CABE,
         lv_fec_fact                              FEC_PROG_FACT,
         NULL                                                    FEC_FACT,
         0                                                           NUM_CLIEN ,
         NULL                                                    VAL_GRUP_REVE,
         lv_oid_tipo_soli_pais                        TSPA_OID_TIPO_SOLI_PAIS ,
         NULL                                                    MONE_OID_MONE ,
         3                                                           TIDS_OID_TIPO_DESP,
         lv_oid_alma                                           ALMC_OID_ALMA,
         23                                                         MODU_OID_MODU,
         lv_oid_tipo_clie                                 TICL_OID_TIPO_CLIE ,
         NULL                                                   TAIM_OID_TASA_IMPU,
         lv_oid_peri                                           PERD_OID_PERI ,
         NULL                                                   SOCA_OID_SOLI_CABE,
         mc.oid_clie                                           CLIE_OID_CLIE,
         mc.oid_clie                                           CLIE_OID_CLIE_RECE_FACT,
         mc.oid_clie                                           CLIE_OID_CLIE_PAGA,
         mc.oid_clie                                           CLIE_OID_CLIE_DEST,
         mcd.oid_clie_dire                                CLDI_OID_CLIE_DIRE,
         mci.tdoc_oid_tipo_docu                      TDOC_OID_TIPO_DOCU ,
         lv_oid_soci                                           SOCI_OID_SOCI ,
         lv_oid_sbac                                           SBAC_OID_SBAC ,
         zt.oid_terr                                            TERR_OID_TERR ,
         zz.oid_zona                                            ZZON_OID_ZONA ,
         NULL                                                      IND_ESTA ,
         NULL                                                      IND_IMPR ,
         NULL                                                      IND_EXEN_FLET ,
         lv_num_iden_cuot_inic + rownum - 1      VAL_NUME_SOLI ,
         USER                                               VAL_USUA,
         0                                                              VAL_TASA_IMPU ,
         TRUNC(SYSDATE)                     FEC_CRON ,
         lv_ind_perm_unio                   IND_PERM_UNIO_SOL ,
         NULL                               IND_GENE_CC ,
         NULL                               IND_APLI_MANU ,
         1                                  VAL_TIPO_CAMB ,
         NULL                               NUM_DOCU_CONT_INTE ,
         0                                  NUM_DOCU_ORIG,
         NULL                               VAL_LOTE_REPO_FALT ,
         NULL                               FEC_REPO_FALT ,
         0                                  VAL_BASE_FLET_LOCA,
         0                                  VAL_IMPO_FLET_LOCA,
         0                                          VAL_IMPO_FLET_TOTA_LOCA,
         0                                          VAL_IMPO_FLET_SIN_IMPU_TOTA,
         0                                          VAL_RECA_FLET_LOCA,
         0                                          VAL_OTRO_RECA_LOCA,
         cad.imp_movi                               VAL_TOTA_PAGA_LOCA,
         0                                          VAL_PREC_CATA_TOTA_LOCA,
         0                                          VAL_PREC_CATA_SIN_IMPU_TOTA,
         0                                          VAL_PREC_FACT_TOTA_LOCA,
         0                                          VAL_IMPO_IMPU_TOTA_LOCA,
         0                                          VAL_IMPO_DESC_1_TOTA_LOCA,
         0                                          VAL_IMPO_DESC_1_TOTA_DOCU ,
         0                                          VAL_IMPO_DESC_1_SIN_IMPU_TOTA ,
         0                                          VAL_IMPO_DESC_3_TOTA_DOCU ,
         0                                          VAL_IMPO_DESC_3_SIN_IMPU_TOTA,
         0                                          VAL_IMPO_DESC_TOTA_LOCA,
         0                                          VAL_IMPO_DTO_1_SIN_IMP_TOT_LOC,
         0                                          VAL_IMPO_REDO_LOCA,
         0                                          VAL_BASE_FLET_DOCU ,
         0                                          VAL_IMPO_FLET_DOCU ,
         0                                          VAL_IMPO_DESC_TOTA_DOCU ,
         0                                          VAL_IMPO_FLET_SIN_IMPU_DOCU ,
         0                                          VAL_RECA_FLET_DOCU ,
         0                                          VAL_OTRO_RECA_DOCU ,
         0                                          VAL_TOTA_FLET_DOCU,
         0                                          VAL_IMPO_FLET_TOTA_DOCU ,
         0                                          VAL_TOTA_FLET_LOCA,
         0                                          VAL_TOTA_PAGA_DOCU,
         0                                          VAL_PREC_CATA_TOTA_DOCU ,
         0                                          VAL_PREC_CATA_SIN_IMPU_TOTA_DO ,
         0                                          VAL_PREC_CONT_TOTA_LOCA ,
         0                                          VAL_PREC_CONT_SIN_IMPU_TOTA,
         0                                          VAL_PREC_CONT_SIN_IMPU_TOTA_1,
         0                                          VAL_PREC_FACT_TOTA_DOCU ,
         0                                          VAL_PREC_CATA_TOTA_LOC_UNI_DEM,
         0                                          VAL_PREC_NETO_TOTA_DOCU,
         0                                          VAL_PREC_NETO_TOTA_LOCA,
         0                                          VAL_IMPO_IMPU_TOTA_DOCU ,
         0                                          VAL_IMPO_REDO_DOCU ,
         0                                          VAL_IMPO_REDO_CONS_LOCA,
         0                                          VAL_IMPO_REDO_CONS_DOCU ,
         NULL                                       VAL_UNID_DEMA_REAL_TOTA ,
         NULL                                       NUM_UNID_POR_ATEN_TOTA,
         NULL                                       NUM_UNID_ATEN_TOTA,
         0                                          IND_OC ,
         lv_ind_pedi_prue                           IND_PEDI_PRUE ,
         1                                          IND_TS_NO_CONSO ,
         NULL                                       VAL_GLOS_OBSE ,
         NULL                                       VAL_OBSE_REVI ,
         NULL                                       NUM_PREM,
         0                                          VAL_IMPO_DESC_3_TOTA_LOCA ,
         0                                          VAL_IMPO_DTO_3_SIN_IMP_TOT_LOC ,
         lv_oid_pais                                PAIS_OID_PAIS ,
         cad.tido_oid_tipo_docu                          TIDO_OID_TIPO_DOCU ,
         zt.vepo_oid_valo_estr_geop                 VEPO_OID_VALO_ESTR_GEOP ,
         NULL                                       RECQ_OID_RESU_CHEQ,
         1                                          ESSO_OID_ESTA_SOLI ,
         NULL                                       COPA_OID_PARA_GENE ,
         4                                          GRPR_OID_GRUP_PROC ,
         1                                          SBTI_OID_SUBT_CLIE ,
         1                                          ACFI_OID_ACCE_FISI ,
         lv_oid_tipo_cons                           TSPA_OID_TIPO_SOLI_PAIS_CONS ,
         lv_oid_form_pago                           FOPA_OID_FORM_PAGO ,
         NULL                                       CLIE_OID_CONS_ASOC ,
         NULL                                       ESPE_OID_ESTA_PEDI ,
         lv_oid_clas_soli                           CLSO_OID_CLAS_SOLI ,
         zta.oid_terr_admi                          ZTAD_OID_TERR_ADMI ,
         NULL                                       INRE_OID_INDI_REVI ,
         44                                         OPER_OID_OPER  ,
         1                                          PROC_OID_PROC  ,
         TO_NUMBER(cad.soca_oid_docu_refe)           SOCA_OID_DOCU_REFE ,
         NULL                                       TCCL_OID_TCCL_FLET ,
         NULL                                       CLAS_OID_CLAS_FLET ,
         NULL                                       VAL_PUNT_EMIS ,
         NULL                                       NUM_LOTE_FACT ,
         NULL                                       VAL_PREC_CONT_TOTA_DOCU ,
         0                                          IND_INTE_LARI_GENE ,
         TO_CHAR(SYSDATE,'YYYYMMDD')                FEC_PROG_FACT_COMP ,
         NULL                                       ICTP_OID_TIPO_PROG ,
         NULL                                       ICTP_OID_CONC_TIPO_PROG ,
         NULL                                       VAL_ORIG_CHEQ ,
         NULL                                       VAL_IMPO_IVA_ASUM_EMPR,
         NULL                                       VAL_GANA_TOTA_LOCA,
         NULL                                       VAL_GANA_TOTA_DOCU,
         NULL                                       VAL_TASA_FLET,
         NULL                                       VAL_RECA_FLET,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL
      FROM
         (SELECT
             cad.num_lote ,
             cad.cod_clie,
             cad.soca_oid_docu_refe,
             gc_oid_tipo_docu_lega_fact_2 tido_oid_tipo_docu,
             SUM(TO_NUMBER(cad.imp_movi)) imp_movi
          FROM ccc_carga_cadir_docle_masiv cad
          GROUP BY cad.num_lote , cad.cod_clie, cad.soca_oid_docu_refe,cad.oid_tipo_docu_refe) cad,
          mae_clien mc,
          mae_clien_direc mcd,
          mae_clien_unida_admin mcua,
          mae_clien_ident mci,
          zon_terri_admin zta,
          zon_secci zs,
          zon_terri zt,
          zon_zona zz
    WHERE cad.cod_clie=mc.cod_clie
    AND mcua.clie_oid_clie=mc.oid_clie
    AND mcua.ind_acti=1
    AND mc.oid_clie=mcd.clie_oid_clie
    AND mcd.ind_dire_ppal=1
    AND mcd.ind_elim=0
    AND mc.oid_clie=mci.clie_oid_clie
    AND mci.val_iden_docu_prin=1
    AND mcua.ztad_oid_terr_admi = zta.oid_terr_admi
    AND zs.zzon_oid_zona = zz.oid_zona
    AND zta.zscc_oid_secc=zs.oid_secc
    AND zta.terr_oid_terr=zt.oid_terr
    AND cad.num_lote=p_num_lote;

   CURSOR cur_carg_masi_deta
   IS
      SELECT
         ped_sopo_seq.NEXTVAL,         --OID_SOLI_POSI
         ROWNUM,                                --COD_POSI
         p_num_lote,                               --VAL_LOTE_PROD
         1,                                                 --NUM_UNID_DEMA
         1,                                                 --NUM_UNID_POR_ATEN
         lv_tasa,                                       --VAL_TASA_IMPU
         det.soca_oid_soli_cabe,             --SOCA_OID_SOLI_CABE
         lv_oid_tasa,                                --TAIM_OID_TASA_IMPU
         lv_oid_tipo_posi,                        --TPOS_OID_TIPO_POSI
         det.prod_oid_prod,                    --PROD_OID_PROD
         lv_oid_form_pago_carg_flex,                         --FOPA_OID_FORM_PAGO
         NULL,                                         --IND_LIMI_VENT
         NULL,                                         --IND_CTRL_STOC
         NULL,                                         --IND_CTRL_LIQU
         det.imp_movi*lv_ind_sign,         --VAL_PREC_CATA_UNIT_LOCA,
         0,                                                --VAL_PREC_CONT_UNIT_LOCA,
         0,                                                --VAL_PREC_CATA_UNIT_DOCU,
         0,                                                --VAL_PREC_CONTA_UNIT_DOCU,
         0,                                                --VAL_PREC_FACT_UNIT_LOCA,
         0,                                                --VAL_PREC_FACT_UNIT_DOCU,
         0,                                                --VAL_PREC_SIN_IMPU_UNIT_LOCA,
         0,                                                --VAL_PREC_SIN_IMPU_UNIT_DOCU,
         0,                                                --VAL_PREC_SIN_IMPU_TOTA_DOCU,
         0,                                                --VAL_IMPO_DESC_UNIT_LOCA,
         NULL,                                         --VAL_IMPO_DESC_UNIT_DOCU,
         0,                                                --VAL_PREC_NETO_UNIT_LOCA,
         0,                                                --VAL_PREC_NETO_TOTA_DOCU,
         0,                                                --VAL_PREC_NETO_UNIT_DOCU,
         0,                                                --VAL_PREC_TOTA_TOTA_LOCA,
         0,                                                --VAL_PREC_TOTA_TOTA_DOCU,
         0,                                                --VAL_IMPO_IMPU_UNIT_LOCA,
         0,                                                --VAL_IMPO_IMPU_UNIT_DOCU,
         0,                                                --VAL_IMPO_DESC_TOTA_DOCU,
         0,                                                --VAL_IMPO_IMPU_TOTA_LOCA,
         0,                                                --VAL_IMPO_IMPU_TOTA_DOCU,
         0,                                                --VAL_IMPO_DESC_TOTA_LOCA,
         0,                                                --VAL_PREC_TOTA_UNIT_LOCA,
         0,                                                --VAL_PREC_TOTA_UNIT_DOCU,
         0,                                                --VAL_PREC_CONT_TOTA_LOCA,
         0,                                                --VAL_PREC_CATA_TOTA_LOCA,
         0,                                                --VAL_PREC_CATA_TOTA_DOCU,
         0,                                                --VAL_PREC_CONT_TOTA_DOCU,
         NULL,                                         --VAL_PORC_DESC,
         0,                                                --VAL_PREC_CATA_TOTA_LOCA_UNID,
         1,                                                 --NUM_UNID_DEMA_REAL,
         1,                                                  --NUM_UNID_COMPR,
         NULL,                                          --NUM_UNID_CAMB,
         NULL,                                          --NUM_UNID_VENT,
         NULL,                                          --NUM_UNID_ATEN,
         NULL,                                          --VAL_CODI_VENT_FICT,
         0,                                                 --VAL_PREC_FACT_TOTA_LOCA,
         0,                                                 --VAL_PREC_FACT_TOTA_DOCU,
         0,                                                 --VAL_PREC_SIN_IMPU_TOTA_LOCA,
         0,                                                 --VAL_PREC_NETO_TOTA_LOCA,
         NULL,                                          --OFDE_OID_DETA_OFER,
         lv_oid_esta_posi,                        --ESPO_OID_ESTA_POSI,
         lv_oid_subt_posi,                        --STPO_OID_SUBT_POSI,
         NULL,                                          --IND_RECU_OBLI,
         NULL,                                          --VAL_CODI_VENT,
         NULL,                                          --SOPO_OID_SOLI_POSI,
         0,                                                 --IND_NO_IMPR,
         NULL,                                          --IND_DENT_FUER_CAJA_BOLS,
         NULL,                                          --VAL_CATA,
         NULL,                                          --NUM_PAGI_CATA,
         NULL,                                          --NUM_CONS,
         NULL,                                          --NUM_DOCU_CONT_INTE,
         NULL,                                          --VAL_EJER_DOCU_CONT_INTE,
         NULL,                                          --VAL_IMPO_DES_SIN_IMP_UNIT_LOCA,
         NULL,                                          --VAL_IMPO_DES_SIN_IMP_UNIT_DOCU,
         NULL,                                          --VAL_IMPO_DES_SIN_IMP_TOTA,
         NULL,                                          --VAL_IMPO_DES_SIN_IMP_TOTA_DOCU,
         NULL,                                           --VAL_OBSE,
         NULL,                                           --VAL_PREC_PUBL_UNIT_LOCA
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL
        FROM ccc_carga_cadir_docle_masiv det
        WHERE det.num_lote = p_num_lote;


      TYPE t_tab_ped_solic_cabe                      IS TABLE OF ped_solic_cabec%ROWTYPE;
      TYPE t_tab_ped_solic_posi                       IS TABLE OF ped_solic_posic%ROWTYPE;
      TYPE t_tab_oid_soli_cabe                         IS TABLE OF ped_solic_cabec.oid_soli_cabe%TYPE;
      TYPE t_tab_oid_clie                                  IS TABLE OF mae_clien.oid_clie%TYPE;
      TYPE t_tab_imp_movi                                IS TABLE OF ped_solic_cabec.val_tota_paga_loca%TYPE;
      TYPE t_tab_soca_oid_docu_refe             IS TABLE OF ped_solic_cabec.soca_oid_docu_refe%TYPE;

      lv_cod_soci                                  seg_socie.cod_soci%TYPE;
      lv_tab_ped_soli_cabe                               t_tab_ped_solic_cabe;
      lv_tab_ped_soli_posi                                 t_tab_ped_solic_posi;
      lv_tab_oid_soli_cabe                                 t_tab_oid_soli_cabe;
      lv_tab_oid_clie                                          t_tab_oid_clie;
      lv_tab_imp_movi                                        t_tab_imp_movi;
      lv_tab_soca_oid_docu_refe                     t_tab_soca_oid_docu_refe;

   BEGIN

      /* inicializa variables globales  para registro de log  */
      gv_log_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
      lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');
      gv_log_user     := USER;
      gv_log_cod_modu := gc_cod_modu;
      gv_log_cod_proc := gc_cod_proc_soli_carg_flex;

      FIN_PKG_GENER.FIN_PR_REGIS_PROCE_LOG(gv_log_cod_pais,gc_cod_modu,gc_cod_proc_soli_carg_flex,gc_cod_usua,lv_id_proc_ejec,lv_cod_erro);

      SELECT fp.oid_form_pago
      INTO lv_oid_form_pago_carg_flex
      FROM bel_forma_pago fp
      WHERE fp.cod_form_pago = gc_cod_form_pago_carg_flex;

      gv_des_log:='Inicio CCC_PR_GENER_SOLIC_CARGO_FLEXI';
      FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(gv_log_cod_pais,gc_cod_modu,gc_cod_proc_soli_carg_flex,lv_id_proc_ejec,gv_des_log);

      SELECT cp.oid_peri, f.fec_proc
      INTO lv_oid_peri, lv_fec_fact
      FROM bas_ctrl_fact f,
           cra_perio cp,
           seg_perio_corpo spc
      WHERE f.ind_camp_act = 1
      AND f.sta_camp = 0
      AND f.cod_peri = spc.cod_peri
      AND spc.oid_peri = cp.peri_oid_peri;


      SELECT
          b.oid_tipo_soli_pais,
          b.almc_oid_alma,
          b.fopa_oid_form_pago,
          b.tsol_oid_tipo_cons,
          b.tido_oid_tipo_docu,
          b.cact_oid_acti,
          a.sbac_oid_sbac,
          b.soci_oid_soci,
          b.mone_oid_mone,
          a.clso_oid_clas_soli,
          b.pais_oid_pais,
          b.val_glos,
          g.tpos_oid_tipo_posi,
          g.stpo_oid_subt_posi,
          g.prod_oid_prod,
          b.ind_pedi_prue,
          b.ind_perm_unio,
          a.ticl_oid_tipo_clie,
          a.ind_soli_nega
       INTO
          lv_oid_tipo_soli_pais,
          lv_oid_alma,
          lv_oid_form_pago,
          lv_oid_tipo_cons,
          lv_oid_tipo_docu,
          lv_oid_acti,
          lv_oid_sbac,
          lv_oid_soci,
          lv_oid_mone,
          lv_oid_clas_soli,
          lv_oid_pais,
          lv_val_glos,
          lv_oid_tipo_posi,
          lv_oid_subt_posi,
          lv_oid_prod,
          lv_ind_pedi_prue,
          lv_ind_perm_unio,
          lv_oid_tipo_clie,
          lv_ind_tipo_nega
       FROM
             ped_tipo_solic a,
             ped_tipo_solic_pais b,
             ped_tipo_solic_proce g
          WHERE b.tsol_oid_tipo_soli=a.oid_tipo_soli
          AND a.cod_tipo_soli= gc_cod_tipo_soli_carg_flex
          AND g.OPER_OID_OPER = 44
          AND  g.TSPA_OID_TIPO_SOLI_PAIS=b.OID_TIPO_SOLI_PAIS;

      -- Obteniendo el estado de la posicion
      SELECT pep.oid_esta_posi
      INTO lv_oid_esta_posi
      FROM ped_estad_posic pep
      WHERE pep.cod_esta_posi='CO';

      SELECT
         DECODE(zz.OID_TASA_IMPU,NULL,z.OID_TASA_IMPU,zz.OID_TASA_IMPU) ,
         DECODE(zz.VAL_TASA_IMPU,NULL,z.VAL_TASA_IMPU,zz.VAL_TASA_IMPU)
         INTO lv_oid_tasa, lv_tasa
      FROM
           ped_impue_gener v,
           ped_tasa_impue z,
           ped_impue_negoc x,
           mae_produ y,
           ped_tasa_impue zz
      WHERE v.pais_oid_pais= lv_oid_pais
      AND v.sbac_oid_sbac= lv_oid_sbac
      AND v.taim_oid_tasa_impu=z.oid_tasa_impu
      AND x.nego_oid_nego(+)=y.nego_oid_nego
      AND x.taim_oid_tasa_impu=zz.oid_tasa_impu(+)
      AND y.oid_prod= lv_oid_prod;

      IF lv_ind_tipo_nega=1 THEN
        lv_ind_sign:=-1;
      ELSE
         lv_ind_sign:=1;
      END IF;

      -- Obtener la cantidad de Cargos Masivos a procesar
      SELECT COUNT(*)
      INTO lv_cant_carg_masi
      FROM ccc_carga_cadir_docle_masiv;

      gv_des_log:='Cantidad de CAD a Procesar : ' || lv_cant_carg_masi;
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gc_cod_proc_soli_carg_flex,
                                                 gv_cod_proc_ejec, gv_des_log);

      lv_num_iden_cuot_inic:=ccc_pkg_gener.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(gv_log_cod_pais,lv_cod_soci,'000',lv_cant_carg_masi);

      gv_des_log:='Inicio : Insertando en PED_SOLIC_CABEC';
      fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gc_cod_proc_soli_carg_flex,
                                                 gv_cod_proc_ejec, gv_des_log);

      OPEN cur_carg_masi;
      LOOP
         FETCH cur_carg_masi BULK COLLECT INTO  lv_tab_ped_soli_cabe LIMIT w_filas;

         IF lv_tab_ped_soli_cabe.COUNT > 0 THEN

            FORALL x IN lv_tab_ped_soli_cabe.FIRST .. lv_tab_ped_soli_cabe.LAST
                INSERT INTO ped_solic_cabec VALUES lv_tab_ped_soli_cabe(x)
                RETURNING oid_soli_cabe ,
                          clie_oid_clie,
                          val_tota_paga_loca,
                          soca_oid_docu_refe
                BULK COLLECT INTO lv_tab_oid_soli_cabe,
                                  lv_tab_oid_clie,
                                  lv_tab_imp_movi,
                                  lv_tab_soca_oid_docu_refe;

             FORALL y IN lv_tab_ped_soli_cabe.FIRST .. lv_tab_ped_soli_cabe.LAST
                UPDATE ccc_carga_cadir_docle_masiv cad
                SET cad.soca_oid_soli_cabe = lv_tab_oid_soli_cabe(y)
                WHERE (SELECT mc.oid_clie
                       FROM mae_clien mc
                       WHERE mc.cod_clie = cad.cod_clie) = lv_tab_oid_clie(y)
                AND cad.imp_movi = lv_tab_imp_movi(y)
                AND cad.num_lote = p_num_lote;

         END IF;
         EXIT WHEN cur_carg_masi%NOTFOUND;
      END LOOP;
      CLOSE cur_carg_masi;

      gv_des_log:='Inicio : Insertando en PED_SOLIC_POSIC';
      fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gc_cod_proc_soli_carg_flex,
                                                 gv_cod_proc_ejec, gv_des_log);

      OPEN cur_carg_masi_deta;
      LOOP
         FETCH cur_carg_masi_deta BULK COLLECT INTO  lv_tab_ped_soli_posi LIMIT w_filas;
            IF lv_tab_ped_soli_posi.COUNT > 0 THEN

               FORALL z IN 1 .. lv_tab_ped_soli_posi.COUNT
                  INSERT INTO ped_solic_posic VALUES lv_tab_ped_soli_posi(z);

            END IF;

         EXIT WHEN cur_carg_masi_deta%NOTFOUND;
      END LOOP;

      CLOSE cur_carg_masi_deta;

      gv_des_log:='Registrando en el Historico de Cargos Procesados';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gc_cod_proc_soli_carg_flex,
                                                 gv_cod_proc_ejec, gv_des_log);

  INSERT INTO ccc_histo_cadir_docle_masiv
   SELECT *
   FROM ccc_carga_cadir_docle_masiv  cdm
   WHERE cdm.num_lote=p_num_lote;

  DELETE FROM ccc_carga_cadir_docle_masiv  cdm
  WHERE cdm.num_lote=p_num_lote;


  gv_des_log:='Fin CCC_PR_CARGA_CARGO_ABONO_MASIV';
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gc_cod_proc_soli_carg_flex,
                                                 gv_cod_proc_ejec, gv_des_log);
  FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gc_cod_proc_soli_carg_flex, gv_cod_proc_ejec, 2);


 EXCEPTION

  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_SOLIC_CARGO_FLEXI;

 PROCEDURE CCC_PR_GENER_CARGO_INTER_FLEXI
 IS

 lv_cod_peri                       seg_perio_corpo.cod_peri%TYPE;
 lv_fec_fact                       bas_ctrl_fact.fec_proc%TYPE;
 lv_oid_peri                       cra_perio.oid_peri%TYPE;
 lv_oid_tipo_soli_pais             ped_tipo_solic_pais.oid_tipo_soli_pais%TYPE;
 lv_num_lote                       fin_inter_ejecu.num_lote%TYPE;
 lv_cod_pais                       seg_pais.cod_pais%TYPE;
 lv_oid_prod_inte_flex             mae_produ.oid_prod%TYPE;
 lv_id_proc_ejec                   fin_proce_ejecu.cod_proc_ejec%TYPE;
 lv_cod_erro                       VARCHAR2(250);

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');

  SELECT mp.oid_prod
  INTO lv_oid_prod_inte_flex
  FROM mae_produ mp
  WHERE mp.cod_sap = gc_cod_prod_carg_inte_flex;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,gc_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio Generacion Cargos por Uso Flexipago';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);

  SELECT bcf.cod_peri , bcf.fec_proc
  INTO lv_cod_peri, lv_fec_fact
  FROM bas_ctrl_fact bcf
  WHERE bcf.ind_camp_act = 1
  AND bcf.sta_camp = 0;

  SELECT cp.oid_peri
  INTO lv_oid_peri
  FROM
   cra_perio cp,
   seg_perio_corpo spc
  WHERE cp.peri_oid_peri = spc.oid_peri
    AND spc.cod_peri = lv_cod_peri;

  SELECT ptsp.oid_tipo_soli_pais
  INTO lv_oid_tipo_soli_pais
  FROM
    ped_tipo_solic pts,
    ped_tipo_solic_pais ptsp
  WHERE pts.oid_tipo_soli = ptsp.tsol_oid_tipo_soli
    AND pts.cod_tipo_soli = 'SOC';

  lv_num_lote := ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;
  gv_des_log:='Numero de Lote : ' || lv_num_lote ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Insertando los cargos x uso flexipago en GP4 ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);

  INSERT INTO ccc_carga_cadir_docle_masiv
   SELECT
    lv_num_lote,     --num_lote  varchar2(25)
    ROWNUM,          --val_fila  number(10)
    a.cod_clie,      --cod_clie  varchar2(15)
    NULL,            --soca_oid_soli_cabe  number(12)
    NULL,            --num_bole_desp_refe  number(12,2)
    NULL,            --soca_oid_docu_refe  number(12)
    NULL,            --cod_unic_vent  varchar2(6)
    lv_oid_prod_inte_flex,           --prod_oid_prod  number(12)
    1,               --val_cant  number(12,2)
    NULL,            --num_docu_lega_refe  number(10)
    NULL,            --oid_tipo_docu  number(12)
    gc_oid_tipo_docu_lega_fact_2,              --oid_tipo_docu_refe  number(12)
    NVL(( SELECT cu.val_cost_util_flex
                             FROM flx_costo_utili_flexi cu
                             WHERE cu.val_impo_fina_desd <= a.imp_pend
                               AND cu.val_impo_fina_hast >= a.imp_pend
                               AND cu.cod_peri_inic <= lv_cod_peri
                               AND NVL(cu.cod_peri_fin,'9999') >= lv_cod_peri),0)    ,-- imp_movi  number(12,2)
    NULL,             -- imp_movi_vali  varchar2(250)
    gc_cod_usua,           -- cod_usua  varchar2(20)
    SYSDATE           -- fec_proc  DATE
  FROM
    (SELECT
      d.cod_clie, SUM(mcc.imp_pend) imp_pend
     FROM
      flx_cuota_flexi_factu_detal d,
      ccc_movim_cuent_corri mcc
     WHERE d.oid_movi_carg_flex = mcc.oid_movi_cc
       AND mcc.imp_pend > 0
       AND d.oid_peri_cuot_flex = lv_oid_peri
       AND EXISTS (
            SELECT NULL
            FROM ped_solic_cabec psc
            WHERE psc.fec_prog_fact = lv_fec_fact
              AND psc.grpr_oid_grup_proc = 3
              AND psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
              AND psc.clie_oid_clie = d.oid_clie )
       AND NOT EXISTS (
           SELECT NULL
           FROM ccc_movim_cuent_corri mcc
           WHERE mcc.subp_oid_subp_crea = 204
             AND mcc.perd_oid_peri = lv_oid_peri
             AND mcc.clie_oid_clie = d.oid_clie )
       GROUP BY d.cod_clie ) a;

  gv_des_log:='Se van a generar ' || SQL%ROWCOUNT || ' cargos x uso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Ejecutando CCC_PR_PROCE_CADIR_DOCLE_MASIV';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);
  CCC_PKG_PROCE.CCC_PR_GENER_SOLIC_CARGO_FLEXI(lv_num_lote);

  -- Generando los Pedidos de Servicio --
  lv_num_lote := ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;
  gv_des_log:='Numero de Lote : ' || lv_num_lote ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Insertando los pedidos de servicio por cargos x uso flexipago en GP4 ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);

  INSERT INTO ccc_carga_cadir_docle_masiv
   SELECT
    lv_num_lote,     --num_lote  varchar2(25)
    ROWNUM,          --val_fila  number(10)
    b.cod_clie,      --cod_clie  varchar2(15)
    NULL,            --soca_oid_soli_cabe  number(12)
    NULL,            --num_bole_desp_refe  number(12,2)
    NULL,            --soca_oid_docu_refe  number(12)
    NULL,            --cod_unic_vent  varchar2(6)
    lv_oid_prod_inte_flex,           --prod_oid_prod  number(12)
    1,               --val_cant  number(12,2)
    NULL,            --num_docu_lega_refe  number(10)
    NULL,            --oid_tipo_docu  number(12)
    gc_oid_tipo_docu_lega_fact_2,              --oid_tipo_docu_refe  number(12)
    NVL(( SELECT cu.val_cost_util_flex
                             FROM flx_costo_utili_flexi cu
                             WHERE cu.val_impo_fina_desd <= b.imp_pend
                               AND cu.val_impo_fina_hast >= b.imp_pend
                               AND cu.cod_peri_inic <= lv_cod_peri
                               AND NVL(cu.cod_peri_fin,'9999') >= lv_cod_peri),0)    ,-- imp_movi  number(12,2)
    NULL,             -- imp_movi_vali  varchar2(250)
    gc_cod_usua,           -- cod_usua  varchar2(20)
    SYSDATE           -- fec_proc  DATE
  FROM
    (SELECT
      d.cod_clie, SUM(mcc.imp_pend) imp_pend
     FROM
      flx_cuota_flexi_factu_detal d,
      ccc_movim_cuent_corri mcc
     WHERE d.oid_movi_carg_flex = mcc.oid_movi_cc
       AND mcc.imp_pend > 0
       AND d.oid_peri_cuot_flex = lv_oid_peri
       AND NOT EXISTS (
            SELECT NULL
            FROM ped_solic_cabec psc
            WHERE psc.fec_prog_fact = lv_fec_fact
              AND psc.grpr_oid_grup_proc = 3
              AND psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
              AND psc.clie_oid_clie = d.oid_clie )
       AND NOT EXISTS (
           SELECT NULL
           FROM ccc_movim_cuent_corri mcc
           WHERE mcc.subp_oid_subp_crea = 204
             AND mcc.perd_oid_peri = lv_oid_peri
             AND mcc.clie_oid_clie = d.oid_clie )
      AND EXISTS (
       SELECT NULL
       FROM
        fac_progr_cierr fpc,
        zon_zona zz,
        zon_secci zs,
        zon_terri_admin zta,
        mae_clien_unida_admin mcua
       WHERE mcua.ztad_oid_terr_admi = zta.oid_terr_admi
         AND mcua.ind_acti = 1
         AND zta.zscc_oid_secc = zs.oid_secc
         AND zs.zzon_oid_zona = zz.oid_zona
         AND fpc.cod_zona = zz.cod_zona
         AND fpc.fec_cier = lv_fec_fact
         AND mcua.clie_oid_clie = d.oid_clie
         AND fpc.est_cier = 'A'
         AND fpc.tip_cier = 'Z')
       GROUP BY d.cod_clie ) b;

  gv_des_log:='Se van a generar ' || SQL%ROWCOUNT || ' pedidos de servicio cargos x uso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);

  gv_des_log:='Ejecutando CCC_PR_PROCE_CADIR_DOCLE_MASIV';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);
  CCC_PKG_PROCE.CCC_PR_GENER_SOLIC_CARGO_FLEXI(lv_num_lote);

  ----------------------------------------
  gv_des_log:='Actualizando los Oids de las Solicitudes Generadas';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);

  UPDATE flx_cuota_flexi_factu_detal fd
  SET fd.oid_soli_cabe_carg_uso = (
            SELECT psc.oid_soli_cabe
            FROM ped_solic_cabec psc
            WHERE psc.clie_oid_clie = fd.oid_clie
              AND psc.grpr_oid_grup_proc = 4
              AND psc.fec_fact = lv_fec_fact
              AND psc.tspa_oid_tipo_soli_pais = gc_oid_tipo_soli_carg_uso
           )
  WHERE EXISTS
    ( SELECT
       NULL
      FROM
       flx_cuota_flexi_factu_detal d,
       ccc_movim_cuent_corri mcc
      WHERE fd.oid_movi_carg_flex = mcc.oid_movi_cc
        AND mcc.imp_pend > 0
        AND d.oid_peri_cuot_flex = lv_oid_peri
        AND d.oid_clie = d.oid_clie);

  gv_des_log:='Fin del Proceso Correctamente';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_flex,lv_id_proc_ejec, 2);

 EXCEPTION

  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_CARGO_INTER_FLEXI;

 PROCEDURE CCC_PR_GENER_PAQUE_DOCUM_FLEXI
 IS

  lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_cod_peri_adic_1               seg_perio_corpo.cod_peri%TYPE;
  lv_cod_peri_adic_2               seg_perio_corpo.cod_peri%TYPE;
  lv_cod_peri_rest_1               seg_perio_corpo.cod_peri%TYPE;
  lv_cod_peri_rest_2               seg_perio_corpo.cod_peri%TYPE;
  lv_fec_fact                      DATE;

 CURSOR c_clie
 IS
  SELECT
   mc.oid_clie,
   sc.val_line_cred val_line_cred_cata,
   lc.val_line_cred_usad val_line_cred_usad_cata,
   sc.val_line_cred - lc.val_line_cred_usad val_line_cred_disp_cata,
   h.ind_cali_comp,
   h.ind_cali_expe_flex
  FROM
   flx_consu_habil_flexi h,
   flx_consu_habil_flexi sc,
   flx_consu_linea_credi lc,
   mae_clien mc
  WHERE mc.cod_clie = h.cod_clie
   AND h.cod_clie = sc.cod_clie
   AND h.cod_clie = lc.cod_clie
   and mc.cod_clie = sc.cod_clie
   AND mc.cod_clie = lc.cod_clie
   AND h.cod_peri_fact = lv_cod_peri
   AND sc.cod_peri_comu = lv_cod_peri
   AND EXISTS (
     SELECT 1
     FROM ped_solic_cabec psc
     where psc.grpr_oid_grup_proc = 5
     AND psc.tspa_oid_tipo_soli_pais = 2001
     AND psc.fec_fact = lv_fec_fact
     AND psc.perd_oid_peri = lv_oid_peri
     AND psc.clie_oid_clie = mc.oid_clie);
 /*
  SELECT
   c.oid_clie,
   c.val_fact_conv,
   c.val_mont_fina,
   h.val_line_cred val_line_cred_cata,
   lc.val_line_cred_usad val_line_cred_usad_cata,
   h.val_line_cred - lc.val_line_cred_usad val_line_cred_disp_cata,
   h.ind_cali_comp,
   h.ind_cali_expe_flex
  FROM
   flx_cuota_flexi_factu_cabec c,
   flx_consu_habil_flexi h,
   flx_consu_linea_credi lc
  WHERE c.cod_clie = h.cod_clie
   AND h.cod_clie = lc.cod_clie
   AND c.cod_clie = lc.cod_clie
   AND h.cod_peri_fact = lv_cod_peri;
   --AND c.cod_peri = lv_cod_peri
   --AND c.fec_fact = lv_fec_fact;
  */

  TYPE t_tab_clie IS TABLE OF c_clie%ROWTYPE;
  lv_tab_clie                      t_tab_clie;

 BEGIN

  DELETE FROM flx_paque_docum;

  SELECT f.cod_peri,f.fec_proc
  INTO lv_cod_peri,lv_fec_fact
  FROM bas_ctrl_fact f
  WHERE f.ind_camp_act = 1
  AND f.sta_camp = 0;

  SELECT cp.oid_peri
  INTO lv_oid_peri
  FROM cra_perio cp,
       seg_perio_corpo spc
  WHERE cp.peri_oid_peri = spc.oid_peri
  AND spc.cod_peri = lv_cod_peri;

  UPDATE ped_solic_posic psp
  SET psp.espo_oid_esta_posi = 2
  WHERE  psp.soca_oid_soli_cabe in (
     SELECT psc.oid_soli_cabe
     FROM ped_solic_cabec psc
     WHERE psc.fec_fact = lv_fec_fact
       AND psc.perd_oid_peri = lv_oid_peri
       AND psc.tspa_oid_tipo_soli_pais = 1507);

  --Proyectando el cargo por uso
  UPDATE flx_cuota_flexi_factu_detal d
  SET d.val_mont_carg_uso = NVL(( SELECT cu.val_cost_util_flex
                             FROM flx_costo_utili_flexi cu
                             WHERE cu.val_impo_fina_desd <= (SELECT mcc.imp_pend
                                                             FROM ccc_movim_cuent_corri mcc
                                                             where mcc.oid_movi_cc = d.oid_movi_carg_flex)
                               AND cu.val_impo_fina_hast >= (SELECT mcc.imp_pend
                                                             FROM ccc_movim_cuent_corri mcc
                                                             where mcc.oid_movi_cc = d.oid_movi_carg_flex)
                               AND cu.cod_peri_inic <= d.cod_peri
                               AND NVL(cu.cod_peri_fin,'9999') >= d.cod_peri),0)
  WHERE d.oid_movi_carg_uso IS NULL;

  --Actualizando las lineas de credito disponible a Consultoras que utilizan por primera vez
  INSERT INTO flx_consu_linea_credi lc
   SELECT c.cod_clie , 0
   FROM flx_cuota_flexi_factu_cabec c
   WHERE NOT EXISTS (
    SELECT 1
    FROM flx_consu_linea_credi lc
    WHERE lc.cod_clie = c.cod_clie);

  --Actualizando las lineas de credito disponible a Consultoras ya existente';
  UPDATE flx_consu_linea_credi lc
  SET lc.val_line_cred_usad = NVL((SELECT SUM(ROUND(mcc.imp_pend/ffc.val_fact_conv,2))
                                  FROM flx_cuota_flexi_factu_detal ffd,
                                       flx_cuota_flexi_factu_cabec ffc,
                                       ccc_movim_cuent_corri mcc
                                  WHERE ffd.oid_movi_carg_flex = mcc.oid_movi_cc
                                  AND ffc.cod_peri = ffd.cod_peri
                                  AND ffc.fec_fact = ffd.fec_fact
                                  AND ffd.cod_clie = ffc.cod_clie
                                  AND ffd.cod_clie = lc.cod_clie),0)
  WHERE EXISTS (
   SELECT 1
   FROM flx_cuota_flexi_factu_cabec c
   WHERE c.cod_clie = lc.cod_clie);

  ----
  lv_cod_peri_rest_1 := FIN_PKG_GENER.FIN_FN_OBTIE_NSGTE_CAMPA(lv_cod_peri,-1);
  lv_cod_peri_rest_2 := FIN_PKG_GENER.FIN_FN_OBTIE_NSGTE_CAMPA(lv_cod_peri,-2);
  lv_cod_peri_adic_1 := FIN_PKG_GENER.FIN_FN_OBTIE_NSGTE_CAMPA(lv_cod_peri,1);
  lv_cod_peri_adic_2 := FIN_PKG_GENER.FIN_FN_OBTIE_NSGTE_CAMPA(lv_cod_peri,2);

  OPEN c_clie;
  LOOP
   FETCH c_clie BULK COLLECT INTO lv_tab_clie LIMIT W_FILAS;
    IF lv_tab_clie.COUNT > 0 THEN

     FOR i IN lv_tab_clie.FIRST .. lv_tab_clie.LAST LOOP

      CCC_PR_GENER_PADOC_FLEXI_CONSU(
         lv_tab_clie(i).oid_clie,
         lv_tab_clie(i).ind_cali_comp,
         lv_tab_clie(i).ind_cali_expe_flex,
         lv_tab_clie(i).val_line_cred_cata,
         lv_tab_clie(i).val_line_cred_usad_cata,
         lv_tab_clie(i).val_line_cred_disp_cata,
         lv_cod_peri,
         lv_cod_peri_adic_1,
         lv_cod_peri_adic_2,
         lv_cod_peri_rest_1,
         lv_cod_peri_rest_2);

     END LOOP;

    END IF;

    EXIT WHEN c_clie%NOTFOUND;
   END LOOP;
  CLOSE c_clie;

 END CCC_PR_GENER_PAQUE_DOCUM_FLEXI;

 PROCEDURE CCC_PR_GENER_PADOC_FLEXI_CONSU(
  p_oid_clie                       IN   NUMBER,
  p_ind_cali_comp                  IN   VARCHAR2,
  p_ind_cali_expe                  IN   NUMBER,
  p_val_line_cred_cata             IN   NUMBER,
  p_val_line_cred_util_cata        IN   NUMBER,
  p_val_line_cred_disp_cata        IN   NUMBER,
  p_cod_peri                       IN   VARCHAR2,
  p_cod_peri_adic_1                IN   VARCHAR2,
  p_cod_peri_adic_2                IN   VARCHAR2,
  p_cod_peri_rest_1                IN   VARCHAR2,
  p_cod_peri_rest_2                IN   VARCHAR2)
 IS

  lv_imp_falt_10                   NUMBER(12,2);
  lv_imp_falt_09                   NUMBER(12,2);
  lv_imp_falt_08                   NUMBER(12,2);
  lv_imp_falt_tota                 NUMBER(12,2);
  lv_imp_21_dias_09                NUMBER(12,2);
  lv_imp_21_dias_08                NUMBER(12,2);
  lv_imp_42_dias_10                NUMBER(12,2);
  lv_imp_42_dias_09                NUMBER(12,2);
  lv_imp_63_dias_10                NUMBER(12,2);
  lv_imp_tota_21_dias              NUMBER(12,2);
  lv_imp_tota_42_dias              NUMBER(12,2);
  lv_imp_tota_63_dias              NUMBER(12,2);
  lv_imp_21_dias_09_cuot           NUMBER(12,2);
  lv_imp_21_dias_08_cuot           NUMBER(12,2);
  lv_imp_42_dias_10_cuot           NUMBER(12,2);
  lv_imp_42_dias_09_cuot           NUMBER(12,2);
  lv_imp_63_dias_10_cuot           NUMBER(12,2);
  lv_imp_tota_21_dias_cuot         NUMBER(12,2);
  lv_imp_tota_42_dias_cuot         NUMBER(12,2);
  lv_imp_tota_63_dias_cuot         NUMBER(12,2);
  lv_cost_util_flex_10             NUMBER(12,2);
  lv_cost_util_flex_09             NUMBER(12,2);
  lv_cost_util_flex_08             NUMBER(12,2);
  lv_imp_uso_flex_tota             NUMBER(12,2);
  lv_imp_flex_pend_tota            NUMBER(12,2);
  lv_imp_flex_sald_ante            NUMBER(12,2);

  lv_img_flex_1                    VARCHAR2(250);
  lv_img_flex_2                    VARCHAR2(250);
  lv_val_inic_cuad                 VARCHAR2(250);
  lv_val_visi_cuad                 VARCHAR2(250);
  lv_mens_cuot_10                  VARCHAR2(250);
  lv_mens_cuot_11                  VARCHAR2(250);
  lv_mens_cuot_12                  VARCHAR2(250);
  lv_mens_camp_10                  VARCHAR2(250);
  lv_mens_camp_09                  VARCHAR2(250);
  lv_mens_camp_08                  VARCHAR2(250);
  lv_mens_soli_10                  VARCHAR2(250);
  lv_mens_soli_09                  VARCHAR2(250);
  lv_mens_soli_08                  VARCHAR2(250);
  lv_mens_paga_10                  VARCHAR2(250);
  lv_mens_paga_09                  VARCHAR2(250);
  lv_mens_paga_08                  VARCHAR2(250);
  lv_mens_falt_10                  VARCHAR2(250);
  lv_mens_falt_09                  VARCHAR2(250);
  lv_mens_falt_08                  VARCHAR2(250);
  lv_mens_falt_tota                VARCHAR2(250);
  lv_mens_21_dias_10               VARCHAR2(250);
  lv_mens_42_dias_10               VARCHAR2(250);
  lv_mens_63_dias_10               VARCHAR2(250);
  lv_mens_21_dias_09               VARCHAR2(250);
  lv_mens_42_dias_09               VARCHAR2(250);
  lv_mens_63_dias_09               VARCHAR2(250);
  lv_mens_21_dias_08               VARCHAR2(250);
  lv_mens_42_dias_08               VARCHAR2(250);
  lv_mens_63_dias_08               VARCHAR2(250);
  lv_mens_tota_21_dias             VARCHAR2(250);
  lv_mens_tota_42_dias             VARCHAR2(250);
  lv_mens_tota_63_dias             VARCHAR2(250);
  lv_mens_uso_flex_10              VARCHAR2(250);
  lv_mens_uso_flex_09              VARCHAR2(250);
  lv_mens_uso_flex_08              VARCHAR2(250);
  lv_mens_uso_flex_tota            VARCHAR2(250);
  lv_val_fina_cuad                 VARCHAR2(250);
  lv_info_flex_ante                VARCHAR2(250);
  lv_info_flex_cata                VARCHAR2(250);
  lv_info_line_flex                VARCHAR2(250);
  lv_mens_cuad_flex                VARCHAR2(4000);
  lv_mens_cali_comp                VARCHAR2(4000);
  lv_mens_flex_cons                VARCHAR2(4000);
  lv_mens_tota                     VARCHAR2(4000);
  lv_inic_secc_flex                VARCHAR2(4000);
  lv_fina_secc_flex                VARCHAR2(4000);
  lv_salt_line_1                   VARCHAR2(250):='<txt/>';
  lv_salt_line_2                   VARCHAR2(250):='<txt/><txt/>';
  lv_salt_line_3                   VARCHAR2(250):='<txt/><txt/><txt/>';
  lv_salt_line_4                   VARCHAR2(250):='<txt/><txt/><txt/><txt/>';
  lv_salt_line_5                   VARCHAR2(250):='<txt/><txt/><txt/><txt/><txt/>';
  lv_cod_clie                      VARCHAR2(15);
  lv_reg_flx_paque_docum           flx_paque_docum%ROWTYPE;

 BEGIN

  lv_inic_secc_flex := '<secciflex>';
  lv_fina_secc_flex := '</secciflex>';
  lv_img_flex_1 := '<img>LogoFlexipago.jpg</img>';
  lv_img_flex_2 := '<img>DetalleFlexipago.jpg</img>';
  lv_val_inic_cuad := '<cuadroflexipago><blqcon>';
  lv_val_visi_cuad := '<cuadro>1</cuadro>';
  lv_val_fina_cuad := '</blqcon></cuadroflexipago>';
  lv_mens_cuot_10 := '<cuota10>' || concat('C',substr(p_cod_peri,5,2)) || '</cuota10>';
  lv_mens_cuot_11 := '<cuota11>' || concat('C',substr(p_cod_peri_adic_1,5,2)) || '</cuota11>';
  lv_mens_cuot_12 := '<cuota12>' || concat('C',substr(p_cod_peri_adic_2,5,2)) || '</cuota12>';
  lv_mens_camp_10 := '<camp10>' || concat('C',substr(p_cod_peri,5,2)) || '</camp10>';
  lv_mens_camp_09 := '<camp09>' || concat('C',substr(p_cod_peri_rest_1,5,2)) || '</camp09>';
  lv_mens_camp_08 := '<camp08>' || concat('C',substr(p_cod_peri_rest_2,5,2)) || '</camp08>';

  SELECT SUM(mcc.imp_pend)
  INTO lv_imp_flex_pend_tota
  FROM
   flx_cuota_flexi_factu_detal d,
   ccc_movim_cuent_corri mcc
  WHERE d.oid_movi_carg_flex = mcc.oid_movi_cc
    AND mcc.clie_oid_clie = p_oid_clie;

  -- Campa?a 10 --
  SELECT
   '<soli10>' || TO_CHAR(SUM(mcc.imp_movi),'9999999999.99') || '</soli10>',
   '<paga10>' || TO_CHAR(SUM(mcc.imp_paga),'9999999999.99') || '</paga10>',
   '<falta10>' ||TO_CHAR(SUM(mcc.imp_pend),'9999999999.99') || '</falta10>',
   '<usoflexi10>' || TO_CHAR(SUM(det.val_mont_carg_uso),'9999999999.99') || '</usoflexi10>',
   SUM(det.val_mont_carg_uso),
   SUM(mcc.imp_pend)
  INTO
   lv_mens_soli_10,
   lv_mens_paga_10,
   lv_mens_falt_10,
   lv_mens_uso_flex_10,
   lv_cost_util_flex_10,
   lv_imp_falt_10
  FROM
   ccc_movim_cuent_corri mcc,
   flx_cuota_flexi_factu_detal det
  WHERE mcc.clie_oid_clie = p_oid_clie
    AND det.oid_movi_carg_flex = mcc.oid_movi_cc
    AND det.cod_peri = p_cod_peri;

  -- Campa?a 09 --
  SELECT
   '<soli09>' || TO_CHAR(SUM(mcc.imp_movi),'9999999999.99') || '</soli09>',
   '<paga09>' || TO_CHAR(SUM(mcc.imp_paga),'9999999999.99') || '</paga09>',
   '<falta09>' || TO_CHAR(SUM(mcc.imp_pend),'9999999999.99') || '</falta09>',
   '<usoflexi09>' || TO_CHAR(SUM(det.val_mont_carg_uso),'9999999999.99') || '</usoflexi09>',
   SUM(det.val_mont_carg_uso),
   SUM(mcc.imp_pend)
  INTO
   lv_mens_soli_09,
   lv_mens_paga_09,
   lv_mens_falt_09,
   lv_mens_uso_flex_09,
   lv_cost_util_flex_09,
   lv_imp_falt_09
  FROM
   ccc_movim_cuent_corri mcc,
   flx_cuota_flexi_factu_detal det
  WHERE mcc.clie_oid_clie = p_oid_clie
    AND det.oid_movi_carg_flex = mcc.oid_movi_cc
    AND det.cod_peri = p_cod_peri_rest_1;

  -- Campa?a 08 --
  SELECT
   '<soli08>' || TO_CHAR(SUM(mcc.imp_movi),'9999999999.99') || '</soli08>',
   '<paga08>' || TO_CHAR(SUM(mcc.imp_paga),'9999999999.99') || '</paga08>',
   '<falta08>' || TO_CHAR(SUM(mcc.imp_pend),'9999999999.99') || '</falta08>',
   '<usoflexi08>' || TO_CHAR(SUM(det.val_mont_carg_uso),'9999999999.99') || '</usoflexi08>',
   SUM(det.val_mont_carg_uso),
   SUM(mcc.imp_pend)
  INTO
   lv_mens_soli_08,
   lv_mens_paga_08,
   lv_mens_falt_08,
   lv_mens_uso_flex_08,
   lv_cost_util_flex_08,
   lv_imp_falt_08
  FROM
   ccc_movim_cuent_corri mcc,
   flx_cuota_flexi_factu_detal det
  WHERE mcc.clie_oid_clie = p_oid_clie
    AND det.oid_movi_carg_flex = mcc.oid_movi_cc
    AND det.cod_peri = p_cod_peri_rest_2;

  lv_imp_falt_tota := NVL(lv_imp_falt_08,0) + NVL(lv_imp_falt_09,0) + NVL(lv_imp_falt_10,0);
  lv_mens_falt_tota := '<faltamonto>' ||  lv_imp_falt_tota || '</faltamonto>';


  -- Inicio 21 Dias --
  SELECT
   SUM(mcc.imp_pend + det.val_mont_carg_uso),
   SUM(mcc.imp_pend)
  INTO
   lv_imp_21_dias_09,
   lv_imp_21_dias_09_cuot
  FROM
   ccc_movim_cuent_corri mcc,
   flx_cuota_flexi_factu_detal det
  WHERE mcc.clie_oid_clie = p_oid_clie
    AND det.oid_movi_carg_flex = mcc.oid_movi_cc
    AND det.val_nume_orde_cuot = 2
    AND det.cod_peri = p_cod_peri_rest_1;

  lv_mens_21_dias_09 := '<c21dias09>' || lv_imp_21_dias_09 || '</c21dias09>';

  SELECT
   SUM(mcc.imp_pend + det.val_mont_carg_uso),
   SUM(mcc.imp_pend)
  INTO
   lv_imp_21_dias_08,
   lv_imp_21_dias_08_cuot
  FROM
   ccc_movim_cuent_corri mcc,
   flx_cuota_flexi_factu_detal det
  WHERE mcc.clie_oid_clie = p_oid_clie
    AND det.oid_movi_carg_flex = mcc.oid_movi_cc
    AND det.val_nume_orde_cuot = 3
    AND det.cod_peri = p_cod_peri_rest_2;

  lv_mens_21_dias_08 := '<c21dias08>' || lv_imp_21_dias_08 || '</c21dias08>';
  lv_mens_21_dias_10 := '<c21dias10></c21dias10>';

  lv_imp_tota_21_dias_cuot := NVL(lv_imp_21_dias_08_cuot,0) + NVL(lv_imp_21_dias_09_cuot,0);
  lv_imp_tota_21_dias := NVL(lv_imp_21_dias_08,0) + NVL(lv_imp_21_dias_09,0);
  lv_mens_tota_21_dias := '<c21diasmonto>' || TO_CHAR(lv_imp_tota_21_dias,'9999999999.99') || '</c21diasmonto>';
  -- Fin 21 Dias --

  -- Inicio 42 Dias --
  SELECT
   SUM(mcc.imp_pend + det.val_mont_carg_uso),
   SUM(mcc.imp_pend)
  INTO
   lv_imp_42_dias_10,
   lv_imp_42_dias_10_cuot
  FROM
   ccc_movim_cuent_corri mcc,
   flx_cuota_flexi_factu_detal det
  WHERE mcc.clie_oid_clie = p_oid_clie
    AND det.oid_movi_carg_flex = mcc.oid_movi_cc
    AND det.val_nume_orde_cuot = 2
    AND det.cod_peri = p_cod_peri;

  lv_mens_42_dias_10:= '<c42dias10>' ||  TO_CHAR(lv_imp_42_dias_10,'9999999999.99') || '</c42dias10>';

  SELECT
   SUM(mcc.imp_pend + det.val_mont_carg_uso),
   SUM(mcc.imp_pend)
  INTO
   lv_imp_42_dias_09,
   lv_imp_42_dias_09_cuot
  FROM
   ccc_movim_cuent_corri mcc,
   flx_cuota_flexi_factu_detal det
  WHERE mcc.clie_oid_clie = p_oid_clie
    AND det.oid_movi_carg_flex = mcc.oid_movi_cc
    AND det.val_nume_orde_cuot = 3
    AND det.cod_peri = p_cod_peri_rest_1;

  lv_mens_42_dias_09 := '<c42dias09>' || lv_imp_42_dias_09 || '</c42dias09>';
  lv_mens_42_dias_08 := '<c42dias08></c42dias08>';

  lv_imp_tota_42_dias_cuot := NVL(lv_imp_42_dias_09_cuot,0) + NVL(lv_imp_42_dias_10_cuot,0);
  lv_imp_tota_42_dias := NVL(lv_imp_42_dias_09,0) + NVL(lv_imp_42_dias_10,0);
  lv_mens_tota_42_dias := '<c42diasmonto>' || TO_CHAR(lv_imp_tota_42_dias,'9999999999.99') || '</c42diasmonto>';
  -- Fin 42 Dias --

  -- Inicio 63 Dias --
  SELECT
   SUM(mcc.imp_pend + det.val_mont_carg_uso),
   SUM(mcc.imp_pend)
  INTO
   lv_imp_63_dias_10,
   lv_imp_63_dias_10_cuot
  FROM
   ccc_movim_cuent_corri mcc,
   flx_cuota_flexi_factu_detal det
  WHERE mcc.clie_oid_clie = p_oid_clie
    AND det.oid_movi_carg_flex = mcc.oid_movi_cc
    AND det.val_nume_orde_cuot = 3
    AND det.cod_peri = p_cod_peri;

  lv_mens_63_dias_10 := '<c63dias10>' || TO_CHAR(lv_imp_63_dias_10,'9999999999.99') || '</c63dias10>';
  lv_mens_63_dias_09 := '<c63dias09></c63dias09>';
  lv_mens_63_dias_08 := '<c63dias08></c63dias08>';

  lv_imp_tota_63_dias_cuot := lv_imp_63_dias_10_cuot;
  lv_imp_tota_63_dias := lv_imp_63_dias_10;
  lv_mens_tota_63_dias := '<c63diasmonto>' || TO_CHAR(lv_imp_tota_63_dias,'9999999999.99') || '</c63diasmonto>';

  lv_imp_uso_flex_tota := NVL(lv_cost_util_flex_08,0) + NVL(lv_cost_util_flex_09,0) + NVL(lv_cost_util_flex_10,0);
  lv_mens_uso_flex_tota := '<usofleximonto>' || TO_CHAR(lv_imp_uso_flex_tota,'9999999999.99') ||  '</usofleximonto>';

  lv_imp_flex_sald_ante := NVL(lv_imp_falt_tota,0) - (NVL(lv_imp_tota_21_dias_cuot,0) + NVL(lv_imp_tota_42_dias_cuot,0) +  NVL(lv_imp_tota_63_dias_cuot,0));

  lv_info_flex_ante := '<txt>Tu saldo flexipago anterior es : ' || TO_CHAR(lv_imp_flex_sald_ante,'9999999999.99') || '</txt>';


  lv_info_flex_cata := '<txt><u><b>Informacion Flexipago Valor Catalogo</b></u></txt>';
  lv_info_line_flex := '<txt> Tu flexipago total <u>' || TO_CHAR(p_val_line_cred_cata,'9999999999.99') ||
                           '</u>           Flexipago utilizado <u>' || TO_CHAR(p_val_line_cred_util_cata,'9999999999.99') ||
                           '</u>     <b> Flexipago disponible </b> <u>' || TO_CHAR(p_val_line_cred_disp_cata,'9999999999.99') || '</u> </txt>';
  -- Fin de 63 Dias --

  lv_mens_cuad_flex := lv_img_flex_1 ||
                      lv_salt_line_1 ||
                      lv_img_flex_2 ||
                      lv_salt_line_4 ||
                      lv_val_inic_cuad ||
                      lv_val_visi_cuad ||
                      lv_mens_cuot_10 ||
                      lv_mens_cuot_11 ||
                      lv_mens_cuot_12 ||
                      lv_mens_camp_10 ||
                      lv_mens_camp_09 ||
                      lv_mens_camp_08 ||
                      lv_mens_soli_10 ||
                      lv_mens_soli_09 ||
                      lv_mens_soli_08 ||
                      lv_mens_paga_10 ||
                      lv_mens_paga_09 ||
                      lv_mens_paga_08 ||
                      lv_mens_falt_10 ||
                      lv_mens_falt_09 ||
                      lv_mens_falt_08 ||
                      lv_mens_falt_tota ||
                      lv_mens_uso_flex_10 ||
                      lv_mens_uso_flex_09 ||
                      lv_mens_uso_flex_08 ||
                      lv_mens_uso_flex_tota ||
                      lv_mens_21_dias_10 ||
                      lv_mens_21_dias_09 ||
                      lv_mens_21_dias_08 ||
                      lv_mens_tota_21_dias ||
                      lv_mens_42_dias_10 ||
                      lv_mens_42_dias_09 ||
                      lv_mens_42_dias_08 ||
                      lv_mens_tota_42_dias ||
                      lv_mens_63_dias_10 ||
                      lv_mens_63_dias_09 ||
                      lv_mens_63_dias_08 ||
                      lv_mens_tota_63_dias ||
                      lv_val_fina_cuad ||
                      lv_info_flex_ante ||
                      lv_info_flex_cata ||
                      lv_info_line_flex ||
                      lv_salt_line_2;

  CASE
   WHEN p_ind_cali_comp = 'E' THEN
     lv_mens_cali_comp := '<img>Comp_Excelente.jpg</img>';

   WHEN p_ind_cali_comp = 'B' THEN
    lv_mens_cali_comp := '<img>Comp_Bueno.jpg</img>';

   WHEN p_ind_cali_comp = 'R' THEN
    lv_mens_cali_comp := '<img>Comp_Regular.jpg</img>';

   WHEN p_ind_cali_comp = 'M' THEN
    lv_mens_cali_comp :='<img>Comp_Malo.jpg</img>';

   WHEN p_ind_cali_comp = '0' THEN
    lv_mens_cali_comp :='<txt></txt>';

  END CASE;

  SELECT '<img>Flexiconsejo.jpg</img>' || lv_salt_line_3 || f.val_text_mens
  INTO lv_mens_flex_cons
  FROM flx_mensa_flexi_conse f
  WHERE f.cod_cali_expe_flex = p_ind_cali_expe
  AND ROWNUM < 2;

  lv_mens_tota := lv_inic_secc_flex ||
                  lv_mens_cuad_flex ||
                  lv_mens_cali_comp ||
                  lv_salt_line_5 ||
                  lv_salt_line_5 ||
                  lv_salt_line_5 ||
                  lv_salt_line_5 ||
                  lv_salt_line_3 ||
                  lv_mens_flex_cons ||
                  lv_salt_line_2 ||
                  lv_fina_secc_flex;

  lv_reg_flx_paque_docum.xml_cons := lv_mens_tota;

  SELECT mc.cod_clie
  INTO lv_cod_clie
  FROM mae_clien mc
  WHERE mc.oid_clie = p_oid_clie;

  lv_reg_flx_paque_docum.cod_clie := lv_cod_clie;

  INSERT INTO flx_paque_docum VALUES lv_reg_flx_paque_docum;

 END CCC_PR_GENER_PADOC_FLEXI_CONSU;

 PROCEDURE CCC_PR_DEPUR_PAGOS_PENDI_REGUL(
  p_dias_anti                      IN   NUMBER,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_cant_regi                     NUMBER(12);
  lv_cod_erro                      VARCHAR2(4000);
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_log_cod_proc                  fin_proce_ejecu.cod_proc%TYPE;

 BEGIN

  lv_log_cod_proc := gc_cod_proc_depu_pago_regu;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu, lv_log_cod_proc ,p_cod_usua, lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio CCC_PR_DEPUR_PAGOS_PENDI_REGUL ' ||
                           ' Dias Antiguedad: ' || p_dias_anti ||
                           ' Cod Usua: ' || p_cod_usua;

  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  gv_des_log:='Inicio Insertando en ccc_gesti_movim_banca';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  SELECT COUNT(*)
  INTO lv_cant_regi
  FROM ccc_movim_banca mb
  WHERE mb.cod_iden_proc = gc_cod_iden_proc_erro
    AND mb.ind_pago_regu = 0
    AND TRUNC(sysdate) - mb.fec_pago > p_dias_anti;

  IF lv_cant_regi > 0 THEN

   gv_des_log:='Se van a depurar ' || lv_cant_regi || ' pagos bancarios';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   INSERT INTO ccc_gesti_movim_banca
    SELECT
     mb.oid_movi_banc,     -- oid_movi_banc  number(12)
     gc_gest_movi_banc_depu,                  -- val_tipo_gest  varchar2(2)
     p_cod_usua,           -- cod_usua_gest  varchar2(20)
     SYSDATE               -- fec_gest  date
    FROM ccc_movim_banca mb
    WHERE mb.cod_iden_proc = gc_cod_iden_proc_erro
      AND mb.ind_pago_regu = 0
      AND TRUNC(sysdate) - mb.fec_pago > p_dias_anti;

   gv_des_log:='Fin Insertando en ccc_gesti_movim_banca - '  || SQL%ROWCOUNT || ' registros ';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   gv_des_log:='Actualizando en ccc_movim_banca';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   UPDATE ccc_movim_banca mb
   SET mb.ind_elim = 1
   WHERE mb.cod_iden_proc = 'I'
     AND mb.ind_pago_regu = 0
     AND TRUNC(sysdate) - mb.fec_pago > p_dias_anti;

   gv_des_log:='Fin Eliminando en ccc_movim_banca_elimi - '  || SQL%ROWCOUNT || ' registros ';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   gv_des_log:='El proceso termino correctamente';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 2);

  ELSE

   gv_des_log:='No hay pagos por regularizar para depurar';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   gv_des_log:='El proceso termino correctamente';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 2);

  END IF;

 EXCEPTION

  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   gv_des_log:=' *** Error ' || ln_sqlcode || ' ' ||SQLERRM  ||
               ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
               ' en el programa ' || gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 9);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_DEPUR_PAGOS_PENDI_REGUL;

 PROCEDURE CCC_PR_DEPUR_SALDO_MENOR_DEUDO(
  p_cod_peri                       IN   seg_perio_corpo.cod_peri%TYPE,
  p_imp_hast                       IN   NUMBER,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_tipo_abon_subp            ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;
  lv_fec_fact                      bas_ctrl_fact.fec_proc%TYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_num_lote                      VARCHAR2(15);
  lv_cant_abon                     NUMBER(12):=0;

  lv_cod_erro                      VARCHAR2(4000);
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_log_cod_proc                  fin_proce_ejecu.cod_proc%TYPE;

 BEGIN

  lv_log_cod_proc := gc_cod_proc_depu_sald_deud;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu, lv_log_cod_proc ,p_cod_usua, lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio CCC_PR_DEPUR_SALDO_MENOR_ACREE ' ||
                           ' Cod Peri: ' || p_imp_hast ||
                           ' Imp Hast: ' || p_cod_peri ||
                           ' Cod Usua: ' || p_cod_usua;

  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');

  gv_des_log:='Actualizando los saldos en el maestro de consultoras';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  --CCC_PR_ACTUA_SALDO_MAEST_CONSU;
  --CCC_PR_VALID_GENER_CUENT_CORRI(p_cod_usua);

  gv_des_log:='Limpiando la tabla de Cargos y Abonos Masivos ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  DELETE FROM ccc_carga_cargo_abono_masiv;

  lv_num_lote := ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;

  gv_des_log:='Numero de Lote Obtenido : ' || lv_num_lote;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  gv_des_log:='Insertando en la tabla de Cargos y Abonos Masivos';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  INSERT INTO ccc_carga_cargo_abono_masiv
   WITH
    temp1 AS
     (SELECT mcc.clie_oid_clie, SUM(mcc.imp_pend) imp_pend
      FROM
       ccc_movim_cuent_corri mcc,
       cra_perio cp,
       seg_perio_corpo spc
      WHERE mcc.perd_oid_peri = cp.oid_peri
        AND cp.peri_oid_peri = spc.oid_peri
        AND mcc.imp_pend <> 0
        AND spc.cod_peri <= p_cod_peri
      HAVING SUM(mcc.imp_pend) > 0
         AND SUM(mcc.imp_pend)<= p_imp_hast
      GROUP BY mcc.clie_oid_clie)
               SELECT
                  lv_num_lote,
                  ROWNUM,
                  mc.cod_clie,
                  t1.imp_pend,
                  NULL,
                  p_cod_usua,
                  SYSDATE,
                  NULL,
                  NULL,
                  NULL,
                  NULL,
                  'DEPURACION SALDO MENOR DEUDOR'
               FROM
                  temp1 t1,
                  mae_clien mc
               WHERE mc.oid_clie = t1.clie_oid_clie
                 AND mc.sal_deud_ante = t1.imp_pend
                 AND NOT EXISTS
                 (SELECT NULL
                  FROM ccc_clien_casti c
                  WHERE c.oid_clie=mc.oid_clie);

  SELECT COUNT(1)
  INTO lv_cant_abon
  FROM ccc_carga_cargo_abono_masiv cc
  WHERE cc.num_lote = lv_num_lote;

  IF lv_cant_abon > 0 THEN

   FIN_PKG_GENER.FIN_PR_OBTIE_PARAM_FACTU(lv_oid_peri,lv_cod_peri,lv_fec_fact);

   gv_des_log:='Se van a generar ' || lv_cant_abon || ' abonos ' ;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   BEGIN
    SELECT tas.oid_tipo_abon_subp
    INTO lv_oid_tipo_abon_subp
    FROM
     ccc_tipo_abono_subpr tas,
     ccc_proce cp,
     ccc_subpr cs
    WHERE tas.subp_oid_subp = cs.oid_subp
      AND cs.ccpr_oid_proc = cp.oid_proc
      AND cp.cod_proc = gc_cod_proc_abon_dire
      AND cs.cod_subp = gc_cod_subp_abon_sald_meno;

   EXCEPTION
    WHEN no_data_found THEN
     gv_des_log :='No existe parametria para el abono por depuracion saldo menor' ;
     FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
     RAISE e_no_para;

   END;

   INSERT INTO ccc_perfi_clien
    SELECT
     gc_cod_perf_gene,
     mc.oid_clie
    FROM
     ccc_carga_cargo_abono_masiv cc,
     mae_clien mc
    WHERE cc.cod_clie = mc.cod_clie
      AND cc.num_lote = lv_num_lote;

   --gv_des_log:='Archivando los Movimientos de Cuenta Corriente';
   --FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, p_cod_modu, p_cod_proc,
   --                                             gv_cod_proc_ejec, gv_des_log);
   --CCC_PR_ARCHI_CUENT_CORRI_MASIV(gc_cod_perf_gene);

   gv_des_log:='Invocando Procesar Cargos y Abonos Masivos';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   CCC_PR_PROCE_CARGO_ABONO_MASIV(lv_cod_pais,lv_cod_peri,lv_oid_tipo_abon_subp,trunc(SYSDATE),lv_num_lote,p_cod_usua);

   gv_des_log:='El proceso termino correctamente';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 2);

  ELSE

   gv_des_log:='No existen abonos por generar' ;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   gv_des_log:='El proceso termino correctamente';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 2);

  END IF;

 EXCEPTION
  WHEN e_no_para THEN
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 9);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** Error : No existe parametria para el Abono Depuracion Saldo Menor');

  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   gv_des_log:=' *** Error ' || ln_sqlcode || ' ' ||SQLERRM  ||
               ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
               ' en el programa ' || gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 9);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_DEPUR_SALDO_MENOR_DEUDO;

 PROCEDURE CCC_PR_DEPUR_SALDO_MENOR_ACREE(
  p_cod_peri                       IN   seg_perio_corpo.cod_peri%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_tipo_abon_subp            ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;
  lv_fec_fact                      bas_ctrl_fact.fec_proc%TYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_fec_fina_peri                 cra_perio.fec_fina%TYPE;
  lv_num_lote                      VARCHAR2(15);
  lv_cant_carg                     NUMBER(12);

  lv_cod_erro                      VARCHAR2(4000);
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_log_cod_proc                  fin_proce_ejecu.cod_proc%TYPE;

 BEGIN

  lv_log_cod_proc := gc_cod_proc_depu_sald_acre;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,lv_log_cod_proc,p_cod_usua, lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio CCC_PR_DEPUR_SALDO_MENOR_ACREE ' ||
                           ' Cod Peri: ' || p_cod_peri ||
                           ' Cod Usua: ' || p_cod_usua;

  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');

  gv_des_log:='Actualizando los saldos en el maestro de consultoras';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  --CCC_PR_ACTUA_SALDO_MAEST_CONSU;
  --CCC_PR_VALID_GENER_CUENT_CORRI(p_cod_usua);

  gv_des_log:='Limpiando la tabla de Cargos y Abonos Masivos ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  DELETE FROM ccc_carga_cargo_abono_masiv;

  SELECT cp.fec_fina
  INTO lv_fec_fina_peri
  FROM
      cra_perio cp,
      seg_perio_corpo spc
   WHERE spc.oid_peri = cp.peri_oid_peri
   AND spc.cod_peri = p_cod_peri;

  lv_num_lote := ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;
  gv_des_log:='Numero de Lote Obtenido : ' || lv_num_lote;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  gv_des_log:='Insertando en la tabla de Cargos y Abonos Masivos';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  INSERT INTO ccc_carga_cargo_abono_masiv
      WITH
         temp1 AS
            ((SELECT mcc.clie_oid_clie,SUM(mcc.imp_pend) imp_pend
              FROM
                 ccc_movim_cuent_corri mcc,
                 cra_perio cp,
                 seg_perio_corpo spc
              WHERE mcc.perd_oid_peri = cp.oid_peri
                AND cp.peri_oid_peri=spc.oid_peri
                AND mcc.imp_pend < 0
              HAVING MAX(spc.cod_peri)<=  p_cod_peri
                AND SUM(mcc.imp_pend) < 0
              GROUP BY mcc.clie_oid_clie)
              UNION ALL
             (SELECT mb.clie_oid_clie, SUM(mb.imp_sald_pend)*-1 imp_pend
              FROM ccc_movim_banca mb
              WHERE mb.imp_sald_pend > 0
              AND mb.fec_proc <= lv_fec_fina_peri
              AND mb.cod_iden_proc= gc_cod_iden_proc_proc
              GROUP BY  mb.clie_oid_clie)),
          temp2 AS
             (SELECT t1.clie_oid_clie, sum(t1.imp_pend)  imp_pend
              FROM temp1 t1
              GROUP BY t1.clie_oid_clie)
              SELECT
                 lv_num_lote,
                 ROWNUM,
                 mc.cod_clie,
                 t2.imp_pend,
                 NULL,
                 p_cod_usua,
                 SYSDATE,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 'DEPURACION SALDOS A FAVOR'
              FROM
                 temp2 t2,
                 mae_clien mc
              WHERE t2.clie_oid_clie = mc.oid_clie
              AND imp_pend < 0
              AND t2.imp_pend = mc.sal_deud_ante
              AND NOT EXISTS
                 (SELECT NULL
                  FROM ccc_clien_casti c
                  WHERE c.oid_clie=mc.oid_clie);


  gv_des_log:='Fin Insertando en la tabla de Cargos y Abonos Masivos';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  SELECT COUNT(1)
  INTO lv_cant_carg
  FROM ccc_carga_cargo_abono_masiv cc
  WHERE cc.num_lote = lv_num_lote;

  IF lv_cant_carg > 0 THEN

   gv_des_log:='Se van a generar ' || lv_cant_carg || ' cargos ' ;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

      FIN_PKG_GENER.FIN_PR_OBTIE_PARAM_FACTU(lv_oid_peri,lv_cod_peri,lv_fec_fact);

      lv_cod_peri:=Fin_Pkg_Gener.FIN_FN_OBTIE_CODIG_PERIO(lv_oid_peri);

  BEGIN

   SELECT tas.oid_tipo_abon_subp
   INTO lv_oid_tipo_abon_subp
   FROM
     ccc_tipo_abono_subpr tas,
     ccc_proce cp,
     ccc_subpr cs
   WHERE tas.subp_oid_subp = cs.oid_subp
     AND cs.ccpr_oid_proc = cp.oid_proc
     AND cp.cod_proc = gc_cod_proc_carg_dire
     AND cs.cod_subp = gc_cod_subp_cargo_sald_meno;

  EXCEPTION
   WHEN no_data_found THEN
    gv_des_log :='No existe parametria para el abono por depuracion saldo menor' ;
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
    RAISE e_no_para;

  END;

    INSERT INTO ccc_perfi_clien
     SELECT
      gc_cod_perf_gene,
      mc.oid_clie
     FROM
      ccc_carga_cargo_abono_masiv cc,
      mae_clien mc
     WHERE cc.cod_clie = mc.cod_clie
       AND cc.num_lote = lv_num_lote;

       /*
       gv_des_log:='Archivando los Movimientos de Cuenta Corriente';
       FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( p_cod_pais, p_cod_soci, p_cod_modu, p_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);
       CCC_PR_ARCHI_CUENT_CORRI_MASIV(gc_cod_perf_gene);
      */

   gv_des_log:='Invocando Procesar Cargos y Abonos Masivos';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   -- Procesando los cargos y abonos masivos --
   CCC_PR_PROCE_CARGO_ABONO_MASIV(lv_cod_pais,lv_cod_peri,lv_oid_tipo_abon_subp,trunc(SYSDATE),lv_num_lote,p_cod_usua);

   gv_des_log:='El proceso termino correctamente';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 2);

  ELSE

   gv_des_log:='No existen cargos por procesar';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   gv_des_log:='El proceso termino correctamente';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 2);

  END IF;

 EXCEPTION
  WHEN e_no_para THEN
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 9);
   RAISE_APPLICATION_ERROR (-20000,' *** Error : No existe parametria para el Saldo Depuracion Saldo a Favor');

  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   gv_des_log:=' *** Error ' || ln_sqlcode || ' ' ||SQLERRM  ||
               ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
               ' en el programa ' || gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 9);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_DEPUR_SALDO_MENOR_ACREE;

 PROCEDURE CCC_PR_DEPUR_DEUDA_INCOB(
  p_fec_hast                       IN   VARCHAR2,
  p_imp_desd                       IN   NUMBER,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;

  lv_cod_erro                      VARCHAR2(4000);
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_log_cod_proc                  fin_proce_ejecu.cod_proc%TYPE;

 BEGIN

  lv_log_cod_proc := gc_cod_proc_depu_inco;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,lv_log_cod_proc,p_cod_usua, lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio CCC_PR_PROCE_INCOB_CUENT_CORRI ' ||
                           ' Fecha Hasta: ' || p_fec_hast ||
                           ' Importe Desde: ' || p_imp_desd ||
                           ' Cod Usua: ' || p_cod_usua;

  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');

  gv_des_log:='Actualizando los saldos en el maestro de consultoras';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  CCC_PR_ACTUA_SALDO_MAEST_CONSU;

  gv_des_log:='Generando la informacion para el Castigo';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  CCC_PKG_REPOR_PROCE.CCC_PR_DETAL_PREVI_CONSU_INCOB(p_fec_hast);
  CCC_PKG_REPOR_PROCE.CCC_PR_DETAL_PREVI_MOVIM_INCOB(p_fec_hast,1);

  gv_des_log:='Eliminado las exclusiones ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  DELETE FROM ccc_repor_previ_consu_incob ci
  WHERE ci.ind_tipo_excl IS NOT NULL;

  DELETE FROM ccc_repor_previ_movim_incob mi
  WHERE mi.ind_tipo_excl IS NOT NULL;

  gv_des_log:='Marcando los saldos menores';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  UPDATE ccc_repor_previ_consu_incob ci
  SET ci.ind_tipo_excl = 1
  WHERE ci.ind_tipo_excl IS NULL
    AND ci.imp_deud_pend < p_imp_desd;

  UPDATE ccc_repor_previ_movim_incob mi
  SET mi.ind_tipo_excl = 1
  WHERE EXISTS (
   SELECT NULL
   FROM ccc_repor_previ_consu_incob ci
   WHERE ci.ind_tipo_excl = 1
     AND ci.oid_clie = mi.oid_clie);

   -- Registrando las castigadas --
   INSERT INTO ccc_clien_casti
    SELECT
     lv_cod_pais,--cod_pais  varchar2(3)
       lv_cod_soci,--cod_soci  varchar2(4)
       mc.oid_clie,--oid_clie  number(12)
       mc.cod_clie,--cod_clie  varchar2(15)
       mc.cod_digi_ctrl, --cod_digi_ctrl  varchar2(3)
       mc.val_nom1,--val_nom1  varchar2(25)
       mc.val_nom2,--val_nom2  varchar2(25)
       mc.val_ape1,--val_ape1  varchar2(25)
       mc.val_ape2,--val_ape2  varchar2(25)
       NULL,--cod_tipo_docu  varchar2(2)
       NULL,--num_docu_iden  varchar2(30)
       NULL,--val_dept  varchar2(100)
       NULL,--val_prov  varchar2(100)
       NULL,--val_dist  varchar2(100)
       NULL,--val_dire  varchar2(250)
       NULL,--val_refe  varchar2(250)
       ci.imp_deud_pend,--imp_deud_cast  number(12,2)
       ci.imp_deud_pend,--imp_deud_actu  number(12,2)
       NULL,--fec_deud  date
       SYSDATE,--fec_cast  date
       p_cod_usua,--usu_crea  varchar2(20)
       SYSDATE,--fec_crea  date
       p_cod_usua,--usu_modi  varchar2(20)
       SYSDATE--fec_modi  DATE
     FROM
        ccc_repor_previ_consu_incob ci,
        mae_clien mc
      WHERE ci.oid_clie = mc.oid_clie
       AND ci.ind_tipo_excl IS NULL;

   -- Regsitrando las castigadas --
   INSERT INTO ccc_consu_casti_cabec
    SELECT
       lv_cod_soci,  --cod_soci  varchar2(4)
       mc.cod_clie,  --cod_clie  varchar2(15)
       mc.cod_digi_ctrl,--cod_digi_ctrl  varchar2(3)
       mc.val_nom1,       --val_nom1  varchar2(25)
       mc.val_nom2,       --val_nom2  varchar2(25)
       mc.val_ape1,       --val_ape1  varchar2(25)
       mc.val_ape2,       --val_ape2  varchar2(25)
       NULL,              --cod_tipo_docu_iden  varchar2(2)
       ci.num_docu_iden,              --num_docu_iden  varchar2(30)
       ci.cod_regi,              --cod_regi  varchar2(2)
       NULL,              --cod_zona  varchar2(2)
       NULL,              --val_dept  varchar2(100)
       NULL,              --val_prov  varchar2(100)
       NULL,              --val_dist  varchar2(100)
       NULL,              --val_urba  varchar2(100)
       NULL,              --val_dire  varchar2(250)
       NULL,              --val_refe_dire  varchar2(250)
       ci.imp_deud_pend,       --imp_deud_cast  number(12,2)
       ci.imp_deud_pend,        --imp_deud_actu  number(12,2)
       NULL,               --fec_deud  date
       trunc(SYSDATE),      --fec_cast  date
       p_cod_usua,       --usu_crea  varchar2(20)
       SYSDATE,           --fec_crea  date
       p_cod_usua,       --usu_modi  varchar2(20)
       SYSDATE,            --fec_modi  date
       1,                   --ind_acti
       NULL,                -- imp_deud_cast_migr
       0,                    -- imp_paga
       0,                    -- imp_abon_depu_inco
       NULL,                 -- cod_unid_geog
       NULL,                  -- val_barr
       ci.oid_clie,              --oid_clie
       NULL,                     --cod_camp_deud
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL
       FROM
        ccc_repor_previ_consu_incob ci,
        mae_clien mc
      WHERE ci.oid_clie = mc.oid_clie
        AND ci.ind_tipo_excl IS NULL;

   INSERT INTO ccc_consu_casti_detal
    SELECT
     lv_cod_soci, --cod_soci  varchar2(4)
     mi.cod_clie, --cod_clie  varchar2(15)
     NULL, --tipo_docu_cuot  varchar2(6)
     mcc.val_ejer_cuot || mcc.num_iden_cuot,--num_iden_cuot  number(8)
     mcc.num_orde_cuot,--num_orde_cuot  number(2)
     mi.cod_camp_carg,--cod_camp  varchar2(6)
     mi.fec_carg,--fec_docu  date
     mi.fec_carg,--fec_venc  date
     TRUNC(SYSDATE),--fec_cast  date
     mi.fec_ulti_pago,--fec_ulti_pago  date
     mi.imp_deud_orig,--imp_docu  number(12,2)
     mi.imp_deud_pend,--imp_deud_cast  number(12,2)
     mi.imp_deud_pend,--imp_deud_actu  number(12,2)
     p_cod_usua,--usu_crea  varchar2(20)
     SYSDATE,--fec_crea  date
     p_cod_usua,--usu_modi  varchar2(20)
     SYSDATE,--fec_modi  date
     0,--imp_deud_cast_migr  number(12,2)
     0, --imp_deud_paga  number(12,2)
     mi.oid_clie,   --oid_clie
     mcc.oid_movi_cc,  --oid_movi_cc,
     NULL,
     NULL,
     NULL
     FROM
      ccc_repor_previ_movim_incob mi,
      ccc_movim_cuent_corri mcc
     WHERE mi.num_iden_carg = mcc.oid_movi_cc
       AND mi.ind_tipo_excl IS NULL;

  -- Bloqueo Masivo --
  CCC_PR_DEPUR_DEUDA_INCOB_BLOQU(lv_id_proc_ejec,p_cod_usua);

  -- Abonos x Deuda Incobrable --
  CCC_PR_DEPUR_DEUDA_INCOB_ABODI(lv_id_proc_ejec,p_cod_usua);

  -- Abonos x Saldo Menor --
  CCC_PR_DEPUR_DEUDA_INCOB_ABOSM(lv_id_proc_ejec,p_cod_usua);

  gv_des_log:='El proceso termino correctamente';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 2);

 EXCEPTION
  WHEN e_no_para THEN
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 9);
   RAISE_APPLICATION_ERROR (-20000,' *** Error : No existe parametria para el Saldo Depuracion Saldo a Favor');

  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   gv_des_log:=' *** Error ' || ln_sqlcode || ' ' ||SQLERRM  ||
               ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
               ' en el programa ' || gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 9);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_DEPUR_DEUDA_INCOB;

 PROCEDURE CCC_PR_DEPUR_DEUDA_INCOB_BLOQU(
  p_oid_proc_ejec_inco             IN   fin_proce_modul.cod_proc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_tipo_bloq                 mae_tipo_bloqu.oid_tipo_bloq%TYPE;
  lv_oid_acci_bloq                 mae_clien_bloqu.maab_oid_valo_acci_bloq%TYPE;
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_log_cod_proc                  fin_proce_ejecu.cod_proc%TYPE;

 BEGIN

  lv_log_cod_proc := gc_cod_proc_depu_inco;
  lv_id_proc_ejec := p_oid_proc_ejec_inco;

  SELECT mtb.oid_tipo_bloq
  INTO lv_oid_tipo_bloq
  FROM mae_tipo_bloqu mtb
  WHERE mtb.cod_tipo_bloq = 'DI';

  --Obteniendo el Valor Accion de Bloqueo
  SELECT vab.oid_valo_acci_bloq
  INTO lv_oid_acci_bloq
  FROM mae_valor_accio_bloqu vab
  WHERE vab.cod_valo_bloq = 'A';

  gv_des_log:='Realizando el bloqueo masivo';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  INSERT INTO mae_clien_bloqu
   (oid_bloq,
    clie_oid_clie,
    tibq_oid_tipo_bloq,
    fec_bloq,
    val_moti_bloq,
    val_usua_bloq,
    obs_bloq,
    fec_desb,
    val_usua_desb,
    maab_oid_valo_acci_bloq,
    maab_oid_valo_acci_desb,
    obs_desb)
   SELECT
    mae_clbl_seq.NEXTVAL,     -- oid_bloq    number(12)
    mc.oid_clie,            --clie_oid_clie    number(12)
    lv_oid_tipo_bloq,         --tibq_oid_tipo_bloq    number(12)
    TRUNC(SYSDATE),           --fec_bloq    date
    'CASTIGO POR DEUDA INCOBRABLE',          --val_moti_bloq    varchar2(50)
    p_cod_usua,                --val_usua_bloq    varchar2(20)
    'BLOQUEO MASIVO CASTIGO INCOBRABLE' ,                     --obs_bloq    varchar2(100)
    NULL,                     --fec_desb    date
    NULL,                     --val_usua_desb    varchar2(20)
    lv_oid_acci_bloq,    --maab_oid_valo_acci_bloq    number(12)
    NULL,                     --maab_oid_valo_acci_desb    number(12)
    NULL                      --obs_desb    varchar2(100)
   FROM
    ccc_repor_previ_consu_incob ci,
    mae_clien mc
   WHERE mc.cod_clie = ci.cod_clie
     AND ci.ind_tipo_excl IS NULL;

 END CCC_PR_DEPUR_DEUDA_INCOB_BLOQU;

 PROCEDURE CCC_PR_DEPUR_DEUDA_INCOB_ABODI(
  p_oid_proc_ejec_inco             IN   fin_proce_modul.cod_proc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;
  lv_oid_tipo_abon_subp            ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
  lv_num_lote                      VARCHAR2(15);
  lv_cant_abon                     NUMBER(12);
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_log_cod_proc                  fin_proce_ejecu.cod_proc%TYPE;

 BEGIN

  lv_log_cod_proc := gc_cod_proc_depu_inco;
  lv_id_proc_ejec := p_oid_proc_ejec_inco;
  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_oid_peri:= FIN_PKG_GENER.FIN_FN_OBTIE_PERIO_ACTU;
  lv_cod_peri := FIN_PKG_GENER.FIN_FN_OBTIE_CODIG_PERIO(lv_oid_peri);

  gv_des_log:='*** Inicio Generando el Abono Masivo por Deuda Incobrable';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);


  BEGIN

   SELECT tas.oid_tipo_abon_subp
   INTO lv_oid_tipo_abon_subp
   FROM
    ccc_tipo_abono_subpr tas,
    ccc_proce cp,
    ccc_subpr cs
   WHERE tas.subp_oid_subp = cs.oid_subp
     AND cs.ccpr_oid_proc = cp.oid_proc
     AND cp.cod_proc = gc_cod_proc_abon_dire
     AND cs.cod_subp = gc_cod_subp_abon_depu_inco;

  EXCEPTION

   WHEN no_data_found THEN
    gv_des_log :='No existe parametria para el abono por deuda incobrable' ;
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
    RAISE e_no_para;

  END;

  gv_des_log:='     Borrando la entidad de Cargos y Abonos Masivos ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  DELETE FROM ccc_carga_cargo_abono_masiv;

  lv_num_lote := ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;
  gv_des_log:='      Numero de Lote : ' || lv_num_lote;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  gv_des_log:='     Insertando en la tabla de Cargos y Abonos Masivos';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  INSERT INTO ccc_carga_cargo_abono_masiv
   SELECT
    lv_num_lote,
    ROWNUM,
    ci.cod_clie,
    ci.imp_deud_pend,
    NULL,
    p_cod_usua,
    SYSDATE,
    NULL,
    NULL,
    NULL,
    NULL,
    'DEPURACION CASTIGO INCOBRABLE'
   FROM
    ccc_repor_previ_consu_incob ci
   WHERE ci.ind_tipo_excl IS NULL;

  SELECT COUNT(1)
  INTO lv_cant_abon
  FROM ccc_carga_cargo_abono_masiv cc
  WHERE cc.num_lote = lv_num_lote;

  IF lv_cant_abon > 0 THEN

   gv_des_log:='     Se van a generar ' || lv_cant_abon || ' Abonos por Deuda Incobrable' ;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   CCC_PR_PROCE_CARGO_ABONO_MASIV(lv_cod_pais,lv_cod_peri,lv_oid_tipo_abon_subp,trunc(SYSDATE),lv_num_lote,p_cod_usua);

  ELSE

   gv_des_log:='     No hay abonos por generar';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  END IF;

  gv_des_log:='*** Fin Generando el Abono Masivo por Deuda Incobrable';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

 EXCEPTION

  WHEN e_no_para THEN
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 9);
   RAISE_APPLICATION_ERROR (-20000,' *** Error : No existe parametria para el Saldo Depuracion Saldo a Favor');


 END CCC_PR_DEPUR_DEUDA_INCOB_ABODI;

 PROCEDURE CCC_PR_DEPUR_DEUDA_INCOB_ABOSM(
  p_oid_proc_ejec_inco             IN   fin_proce_modul.cod_proc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;
  lv_oid_tipo_abon_subp            ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
  lv_num_lote                      VARCHAR2(15);
  lv_cant_abon                     NUMBER(12);
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_log_cod_proc                  fin_proce_ejecu.cod_proc%TYPE;

 BEGIN

  lv_log_cod_proc := gc_cod_proc_depu_inco;
  lv_id_proc_ejec := p_oid_proc_ejec_inco;
  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_oid_peri:= FIN_PKG_GENER.FIN_FN_OBTIE_PERIO_ACTU;
  lv_cod_peri := FIN_PKG_GENER.FIN_FN_OBTIE_CODIG_PERIO(lv_oid_peri);

  gv_des_log:='*** Inicio Generando el Abono Masivo por Deuda Incobrable';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);


  BEGIN

   SELECT tas.oid_tipo_abon_subp
   INTO lv_oid_tipo_abon_subp
   FROM
    ccc_tipo_abono_subpr tas,
    ccc_proce cp,
    ccc_subpr cs
   WHERE tas.subp_oid_subp = cs.oid_subp
     AND cs.ccpr_oid_proc = cp.oid_proc
     AND cp.cod_proc = gc_cod_proc_abon_dire
     AND cs.cod_subp = gc_cod_subp_abon_sald_meno;

  EXCEPTION

   WHEN no_data_found THEN
    gv_des_log :='No existe parametria para el abono por Saldo Menor' ;
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);
    RAISE e_no_para;

  END;

  gv_des_log:='     Borrando la entidad de Cargos y Abonos Masivos ';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  DELETE FROM ccc_carga_cargo_abono_masiv;

  lv_num_lote := ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;
  gv_des_log:='      Numero de Lote : ' || lv_num_lote;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  gv_des_log:='     Insertando en la tabla de Cargos y Abonos Masivos';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  INSERT INTO ccc_carga_cargo_abono_masiv
   SELECT
    lv_num_lote,
    ROWNUM,
    ci.cod_clie,
    ci.imp_deud_pend,
    NULL,
    p_cod_usua,
    SYSDATE,
    NULL,
    NULL,
    NULL,
    NULL,
    'DEPURACION x SALDO MENOR'
   FROM
    ccc_repor_previ_consu_incob ci
   WHERE ci.ind_tipo_excl IS NULL;

  SELECT COUNT(1)
  INTO lv_cant_abon
  FROM ccc_carga_cargo_abono_masiv cc
  WHERE cc.num_lote = lv_num_lote;

  IF lv_cant_abon > 0 THEN

   gv_des_log:='     Se van a generar ' || lv_cant_abon || ' Abonos por Saldo Menor' ;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

   CCC_PR_PROCE_CARGO_ABONO_MASIV(lv_cod_pais,lv_cod_peri,lv_oid_tipo_abon_subp,trunc(SYSDATE),lv_num_lote,p_cod_usua);

  ELSE

   gv_des_log:='     No hay abonos por generar';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

  END IF;

  gv_des_log:='*** Fin Generando el Abono Masivo por Saldo Menor';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu, lv_log_cod_proc,lv_id_proc_ejec, gv_des_log);

 EXCEPTION

  WHEN e_no_para THEN
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu, lv_log_cod_proc, lv_id_proc_ejec, 9);
   RAISE_APPLICATION_ERROR (-20000,' *** Error : No existe parametria para el Saldo Depuracion Saldo a Favor');


 END CCC_PR_DEPUR_DEUDA_INCOB_ABOSM;
 
 
 PROCEDURE CCC_PR_ACTUA_DEUDA_INCOB
 IS

  lv_imp_deud_tota NUMBER(15,2);

 CURSOR c_cast_dife
 IS
 SELECT 
  a.oid_clie,
  a.imp_deud_actu imp_deud_cabe, 
  b.imp_deud_actu imp_deud_deta
 FROM 
  ccc_consu_casti_cabec a,
  (SELECT 
    d.oid_clie, 
    SUM(d.imp_deud_actu) imp_deud_actu
   FROM ccc_consu_casti_detal d
   GROUP BY d.oid_clie) b
 WHERE a.oid_clie = b.oid_clie
   AND a.imp_deud_actu < b.imp_deud_actu
   AND a.imp_deud_actu >= 0;

 CURSOR c_cast_deta(
  p_oid_clie IN NUMBER)
 IS
 SELECT 
  d.oid_movi_cc, 
  d.oid_clie, 
  d.imp_deud_cast
 FROM ccc_consu_casti_detal d
 WHERE d.oid_clie = p_oid_clie;

 BEGIN
  
  FOR v_cast_dife in c_cast_dife LOOP
 
   IF v_cast_dife.imp_deud_cabe <= 0 THEN
   
    UPDATE ccc_consu_casti_detal d
    SET d.imp_deud_actu = 0
    WHERE d.oid_clie = v_cast_dife.oid_clie;
    
   ELSE
  
    UPDATE ccc_consu_casti_detal d
    SET d.imp_deud_actu = 0
    WHERE d.oid_clie = v_cast_dife.oid_clie;
   
    lv_imp_deud_tota := v_cast_dife.imp_deud_cabe;
     
   FOR v_cast_deta IN c_cast_deta(v_cast_dife.oid_clie) LOOP
   
    IF lv_imp_deud_tota >= v_cast_deta.imp_deud_cast THEN    
    
     UPDATE ccc_consu_casti_detal d
     SET d.imp_deud_actu = d.imp_deud_cast
     WHERE d.oid_clie = v_cast_deta.oid_clie
       AND d.oid_movi_cc =v_cast_deta.oid_movi_cc;
     
     lv_imp_deud_tota := lv_imp_deud_tota - v_cast_deta.imp_deud_cast;
    
    ELSE
       
     UPDATE ccc_consu_casti_detal d
     SET d.imp_deud_actu = lv_imp_deud_tota
     WHERE d.oid_clie = v_cast_deta.oid_clie
       AND d.oid_movi_cc =v_cast_deta.oid_movi_cc;
     
     lv_imp_deud_tota := 0;
     
    END IF;
       
   END LOOP;
   
  END IF;
  
 END LOOP;
 
 END CCC_PR_ACTUA_DEUDA_INCOB;

 PROCEDURE CCC_PR_CONDO_DEUDA_CASTI(
  p_oid_cons_cast_cabe           IN   NUMBER)
 IS
 BEGIN
 
  UPDATE ccc_consu_casti_cabec c
  SET c.ind_acti = 7 
  WHERE c.oid_cons_cast_cabe = p_oid_cons_cast_cabe;
     
 END CCC_PR_CONDO_DEUDA_CASTI;
 
 PROCEDURE CCC_PR_ARCHI_RETIR_SINDE
 IS

  lv_cant_depu_reti_sind         NUMBER(12);

  CURSOR c_clie
  IS
   SELECT mc.cod_clie,mc.oid_clie
   FROM
    mae_clien mc,
    mae_clien_datos_adici mcda
   WHERE mc.sal_deud_ante = 0
     AND mc.oid_clie = mcda.clie_oid_clie
     AND mcda.esta_oid_esta_clie = 7
     AND NOT EXISTS (
           SELECT NULL
           FROM ccc_consu_casti_cabec c
           WHERE c.oid_clie = mc.oid_clie)
     AND NOT EXISTS (
           SELECT NULL
           FROM ccc_clien_casti c
           WHERE c.oid_clie = mc.oid_clie)
     AND EXISTS (
           SELECT NULL
           FROM ccc_movim_cuent_corri mcc
           WHERE mcc.clie_oid_clie = mc.oid_clie)
     AND NOT EXISTS (
           SELECT NULL
           FROM ccc_movim_banca mb
           WHERE mb.fec_proc > TRUNC(SYSDATE - 180)
             AND mb.clie_oid_clie = mc.oid_clie)
     AND NOT EXISTS (
           SELECT NULL
           FROM ccc_movim_cuent_corri a
           WHERE a.fec_docu > TRUNC(SYSDATE - 180)
             AND a.clie_oid_clie = mc.oid_clie);

 BEGIN

  lv_cant_depu_reti_sind := TO_NUMBER(CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CantArchiRetiSD'));

  IF lv_cant_depu_reti_sind IS NOT NULL THEN

   FOR v_clie IN c_clie LOOP

    CCC_PKG_PROCE.CCC_PR_ARCHI_CUENT_CORRI_INDIV(v_clie.oid_clie);
    COMMIT;

   END LOOP;

  END IF;

 END CCC_PR_ARCHI_RETIR_SINDE;

 PROCEDURE CCC_PR_ARCHI_CUENT_CORRI_INDIV(
  p_oid_clie                   IN   mae_clien.oid_clie%TYPE)
 IS
 BEGIN

  INSERT INTO ccc_detal_cargo_histo hdet
   SELECT det.*
   FROM ccc_detal_cargo_abono_direc det
   WHERE det.clie_oid_clie = p_oid_clie;

  INSERT INTO ccc_movim_banca_histo hban
   SELECT ban.*
   FROM ccc_movim_banca ban
   WHERE ban.clie_oid_clie = p_oid_clie;

  INSERT INTO ccc_histo_movim_histo hhis
   SELECT his.*
   FROM ccc_histo_movim_cc his
   WHERE his.clie_oid_clie = p_oid_clie;

  INSERT INTO ccc_movim_cuent_histo
   SELECT mcc.*
   FROM ccc_movim_cuent_corri mcc
   WHERE mcc.clie_oid_clie = p_oid_clie;

  DELETE FROM ccc_detal_cargo_abono_direc det
  WHERE det.clie_oid_clie = p_oid_clie;

  DELETE FROM ccc_movim_banca mb
  WHERE mb.clie_oid_clie = p_oid_clie;

  DELETE FROM ccc_histo_movim_cc his
  WHERE his.clie_oid_clie = p_oid_clie;

  DELETE FROM ccc_movim_cuent_corri mcc
  WHERE mcc.clie_oid_clie = p_oid_clie;

 END CCC_PR_ARCHI_CUENT_CORRI_INDIV;

 PROCEDURE CCC_PR_ARCHI_MOCCC_CLIEN(
  p_oid_clie                   IN   mae_clien.oid_clie%TYPE,
  p_num_dias_atra              IN   NUMBER)
 IS
 
 BEGIN

  INSERT INTO ccc_detal_cargo_histo hdet
   SELECT det.*
   FROM ccc_detal_cargo_abono_direc det
   WHERE det.clie_oid_clie = p_oid_clie
   AND TRUNC(SYSDATE) - det.fec_movi >= p_num_dias_atra;  

  INSERT INTO ccc_movim_banca_histo hban
   SELECT ban.*
   FROM ccc_movim_banca ban
   WHERE ban.clie_oid_clie = p_oid_clie
     AND TRUNC(SYSDATE) - ban.fec_proc >= p_num_dias_atra; 

  INSERT INTO ccc_histo_movim_histo hhis
   SELECT his.*
   FROM ccc_histo_movim_cc his
   WHERE his.clie_oid_clie = p_oid_clie
     AND TRUNC(SYSDATE) - his.fec_movi >= p_num_dias_atra; 

  INSERT INTO ccc_movim_cuent_histo
   SELECT mcc.*
   FROM ccc_movim_cuent_corri mcc
   WHERE mcc.clie_oid_clie = p_oid_clie
     AND TRUNC(SYSDATE) - mcc.fec_docu >= p_num_dias_atra; 

  DELETE FROM ccc_detal_cargo_abono_direc det
  WHERE det.clie_oid_clie = p_oid_clie
    AND TRUNC(SYSDATE) - det.fec_movi >= p_num_dias_atra;

  DELETE FROM ccc_movim_banca mb
  WHERE mb.clie_oid_clie = p_oid_clie
     AND TRUNC(SYSDATE) - mb.fec_proc >= p_num_dias_atra;
  
  DELETE FROM ccc_histo_movim_cc his
  WHERE his.clie_oid_clie = p_oid_clie
    AND TRUNC(SYSDATE) - his.fec_docu >= p_num_dias_atra;

  DELETE FROM ccc_movim_cuent_corri mcc
  WHERE mcc.clie_oid_clie = p_oid_clie
    AND TRUNC(SYSDATE) - mcc.fec_docu >= p_num_dias_atra;  

 END CCC_PR_ARCHI_MOCCC_CLIEN;
 
 PROCEDURE CCC_PR_ARCHI_CUENT_CORRI_MASIV(
  p_cod_perf                   IN   ccc_perfi_clien.cod_perf%TYPE)
 IS
 BEGIN

    INSERT INTO ccc_detal_cargo_histo hdet
       SELECT det.*
       FROM ccc_detal_cargo_abono_direc det
       WHERE EXISTS (
          SELECT 1
          FROM ccc_perfi_clien pc
          WHERE pc.oid_clie = det.clie_oid_clie
          AND pc.cod_perf = p_cod_perf);


    INSERT INTO ccc_movim_banca_histo hban
       SELECT ban.*
       FROM ccc_movim_banca ban
       WHERE EXISTS (
          SELECT 1
          FROM ccc_perfi_clien pc
          WHERE pc.oid_clie = ban.clie_oid_clie
          AND pc.cod_perf = p_cod_perf);

    INSERT INTO ccc_histo_movim_histo hhis
       SELECT his.*
       FROM ccc_histo_movim_cc his
       WHERE EXISTS (
          SELECT 1
          FROM ccc_perfi_clien pc
          WHERE pc.oid_clie = his.clie_oid_clie
          AND pc.cod_perf = p_cod_perf);

    INSERT INTO ccc_movim_cuent_histo
       SELECT mcc.*
       FROM ccc_movim_cuent_corri mcc
       WHERE EXISTS (
          SELECT 1
          FROM ccc_perfi_clien pc
          WHERE pc.oid_clie = mcc.clie_oid_clie
          AND pc.cod_perf = p_cod_perf);

    DELETE FROM ccc_detal_cargo_abono_direc det
    WHERE EXISTS (
       SELECT 1
       FROM ccc_perfi_clien pc
       WHERE pc.oid_clie = det.clie_oid_clie
         AND pc.cod_perf = p_cod_perf);

    DELETE FROM ccc_movim_banca mb
    WHERE EXISTS (
       SELECT 1
       FROM ccc_perfi_clien pc
       WHERE pc.oid_clie = mb.clie_oid_clie
         AND pc.cod_perf = p_cod_perf);

    DELETE FROM ccc_histo_movim_cc his
    WHERE EXISTS (
       SELECT 1
       FROM ccc_perfi_clien pc
       WHERE pc.oid_clie = his.clie_oid_clie
         AND pc.cod_perf = p_cod_perf);


    DELETE FROM ccc_movim_cuent_corri mcc
    WHERE EXISTS (
       SELECT 1
       FROM ccc_perfi_clien pc
       WHERE pc.oid_clie = mcc.clie_oid_clie
       AND pc.cod_perf = p_cod_perf);


 END CCC_PR_ARCHI_CUENT_CORRI_MASIV;


 PROCEDURE CCC_PR_ACTUA_SALDO_MAEST_CONSU
 IS
 BEGIN

  UPDATE mae_clien mc
  SET mc.sal_deud_ante = ccc_pkg_gener.ccc_fn_obtie_saldo_total(mc.oid_clie)
  WHERE mc.sal_deud_ante IS NULL;
  
  DELETE FROM ccc_perfi_clien pc
  WHERE pc.cod_perf = gc_cod_perf_gene;

  INSERT INTO ccc_perfi_clien
      WITH temp1 AS
         ((SELECT
           mcc.clie_oid_clie,
           SUM(mcc.imp_pend) imp_pend
        FROM
           ccc_movim_cuent_corri mcc
        WHERE mcc.imp_pend <> 0
        GROUP BY mcc.clie_oid_clie)
        UNION ALL
        (SELECT
           mb.clie_oid_clie,
           SUM(mb.imp_sald_pend)*-1 imp_pend
         FROM ccc_movim_banca mb
         WHERE mb.imp_sald_pend > 0
         AND mb.cod_iden_proc= gc_cod_iden_proc_proc
         GROUP BY  mb.clie_oid_clie)),
      temp2 AS (
         SELECT
            clie_oid_clie,
            SUM(imp_pend) imp_pend
         FROM temp1
         GROUP BY clie_oid_clie)
      SELECT
         gc_cod_perf_gene,
         mc.oid_clie
      FROM
         mae_clien mc,
         temp2 t2
      WHERE mc.oid_clie = t2.clie_oid_clie
      AND NVL(mc.sal_deud_ante,999999999) <> imp_pend;

   UPDATE mae_clien cli
   SET  cli.sal_deud_ante = ccc_pkg_gener.ccc_fn_obtie_saldo_total(cli.oid_clie)
   WHERE EXISTS (
      SELECT NULL
      FROM ccc_perfi_clien pc
      WHERE pc.oid_clie = cli.oid_clie
      AND pc.cod_perf = gc_cod_perf_gene );

 END CCC_PR_ACTUA_SALDO_MAEST_CONSU;

 PROCEDURE CCC_PR_CRUCE_SALDO_PENDI_APLIC
 IS

 CURSOR c_clie
 IS
  SELECT DISTINCT clie_oid_clie
  FROM
  ((SELECT
     mcc.clie_oid_clie
    FROM ccc_movim_cuent_corri mcc
    WHERE mcc.imp_pend > 0
      AND EXISTS
       (SELECT NULL
        FROM ccc_movim_cuent_corri x
        WHERE x.imp_pend < 0
          AND x.clie_oid_clie = mcc.clie_oid_clie)
    UNION
     SELECT
      mcc.clie_oid_clie
     FROM ccc_movim_cuent_corri mcc
     WHERE mcc.imp_pend > 0
       AND EXISTS
        (SELECT NULL
         FROM ccc_movim_banca mb
         WHERE mb.imp_sald_pend > 0
           AND mb.cod_iden_proc = gc_cod_iden_proc_proc
           AND mb.clie_oid_clie = mcc.clie_oid_clie)));

 BEGIN

  FOR v_clie IN c_clie LOOP

   CCC_PKG_PROCE.CCC_PR_APLIC_ABONO_CARGO_CLIEN(v_clie.clie_oid_clie);

  END LOOP;

 END CCC_PR_CRUCE_SALDO_PENDI_APLIC;

 PROCEDURE CCC_PR_DESTR_CUENT_CORRI_INDIV(
  p_oid_clie                   IN   mae_clien.oid_clie%TYPE,
  p_ind_exce                   IN   NUMBER)
 IS

  lv_imp_sald_inic             NUMBER(12,2);
  lv_imp_sald_fina             NUMBER(12,2);
  lv_reg_erro_aplic_ccc        ccc_error_aplic_abono_cargo%ROWTYPE;

 BEGIN

  lv_imp_sald_inic := ccc_pkg_gener.ccc_fn_obtie_saldo_total(p_oid_clie);

  UPDATE ccc_movim_cuent_corri mcc
  SET
   mcc.imp_paga=0,
   mcc.imp_pend=mcc.imp_movi,
   mcc.imp_pago=0,
   mcc.val_ulti_nume_hist=0,
   mcc.masi_oid_marc_situ= ( SELECT mta.masi_oid_marc_sali
                             FROM
                              ccc_marca_tipo_abono mta,
                              ccc_tipo_abono_subpr tas
                             WHERE tas.oid_tipo_abon_subp = mta.tasp_oid_tipo_abon_subp
                               AND tas.subp_oid_subp = mcc.subp_oid_subp_crea
                               AND tas.tcab_oid_tcab  = mcc.tcab_oid_tcab_crea
                               AND mta.ind_entr_sali = 'S')
  WHERE mcc.clie_oid_clie=p_oid_clie;


  DELETE FROM ccc_histo_movim_cc h
  WHERE h.clie_oid_clie = p_oid_clie;

  DELETE FROM ccc_aplic_abono_cargo a
  WHERE a.clie_oid_clie = p_oid_clie;

  UPDATE ccc_movim_banca mb
  SET
   mb.imp_sald_pend=mb.imp_pago,
   mb.imp_apli = 0,
   mb.val_esta_movi_pend = gc_val_esta_movi_pend
  WHERE mb.clie_oid_clie=p_oid_clie;

  CCC_PR_APLIC_ABONO_CARGO_CLIEN(p_oid_clie);

  lv_imp_sald_fina := ccc_pkg_gener.ccc_fn_obtie_saldo_total(p_oid_clie);

  IF NVL(lv_imp_sald_inic,0) <> NVL(lv_imp_sald_fina,0) THEN

   IF p_ind_exce = 0 THEN
    ROLLBACK;
   END IF;

   lv_reg_erro_aplic_ccc.oid_clie := p_oid_clie;
   lv_reg_erro_aplic_ccc.imp_sald_pend_inic := lv_imp_sald_inic;
   lv_reg_erro_aplic_ccc.imp_sald_pend_final := lv_imp_sald_fina;
   lv_reg_erro_aplic_ccc.fec_apli := SYSDATE;

   INSERT  INTO ccc_error_aplic_abono_cargo VALUES lv_reg_erro_aplic_ccc;

   COMMIT;

  ELSE

   COMMIT;

  END IF;

 EXCEPTION

  WHEN OTHERS THEN
   NULL;

 END CCC_PR_DESTR_CUENT_CORRI_INDIV;

 PROCEDURE CCC_PR_VALID_GENER_CUENT_CORRI
 IS
 BEGIN

    CCC_PR_CRUCE_SALDO_PENDI_APLIC;
    CCC_PR_ACTUA_SALDO_MAEST_CONSU;

 END CCC_PR_VALID_GENER_CUENT_CORRI;

 PROCEDURE CCC_PR_GENER_CARGO_GASTO_ADMIN(
  p_cod_usua                    IN   seg_usuar.use_usua%TYPE   DEFAULT USER)
 IS

  lv_num_lote                      ccc_detal_consu_gasto_admin.num_lote%TYPE;
  lv_cod_camp_inic                 seg_perio_corpo.cod_peri%TYPE;
  lv_val_dias_grac                 NUMBER(12);
  lv_oid_tipo_soli_pais            NUMBER(12);
  lv_oid_tipo_cons_pais            NUMBER(12);
  lv_imp_mont_mini                 NUMBER(12,2);
  lv_imp_gast_admi                 NUMBER(12,2);
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;
  lv_fec_fact                      DATE;
  lv_dias_gram_tram_supe           ccc_param_gasto_admin.val_dias_grac_tram%TYPE;
  lv_cod_tram_supe                 ccc_param_gasto_admin.cod_para%TYPE;


  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_log_cod_proc                  fin_proce_ejecu.cod_proc%TYPE;
  lv_log_user                      fin_proce_ejecu.usu_proc%TYPE;
  lv_cod_erro                      VARCHAR2(4000);

 CURSOR c_tram
 IS
  SELECT
   g.cod_para,
   g.val_dias_grac_tram,
   g.val_impo_mini_deud,
   g.cod_camp_inic_tram,
   g.val_impo_gast_admi
  FROM ccc_param_gasto_admin g
  WHERE g.ind_acti = 1
  ORDER BY g.val_dias_grac_tram DESC;

 BEGIN

  lv_log_user     := USER;
  lv_log_cod_proc := gc_cod_proc_gene_carg_admi;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,lv_log_cod_proc,lv_log_user,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio Proceso Generacion GA';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  FOR v_tram IN c_tram LOOP

   gv_des_log:='Codigo del Tramo ' || v_tram.cod_para;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   gv_des_log:='   Parametros del Tramo';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   lv_val_dias_grac := v_tram.val_dias_grac_tram;
   lv_imp_mont_mini := v_tram.val_impo_mini_deud;
   lv_cod_camp_inic := v_tram.cod_camp_inic_tram;
   lv_imp_gast_admi := v_tram.val_impo_gast_admi;

   gv_des_log:='   Dias de gracia ' || lv_val_dias_grac;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   gv_des_log:='   Importe Minimo de Deuda ' || lv_imp_mont_mini;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   gv_des_log:='   Campa?a Inicio de Deuda ' || lv_cod_camp_inic;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   gv_des_log:='   Importe Gasto Administrativo ' || lv_imp_gast_admi;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   BEGIN

    SELECT MIN(ga.val_dias_grac_tram)
    INTO lv_dias_gram_tram_supe
    FROM ccc_param_gasto_admin ga
    WHERE ga.val_dias_grac_tram > v_tram.val_dias_grac_tram;

    SELECT ga.cod_para
    INTO lv_cod_tram_supe
    FROM ccc_param_gasto_admin ga
    WHERE ga.val_dias_grac_tram = lv_dias_gram_tram_supe;

   EXCEPTION
    WHEN no_data_found THEN
       NULL;
   END;

   gv_des_log:='   Dia de Gracia tramo Superior ' || lv_dias_gram_tram_supe;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   gv_des_log:='   Tramo Superior ' || lv_dias_gram_tram_supe;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   lv_num_lote := ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;

   FIN_PKG_GENER.FIN_PR_OBTIE_PARAM_FACTU(lv_oid_peri,lv_cod_peri,lv_fec_fact);

   gv_des_log:= '   Campa?a Facturacion ' || lv_cod_peri;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   gv_des_log:='   Fecha Facturacion ' || lv_fec_fact;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   gv_des_log:='   Numero de Lote ' || lv_num_lote;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   lv_oid_tipo_soli_pais := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SOLIC_PAIS('SOC');
   lv_oid_tipo_cons_pais := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SOLIC_PAIS('C1');

   INSERT INTO ccc_detal_consu_gasto_admin
    SELECT
     lv_num_lote,
     mcc.clie_oid_clie,
     spc.cod_peri,
     mcc.soca_oid_soli_cabe,
     mcc.tspa_oid_tipo_soli_pais,
     mcc.oid_movi_cc,
     mcc.num_orde_cuot,
     mcc.fec_docu,
     mcc.fec_docu + lv_val_dias_grac fec_limi,
     mcc.imp_movi,
     mcc.imp_paga,
     mcc.imp_pend,
     mcc.val_ulti_nume_hist,
     NULL,
     NULL,
     NULL,
     NULL,
     0,
     SYSDATE,
     GEN_PKG_GENER.gen_fn_clien_datos_oid(mcc.clie_oid_clie,'COD_ZONA'),
     v_tram.cod_para,
     0,
     0
    FROM
     ccc_movim_cuent_corri mcc,
     cra_perio cp,
     seg_perio_corpo spc
    WHERE mcc.perd_oid_peri = cp.oid_peri
      AND cp.peri_oid_peri = spc.oid_peri
      AND mcc.subp_oid_subp_crea = 2001
      AND mcc.tspa_oid_tipo_soli_pais = lv_oid_tipo_cons_pais
      AND mcc.imp_movi > 0
      AND mcc.imp_pend = 0
      AND mcc.fec_ulti_movi - mcc.fec_docu > lv_val_dias_grac
      AND spc.cod_peri >= lv_cod_camp_inic
      AND spc.cod_peri < lv_cod_peri
      AND EXISTS (
        SELECT NULL
        FROM ped_solic_cabec psc
        WHERE psc.clie_oid_clie = mcc.clie_oid_clie
          AND psc.grpr_oid_grup_proc = 3
          AND psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
          AND psc.fec_prog_fact = lv_fec_fact)
      AND NOT EXISTS (
       SELECT NULL
       FROM ccc_detal_consu_gasto_admin dga
       WHERE dga.clie_oid_clie = mcc.clie_oid_clie
         AND dga.oid_movi_cc = mcc.oid_movi_cc
         AND dga.cod_tram_gast_admi = v_tram.cod_para);
         
   
   INSERT INTO ccc_detal_consu_gasto_admin
    SELECT
     lv_num_lote,
     mcc.clie_oid_clie,
     spc.cod_peri,
     mcc.soca_oid_soli_cabe,
     mcc.tspa_oid_tipo_soli_pais,
     mcc.oid_movi_cc,
     mcc.num_orde_cuot,
     mcc.fec_docu,
     mcc.fec_docu + lv_val_dias_grac fec_limi,
     mcc.imp_movi,
     mcc.imp_paga,
     mcc.imp_pend,
     mcc.val_ulti_nume_hist,
     NULL,
     NULL,
     NULL,
     NULL,
     0,
     SYSDATE,
     GEN_PKG_GENER.gen_fn_clien_datos_oid(mcc.clie_oid_clie,'COD_ZONA'),
     v_tram.cod_para,
     0,
     0
    FROM
     ccc_movim_cuent_corri mcc,
     cra_perio cp,
     seg_perio_corpo spc
    WHERE mcc.perd_oid_peri = cp.oid_peri
      AND cp.peri_oid_peri = spc.oid_peri
      AND mcc.subp_oid_subp_crea = 2001
      AND mcc.tspa_oid_tipo_soli_pais = lv_oid_tipo_cons_pais
      AND mcc.imp_movi > 0
      AND mcc.imp_pend > 0      
      AND lv_fec_fact - mcc.fec_docu > lv_val_dias_grac    
      AND spc.cod_peri >= lv_cod_camp_inic
      AND spc.cod_peri < lv_cod_peri
      AND EXISTS (
        SELECT NULL
        FROM ped_solic_cabec psc
        WHERE psc.clie_oid_clie = mcc.clie_oid_clie
          AND psc.grpr_oid_grup_proc = 3
          AND psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
          AND psc.fec_prog_fact = lv_fec_fact)
      AND NOT EXISTS (
       SELECT NULL
       FROM ccc_detal_consu_gasto_admin dga
       WHERE dga.clie_oid_clie = mcc.clie_oid_clie
         AND dga.oid_movi_cc = mcc.oid_movi_cc
         AND dga.cod_tram_gast_admi = v_tram.cod_para);
         
   gv_des_log:='   Posibles pedidos aplicables GA ' || SQL%ROWCOUNT;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   -- Eliminando Pedidos de Oficina --
   DELETE FROM ccc_detal_consu_gasto_admin ga
   WHERE ga.num_lote = lv_num_lote
    AND EXISTS (
      SELECT NULL
      FROM zon_zona zz
      WHERE zz.ind_ofic = 1
      AND zz.cod_zona = ga.cod_zona);

     -- Marcando Cuotas que se han aplicado en etapa superior --
   IF lv_cod_tram_supe IS NOT NULL THEN

    UPDATE ccc_detal_consu_gasto_admin ga
    SET ga.ind_gast_admi = 2
    WHERE ga.num_lote = lv_num_lote
      AND EXISTS (
       SELECT NULL
       FROM ccc_detal_consu_gasto_admin b
       WHERE b.oid_movi_cc =  ga.oid_movi_cc
         AND b.ind_gast_admi = 1
         AND b.cod_tram_gast_admi = lv_cod_tram_supe);

    gv_des_log:='   Eliminado los Pedidos Aplicados en un tramo superior ' || SQL%ROWCOUNT;
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   END IF;

   -- Marcando Cuotas que no han sido generadas por pedidos --
   UPDATE ccc_detal_consu_gasto_admin ga
   SET ga.ind_gast_admi = 3
   WHERE ga.num_lote = lv_num_lote
     AND ga.soca_oid_soli_cabe IS NULL;

   UPDATE ccc_detal_consu_gasto_admin ga
   SET ga.ind_gast_admi = 3
   WHERE ga.num_lote = lv_num_lote
     AND NOT EXISTS (
      SELECT NULL
      FROM ped_solic_cabec a
      WHERE a.soca_oid_soli_cabe = ga.soca_oid_soli_cabe
        AND a.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais);

   -- Marcando Cuotas de los Pedidos --
   UPDATE ccc_detal_consu_gasto_admin ga
   SET ga.ind_gast_admi = 4
   WHERE ga.num_lote = lv_num_lote
     AND EXISTS
       (SELECT NULL
        FROM ccc_detal_consu_gasto_admin b
        WHERE b.num_lote = lv_num_lote
        AND b.soca_oid_soli_cabe = ga.soca_oid_soli_cabe
        HAVING COUNT(*) > 1
        GROUP BY b.soca_oid_soli_cabe)
     AND (ga.soca_oid_soli_cabe, ga.oid_movi_cc) NOT IN
       (SELECT b.soca_oid_soli_cabe,MIN(b.oid_movi_cc)
        FROM ccc_detal_consu_gasto_admin b
        WHERE b.num_lote = lv_num_lote
        HAVING COUNT(*) > 1
        GROUP BY b.soca_oid_soli_cabe);

   gv_des_log:='   Eliminado los Pedidos con Mas de una Cuota ' || SQL%ROWCOUNT;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   -- Elimando Movimientos del Modelo Anterior
   UPDATE ccc_detal_consu_gasto_admin a
   SET a.ind_gast_admi = 5
   WHERE a.num_lote = lv_num_lote
     AND EXISTS (
      SELECT NULL
      FROM ccc_gener_consu_gasto_admin b
      WHERE b.soca_oid_soli_cabe_deud = a.oid_movi_cc
        AND b.ind_gene = 1 );

   gv_des_log:='   Pedidos previamente aplicados un GA en Modelo Anterior ' || SQL%ROWCOUNT;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   UPDATE ccc_detal_consu_gasto_admin a
   SET a.ind_gast_admi = 6
   WHERE a.num_lote = lv_num_lote
     AND EXISTS (
    SELECT NULL
    FROM flx_gener_finan_consu_flexi ff
    WHERE ff.oid_clie = a.clie_oid_clie
      AND ff.cod_peri = a.camp_ulti_pedi
      AND ff.cod_moti_rech IS NULL);

   gv_des_log:='   Pedidos con Financiamiento Flexipago ' || SQL%ROWCOUNT;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   -- Consultoras con dos pedidos --
   UPDATE ccc_detal_consu_gasto_admin a
   SET a.ind_gast_admi = 7
   WHERE a.num_lote = lv_num_lote
     AND a.ind_gast_admi = 0
     AND (a.clie_oid_clie, a.soca_oid_soli_cabe) NOT IN
      (SELECT 
        b.clie_oid_clie, 
        MIN(b.soca_oid_soli_cabe) soca_oid_soli_cabe
       FROM ccc_detal_consu_gasto_admin b
       WHERE (b.clie_oid_clie, b.camp_ulti_pedi) IN 
        (SELECT c.clie_oid_clie, c.camp_ulti_pedi
         FROM ccc_detal_consu_gasto_admin c
         WHERE b.num_lote = lv_num_lote 
           AND b.ind_gast_admi = 0
         HAVING COUNT(*) > 1
         GROUP BY c.clie_oid_clie, c.camp_ulti_pedi)
       GROUP BY b.clie_oid_clie)
     AND EXISTS (
      SELECT NULL
         FROM ccc_detal_consu_gasto_admin d
         WHERE d.num_lote = lv_num_lote 
           AND d.ind_gast_admi = 0
           AND d.clie_oid_clie = a.clie_oid_clie
         HAVING COUNT(*) > 1
         GROUP BY d.clie_oid_clie, d.camp_ulti_pedi);
   
   gv_des_log:='   Consultoras con Facturacion Multiple ' || SQL%ROWCOUNT;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);
   
   UPDATE ccc_detal_consu_gasto_admin a
   SET a.ind_gast_admi = 8
   WHERE a.num_lote = lv_num_lote
     AND a.ind_gast_admi = 0   
     AND EXISTS
        ( SELECT NULL
          FROM
             mae_clien_tipo_subti ,
             mae_clien_clasi,
             mae_tipo_clien,
             mae_subti_clien,
             mae_tipo_clasi_clien,
             mae_clasi,
             ccc_param_excep_clasi_clien
          WHERE mae_clien_tipo_subti.oid_clie_tipo_subt = mae_clien_clasi.ctsu_oid_clie_tipo_subt
               AND mae_tipo_clien.oid_tipo_clie = mae_clien_tipo_subti.ticl_oid_tipo_clie
               AND mae_tipo_clien.oid_tipo_clie = mae_subti_clien.ticl_oid_tipo_clie
               AND mae_subti_clien.oid_subt_clie = mae_clien_tipo_subti.sbti_oid_subt_clie
               AND mae_subti_clien.oid_subt_clie = mae_tipo_clasi_clien.sbti_oid_subt_clie
               AND mae_tipo_clasi_clien.oid_tipo_clas = mae_clien_clasi.tccl_oid_tipo_clasi
               AND mae_tipo_clasi_clien.oid_tipo_clas = mae_clasi.tccl_oid_tipo_clas
               AND mae_clasi.oid_clas = mae_clien_clasi.clas_oid_clas
               AND mae_clien_tipo_subti.ind_ppal = 1
               AND mae_clien_clasi.ind_ppal = 1
               AND ccc_param_excep_clasi_clien.oid_tipo_clie = mae_tipo_clien.oid_tipo_clie
               AND ccc_param_excep_clasi_clien.oid_subt_clie = mae_subti_clien.oid_subt_clie
               AND ccc_param_excep_clasi_clien.oid_tipo_clas_clie = mae_tipo_clasi_clien.oid_tipo_clas
               AND ccc_param_excep_clasi_clien.oid_clas_clie = mae_clasi.oid_clas
               AND ccc_param_excep_clasi_clien.cod_proc = gc_cod_proc_gene_carg_admi 
               AND mae_clien_tipo_subti.clie_oid_clie = a.clie_oid_clie );

   gv_des_log:='   Excepcion por Clasificacion Consultoras : ' || SQL%ROWCOUNT;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);
                                 
   UPDATE ccc_detal_consu_gasto_admin a
   SET a.imp_deud_limi =
          (SELECT NVL(MIN(cad.imp_pend_carg),a.imp_movi)
           FROM ccc_aplic_abono_cargo cad
           WHERE cad.mvcc_oid_movi_carg =  a.oid_movi_cc
            AND cad.fec_apli <= a.fec_limi)
   WHERE a.num_lote = lv_num_lote
   AND a.ind_gast_admi = 0;



  gv_des_log:='   Actualizando la Deuda Limite ' || SQL%ROWCOUNT;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  UPDATE ccc_detal_consu_gasto_admin a
  SET a.ind_gast_admi = 1,
      a.imp_gast_admi_prev = NVL((
                             SELECT SUM(b.imp_gast_admi)
                             FROM ccc_detal_consu_gasto_admin b
                             WHERE b.oid_movi_cc = a.oid_movi_cc
                               AND b.cod_tram_gast_admi <> a.cod_tram_gast_admi),0)
  WHERE a.num_lote = lv_num_lote
    AND a.ind_gast_admi = 0
    AND a.imp_deud_limi > lv_imp_mont_mini;

  gv_des_log:='   Pedidos a aplicar GA ' || SQL%ROWCOUNT;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  UPDATE ccc_detal_consu_gasto_admin gas
  SET
   gas.cod_peri = lv_cod_peri,
   gas.fec_fact = lv_fec_fact,
   gas.imp_gast_admi = lv_imp_gast_admi - NVL(gas.imp_gast_admi_prev,0),
   gas.soca_oid_soli_cabe_deud =
    (SELECT MIN(psc.oid_soli_cabe)
     FROM
      ped_solic_cabec psc
     WHERE psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
       AND psc.fec_prog_fact = lv_fec_fact
       AND psc.grpr_oid_grup_proc = 3
       AND psc.clie_oid_clie = gas.clie_oid_clie)
  WHERE gas.ind_gast_admi = 1
    AND gas.num_lote = lv_num_lote
   AND EXISTS (
     SELECT NULL
     FROM
      ped_solic_cabec psc
     WHERE psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
     AND psc.fec_prog_fact = lv_fec_fact
     AND psc.grpr_oid_grup_proc = 3
     AND psc.clie_oid_clie = gas.clie_oid_clie);

  gv_des_log:='   Calculando el Importe del  GA y Actualizando el Oid_Soli_Cabe ' || SQL%ROWCOUNT;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  UPDATE ped_solic_cabec psc
    SET psc.val_tota_gast_admi =
           (SELECT SUM(gas.imp_gast_admi)
            FROM ccc_detal_consu_gasto_admin gas
         WHERE gas.fec_fact = lv_fec_fact
         AND gas.ind_gast_admi = 1
              AND gas.clie_oid_clie = psc.clie_oid_clie
              AND gas.soca_oid_soli_cabe_deud = psc.oid_soli_cabe)
  WHERE EXISTS (
     SELECT NULL
     FROM ccc_detal_consu_gasto_admin gas
     WHERE gas.fec_fact = lv_fec_fact
       AND gas.ind_gast_admi = 1
       AND gas.clie_oid_clie = psc.clie_oid_clie
       AND gas.soca_oid_soli_cabe_deud = psc.oid_soli_cabe);

  gv_des_log:='   Cargos generados en PED_SOLIC_CABEC';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  END LOOP;

  gv_des_log:='   Fin del Proceso';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);
  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,'2');

 END CCC_PR_GENER_CARGO_GASTO_ADMIN;

 /*
 PROCEDURE CCC_PR_GENER_CARGO_GASTO_ADMIN(
  p_cod_usua                    IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_tipo_soli_pais         ped_tipo_solic_pais.oid_tipo_soli_pais%TYPE;
  lv_num_lote                   ccc_carga_cargo_abono_masiv.num_lote%TYPE;
  lv_cod_pais                   seg_pais.cod_pais%TYPE;
  lv_cod_peri                   seg_perio_corpo.cod_peri%TYPE;
  lv_id_proc_ejec               fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_fec_fact                   ped_solic_cabec.fec_prog_fact%TYPE;
  lv_cod_erro                   VARCHAR2(250);
  lv_cant_gast_admi_gene        NUMBER(12):=0;
  lv_imp_gast_admi              NUMBER(12,2);
  lv_ind_ejec                   NUMBER(1);

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');

  IF lv_cod_pais IS NULL THEN
   RAISE e_codi_pais_null;
  END IF;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,p_cod_usua,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio Generacion Gastos Administrativos: Fecha Facturacion ' || lv_fec_fact ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec,gv_des_log);

  lv_ind_ejec:= ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('IndicadorEjecucionGastoAdministrativo');

  lv_imp_gast_admi := TO_NUMBER(CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('ImporteGastoAdministrativo'),'9999.99');
  gv_des_log := 'Importe Gasto Administrativo ' || lv_imp_gast_admi;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec,gv_des_log);

  IF lv_imp_gast_admi IS NULL OR lv_imp_gast_admi <= 0 THEN

   gv_des_log:='ERROR!!! Importe Gasto Administrativo es Nulo';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec,gv_des_log);
   RAISE e_no_exis_impo_gast_admi;

  END IF;

  lv_num_lote:= ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;

  gv_des_log:='Numero de Lote : ' || lv_num_lote ;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec,gv_des_log);

  BEGIN

   SELECT z.fec_proc, z.cod_peri
   INTO lv_fec_fact , lv_cod_peri
   FROM bas_ctrl_fact z
   WHERE z.ind_camp_act = 1
     AND z.sta_camp = 0;

   gv_des_log:='Campa?a Activa : ' || lv_cod_peri ;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec,gv_des_log);

  EXCEPTION

   WHEN NO_DATA_FOUND THEN

    gv_des_log:='ERROR!!! No Existe Campa?a Activa : ';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec,gv_des_log);
    RAISE e_no_exis_camp_acti;

  END;


  BEGIN

   SELECT ptsp.oid_tipo_soli_pais
   INTO lv_oid_tipo_soli_pais
   FROM
      ped_tipo_solic pts,
      ped_tipo_solic_pais ptsp
   WHERE pts.oid_tipo_soli = ptsp.tsol_oid_tipo_soli
     AND pts.cod_tipo_soli = 'SOC';

  EXCEPTION

   WHEN NO_DATA_FOUND THEN

    gv_des_log:='ERROR!!! No Existe parametria para el Tipo de Solicitud Pais : ';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec,gv_des_log);
    RAISE e_no_para_tipo_soli;

  END;


  SELECT COUNT(1)
  INTO lv_cant_gast_admi_gene
  FROM
     ped_solic_cabec psc
  WHERE psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
    AND psc.fec_prog_fact = lv_fec_fact
    AND psc.grpr_oid_grup_proc = 3
    AND EXISTS (
        SELECT NULL
        FROM ccc_gener_consu_gasto_admin gas
        WHERE gas.oid_clie = psc.clie_oid_clie
        AND gas.ind_gene = 0);


  IF lv_cant_gast_admi_gene > 0 THEN

    UPDATE ccc_gener_consu_gasto_admin gas
    SET gas.num_lote = lv_num_lote,
        gas.fec_gene = SYSDATE,
        gas.ind_gene = 1,
        gas.soca_oid_soli_cabe_gene =
         (SELECT MIN(psc.oid_soli_cabe)
          FROM
           ped_solic_cabec psc
          WHERE psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
            AND psc.fec_prog_fact = lv_fec_fact
            AND psc.grpr_oid_grup_proc = 3
            AND psc.clie_oid_clie = gas.oid_clie)
    WHERE gas.ind_gene = 0
    AND EXISTS (
     SELECT NULL
     FROM
      ped_solic_cabec psc
     WHERE psc.tspa_oid_tipo_soli_pais = lv_oid_tipo_soli_pais
     AND psc.fec_prog_fact = lv_fec_fact
     AND psc.grpr_oid_grup_proc = 3
     AND psc.clie_oid_clie = gas.oid_clie);


    gv_des_log:='Generando el cargo en PED_SOLIC_CABEC ' || lv_cant_gast_admi_gene ;
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec,gv_des_log);

    UPDATE ped_solic_cabec psc
    SET psc.val_tota_gast_admi = lv_imp_gast_admi
    WHERE EXISTS (
     SELECT NULL
     FROM ccc_gener_consu_gasto_admin gas
     WHERE gas.num_lote = lv_num_lote
     AND gas.soca_oid_soli_cabe_gene = psc.oid_soli_cabe);

    gv_des_log:='Cargos generados en PED_SOLIC_CABEC';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec,gv_des_log);

   ELSE

    gv_des_log:='No hay Gastos Administrativos por generar';
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec,gv_des_log);

    FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec, 2);

   END IF;

 EXCEPTION

  WHEN e_codi_pais_null THEN
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_GASTO_ADMIN : Codigo de Pais es Nulo');

  WHEN e_no_exis_impo_gast_admi THEN
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_LOG(lv_cod_pais,gc_cod_modu,gc_cod_proc_gene_carg_admi,lv_id_proc_ejec, 9);
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_GASTO_ADMIN : No Existe Importe para el gasto Administrativ');

  WHEN e_no_exis_camp_acti THEN
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_GASTO_ADMIN : No Existe Campa?a Activa');

  WHEN e_no_para_tipo_soli THEN
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_GASTO_ADMIN : No Existe Parametria para el Tipo de Solicitud SOC');

  WHEN e_no_para_carg_fase THEN
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_GASTO_ADMIN : No Existe Parametria para el Cargo Familia Segura');

  WHEN OTHERS THEN

   ln_sqlcode := SQLCODE;
   ls_sqlerrm := substr(sqlerrm,1,250);
   RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_GENER_CARGO_GASTO_ADMIN: '||ls_sqlerrm);

 END CCC_PR_GENER_CARGO_GASTO_ADMIN;
 */

 PROCEDURE CCC_PR_PROCE_CUENT_CORRI_GP5
 IS

   lv_ind_acti_flex_v2      VARCHAR2(1) := ccc_pkg_gener.ccc_fn_obtie_param_gener('IndicadorActivacionFlexipagoV2');

 BEGIN

  --CCC_PR_PROCE_CONSU_HABIL_FLEXI;
  --CCC_PR_GENER_CUOTA_FLEXI;

  IF lv_ind_acti_flex_v2 = 'S' THEN
   UPDATE ccc_gener_cuota_cuent_corri ccc
   SET ccc.cod_tipo_movi = 'CUF'
   WHERE ccc.oid_form_pago = 1509;
  END IF;

  CCC_PR_GENER_CUENT_CORRI_FACTU;

  /*
  IF lv_ind_acti_flex_v2 = 'S' THEN
   flx_pkg_proce.FLX_PR_PROCE_FLEXI_GP5;
  END IF;
  */

  --CCC_PR_GENER_PAQUE_DOCUM_FLEXI;

 END;

 PROCEDURE CCC_PR_PROCE_CIERR_FACTU
 IS

  lv_sql            VARCHAR2(250);
 CURSOR c_prog
 IS
 SELECT c.des_prog
 FROM ccc_progr_cierr_factu c
 WHERE c.ind_acti = 1
 ORDER BY c.num_orde ASC;

 BEGIN

  FOR v_prog IN c_prog LOOP
   lv_sql := 'BEGIN ' || v_prog.des_prog || '; END;';
   EXECUTE IMMEDIATE lv_sql;
   COMMIT;
  END LOOP;

 END CCC_PR_PROCE_CIERR_FACTU;

 PROCEDURE CCC_PR_PROCE_EXECU_SCRIP
 IS
 
  lv_dire_ensa                   VARCHAR2(50);
  lv_file_name                   VARCHAR2(50):='lia.sql';
 
  lv_file_hand                   UTL_FILE.FILE_TYPE;
  lv_line                        VARCHAR2(4000);  
 
  lv_sql                         VARCHAR2(4000);

  lv_id_proc_ejec                fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_log_cod_proc                fin_proce_ejecu.cod_proc%TYPE;
  lv_log_user                    fin_proce_ejecu.usu_proc%TYPE;
  lv_cod_erro                    VARCHAR2(250);
   
 BEGIN
 
  lv_log_user     := USER;
  lv_log_cod_proc := gc_cod_proc_exec_scri;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,lv_log_cod_proc,lv_log_user,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log:='Inicio Proceso de Ejecucion de Scripts';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  lv_dire_ensa := '/sicc/int/ccc/pe/es/int/in/';
 
  lv_file_hand := UTL_FILE.FOPEN(lv_dire_ensa, lv_file_name, 'r');
 
  LOOP
  
   BEGIN
   
    UTL_FILE.GET_LINE(lv_file_hand, lv_line);
      
    lv_sql := lv_sql || ' ' || lv_line; 
    
    gv_des_log:= lv_line;
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);
    
   EXCEPTION
  
    WHEN NO_DATA_FOUND THEN
     EXIT;
    
   END;

  END LOOP;

  UTL_FILE.FCLOSE(lv_file_hand);
  
  BEGIN 
   
   EXECUTE IMMEDIATE lv_sql;
  
  EXCEPTION
  
   WHEN OTHERS THEN
    
    gv_des_log:='Error Stack !!! ' || DBMS_UTILITY.FORMAT_ERROR_STACK;
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);
    gv_des_log:='Error BackTrace !!! ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);
    gv_des_log:='Error !!! ' || SQLERRM;
    FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log); 
    gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
    RAISE_APPLICATION_ERROR (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );
       
  END;
  
  COMMIT;
   
  gv_des_log:='Fin del Proceso Correctamente';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec, 2);

 END CCC_PR_PROCE_EXECU_SCRIP;

 PROCEDURE CCC_PR_MIGRA_CLIEN_CASTI
 IS
 BEGIN
  
  INSERT INTO ccc_consu_casti_cabec  
   SELECT 
    c.cod_soci, --cod_soci  varchar2(4)
    c.cod_clie, --cod_clie  varchar2(15)
    c.cod_digi_ctrl, --cod_digi_ctrl  varchar2(3)
    c.val_nom1, --val_nom1  varchar2(25)
    c.val_nom2, --val_nom2  varchar2(25)
    c.val_ape1, -- val_ape1  varchar2(25)
    c.val_ape2, --val_ape2  varchar2(25)
    c.cod_tipo_docu, --cod_tipo_docu_iden  varchar2(2)
    FIN_PKG_GENER.FIN_FN_OBTIE_NUMER_DOCUM_IDENT(c.oid_clie), --num_docu_iden  varchar2(30)
    GEN_PKG_GENER.gen_fn_clien_datos_oid(c.oid_clie,'COD_REGI'), --cod_regi  varchar2(2)
    GEN_PKG_GENER.gen_fn_clien_datos_oid(c.oid_clie,'COD_ZONA'), --cod_zona  varchar2(4)
    GEN_PKG_GENER.gen_fn_clien_datos_oid(c.oid_clie,'DES_DPTO'), --val_dept  varchar2(100)
    GEN_PKG_GENER.gen_fn_clien_datos_oid(c.oid_clie,'DES_PROV'), --val_prov  varchar2(100)
    GEN_PKG_GENER.gen_fn_clien_datos_oid(c.oid_clie,'DES_DIST'), --val_dist  varchar2(100)
    GEN_PKG_GENER.gen_fn_clien_datos_oid(c.oid_clie,'DES_URBA'), --val_urba  varchar2(100)
    FIN_PKG_GENER.FIN_FN_OBTIE_DIREC_CLIEN(c.oid_clie), --val_dire  varchar2(250)
    FIN_PKG_GENER.FIN_FN_OBTIE_DIREC_CLIEN_REFER(c.oid_clie),--val_refe_dire  varchar2(250)
    c.imp_deud_cast, --imp_deud_cast  number(12,2)
    c.imp_deud_actu, --imp_deud_actu  number(12,2)
    c.fec_deud, --fec_deud  date
    c.fec_cast, --fec_cast  date
    'MAKI', --usu_crea  varchar2(20)
    TRUNC(SYSDATE), --fec_crea  date
    'MAKI', --usu_modi  varchar2(20)
    TRUNC(SYSDATE),--fec_modi  date
    1, --ind_acti  number(1)
    NULL, --imp_deud_cast_migr  number(12,2)
    NULL, --imp_deud_paga  number(12,2)  
    NULL, --imp_abon_depu_inco  number(15,2)
    NULL, --cod_unid_geog  varchar2(54)
    NULL, --val_barr  varchar2(50)
    c.oid_clie, --oid_clie  number(12)
    (SELECT MAX(spc.cod_peri)
     FROM 
      ccc_movim_cuent_corri mcc,
      cra_perio cp,
      seg_perio_corpo spc
     WHERE mcc.perd_oid_peri = cp.oid_peri
       AND cp.peri_oid_peri = spc.oid_peri
       AND mcc.clie_oid_clie = c.oid_clie
       AND mcc.imp_movi > 0), -- cod_camp_deud,   varchar2(6)
    GEN_PKG_GENER.gen_fn_clien_datos_oid(c.oid_clie,'COD_SECC'), --cod_secc  varchar2(1)
    GEN_PKG_GENER.gen_fn_clien_datos_oid(c.oid_clie,'COD_TERR'), --cod_terr  number(6)
    c.val_nom1 || ' ' || c.val_nom2 || ' ' || c.val_ape1 || ' ' || c.val_ape2, --nom_clie  varchar2(250)
    FIN_PKG_GENER.FIN_FN_OBTIE_NUMER_TELEF_CLIEN(c.oid_clie,'TF'), -- val_tele_fijo  varchar2(100)
    FIN_PKG_GENER.FIN_FN_OBTIE_NUMER_TELEF_CLIEN(c.oid_clie,'TT'), --val_tele_trab  varchar2(100)
    FIN_PKG_GENER.FIN_FN_OBTIE_NUMER_TELEF_CLIEN(c.oid_clie,'TM'), --val_tele_movi  varchar2(100)
    FIN_PKG_GENER.FIN_FN_OBTIE_NUMER_TELEF_CLIEN(c.oid_clie,'ML'), --val_emai  varchar2(100)
    FIN_PKG_GENER.FIN_FN_OBTIE_CAMPA_ULTIM_PEDID(c.oid_clie),--cod_camp_ulti_pedi  varchar2(6)
    NULL --oid_cons_cast_cabe  number(12) 
   FROM ccc_clien_casti c
   WHERE NOT EXISTS (
    SELECT NULL
    FROM ccc_consu_casti_cabec cc
    WHERE cc.oid_clie = c.oid_clie);
   
 END CCC_PR_MIGRA_CLIEN_CASTI;
 
 PROCEDURE CCC_PR_GENER_CARGO_ABONO_CANCE(
  p_oid_tipo_abon_subp             IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_fec_docu                       IN   DATE,
  p_imp_movi                       IN   NUMBER,
  p_cod_usua                       IN   VARCHAR2)
 IS

  -- excepciones
  e_rz_indi_cons_no_def            EXCEPTION;

  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_cod_pais                      seg_pais.cod_pais%TYPE;
  lv_oid_soci                      seg_socie.oid_soci%TYPE;
  lv_cod_soci                      seg_socie.cod_soci%TYPE;
  lv_oid_marc                      seg_marca.oid_marc%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_fec_docu                      ccc_movim_cuent_corri.fec_docu%TYPE;
  lv_imp_movi                      ccc_movim_cuent_corri.imp_movi%TYPE;
  lv_oid_tipo_peri                 seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
  lv_oid_cabe_carg                 ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE;
  lv_oid_movi_cc                   ccc_movim_cuent_corri.oid_movi_cc%TYPE;
  lv_oid_suba                      seg_subac.oid_sbac%TYPE;
  lv_oid_mone                      seg_pais.mone_oid_mone%TYPE;
  lv_oid_clie                      mae_clien.oid_clie%TYPE;
  lv_oid_tipo_clie                 mae_clien_tipo_subti.ticl_oid_tipo_clie%TYPE;
  lv_oid_subt_clie                 mae_clien_tipo_subti.sbti_oid_subt_clie%TYPE;
  lv_oid_regi                      zon_regio.oid_regi%TYPE;
  lv_oid_secc                      zon_secci.oid_secc%TYPE;
  lv_oid_terr_admi                 mae_clien_unida_admin.ztad_oid_terr_admi%TYPE;
  lv_oid_subg_vent                 zon_sub_geren_venta.oid_subg_vent%TYPE;

  lv_oid_proc                     ccc_proce.oid_proc%TYPE;
  lv_oid_subp                     ccc_subpr.oid_subp%TYPE;
  lv_oid_cuen_cont                ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
  lv_oid_marc_situ                ccc_marca_situa.oid_marc_situ%TYPE;
  lv_oid_tipo_carg_abon           ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
  lv_indi_tipo_abon               ccc_subpr.val_indi_tipo_abon%TYPE;
  lv_num_anio                     ccc_movim_cuent_corri.val_docu_anio%TYPE;
  lv_num_mes                      ccc_movim_cuent_corri.val_docu_mes_seri%TYPE;
  lv_num_cabe                     ccc_cabec_carga_abono_direc.num_cabe%TYPE;
  lv_num_iden_cuot                ped_numer_solic.val_ulti_nume_soli%TYPE;
  lv_val_indi_cons                ccc_subpr.val_indi_cons%TYPE;
  lv_cod_peri                     seg_perio_corpo.cod_peri%TYPE;

  e_para_null_proc                EXCEPTION;

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');
  lv_cod_peri := FIN_PKG_GENER.FIN_FN_OBTIE_CODIG_PERIO_ACTUA;

  /* inicializa variables globales  para registro de log  */
  gv_log_cod_pais := lv_cod_pais;
  gv_log_cod_soci := lv_cod_soci;
  gv_log_user     := p_cod_usua;
  gv_log_cod_modu := 'CCC';
  gv_log_cod_proc := '15';

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);

  gv_des_log:='Inicio CCC_PR_GENER_CARGO_ABONO_CANCE parametros ' ||
               ' 1: '  || lv_cod_pais ||
               ' 2: '  || lv_cod_soci ||
               ' 3: '  || lv_cod_peri  ||
               ' 4: '  || p_oid_tipo_abon_subp ||
               ' 5: '  || p_cod_clie  ||
               ' 6: ' || p_imp_movi  ;

  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  lv_fec_docu:=p_fec_docu;

  BEGIN

   -- Obteniendo Parametria del Proceso --
   lv_oid_pais := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);

   lv_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);

   lv_oid_mone := FIN_PKG_GENER.FIN_FN_OBTIE_OID_MONED(lv_cod_pais);

   lv_oid_marc := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(gc_cod_marc);

   lv_oid_subg_vent := CCC_PKG_GENER.CCC_FN_OBTIE_OID_SUBGE_VENTA(lv_oid_pais,lv_oid_marc,gc_cod_sbac_cadi);

   lv_oid_suba := FIN_PKG_GENER.FIN_FN_OBTIE_OID_SUBAC(gc_cod_sbac_cadi);

   lv_oid_tipo_peri := gc_oid_tipo_peri;

   IF lv_cod_peri IS NOT NULL THEN
    lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_OID_PERIO(lv_cod_peri);
   ELSE
    lv_oid_peri := FIN_PKG_GENER.FIN_FN_OBTIE_PERIO_ACTU;
   END IF;

   gv_des_log:='   Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);



   /*  Obtiene parametria relacionada al Tipo Abono Subproceso dado por parametro */
   CCC_PKG_GENER.CCC_PR_OBTIE_PARAM_TASUB(p_oid_tipo_abon_subp,lv_oid_proc,lv_oid_subp,lv_oid_cuen_cont,lv_indi_tipo_abon,lv_oid_marc_situ,lv_oid_tipo_carg_abon,lv_val_indi_cons);

   gv_des_log:='   Los datos para el Tipo de Abono Subporceso son: ' ||
                  ' 1 p_oid_tipo_abon_subp :'  || p_oid_tipo_abon_subp ||
                  ' 2 lv_oid_proc :'  || lv_oid_proc ||
                  ' 3 lv_oid_subp : '  ||  lv_oid_subp  ||
                  ' 4 lv_oid_cuen_cont :'  || lv_oid_cuen_cont ||
                  ' 5 lv_indi_tipo_abon :'  || lv_indi_tipo_abon    ||
                  ' 6 lv_oid_marc_situ :' || lv_oid_marc_situ  ||
                  ' 7 lv_oid_tipo_carg_abon :' || lv_oid_tipo_carg_abon  ||
                  ' 8 lv_val_indi_cons :' || lv_val_indi_cons  ;


      gv_des_log:='Inicio Obteniendo los datos de la consultora';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

      -- Obtiene datos de consultora
      SELECT
         cli.oid_clie,
         tpc.ticl_oid_tipo_clie,
         tpc.sbti_oid_subt_clie,
         zon.zorg_oid_regi,
         sec.oid_secc,
         ua.ztad_oid_terr_admi
      INTO
         lv_oid_clie,
         lv_oid_tipo_clie,
         lv_oid_subt_clie,
         lv_oid_regi,
         lv_oid_secc,
         lv_oid_terr_admi
      FROM
         mae_clien cli,
         mae_clien_tipo_subti tpc,
         mae_clien_unida_admin ua,
         zon_terri_admin za,
         zon_secci sec,
         zon_zona zon
      WHERE cli.cod_clie = p_cod_clie
        AND cli.oid_clie = tpc.clie_oid_clie
        AND tpc.ind_ppal = 1
        AND cli.oid_clie = ua.clie_oid_clie
        AND ua.ztad_oid_terr_admi = za.oid_terr_admi
        AND za.zscc_oid_secc = sec.oid_secc
        AND sec.zzon_oid_zona = zon.oid_zona
        AND ua.ind_acti = 1;

      gv_des_log:='Fin Obteniendo los datos de la consultora';
      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

   EXCEPTION
      WHEN no_data_found THEN
         RAISE e_para_null_proc;
   END;

   -- Adecua signo del importe del abono/cargo
   IF  lv_val_indi_cons = 'D'  THEN
      lv_imp_movi := p_imp_movi;
   ELSE
      IF  lv_val_indi_cons = 'H' THEN
         lv_imp_movi := p_imp_movi * -1;
      ELSE
         RAISE e_rz_indi_cons_no_def;
      END IF;
   END IF;

  -- Obteniendo el numero Identificador de Cuota --
  lv_num_iden_cuot:=ccc_pkg_gener.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(lv_cod_pais,lv_cod_soci,gc_cod_sbac_cadi );
  gv_des_log:='   Numero identificador de Cuota : ' || lv_num_iden_cuot;
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  --    Prepara oid  para ccc_movim_cuent_corri
  SELECT ccc_mvcc_seq.NEXTVAL
  INTO lv_oid_movi_cc
  FROM dual;

  -- Crea la Cabecera de cargos y Abonos Directos --
  CCC_PKG_GENER.CCC_PR_CREA_CABEC_CARGO_ABONO(lv_oid_pais, lv_oid_soci, lv_oid_proc, p_oid_tipo_abon_subp, lv_oid_cabe_carg,lv_num_anio,lv_num_mes,lv_num_cabe);
  gv_des_log:=' Se crea la cabecera del CAD ' || lv_oid_cabe_carg;
  fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                   gv_cod_proc_ejec, gv_des_log);

  gv_des_log:='INSERT CCC_MOVIM_CUENT_CORRI : OID_MOVI_CC => ' || lv_oid_movi_cc || ' sbac_oid_sbac =>' || lv_oid_suba || ' val_ejer_cuot=> ' || lv_num_anio ||
                  ' num_iden_cuot => '  || lv_num_iden_cuot || ' num_orde_cuot => 1 '  ;
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);

  -- Crea detalle en  ccc_movim_cuent_corri
  INSERT INTO ccc_movim_cuent_corri VALUES(
   lv_oid_movi_cc,              -- OID_MOVI_CC              NUMBER(12)           NOT NULL,
   lv_oid_soci,                 -- SOCI_OID_SOCI            NUMBER(12)           NOT NULL,
   lv_oid_marc_situ,            -- MASI_OID_MARC_SITU       NUMBER(12)           NOT NULL,
   lv_oid_mone,                 -- MONE_OID_MONE            NUMBER(12),
   lv_oid_peri,                  -- PERD_OID_PERI            NUMBER(12)           NOT NULL,
   lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_ULTI       NUMBER(12)           NOT NULL,
   lv_oid_tipo_carg_abon,       -- TCAB_OID_TCAB_CREA       NUMBER(12)           NOT NULL,
   lv_oid_suba,                 -- SBAC_OID_SBAC            NUMBER(12)           NOT NULL,
   lv_oid_subp,                 -- SUBP_OID_SUBP_ULTI       NUMBER(12)           NOT NULL,
   lv_oid_subp,                 -- SUBP_OID_SUBP_CREA       NUMBER(12)           NOT NULL,
   lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_ORIG  NUMBER(12)           NOT NULL,
   lv_oid_cuen_cont,            -- CUCO_OID_CUEN_CONT_CUOT  NUMBER(12),
   lv_oid_clie,                 -- CLIE_OID_CLIE            NUMBER(12)           NOT NULL,
   lv_num_anio,                 -- VAL_DOCU_ANIO            VARCHAR2(2 BYTE)     NOT NULL,
   lv_num_mes,                  -- VAL_DOCU_MES_SERI        VARCHAR2(2 BYTE),
   lv_num_cabe,                 -- VAL_DOCU_NUME            NUMBER(8)            NOT NULL,
   lv_num_anio,                 -- VAL_EJER_CUOT            VARCHAR2(2 BYTE)     NOT NULL,
   NULL,                        -- FEC_CONTA                DATE,
   lv_fec_docu,                     -- FEC_DOCU                 DATE                 NOT NULL,
   lv_fec_docu,                     -- FEC_ULTI_MOVI            DATE                 NOT NULL,
   lv_fec_docu,                     -- FEC_VALO                 DATE,
   lv_fec_docu,                     -- FEC_VENC                 DATE                 NOT NULL,
   lv_imp_movi,            -- IMP_MOVI                 NUMBER(12,2)         NOT NULL,
   0,                           -- IMP_DIVI                 NUMBER(12,2),
   lv_imp_movi,                           -- IMP_PAGA                 NUMBER(12,2)         NOT NULL,
   0,                           -- IMP_PAGA_DIVI            NUMBER(12,2),
   0,              -- IMP_PEND                 NUMBER(12,2)         NOT NULL,
   lv_num_iden_cuot,            -- NUM_IDEN_CUOT            NUMBER(8)            NOT NULL,
      NULL,                        -- VAL_NUME_LOTE_CONT       VARCHAR2(30 BYTE),
      1,                           -- NUM_ORDE_CUOT            NUMBER(3)            NOT NULL,
      NULL,                  -- VAL_OBSE                 VARCHAR2(100 BYTE),
      NULL,                        -- VAL_REFE_NUME_DOCU_EXTE  VARCHAR2(20 BYTE),
      lv_num_anio,                 -- VAL_ULTI_DOCU_ANIO       VARCHAR2(2 BYTE),
      lv_num_mes,                  -- VAL_ULTI_DOCU_MES_SERI   VARCHAR2(2 BYTE),
      lv_num_cabe,                 -- VAL_ULTI_DOCU_NUME       NUMBER(8),
      0,                           -- VAL_ULTI_NUME_HIST       NUMBER(3),
      NULL,                        -- MPAB_OID_MEDI_PAGO       NUMBER(12),
      lv_oid_terr_admi,            -- ZTAD_OID_TERR_ADMI       NUMBER(12)           NOT NULL,
      lv_oid_tipo_clie,            -- TICL_OID_TIPO_CLIE       NUMBER(12)           NOT NULL,
      lv_oid_marc,                  -- MARC_OID_MARC            NUMBER(12),
      0,                           -- IMP_PAGO                 NUMBER(12,2),
      0,                           -- IMP_PAGO_DIVI            NUMBER(12,2),
      lv_imp_movi,            -- IMP_MOVI_CUEN            NUMBER(12,2)         NOT NULL,
      0,                           -- IMP_MOVI_DIVI            NUMBER(12,2),
      NULL,                        -- NUM_LOTE_FACT            NUMBER(10),
      p_cod_usua,                  -- COD_USUA                 VARCHAR2(20 BYTE)    NOT NULL,
      1,                           -- IND_TIPO_CAMB            NUMBER(12,5)         NOT NULL,
      NULL,                        -- IND_DTO_CARG_APLI        NUMBER(1),
      lv_oid_secc,                 -- ZSCC_OID_SECC            NUMBER(12)           NOT NULL,
      lv_oid_subg_vent,            -- ZSGV_OID_SUBG_VENT       NUMBER(12)           NOT NULL,
      NULL,                        -- SOCA_OID_SOLI_CABE       NUMBER(12),
      lv_oid_subt_clie,            -- SBTI_OID_SUBT_CLIE       NUMBER(12)           NOT NULL,
      NULL,                        -- TSPA_OID_TIPO_SOLI_PAIS  NUMBER(12),
      lv_oid_tipo_peri,            -- TIPE_OID_TIPO_PERI       NUMBER(12),
      lv_oid_regi,                 -- ZORG_OID_REGI            NUMBER(12)           NOT NULL,
      NULL,                        -- TIDO_OID_TIPO_DOCU       NUMBER(12),
      SYSDATE,                      -- FEC_ULTI_ACTU            DATE                 NOT NULL
      SYSDATE,                      -- VAL_HORA_CREA            DATE
      NULL,             -- OID_PERI_ORIG            NUMBER(12)
      0,                             -- IND_CARG_FRAC           NUMBER(1)
      0,                             -- IND_OC                   NUMBER(1)
      NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
      lv_fec_docu);                  -- FEC_DOCU                 DATE


  -- Crea detalle en ccc_detal_cargo_abono_direc
  INSERT INTO ccc_detal_cargo_abono_direc VALUES(
   ccc_dcad_seq.nextval,         -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
   lv_oid_cabe_carg,             --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
   lv_oid_clie,                  --  CLIE_OID_CLIE                 NUMBER(12),
   1,                            --  NUM_LINE                      NUMBER(6),
   0,                            --  NUM_HIST_GENE                 NUMBER(3),
   lv_fec_docu,                      --  FEC_MOVI                      DATE,
   0,                            --  IMP_MONE                      NUMBER(12,2),
   lv_imp_movi,                    --  IMP                           NUMBER(12,2),
   NULL,                         --  VAL_REFE                      VARCHAR2(20 BYTE),
   NULL,                         --  VAL_OBSE  (num_lote)          VARCHAR2(100 BYTE),
   NULL,                         --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
   lv_oid_mone,                  --  MONE_OID_MONE                 NUMBER(12),
   NULL,                         --  CMBA_OID_MOVI_BANC            NUMBER(12),
   NULL,                         --  MPAB_OID_MEDI_PAGO            NUMBER(12),
   lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
   lv_oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
   lv_oid_movi_cc,               --  MVCC_OID_MOVI_CC              NUMBER(12),
   NULL,                         --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
   NULL,                          --  FEC_PAGO_BANC                 DATE,
   p_cod_usua,                          --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
   lv_oid_soci,                   --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
   p_oid_tipo_abon_subp,          -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
   SYSDATE );                     --  FEC_CREA                      DATE            NOT NULL

  gv_des_log := 'Se ejecutara aplicacion de    num_cabe: ' || lv_num_cabe || ' num_anio: ' || lv_num_anio ||  ' num_mes: ' || lv_num_mes ;
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

  -- Liberando el Secuencial de CCC ---
  CCC_PKG_GENER.CCC_PR_LIBER_NUMER_SECUE(lv_cod_pais, lv_num_anio,lv_num_mes,lv_num_cabe);

  gv_des_log := 'Fin  CCC_PR_GENER_CARGO_ABONO_MIGRA de manera correcta' ;
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

  FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2);

 EXCEPTION
  
  WHEN e_para_null_proc THEN
   gv_des_log:='   Error en Los datos generales obtenidos para el proceso son: ' ||
                  ' 1 lv_oid_pais :'  || lv_oid_pais ||
                  ' 2 lv_oid_soci :'  || lv_oid_soci ||
                  ' 3 lv_oid_mone : '  ||  lv_oid_mone  ||
                  ' 4 lv_oid_marc :'  || lv_oid_marc ||
                  ' 5 lv_oid_subg_vent :'  || lv_oid_subg_vent    ||
                  ' 6 lv_oid_suba :' || lv_oid_suba  ||
                  ' 7 lv_oid_peri :' || lv_oid_peri  ||
                  ' 8 lv_oid_tipo_peri :' || lv_oid_tipo_peri  ;
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais,  gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log);
   gv_des_log:='Fin del proceso de manera erronea';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
           FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);
            RAISE_application_error(-20123,
                              'ERROR CCC_PR_GENER_CARGO_ABONO_MANUA: ' ||
                               ls_sqlerrm);

  WHEN e_rz_indi_cons_no_def THEN
   gv_des_log := 'ccc_pr_gener_cargo_abono_manua Error: indi_cons no es H ni D';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);

   gv_des_log:='Fin del proceso de manera erronea';
   FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 9);

  WHEN OTHERS THEN
   gv_des_log:='Fin del proceso de manera erronea :' ||ln_sqlcode || ' '|| ls_sqlerrm;
   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   raise_application_error (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_GENER_CARGO_ABONO_CANCE;

 PROCEDURE CCC_PR_CORRI_SALDO_MIGRA 
 IS
 
  CURSOR c_dife
  IS
  SELECT 
   mc.cod_clie, 
   mc.oid_clie, 
   (b.saldo - a.saldo) dif
  FROM 
   (SELECT   mcc.clie_oid_clie,
                   NVL (SUM (imp_pend), 0)
                 - (SELECT NVL (SUM (ba.imp_sald_pend), 0)
                      FROM ccc_movim_banca ba
                     WHERE 1 = 1
                       AND ba.clie_oid_clie = mcc.clie_oid_clie
                       AND ba.cod_iden_proc = 'P') AS saldo
            FROM ccc_movim_cuent_corri mcc
        GROUP BY mcc.clie_oid_clie) a,
    (SELECT   clie_oid_clie, SUM (imp) saldo
            FROM ((SELECT   mcc.clie_oid_clie, SUM (mcc.imp_movi) imp
                       FROM ccc_movim_cuent_corri mcc
                   GROUP BY mcc.clie_oid_clie)
                  UNION ALL
                  (SELECT   mb.clie_oid_clie, SUM (mb.imp_pago) * -1 imp
                       FROM ccc_movim_banca mb
                      WHERE mb.cod_iden_proc = 'P'
                   GROUP BY mb.clie_oid_clie))
        GROUP BY clie_oid_clie) b,
       mae_clien mc
  WHERE a.clie_oid_clie = b.clie_oid_clie
    AND a.clie_oid_clie = mc.oid_clie
    AND a.saldo <> b.saldo
  ORDER BY dif DESC;
 
 BEGIN
 
  FOR v_dife IN c_dife LOOP
  
   IF v_dife.dif > 0 THEN
     
    CCC_PR_GENER_CARGO_ABONO_CANCE(801,v_dife.cod_clie, TO_DATE('15/07/2003','DD/MM/YYYY'),ABS(v_dife.dif),USER);  
   
   ELSE
     
    CCC_PR_GENER_CARGO_ABONO_CANCE(701,v_dife.cod_clie, TO_DATE('15/07/2003','DD/MM/YYYY'),ABS(v_dife.dif),USER);
   END IF;  
  
  END LOOP;
      
 END CCC_PR_CORRI_SALDO_MIGRA;
   
   PROCEDURE ccc_pr_obtie_param_tipo_solic(
     p_oid_pais                             IN   seg_pais.oid_pais%TYPE,
     p_cod_tipo_soli                    IN   ped_tipo_solic.cod_tipo_soli%TYPE,
     p_cod_proc                           OUT  ccc_proce.cod_proc%TYPE,
     p_oid_proc                            OUT  ccc_proce.oid_proc%TYPE,
     p_cod_subp                            OUT  ccc_subpr.cod_subp%TYPE,
     p_oid_subp                             OUT  ccc_subpr.oid_subp%TYPE,
     p_oid_cuen_corr_banc          OUT  ccc_asign_subpr_tipo_solic.ccba_oid_cuen_corr_banc%TYPE,
     p_cod_tipo_carg_abon          OUT  ccc_tipo_cargo_abono.cod_tipo_carg_abon%TYPE,
     p_oid_tipo_carg_abon           OUT  ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE,
     p_masi_oid_marc_sali            OUT  ccc_marca_tipo_abono.masi_oid_marc_sali%TYPE,
     p_oid_cuen_cont                    OUT  ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE,
     p_oid_marc                            OUT  ped_tipo_solic.marc_oid_marc%TYPE,
     p_oid_sbac                             OUT  ped_tipo_solic.sbac_oid_sbac%TYPE,
     p_oid_medi_pago                   OUT  bel_forma_pago_detal.mpab_oid_medi_pago%TYPE,
     p_tsol_oid_tipo_cons            OUT  ped_tipo_solic_pais.tsol_oid_tipo_cons%TYPE,
     p_oid_tipo_abon_subp           OUT  ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
     p_ind_soli_nega                      OUT  ped_tipo_solic.ind_soli_nega%TYPE)
   IS

   lv_tsol_oid_tipo_cons  ped_tipo_solic_pais.tsol_oid_tipo_cons%type;

   lv_cod_proc                              ccc_proce.cod_proc%TYPE;
   lv_oid_proc                              ccc_proce.oid_proc%TYPE;
   lv_cod_subp                              ccc_subpr.cod_subp%TYPE;
   lv_oid_subp                              ccc_subpr.oid_subp%TYPE;
   lv_oid_cuen_corr_banc           ccc_asign_subpr_tipo_solic.ccba_oid_cuen_corr_banc%TYPE;
   lv_oid_cuen_cont                     ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE;
   lv_oid_tipo_abon_subp            ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE;
   lv_cod_tipo_carg_abon            ccc_tipo_cargo_abono.cod_tipo_carg_abon%TYPE;
   lv_oid_tipo_carg_abon             ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;
   lv_masi_oid_marc_sali             ccc_marca_tipo_abono.masi_oid_marc_sali%TYPE;
   lv_oid_marc                              ped_tipo_solic.marc_oid_marc%TYPE;
   lv_sbac_oid_sbac                     ped_tipo_solic.sbac_oid_sbac%TYPE;
   lv_oid_medi_pago                     bel_forma_pago_detal.mpab_oid_medi_pago%TYPE;
   lv_ind_soli_nega                       ped_tipo_solic.ind_soli_nega%TYPE;

   BEGIN

      /* obtiene el oid del codigo del tipo de solicitud-pais */
      SELECT tsp.tsol_oid_tipo_cons, ts.marc_oid_marc, ts.sbac_oid_sbac, fpd.mpab_oid_medi_pago, ts.Ind_Soli_Nega
      INTO   lv_tsol_oid_tipo_cons, lv_oid_marc, lv_sbac_oid_sbac, lv_oid_medi_pago,  lv_ind_soli_nega
      FROM   ped_tipo_solic ts,
             ped_tipo_solic_pais tsp,
             bel_forma_pago_detal fpd
      WHERE  ts.cod_tipo_soli = p_cod_tipo_soli
      AND    tsp.tsol_oid_tipo_soli = ts.oid_tipo_soli
      AND    tsp.pais_oid_pais = p_oid_pais
      AND    tsp.fopa_oid_form_pago = fpd.fopa_oid_form_pago;

      /*  punto 2  */
      SELECT pro.cod_proc, pro.oid_proc, spr.cod_subp, spr.oid_subp, sts.ccba_oid_cuen_corr_banc
      INTO   lv_cod_proc,  lv_oid_proc,  lv_cod_subp,  lv_oid_subp,  lv_oid_cuen_corr_banc
      FROM   ccc_asign_subpr_tipo_solic sts,
             ccc_proce pro,
             ccc_subpr spr
      WHERE  sts.tspa_oid_tipo_soli_pais = lv_tsol_oid_tipo_cons
      AND    sts.subp_oid_subp_crea_cuot = spr.oid_subp
      AND    spr.ccpr_oid_proc = pro.oid_proc
      AND    pro.pais_oid_pais = p_oid_pais;

      /*  punto 3 */
      SELECT  absp.cuco_oid_cuen_cont, absp.oid_tipo_abon_subp
      INTO    lv_oid_cuen_cont, lv_oid_tipo_abon_subp
      FROM    ccc_tipo_abono_subpr absp
      WHERE   absp.subp_oid_subp = lv_oid_subp;


      /* punto 4 */
      /*   OJO  CORREGIR  AMBIGUEDAD   (rownum = 1 )
         EXISTE EN  CCC_MARCA_SITUA CON COD_MARC_SITU  = XX  QUE NO SE USA   */
      SELECT  tca.cod_tipo_carg_abon, tca.oid_tipo_carg_abon, mta.masi_oid_marc_sali
      INTO    lv_cod_tipo_carg_abon,  lv_oid_tipo_carg_abon,  lv_masi_oid_marc_sali
      FROM    ccc_marca_tipo_abono mta,
              ccc_tipo_abono_subpr spr,
              ccc_tipo_cargo_abono tca
      WHERE   mta.tasp_oid_tipo_abon_subp = spr.oid_tipo_abon_subp
      AND     spr.tcab_oid_tcab = tca.oid_tipo_carg_abon
      AND     mta.tasp_oid_tipo_abon_subp = lv_oid_tipo_abon_subp
      AND     spr.subp_oid_subp  =  lv_oid_subp
      AND   ROWNUM = 1;

      p_cod_proc            := lv_cod_proc;
      p_oid_proc            := lv_oid_proc;
      p_cod_subp            := lv_cod_subp;
      p_oid_subp            := lv_oid_subp;
      p_oid_cuen_corr_banc  := lv_oid_cuen_corr_banc;
      p_cod_tipo_carg_abon  := lv_cod_tipo_carg_abon;
      p_oid_tipo_carg_abon  := lv_oid_tipo_carg_abon;
      p_masi_oid_marc_sali  := lv_masi_oid_marc_sali;
      p_oid_cuen_cont       := lv_oid_cuen_cont;
      p_oid_marc            := lv_oid_marc;
      p_oid_sbac            := lv_sbac_oid_sbac;
      p_oid_medi_pago       := lv_oid_medi_pago;
      p_tsol_oid_tipo_cons  := lv_tsol_oid_tipo_cons;
      p_oid_tipo_abon_subp  := lv_oid_tipo_abon_subp;
      p_ind_soli_nega       := lv_ind_soli_nega;


       gv_des_log:='Fin  ccc_pr_obtie_param_tipo_solic  Cod tipo solic: ' || p_cod_tipo_soli ;
       fin_pkg_gener.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log);

 END ccc_pr_obtie_param_tipo_solic;

 PROCEDURE ccc_pr_ejecu_proce_cierr_factu(
  p_val_nom_prog                   IN   ccc_param_valid_lotes_banca.val_nomb_prog%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_sql            VARCHAR2(250);

 BEGIN

  lv_sql:='BEGIN ' || p_val_nom_prog || '(:1); END;';
  EXECUTE IMMEDIATE lv_sql
  USING IN p_cod_usua;

 END ccc_pr_ejecu_proce_cierr_factu;

 PROCEDURE ccc_pr_gener_movim_crea_perce(
  p_cod_pais                       IN   seg_pais.cod_pais%TYPE,
  p_cod_soci                       IN   seg_socie.cod_soci%TYPE,
  p_oid_soci                       IN   seg_socie.oid_soci%TYPE,
  p_num_lote                       IN   per_solic_monet.num_lote%TYPE,
  p_cod_tipo_soli                  IN   ped_tipo_solic.cod_tipo_soli%TYPE,
  p_num_anio                       IN   ccc_movim_cuent_corri.val_docu_anio%TYPE,
  p_num_mes                        IN   ccc_movim_cuent_corri.val_docu_mes_seri%TYPE,
  p_num_comp                       IN   ccc_secue_pais.num_secu%TYPE,
  p_oid_cabe_carg                  IN   ccc_cabec_carga_abono_direc.oid_cabe_carg%TYPE,
  p_oid_proc                       IN   ccc_proce.oid_proc%TYPE,
  p_oid_subp                       IN   ccc_subpr.oid_subp%TYPE,
  p_oid_cuen_corr_banc             IN   ccc_asign_subpr_tipo_solic.ccba_oid_cuen_corr_banc%TYPE,
  p_cod_tipo_carg_abon             IN   ccc_tipo_cargo_abono.cod_tipo_carg_abon%TYPE,
  p_oid_tipo_carg_abon             IN   ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE,
  p_masi_oid_marc_sali             IN   ccc_marca_tipo_abono.masi_oid_marc_sali%TYPE,
  p_oid_cuen_cont                  IN   ccc_tipo_abono_subpr.cuco_oid_cuen_cont%TYPE,
  p_oid_marc                       IN   ped_tipo_solic.marc_oid_marc%TYPE,
  p_oid_mone                       IN   seg_pais.mone_oid_mone%TYPE,
  p_oid_sbac                       IN   ped_tipo_solic.sbac_oid_sbac%TYPE,
  p_oid_medi_pago                  IN   bel_forma_pago_detal.mpab_oid_medi_pago%TYPE,
  p_tsol_oid_tipo_cons             IN   ped_tipo_solic_pais.tsol_oid_tipo_cons%TYPE,
  p_ind_soli_nega                  IN   ped_tipo_solic.ind_soli_nega%TYPE,
  p_cod_acce                       IN   per_solic_monet.cod_acce%TYPE,
  p_cod_sbac                       IN   per_solic_monet.cod_sbac%TYPE,
  p_num_iden_cuot_ini              OUT   ped_numer_solic.val_ulti_nume_soli%TYPE,
  p_num_iden_cuot_fin              OUT  ped_numer_solic.val_ulti_nume_soli%TYPE )

   IS
   /*  crea en  tabla temporal el detalle de movimientos para generar los
      registros correspondientes a las  percepciones posteriormente  */
   lv_num_reg_movim_crea           NUMBER(12);
   lv_signo                        NUMBER(2);
   lv_num_iden_cuot_inic           ped_numer_solic.val_ulti_nume_soli%TYPE;

  BEGIN

    DELETE FROM ccc_tempo_movim_crear_perce;

     IF p_ind_soli_nega = 1 THEN
        lv_signo := -1;
     ELSE
        lv_signo := 1;
     END IF;

     INSERT INTO ccc_tempo_movim_crear_perce
        WITH tot_soli_mone
           AS
           (SELECT  sm.pais_cod_pais,
                            sm.cod_tipo_soli,
                            sm.cod_clie,
                            sm.cod_peri,
                            sm.fec_fact,
                            sm.cod_acce, sm.cod_sbac,
                            SUM(sm.val_impo) * lv_signo t_val_impo
             FROM  per_solic_monet sm
             WHERE sm.pais_cod_pais        = p_cod_pais
             AND   sm.num_lote             = p_num_lote
             AND   sm.cod_tipo_soli        = p_cod_tipo_soli
             GROUP BY sm.pais_cod_pais, sm.cod_tipo_soli, sm.cod_clie,
              sm.cod_peri,  sm.fec_fact, sm.cod_acce, sm.cod_sbac)
        SELECT
           sol.pais_cod_pais,
           p_oid_mone,
           sol.cod_tipo_soli,
           sol.cod_peri,
           cam.oid_peri,
           p_num_lote,
           sol.cod_clie,
           sol.fec_fact,
           sol.cod_acce,
           sol.cod_sbac,
           p_oid_sbac,
           sol.t_val_impo,
           p_oid_marc,
           p_oid_soci,
           p_num_anio,
           p_num_mes,
           p_num_comp,
           p_oid_cabe_carg,
           p_oid_proc,
           p_oid_subp,
           p_oid_cuen_corr_banc,
           p_cod_tipo_carg_abon,
           p_oid_tipo_carg_abon,
           p_oid_cuen_cont,
           ROWNUM,
           cli.oid_clie,
           tpc.ticl_oid_tipo_clie,
           tpc.sbti_oid_subt_clie,
           ua.ztad_oid_terr_admi,
           sec.oid_secc,
           zon.zorg_oid_regi,
           ccc_mvcc_seq.NEXTVAL,
           ccc_dcad_seq.NEXTVAL,
           p_masi_oid_marc_sali,
           p_oid_medi_pago,
           p_tsol_oid_tipo_cons
      FROM  mae_clien cli,
                  mae_clien_tipo_subti tpc,
                  mae_clien_unida_admin ua,
                  zon_terri_admin za,
                  zon_secci sec,
                  zon_zona zon,
                  tot_soli_mone sol,
                  cra_perio cam,
                  seg_perio_corpo cor
      WHERE cli.cod_clie = sol.cod_clie
      AND cli.oid_clie = tpc.clie_oid_clie
      AND tpc.ind_ppal = 1
      AND cli.oid_clie = ua.clie_oid_clie
      AND ua.ztad_oid_terr_admi = za.oid_terr_admi
      AND za.zscc_oid_secc = sec.oid_secc
      AND sec.zzon_oid_zona = zon.oid_zona
     AND ua.ind_acti = 1
      AND ua.perd_oid_peri_fin IS NULL
     AND cam.peri_oid_peri = cor.oid_peri
     AND cor.cod_peri = sol.cod_peri;

     SELECT COUNT(*)
     INTO lv_num_reg_movim_crea
     FROM ccc_tempo_movim_crear_perce;

     lv_num_iden_cuot_inic:=ccc_pkg_gener.CCC_FN_OBTIE_NUMER_IDENT_CUOTA(p_cod_pais,p_cod_soci,p_cod_sbac,lv_num_reg_movim_crea);

      p_num_iden_cuot_ini := lv_num_iden_cuot_inic;
      p_num_iden_cuot_fin := lv_num_iden_cuot_inic + lv_num_reg_movim_crea;

   END ccc_pr_gener_movim_crea_perce;

 PROCEDURE ccc_pr_gener_movim_cuent_corri(
  p_num_iden_cuot_inic           IN   ped_numer_solic.val_ulti_nume_soli%TYPE)
 IS

  lv_cod_pais                    seg_pais.cod_pais%TYPE;
  lv_oid_marc                    seg_marca.oid_marc%TYPE;
  lv_oid_peri                    cra_perio.oid_peri%TYPE;
  lv_oid_tipo_peri               seg_perio_corpo.tipe_oid_tipo_peri%TYPE;
  lv_oid_subg_vent               zon_sub_geren_venta.oid_subg_vent%TYPE;
  lv_fec_venc                    ccc_movim_cuent_corri.fec_venc%TYPE;
  lv_ind_actu_fech_venc_perc     ccc_param_gener.val_para%TYPE;
  lv_ind_gene_movi_perc_perf     ccc_param_gener.val_para%TYPE;

  TYPE t_tab_mcc                 IS TABLE OF ccc_movim_cuent_corri%ROWTYPE;
  lv_tab_mcc                      t_tab_mcc;

 CURSOR c_zona
 IS
   SELECT mcc.perd_oid_peri,zs.zzon_oid_zona
   FROM
      ccc_movim_cuent_corri mcc,
      zon_secci zs,
      ccc_tempo_movim_crear_perce tp
   WHERE mcc.zscc_oid_secc = zs.oid_secc
     AND mcc.subp_oid_subp_crea = 2023
     AND mcc.imp_movi > 0
     AND mcc.oid_movi_cc = tp.oid_movi_cc
   GROUP BY mcc.perd_oid_peri,zs.zzon_oid_zona;

 BEGIN

  SELECT tmp.cod_pais, tmp.oid_marc, tmp.oid_peri
  INTO   lv_cod_pais,  lv_oid_marc,  lv_oid_peri
  FROM   ccc_tempo_movim_crear_perce tmp
  WHERE  rownum = 1;

  SELECT sgv.oid_subg_vent
  INTO lv_oid_subg_vent
  FROM
     zon_sub_geren_venta sgv,
     seg_canal can,
     seg_pais pa
  WHERE sgv.pais_oid_pais = pa.oid_pais
    AND pa.cod_pais = lv_cod_pais
    AND sgv.marc_oid_marc = lv_oid_marc
    AND sgv.cana_oid_cana = can.oid_cana
    AND can.cod_cana = 'VD';

  SELECT  cor.TIPE_OID_TIPO_PERI
  INTO    lv_oid_tipo_peri
  FROM
     cra_perio cra,
     seg_perio_corpo cor
  WHERE cra.peri_oid_peri = cor.oid_peri
    AND cra.oid_peri = lv_oid_peri;

 lv_ind_gene_movi_perc_perf:= ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('IndGeneMoviPercPerf');

 IF lv_ind_gene_movi_perc_perf = '1' THEN

  SELECT
   per.oid_movi_cc,
   per.oid_soci,
   per.oid_marc_sali,
   per.oid_mone,
   per.oid_peri,
   per.oid_tipo_carg_abon,
   per.oid_tipo_carg_abon,
   per.oid_sbac,
   per.oid_subp,
   per.oid_subp,
   per.oid_cuen_cont,
   per.oid_cuen_cont,
   per.oid_clie,                                 --  clie_oid_clie
   per.num_anio,                                 --  val_docu_anio
   per.num_mes,                                  --  val_docu_mes_seri
   per.num_cabe,                                 --  val_docu_nume
   per.num_anio,                                 --  val_ejer_cuot    varchar2(2 byte)     not null,
   NULL,                                         --  fec_conta                date,
   per.fec_fact,                                 --  fec_docu                 date                 not null,
   per.fec_fact,                                 --  fec_ulti_movi            date                 not null,
   per.fec_fact,                                 --  fec_valo                 date,
   per.fec_fact,                                 --  fec_venc                 date                 not null,
   per.val_impo,                                 --  imp_movi                 number(12,2)         not null,
   0,                                            --  imp_divi                 number(12,2),
   0,                                            --  imp_paga                 number(12,2)         not null,
   0,                                            --  imp_paga_divi            number(12,2),
   per.val_impo,                                 --  imp_pend                 number(12,2)         not null,
   rownum - 1 + p_num_iden_cuot_inic ,            --  num_iden_cuot            number(8)            not null,
   NULL,                                         --  val_nume_lote_cont       varchar2(30 byte),
   999,                                            --  num_orde_cuot            number(3)            not null,
   per.num_lote,                                 --  val_obse                 varchar2(100 byte),
   NULL,                                         --  val_refe_nume_docu_exte  varchar2(20 byte),
   per.num_anio,                                 --  val_ulti_docu_anio       varchar2(2 byte),
   per.num_mes,                                  --  val_ulti_docu_mes_seri   varchar2(2 byte),
   per.num_cabe,                                 --  val_ulti_docu_nume       number(8),
   0,                                            --  val_ulti_nume_hist       number(3),
   per.oid_medi_pago,                            --  mpab_oid_medi_pago       number(12),
   per.oid_terr_admi,                            --  ztad_oid_terr_admi       number(12)           not null,
   per.oid_tipo_clie,                            --  ticl_oid_tipo_clie       number(12)           not null,
   per.oid_marc,                                 --  marc_oid_marc            number(12),
   0,                                            --  imp_pago                 number(12,2),
   0,                                            --  imp_pago_divi            number(12,2),
   per.val_impo,                                 --  imp_movi_cuen            number(12,2)         not null,
   0,                                            --  imp_movi_divi            number(12,2),
   NULL,                                         --  num_lote_fact            number(10),
   USER,                                         --  cod_usua                 varchar2(20 byte)    not null,
   1,                                            --  ind_tipo_camb            number(12,5)         not null,
   NULL,                                         --  ind_dto_carg_apli        number(1),
   per.oid_secc,                                 --  zscc_oid_secc            number(12)           not null,
   lv_oid_subg_vent,                             --  zsgv_oid_subg_vent       number(12)           not null,
   NULL,                                         --  soca_oid_soli_cabe       number(12),
   per.oid_subt_clie,                            --  sbti_oid_subt_clie       number(12)           not null,
   per.tsol_oid_tipo_cons,                       --  tspa_oid_tipo_soli_pais  number(12),
   lv_oid_tipo_peri,                             --  tipe_oid_tipo_peri       number(12),
   per.oid_regi,                                 --  zorg_oid_regi            number(12)           not null,
   NULL,                                         --  tido_oid_tipo_docu       number(12),
   SYSDATE,                                       --  fec_ulti_actu            date                 not null
   SYSDATE,                      -- VAL_HORA_CREA            DATE
   per.oid_peri,             -- OID_PERI_ORIG            NUMBER(12)
   0,                             -- IND_CARG_FRAC           NUMBER(1)
   0,                             -- IND_OC                   NUMBER(1)
   NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
   per.fec_fact                     -- FEC_PROC                 DATE                 NOT NULL,
  BULK COLLECT INTO lv_tab_mcc
  FROM ccc_tempo_movim_crear_perce per;

  FORALL i IN 1..lv_tab_mcc.count
    INSERT INTO ccc_movim_cuent_corri VALUES lv_tab_mcc(i);

 ELSE

  INSERT INTO ccc_movim_cuent_corri
   SELECT
            per.oid_movi_cc,
            per.oid_soci,
            per.oid_marc_sali,
            per.oid_mone,
            per.oid_peri,
            per.oid_tipo_carg_abon,
            per.oid_tipo_carg_abon,
            per.oid_sbac,
            per.oid_subp,
            per.oid_subp,
            per.oid_cuen_cont,
            per.oid_cuen_cont,
            per.oid_clie,                                 --  clie_oid_clie
            per.num_anio,                                 --  val_docu_anio
            per.num_mes,                                  --  val_docu_mes_seri
            per.num_cabe,                                 --  val_docu_nume
            per.num_anio,                                 --  val_ejer_cuot    varchar2(2 byte)     not null,
            NULL,                                         --  fec_conta                date,
            per.fec_fact,                                 --  fec_docu                 date                 not null,
            per.fec_fact,                                 --  fec_ulti_movi            date                 not null,
            per.fec_fact,                                 --  fec_valo                 date,
            per.fec_fact,                                 --  fec_venc                 date                 not null,
            per.val_impo,                                 --  imp_movi                 number(12,2)         not null,
            0,                                            --  imp_divi                 number(12,2),
            0,                                            --  imp_paga                 number(12,2)         not null,
            0,                                            --  imp_paga_divi            number(12,2),
            per.val_impo,                                 --  imp_pend                 number(12,2)         not null,
            rownum - 1 + p_num_iden_cuot_inic ,            --  num_iden_cuot            number(8)            not null,
            NULL,                                         --  val_nume_lote_cont       varchar2(30 byte),
            999,                                            --  num_orde_cuot            number(3)            not null,
            per.num_lote,                                 --  val_obse                 varchar2(100 byte),
            NULL,                                         --  val_refe_nume_docu_exte  varchar2(20 byte),
            per.num_anio,                                 --  val_ulti_docu_anio       varchar2(2 byte),
            per.num_mes,                                  --  val_ulti_docu_mes_seri   varchar2(2 byte),
            per.num_cabe,                                 --  val_ulti_docu_nume       number(8),
            0,                                            --  val_ulti_nume_hist       number(3),
            per.oid_medi_pago,                            --  mpab_oid_medi_pago       number(12),
            per.oid_terr_admi,                            --  ztad_oid_terr_admi       number(12)           not null,
            per.oid_tipo_clie,                            --  ticl_oid_tipo_clie       number(12)           not null,
            per.oid_marc,                                 --  marc_oid_marc            number(12),
            0,                                            --  imp_pago                 number(12,2),
            0,                                            --  imp_pago_divi            number(12,2),
           per.val_impo,                                 --  imp_movi_cuen            number(12,2)         not null,
           0,                                            --  imp_movi_divi            number(12,2),
           NULL,                                         --  num_lote_fact            number(10),
            USER,                                         --  cod_usua                 varchar2(20 byte)    not null,
            1,                                            --  ind_tipo_camb            number(12,5)         not null,
            NULL,                                         --  ind_dto_carg_apli        number(1),
            per.oid_secc,                                 --  zscc_oid_secc            number(12)           not null,
            lv_oid_subg_vent,                             --  zsgv_oid_subg_vent       number(12)           not null,
            NULL,                                         --  soca_oid_soli_cabe       number(12),
            per.oid_subt_clie,                            --  sbti_oid_subt_clie       number(12)           not null,
            per.tsol_oid_tipo_cons,                       --  tspa_oid_tipo_soli_pais  number(12),
            lv_oid_tipo_peri,                             --  tipe_oid_tipo_peri       number(12),
            per.oid_regi,                                 --  zorg_oid_regi            number(12)           not null,
            NULL,                                         --  tido_oid_tipo_docu       number(12),
            SYSDATE,                                       --  fec_ulti_actu            date                 not null,
            SYSDATE,                      -- VAL_HORA_CREA            DATE
            per.oid_peri,             -- OID_PERI_ORIG            NUMBER(12)
            0,                             -- IND_CARG_FRAC           NUMBER(1)
            0,                             -- IND_OC                   NUMBER(1)
            NULL,                          -- COD_TIPO_DOCU_HOMO       VARCHAR2(2)
            per.fec_fact                   -- FEC_PROC DATE
         FROM ccc_tempo_movim_crear_perce per;

 END IF;

 lv_ind_actu_fech_venc_perc:= ccc_pkg_gener.CCC_FN_OBTIE_PARAM_GENER('IndActuFechVencPerc');

 IF lv_Ind_Actu_Fech_Venc_Perc = '1' THEN

   FOR v_zona IN c_zona LOOP

    BEGIN
     SELECT cr.fec_inic
     INTO lv_fec_venc
     FROM
        cra_crono cr,
        cra_activ ca
     WHERE cr.zzon_oid_zona = v_zona.zzon_oid_zona
       AND cr.perd_oid_peri = v_zona.perd_oid_peri
       AND cr.cact_oid_acti = ca.oid_acti
       AND ca.cod_acti = 'V1';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        lv_fec_venc:= TRUNC(SYSDATE) + 21;
    END;

    UPDATE ccc_movim_cuent_corri mcc
    SET mcc.fec_venc = lv_fec_venc
    WHERE mcc.subp_oid_subp_crea = 2023
    AND mcc.perd_oid_peri = v_zona.perd_oid_peri
      AND mcc.imp_movi > 0
      AND EXISTS (
        SELECT NULL
        FROM
          ccc_movim_cuent_corri cc,
          zon_secci zs,
          ccc_tempo_movim_crear_perce tp
        WHERE cc.oid_movi_cc = mcc.oid_movi_cc
        AND tp.oid_movi_cc = cc.oid_movi_cc
          AND cc.zscc_oid_secc = zs.oid_secc
          AND zs.zzon_oid_zona = v_zona.zzon_oid_zona
          AND cc.subp_oid_subp_crea = 2023
          AND cc.imp_movi > 0)
       AND EXISTS (
         SELECT NULL
         FROM ccc_tempo_movim_crear_perce tp
         WHERE tp.oid_movi_cc = mcc.oid_movi_cc);

    END LOOP;

 END IF;

 END ccc_pr_gener_movim_cuent_corri;

   PROCEDURE ccc_pr_gener_detal_cargo_abono(
      p_oid_tipo_abon_subp     IN    ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE)
   IS

   BEGIN

      INSERT INTO ccc_detal_cargo_abono_direc
         SELECT
            ccc_dcad_seq.nextval,          -- OID_DETA_CARG_ABON_DIRE       NUMBER(12)      NOT NULL,
            per.oid_cabe_carg,             --  CCAD_OID_CABE_CARG            NUMBER(12)      NOT NULL,
            per.oid_clie,                  --  CLIE_OID_CLIE                 NUMBER(12),
            ROWNUM,                        --  NUM_LINE                      NUMBER(6),
            0,                             --  NUM_HIST_GENE                 NUMBER(3),
            per.fec_fact,                  --  FEC_MOVI                      DATE,
            0,                             --  IMP_MONE                      NUMBER(12,2),
            per.val_impo,                  --  IMP                           NUMBER(12,2),
            NULL,                          --  VAL_REFE                      VARCHAR2(20 BYTE),
            per.num_lote,                  --  VAL_OBSE                      VARCHAR2(100 BYTE),
            NULL,                          --  VAL_GLOS_CONT                 VARCHAR2(40 BYTE),
            per.oid_mone,                  --  MONE_OID_MONE                 NUMBER(12),
            NULL,                          --  CMBA_OID_MOVI_BANC            NUMBER(12),
            per.oid_medi_pago,             --  MPAB_OID_MEDI_PAGO            NUMBER(12),
            per.oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_ANTE  NUMBER(12),
            per.oid_cuen_cont,             --  CUCO_OID_CUEN_CONT_CUOT_NUEV  NUMBER(12),
            per.oid_movi_cc,               --  MVCC_OID_MOVI_CC              NUMBER(12),
            per.oid_cuen_corr_banc,        --  CCBA_OID_CUEN_CORR_BANC       NUMBER(12),
            NULL,                          --  FEC_PAGO_BANC                 DATE,
            USER,                          --  COD_USUA                      VARCHAR2(20 BYTE) NOT NULL,
            per.oid_soci,                  --  SOCI_OID_SOCI                 NUMBER(12)      NOT NULL,
            p_oid_tipo_abon_subp,          -- TASP_OID_TIPO_ABON_SUBP       NUMBER(12)      NOT NULL,
            SYSDATE                        --  FEC_CREA                      DATE            NOT NULL
         FROM ccc_tempo_movim_crear_perce per;

   END ccc_pr_gener_detal_cargo_abono;


 PROCEDURE CCC_PR_APROB_ERROR_PAGO_BANCA(
  p_oid_movi_banc                  IN   ccc_movim_banca.oid_movi_banc%TYPE,
  p_cod_clie                       IN   ccc_movim_banca.cod_cons%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS

  lv_oid_subp_regu                 ccc_subpr.oid_subp%TYPE;
  lv_oid_tcab_regu                 ccc_tipo_cargo_abono.oid_tipo_carg_abon%TYPE;

  lv_reg_ccc_movim_banca           ccc_movim_banca%ROWTYPE;


 BEGIN

  -- Obteniendo el Oid de Cliente
  SELECT  mc.oid_clie
  INTO lv_reg_ccc_movim_banca.clie_oid_clie
  FROM mae_clien mc
  WHERE mc.cod_clie = p_cod_clie;

  -- Marcando el movimiento Como Regularizado --
  SELECT cs.oid_subp, tas.tcab_oid_tcab
  INTO lv_oid_subp_regu,lv_oid_tcab_regu
  FROM
     ccc_proce cp,
     ccc_subpr cs,
     ccc_tipo_abono_subpr tas
  WHERE cp.oid_proc=cs.ccpr_oid_proc
    AND tas.subp_oid_subp=cs.oid_subp
    AND cp.cod_proc =   gc_cod_proc_banc
    AND cs.cod_subp =  gc_cod_subp_regu;

  -- Regularizando
  UPDATE ccc_movim_banca mb
  SET
   mb.cod_iden_proc = gc_cod_iden_proc_regu,
   mb.ind_pago_regu = 1,
   mb.cod_usua_regu = p_cod_usua
  WHERE mb.oid_movi_banc = p_oid_movi_banc;

  SELECT mb.*
  INTO lv_reg_ccc_movim_banca
  FROM ccc_movim_banca mb
  WHERE mb.oid_movi_banc = p_oid_movi_banc;

  SELECT ccc_cmba_seq.nextval
  INTO lv_reg_ccc_movim_banca.oid_movi_banc
  FROM dual;

  lv_reg_ccc_movim_banca.num_lote:= CCC_PKG_GENER.CCC_FN_OBTIE_NUMER_LOTE;
  lv_reg_ccc_movim_banca.subp_oid_marc_crea := lv_oid_subp_regu;
  lv_reg_ccc_movim_banca.tcab_oid_abon_crea := lv_oid_tcab_regu;
  lv_reg_ccc_movim_banca.subp_oid_marc_ulti := lv_oid_subp_regu;
  lv_reg_ccc_movim_banca.tcab_oid_abon_ulti := lv_oid_tcab_regu;
  lv_reg_ccc_movim_banca.cod_iden_proc := gc_cod_iden_proc_tran;
  lv_reg_ccc_movim_banca.val_obse := p_oid_movi_banc;
  lv_reg_ccc_movim_banca.fec_proc := TRUNC(SYSDATE);
  lv_reg_ccc_movim_banca.num_cons_tran := 1;
  lv_reg_ccc_movim_banca.val_hora_regu := SYSDATE;

  INSERT INTO ccc_movim_banca VALUES lv_reg_ccc_movim_banca;

 /*
 EXCEPTION

  WHEN OTHERS THEN
   gv_des_log :='Fin del proceso de manera erronea :'
            || ln_sqlcode
            || ' '
            || ls_sqlerrm;
   gv_reco_trac := fin_pkg_gener.fin_fn_obtie_linea_error(DBMS_UTILITY.format_error_backtrace);
   RAISE_APPLICATION_ERROR(-20000,' *** Error en CCC_PR_GESTI_ERROR_PAGO_BANCA '
                                  || SQLERRM
                                  || ' *** encontrado en la linea '
                                  || gv_reco_trac.line_number
                                  || ' en el programa '
                                  || gv_reco_trac.program_owner
                                  || '.'
                                  || gv_reco_trac.program_name
                                 );
   */
 END CCC_PR_APROB_ERROR_PAGO_BANCA;

 PROCEDURE CCC_PR_ELIMI_ERROR_PAGO_BANCA(
  p_oid_movi_banc                  IN   ccc_movim_banca.oid_movi_banc%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE)
 IS
 BEGIN

  INSERT INTO ccc_movim_banca_elimi mb
   SELECT *
   FROM ccc_movim_banca mb
   WHERE mb.oid_movi_banc = p_oid_movi_banc;

  DELETE FROM ccc_movim_banca mb
  WHERE mb.oid_movi_banc = p_oid_movi_banc;

  INSERT INTO ccc_gesti_movim_banca
   SELECT
    mb.oid_movi_banc,
    gc_gest_movi_banc_elim,
    p_cod_usua,
    SYSDATE
   FROM ccc_movim_banca mb
   WHERE mb.oid_movi_banc = p_oid_movi_banc;

 END CCC_PR_ELIMI_ERROR_PAGO_BANCA;

 PROCEDURE CCC_PR_GENER_NOVED_DEUDA_WEB(
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE DEFAULT USER)
 IS

  lv_num_lote                      NUMBER(12);
  lv_ulti_oid_regi                 NUMBER(12);
  lv_ante_oid_regi                 NUMBER(12);

  lv_cod_erro                      VARCHAR2(4000);
  lv_id_proc_ejec                  fin_proce_ejecu.cod_proc_ejec%TYPE;
  lv_log_cod_proc                  fin_proce_ejecu.cod_proc%TYPE;
  lv_log_user                      fin_proce_ejecu.usu_proc%TYPE;

 BEGIN

  lv_num_lote := CCC_PKG_GENER.CCC_FN_OBTIE_NUMER_LOTE;
  lv_log_user := p_cod_usua;
  lv_log_cod_proc := gc_cod_carg_deud_web;

  FIN_PKG_GENER.FIN_PR_REGIS_PROCE(gc_cod_modu,lv_log_cod_proc,lv_log_user,lv_id_proc_ejec,lv_cod_erro);

  gv_des_log := 'Inicio Carga Deudas Web';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  SELECT fin.oid_ulti_regi_proc
  INTO lv_ante_oid_regi
  FROM fin_contr_regis_progr fin
  WHERE fin.cod_modu = gc_cod_modu
    AND fin.cod_prog = gc_cod_prog_carg_deud_web;

  gv_des_log := 'Oid Registro Anterior ' || lv_ante_oid_regi;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  SELECT MAX(det.oid_deta_carg_abon_dire)
  INTO lv_ulti_oid_regi
  FROM ccc_detal_cargo_abono_direc det
  WHERE det.oid_deta_carg_abon_dire > lv_ante_oid_regi;

  gv_des_log := 'Oid Registro Final ' || lv_ulti_oid_regi;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  IF ((lv_ante_oid_regi = lv_ulti_oid_regi) OR (lv_ulti_oid_regi IS NULL)) THEN
   gv_des_log := 'No hay novedades';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);
   RAISE e_no_exis_movi;
  END IF;

  gv_des_log := 'Borrando la entidad ccc_noved_clien_deuda_web';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  DELETE FROM ccc_noved_clien_deuda_web;

  gv_des_log := '   Insertando las consultoras a actualizar la deuda';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  INSERT INTO ccc_noved_clien_deuda_web
   WITH temp1 AS
    ( SELECT det.clie_oid_clie
      FROM
       ccc_detal_cargo_abono_direc det,
       ccc_regis_clien_deuda_web cdw
      WHERE det.clie_oid_clie = cdw.oid_clie
        AND det.oid_deta_carg_abon_dire > lv_ante_oid_regi
        AND det.oid_deta_carg_abon_dire <= lv_ulti_oid_regi
      GROUP BY det.clie_oid_clie )
   SELECT
    lv_num_lote,
    mc.cod_clie,
    SUBSTR(mc.val_nom1 || ' ' || mc.val_ape1,1,50),
    CASE
     WHEN mc.sal_deud_ante > 0 THEN LPAD(mc.sal_deud_ante*100,12,'0')
     ELSE LPAD(0*100,12,'0')
    END sal_deud_ante,
    'U'
   FROM
    mae_clien mc,
    temp1 t1
   WHERE mc.oid_clie = t1.clie_oid_clie;

  gv_des_log := '   Cantidad de Novedades a Actualizar ' || SQL%ROWCOUNT;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  gv_des_log := '   Insertando las consultoras a cargar la deuda';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  -- Cargar Consultoras a Insertar
  INSERT INTO ccc_noved_clien_deuda_web
   WITH temp1 AS (
      SELECT det.clie_oid_clie
      FROM ccc_detal_cargo_abono_direc det
      WHERE det.oid_deta_carg_abon_dire > lv_ante_oid_regi
        AND det.oid_deta_carg_abon_dire <= lv_ulti_oid_regi
        AND NOT EXISTS (
      SELECT NULL
      FROM ccc_regis_clien_deuda_web cdw
         WHERE cdw.oid_clie = det.clie_oid_clie)
      GROUP BY det.clie_oid_clie)
   SELECT
    lv_num_lote,
    mc.cod_clie,
    SUBSTR(mc.val_nom1 || ' ' || mc.val_ape1,1,50),
    CASE
     WHEN mc.sal_deud_ante > 0 THEN LPAD(mc.sal_deud_ante*100,12,'0')
     ELSE LPAD(0*100,12,'0')
    END sal_deud_ante,
    'I'
   FROM
    mae_clien mc,
    temp1 t1
   WHERE mc.oid_clie = t1.clie_oid_clie
     AND mc.sal_deud_ante > 0;


   gv_des_log := 'Cantidad de Novedades a Insertar ' || SQL%ROWCOUNT;
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

   INSERT INTO ccc_regis_clien_deuda_web
    SELECT
     mc.oid_clie,
     lv_num_lote,
     SYSDATE
    FROM mae_clien mc
    WHERE mc.sal_deud_ante > 0
      AND EXISTS (
         SELECT NULL
         FROM ccc_detal_cargo_abono_direc det
         WHERE det.oid_deta_carg_abon_dire > lv_ante_oid_regi
           AND det.oid_deta_carg_abon_dire <= lv_ulti_oid_regi
           AND det.clie_oid_clie = mc.oid_clie)
      AND NOT EXISTS (
         SELECT NULL
         FROM ccc_regis_clien_deuda_web cdw
         WHERE cdw.oid_clie = mc.oid_clie);

  gv_des_log := 'Cantidad de Clientes Registrados ' || SQL%ROWCOUNT;
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  gv_des_log := 'Guardando la informacion en el historico';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE(gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);

  INSERT INTO ccc_histo_clien_deuda_web
   SELECT * from ccc_noved_clien_deuda_web;

  UPDATE fin_contr_regis_progr fin
  SET fin.oid_ante_regi_proc = lv_ante_oid_regi,
      fin.oid_ulti_regi_proc = lv_ulti_oid_regi
  WHERE fin.cod_modu = gc_cod_modu
    AND fin.cod_prog = gc_cod_prog_carg_deud_web;

  gv_des_log := 'Fin Carga Deudas Web';
  FIN_PKG_GENER.FIN_PR_ACTUA_PROCE (gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);
  FIN_PKG_GENER.FIN_PR_FINAL_PROCE (gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,2);

 EXCEPTION

  WHEN e_no_exis_movi THEN
   gv_des_log := 'Fin Carga Deudas Web';
   FIN_PKG_GENER.FIN_PR_ACTUA_PROCE (gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,gv_des_log);
   FIN_PKG_GENER.FIN_PR_FINAL_PROCE (gc_cod_modu,lv_log_cod_proc,lv_id_proc_ejec,2);
   NULL;

  WHEN OTHERS THEN
   gv_des_log :='Fin del proceso de manera erronea :'
            || ln_sqlcode
            || ' '
            || ls_sqlerrm;
   gv_reco_trac := fin_pkg_gener.fin_fn_obtie_linea_error(DBMS_UTILITY.format_error_backtrace);
   RAISE_APPLICATION_ERROR(-20000,' *** Error '
                                  || SQLERRM
                                  || ' *** encontrado en la linea '
                                  || gv_reco_trac.line_number
                                  || ' en el programa '
                                  || gv_reco_trac.program_owner
                                  || '.'
                                  || gv_reco_trac.program_name
                                 );
 END CCC_PR_GENER_NOVED_DEUDA_WEB;

/***************************************************************************
    Descripcion       : Proceso de cargos y abonos
    Fecha Creacion    : 21/01/2009
    Autor             : Cristhian Roman
   ***************************************************************************/
   PROCEDURE CCC_PR_PROCE_CARGO_ABONO(
      p_cod_pais                VARCHAR2,
      p_cod_peri                VARCHAR2,
      p_cod_vent                VARCHAR2,
      p_pre_corr                VARCHAR2,
      p_cod_clie                VARCHAR2,
      p_tip_carg                VARCHAR2,
      p_tip_abon                VARCHAR2,
      p_cod_usua                VARCHAR2)

      IS

      v_oidCliente              ped_solic_cabec.clie_oid_clie%type;
      v_oidTerriAdmin           ped_solic_cabec.ztad_oid_terr_admi%type;
      v_oidVepo                 ped_solic_cabec.vepo_oid_valo_estr_geop%type;
      v_oidZona                 ped_solic_cabec.zzon_oid_zona%type;
      v_oidTerri                ped_solic_cabec.terr_oid_terr%type;
      v_oidClieDire             ped_solic_cabec.cldi_oid_clie_dire%type;
      v_oidTipoCliente          ped_solic_cabec.ticl_oid_tipo_clie%type;
      v_oidSubtTipoCliente      ped_solic_cabec.sbti_oid_subt_clie%type;
      v_oidTipoDocum            ped_solic_cabec.tdoc_oid_tipo_docu%type;
      v_oidProducto             ped_solic_posic.prod_oid_prod%type;
      v_codigoVenta             ped_solic_posic.val_codi_vent%type;
      v_montoCorregir           ped_solic_posic.val_porc_desc%type;

      v_oidTipoSoli             ped_tipo_solic_pais.oid_tipo_soli_pais%type;
      v_varFopa                 ped_tipo_solic_pais.fopa_oid_form_pago%type;
      v_almac                   ped_tipo_solic_pais.almc_oid_alma%type;
      v_varTipoCons             ped_tipo_solic_pais.tsol_oid_tipo_cons%type;
      v_varTido                 ped_tipo_solic_pais.tido_oid_tipo_docu%type;
      v_varSocie                ped_tipo_solic_pais.soci_oid_soci%type;
      v_varSubac                ped_tipo_solic.sbac_oid_sbac%type;
      v_varMoneda               ped_tipo_solic_pais.mone_oid_mone%type;
      v_varClase                ped_tipo_solic.clso_oid_clas_soli%type;
      v_varPais                 ped_tipo_solic_pais.pais_oid_pais%type;
      v_varGlosa                ped_tipo_solic_pais.val_glos%type;
      v_varTipoPosi             ped_tipo_solic_proce.tpos_oid_tipo_posi%type;
      v_varSubtipoPosic         ped_tipo_solic_proce.stpo_oid_subt_posi%type;
      v_varOidAct               ped_tipo_solic_pais.cact_oid_acti%type;

      v_precioCorrecto          NUMBER(12,2);
      v_OidCabe                 NUMBER(12);
      v_numeSoli                VARCHAR(10);

      v_oidPeriodo              cra_perio.oid_peri%type;
      v_fechaInicio             cra_crono.fec_inic%type;
      v_oidtasa                 ped_tasa_impue.oid_tasa_impu%type;
      v_valtasa                 ped_tasa_impue.val_tasa_impu%type;

      v_codParamPais            BAS_PARAM_PAIS.COD_PARA%type;
      v_valParamPais            BAS_PARAM_PAIS.VAL_PARA%type;

      lsparametroconso          VARCHAR(15);
      vFecFact                  VARCHAR(10);

      vTipoFactu                VARCHAR(1);

      BEGIN

      v_precioCorrecto:= TO_NUMBER(p_pre_corr,'9999999999.99');

      SELECT  a.clie_oid_clie
              ,a.ZTAD_OID_TERR_ADMI
              ,a.VEPO_OID_VALO_ESTR_GEOP
              ,a.ZZON_OID_ZONA
              ,a.TERR_OID_TERR
              ,a.cldi_oid_clie_dire
              ,a.TICL_OID_TIPO_CLIE
              ,a.SBTI_OID_SUBT_CLIE
              ,a.TDOC_OID_TIPO_DOCU
              ,b.prod_oid_prod
              ,b.val_codi_vent
              --, (v_precioCorrecto*b.VAL_PORC_DESC/100) - ((v_precioCorrecto*b.VAL_PORC_DESC/100)*b.NUM_UNID_ATEN)
               , ((v_precioCorrecto - (v_precioCorrecto * NVL (b.val_porc_desc, 0) / 100)) * b.num_unid_aten) - b.val_prec_fact_tota_loca MON_A_CORR

        INTO
             v_oidCliente
             ,v_oidTerriAdmin
             ,v_oidVepo
             ,v_oidZona
             ,v_oidTerri
             ,v_oidClieDire
             ,v_oidTipoCliente
             ,v_oidSubtTipoCliente
             ,v_oidTipoDocum
             ,v_oidProducto
             ,v_codigoVenta
             ,v_montoCorregir

        FROM  ped_solic_cabec a
             , ped_solic_posic b
            , zon_terri_admin c
            , zon_terri d
            , zon_secci e
            , zon_zona f
            , cra_perio g
            , seg_perio_corpo h
            , ped_tipo_solic_pais i
            , ped_tipo_solic j, mae_clien k
        WHERE a.OID_SOLI_CABE=b.SOCA_OID_SOLI_CABE
             and a.ZTAD_OID_TERR_ADMI=c.OID_TERR_ADMI
             and c.TERR_OID_TERR=d.OID_TERR
              and c.ZSCC_OID_SECC=e.OID_SECC
              and e.ZZON_OID_ZONA=f.OID_ZONA
             and a.PERD_OID_PERI=g.OID_PERI
             and g.PERI_OID_PERI=h.OID_PERI
             and a.TSPA_OID_TIPO_SOLI_PAIS=i.OID_TIPO_SOLI_PAIS
             and i.TSOL_OID_TIPO_SOLI=j.OID_TIPO_SOLI
             and a.CLIE_OID_CLIE=k.OID_CLIE
             and k.cod_clie=p_cod_clie
             and h.COD_PERI=p_cod_peri
             and b.VAL_CODI_VENT=p_cod_vent
             and j.cod_tipo_soli='SOC'
             and a.fec_fact is not null;

       IF(v_montoCorregir < 0)THEN

            SELECT b.oid_tipo_soli_pais
                   ,b.ALMC_OID_ALMA
                   ,b.FOPA_OID_FORM_PAGO
                   ,b.TSOL_OID_TIPO_CONS
                   ,b.TIDO_OID_TIPO_DOCU
                   ,b.CACT_OID_ACTI
                   ,a.SBAC_OID_SBAC
                   ,b.SOCI_OID_SOCI
                   ,b.MONE_OID_MONE
                   ,a.CLSO_OID_CLAS_SOLI
                   ,b.PAIS_OID_PAIS
                   ,b.VAL_GLOS
                   ,g.TPOS_OID_TIPO_POSI
                   ,g.STPO_OID_SUBT_POSI

            INTO
                   v_oidTipoSoli
                   ,v_almac
                   ,v_varFopa
                   ,v_varTipoCons
                   ,v_varTido
                   ,v_varOidAct
                   ,v_varSubac
                   ,v_varSocie
                   ,v_varMoneda
                   ,v_varClase
                   ,v_varPais
                   ,v_varGlosa
                   ,v_varTipoPosi
                   ,v_varSubtipoPosic

            FROM   ped_tipo_solic a
                   ,ped_tipo_solic_pais b
                   ,ped_tipo_solic_proce g
            WHERE  b.tsol_oid_tipo_soli=a.oid_tipo_soli
                   and a.cod_tipo_soli=p_tip_abon
                   and g.OPER_OID_OPER=36
                   and g.TSPA_OID_TIPO_SOLI_PAIS=b.OID_TIPO_SOLI_PAIS;

            vTipoFactu := 'A';

       ELSE
           SELECT b.oid_tipo_soli_pais
             ,b.ALMC_OID_ALMA
             ,b.FOPA_OID_FORM_PAGO
             ,b.TSOL_OID_TIPO_CONS
             ,b.TIDO_OID_TIPO_DOCU
             ,b.CACT_OID_ACTI
             ,a.SBAC_OID_SBAC
             ,b.SOCI_OID_SOCI
             ,b.MONE_OID_MONE
             ,a.CLSO_OID_CLAS_SOLI
             ,b.PAIS_OID_PAIS
             ,b.VAL_GLOS
             ,g.TPOS_OID_TIPO_POSI
             ,g.STPO_OID_SUBT_POSI

       INTO
                   v_oidTipoSoli
                   ,v_almac
                   ,v_varFopa
                   ,v_varTipoCons
                   ,v_varTido
                   ,v_varOidAct
                   ,v_varSubac
                   ,v_varSocie
                   ,v_varMoneda
                   ,v_varClase
                   ,v_varPais
                   ,v_varGlosa
                   ,v_varTipoPosi
                   ,v_varSubtipoPosic

      FROM   ped_tipo_solic a
             ,ped_tipo_solic_pais b
             ,ped_tipo_solic_proce g
      WHERE  b.tsol_oid_tipo_soli=a.oid_tipo_soli
             and a.cod_tipo_soli=p_tip_carg
             and g.OPER_OID_OPER=36
             and g.TSPA_OID_TIPO_SOLI_PAIS=b.OID_TIPO_SOLI_PAIS;

            vTipoFactu := 'C';

       END IF;

      SELECT ped_soca_seq.nextval
        INTO v_OidCabe
        FROM dual;


     v_numeSoli := STO_PKG_GENER.sto_fn_resrv_secue_nsoli(p_cod_pais,'PED001', '000', 1, to_char(sysdate, 'yy'));

     /*
     SELECT to_char(sysdate, 'yy') || lpad(VAL_ULTI_NUME_SOLI+1, 8, '0')
      INTO v_numeSoli
      FROM ped_numer_solic
      WHERE  val_oper = 'PED001'
         and cod_cana = 'VD'
         and cod_acce = 'GZ'
         and cod_suba = '000'
         and cod_pais = p_cod_pais
         and val_anio = to_char(sysdate, 'yy') FOR UPDATE;


      UPDATE ped_numer_solic
         SET VAL_ULTI_NUME_SOLI = VAL_ULTI_NUME_SOLI + 1
       WHERE val_oper = 'PED001'
         and cod_cana = 'VD'
         and cod_acce = 'GZ'
         and cod_suba = '000'
         and cod_pais = p_cod_pais
         and val_anio = to_char(sysdate, 'yy');
     */


      SELECT f.OID_PERI
             ,c.FEC_INIC

      INTO v_oidPeriodo,
           v_fechaInicio

      FROM   cra_crono c
             , bas_ctrl_fact d
             , seg_perio_corpo e
             , cra_perio f
      WHERE  d.IND_CAMP_ACT=1
             and d.STA_CAMP=0
             and d.COD_PERI=e.COD_PERI
             and e.OID_PERI=f.PERI_OID_PERI
             and f.OID_PERI=c.PERD_OID_PERI
             and c.CACT_OID_ACTI= v_varOidAct
             and c.ZZON_OID_ZONA= v_oidZona;


      INSERT INTO PED_SOLIC_CABEC (
                  OID_SOLI_CABE
                , FEC_PROG_FACT
                , NUM_CLIEN
                , TSPA_OID_TIPO_SOLI_PAIS
                , MONE_OID_MONE
                , TIDS_OID_TIPO_DESP
                , ALMC_OID_ALMA
                , MODU_OID_MODU
                , TICL_OID_TIPO_CLIE
                , PERD_OID_PERI
                , CLIE_OID_CLIE
                , CLIE_OID_CLIE_RECE_FACT
                , CLIE_OID_CLIE_PAGA
                , CLIE_OID_CLIE_DEST
                , CLDI_OID_CLIE_DIRE
                , TDOC_OID_TIPO_DOCU
                , SOCI_OID_SOCI
                , SBAC_OID_SBAC
                , TERR_OID_TERR
                , ZZON_OID_ZONA
                , VAL_NUME_SOLI
                , VAL_USUA
                , VAL_TASA_IMPU
                , FEC_CRON
                , IND_PERM_UNIO_SOL
                , VAL_TIPO_CAMB
                , VAL_BASE_FLET_LOCA
                , VAL_IMPO_FLET_LOCA
                , VAL_IMPO_FLET_TOTA_LOCA
                , VAL_IMPO_FLET_SIN_IMPU_TOTA
                , VAL_RECA_FLET_LOCA
                , VAL_OTRO_RECA_LOCA
                , VAL_TOTA_PAGA_LOCA
                , VAL_PREC_CATA_TOTA_LOCA
                , VAL_PREC_CATA_SIN_IMPU_TOTA
                , VAL_PREC_FACT_TOTA_LOCA
                , VAL_IMPO_IMPU_TOTA_LOCA
                , VAL_IMPO_DESC_1_TOTA_LOCA
                , VAL_IMPO_DESC_1_TOTA_DOCU
                , VAL_IMPO_DESC_1_SIN_IMPU_TOTA
                , VAL_IMPO_DESC_3_TOTA_DOCU
                , VAL_IMPO_DESC_3_SIN_IMPU_TOTA
                , VAL_IMPO_DESC_TOTA_LOCA
                , VAL_IMPO_DTO_1_SIN_IMP_TOT_LOC
                , VAL_IMPO_REDO_LOCA
                , VAL_BASE_FLET_DOCU
                , VAL_IMPO_FLET_DOCU
                , VAL_IMPO_DESC_TOTA_DOCU
                , VAL_IMPO_FLET_SIN_IMPU_DOCU
                , VAL_RECA_FLET_DOCU
                , VAL_OTRO_RECA_DOCU
                , VAL_TOTA_FLET_DOCU
                , VAL_IMPO_FLET_TOTA_DOCU
                , VAL_TOTA_FLET_LOCA
                , VAL_TOTA_PAGA_DOCU
                , VAL_PREC_CATA_TOTA_DOCU
                , VAL_PREC_CATA_SIN_IMPU_TOTA_DO
                , VAL_PREC_CONT_TOTA_LOCA
                , VAL_PREC_CONT_SIN_IMPU_TOTA
                , VAL_PREC_CONT_SIN_IMPU_TOTA_1
                , VAL_PREC_FACT_TOTA_DOCU
                , VAL_PREC_CATA_TOTA_LOC_UNI_DEM
                , VAL_PREC_NETO_TOTA_DOCU
                , VAL_PREC_NETO_TOTA_LOCA
                , VAL_IMPO_IMPU_TOTA_DOCU
                , VAL_IMPO_REDO_DOCU
                , VAL_IMPO_REDO_CONS_LOCA
                , VAL_IMPO_REDO_CONS_DOCU
                , IND_OC
                , IND_PEDI_PRUE
                , IND_TS_NO_CONSO
                , VAL_GLOS_OBSE
                , VAL_IMPO_DESC_3_TOTA_LOCA
                , VAL_IMPO_DTO_3_SIN_IMP_TOT_LOC
                , PAIS_OID_PAIS
                , TIDO_OID_TIPO_DOCU
                , VEPO_OID_VALO_ESTR_GEOP
                , ESSO_OID_ESTA_SOLI
                , GRPR_OID_GRUP_PROC
                , SBTI_OID_SUBT_CLIE
                , ACFI_OID_ACCE_FISI
                , TSPA_OID_TIPO_SOLI_PAIS_CONS
                , FOPA_OID_FORM_PAGO
                , CLSO_OID_CLAS_SOLI
                , ZTAD_OID_TERR_ADMI
                , OPER_OID_OPER
                , PROC_OID_PROC
                )
                VALUES (
                v_OidCabe
                , v_fechaInicio
                , 0
                , v_oidTipoSoli
                , v_varMoneda
                , 3
                , v_almac
                , 27
                , v_oidTipoCliente
                , v_oidPeriodo
                , v_oidCliente
                , v_oidCliente
                , v_oidCliente
                , v_oidCliente
                , v_oidClieDire
                , v_oidTipoDocum
                , v_varSocie
                , v_varSubac
                , v_oidTerri
                , v_oidZona
                , v_numeSoli
                , 'anonymous'
                , 0
                , sysdate
                , 1
                , 1

                , 0
                , 0
                , 0
                , 0
                , 0
                , 0

                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 0
                , 1
                , v_varGlosa
                , 0
                , 0
                , v_varPais
                , v_varTido
                , v_oidVepo
                , 1
                , 4
                , v_oidSubtTipoCliente
                , 1
                , v_varTipoCons
                , v_varFopa
                , v_varClase
                , v_oidTerriAdmin
                , 36
                , 1
                );

        SELECT decode(zz.OID_TASA_IMPU,NULL,z.OID_TASA_IMPU,zz.OID_TASA_IMPU),
               decode(zz.VAL_TASA_IMPU,NULL,z.VAL_TASA_IMPU,zz.VAL_TASA_IMPU)
        INTO   v_oidtasa,
               v_valtasa
        FROM  ped_impue_gener v
              ,ped_tasa_impue z
              ,ped_impue_negoc x
              ,mae_produ y
              ,ped_tasa_impue zz
        WHERE v.PAIS_OID_PAIS= v_varPais
              and v.SBAC_OID_SBAC= v_varSubac
              and v.TAIM_OID_TASA_IMPU=z.OID_TASA_IMPU
              and x.NEGO_OID_NEGO(+)=y.NEGO_OID_NEGO
              and x.TAIM_OID_TASA_IMPU=zz.OID_TASA_IMPU(+)
              and y.OID_PROD= v_oidProducto;

        INSERT INTO PED_SOLIC_POSIC (
                  OID_SOLI_POSI
                  , COD_POSI
                  , NUM_UNID_DEMA
                  , NUM_UNID_POR_ATEN
                  , VAL_TASA_IMPU
                  , SOCA_OID_SOLI_CABE
                  , TAIM_OID_TASA_IMPU
                  , TPOS_OID_TIPO_POSI
                  , PROD_OID_PROD
                  , FOPA_OID_FORM_PAGO
                  , VAL_PREC_CATA_UNIT_LOCA
                  , VAL_PREC_CONT_UNIT_LOCA
                  , VAL_PREC_CATA_UNIT_DOCU
                  , VAL_PREC_CONTA_UNIT_DOCU
                  , VAL_PREC_FACT_UNIT_LOCA
                  , VAL_PREC_FACT_UNIT_DOCU
                  , VAL_PREC_SIN_IMPU_UNIT_LOCA
                  , VAL_PREC_SIN_IMPU_UNIT_DOCU
                  , VAL_PREC_SIN_IMPU_TOTA_DOCU
                  , VAL_IMPO_DESC_UNIT_LOCA
                  , VAL_IMPO_DESC_UNIT_DOCU
                  , VAL_PREC_NETO_UNIT_LOCA
                  , VAL_PREC_NETO_TOTA_DOCU
                  , VAL_PREC_NETO_UNIT_DOCU
                  , VAL_PREC_TOTA_TOTA_LOCA
                  , VAL_PREC_TOTA_TOTA_DOCU
                  , VAL_IMPO_IMPU_UNIT_LOCA
                  , VAL_IMPO_IMPU_UNIT_DOCU
                  , VAL_IMPO_DESC_TOTA_DOCU
                  , VAL_IMPO_IMPU_TOTA_LOCA
                  , VAL_IMPO_IMPU_TOTA_DOCU
                  , VAL_IMPO_DESC_TOTA_LOCA
                  , VAL_PREC_TOTA_UNIT_LOCA
                  , VAL_PREC_TOTA_UNIT_DOCU
                  , VAL_PREC_CONT_TOTA_LOCA
                  , VAL_PREC_CATA_TOTA_LOCA
                  , VAL_PREC_CATA_TOTA_DOCU
                  , VAL_PREC_CONT_TOTA_DOCU
                  , VAL_PORC_DESC
                  , VAL_PREC_CATA_TOTA_LOCA_UNID
                  , NUM_UNID_DEMA_REAL
                  , NUM_UNID_COMPR
                  , NUM_UNID_CAMB
                  , NUM_UNID_VENT
                  , NUM_UNID_ATEN
                  , VAL_CODI_VENT_FICT
                  , VAL_PREC_FACT_TOTA_LOCA
                  , VAL_PREC_FACT_TOTA_DOCU
                  , VAL_PREC_SIN_IMPU_TOTA_LOCA
                  , VAL_PREC_NETO_TOTA_LOCA
                  , OFDE_OID_DETA_OFER
                  , ESPO_OID_ESTA_POSI
                  , STPO_OID_SUBT_POSI
                  , IND_RECU_OBLI
                  , VAL_CODI_VENT
                  , SOPO_OID_SOLI_POSI
                  , IND_NO_IMPR
                  , IND_DENT_FUER_CAJA_BOLS
                  , VAL_CATA
                  , NUM_PAGI_CATA
                  , NUM_CONS
                  , NUM_DOCU_CONT_INTE
                  , VAL_EJER_DOCU_CONT_INTE
                  , VAL_IMPO_DES_SIN_IMP_UNIT_LOCA
                  , VAL_IMPO_DES_SIN_IMP_UNIT_DOCU
                  , VAL_IMPO_DES_SIN_IMP_TOTA
                  , VAL_IMPO_DES_SIN_IMP_TOTA_DOCU
                  , VAL_OBSE )
                  VALUES (
                   ped_sopo_seq.nextval
                  , 0
                  , 1
                  , 1
                  , v_valtasa
                  , v_OidCabe
                  , v_oidtasa
                  , v_varTipoPosi
                  , v_oidProducto
                  , v_varFopa
                  , v_montoCorregir
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , NULL
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 0
                  , 1
                  , 1
                  , NULL
                  , NULL
                  , 1
                  , NULL
                  , 0
                  , 0
                  , 0
                  , 0
                  , NULL
                  , 4
                  , v_oidSubtTipoCliente
                  , NULL
                  , p_cod_vent
                  , NULL
                  , 0
                  , NULL
                  , NULL
                  , NULL
                  , NULL
                  , NULL
                  , NULL
                  , 0
                  , 0
                  , 0
                  , 0
                  , NULL
                  );

        BEGIN
          SELECT COD_PARA, VAL_PARA
            INTO v_codParamPais, v_valParamPais
            FROM BAS_PARAM_PAIS
           WHERE COD_PAIS = p_cod_pais
             AND COD_SIST = 'OCR'
             AND NOM_PARA = 'indFactuLinea';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            v_codParamPais := NULL;
        END;

        IF v_codParamPais IS NOT NULL AND v_valParamPais = '1' THEN

           ---lsparametroconso := sto_pkg_gener.sto_fn_obten_param_ocr(v_codParamPais, 'STO_IND_CONSOL');
           lsparametroconso := nvl(sto_pkg_gener.sto_fn_obten_param_ocr(v_codParamPais,'STO_TIPO_CALC_FACT'),'1');

          SELECT TO_CHAR(FEC_PROC, 'DD/MM/YYYY')
            INTO vFecFact
            FROM BAS_CTRL_FACT
           WHERE STA_CAMP = '0'
             AND IND_CAMP_ACT = '1';

           sto_pkg_envio_valid_sicc.sto_pr_genera_consolidado(v_OidCabe, vFecFact, p_cod_pais, lsparametroconso, vTipoFactu);

        END IF;

        /* Granbando Registro OK en tabla de Auditoria */
        INSERT INTO CCC_AUDIT_INFOR (
                  COD_CLIE,
                  VAL_MONT,
                  VAL_RESU,
                  COD_USUA,
                  FEC_PROC,
                  COD_VENT,
                  COD_PERI
              )
              VALUES(
                  p_cod_clie,
                  v_montoCorregir,
                  'OK',
                  p_cod_usua,
                  SYSDATE,
                  p_cod_vent,
                  p_cod_peri
              );

    EXCEPTION
    WHEN OTHERS THEN
      ln_sqlcode := SQLCODE;
      ls_sqlerrm := substr(SQLERRM, 1, 250);

      INSERT INTO CCC_AUDIT_INFOR (
                  COD_CLIE,
                  VAL_MONT,
                  VAL_RESU,
                  COD_USUA,
                  FEC_PROC,
                  COD_VENT,
                  COD_PERI
              )
              VALUES(
                  p_cod_clie,
                  v_montoCorregir,
                  SUBSTR(ls_sqlerrm, 1, 1000),
                  p_cod_usua,
                  SYSDATE,
                  p_cod_vent,
                  p_cod_peri
              );

END CCC_PR_PROCE_CARGO_ABONO;

  /***************************************************************************
    Descripcion       : Proceso que realiza la determinacion de los periodos
                        activos y se calculan los periodos anteriores
    Fecha Creacion    : 20/01/2010
    Autor             : Jose Luis Rodriguez
  ***************************************************************************/
  PROCEDURE CCC_PR_ACTUA_SALDO_LEVAN(
      p_cod_pais  seg_pais.cod_pais%TYPE,
      p_cod_soci  seg_socie.cod_soci%TYPE )
  IS
    lv_cod_peri_actual  VARCHAR2(6);
    lv_cod_peri_cruce   VARCHAR2(6);
    lv_cod_peri_1       VARCHAR2(6);
    lv_cod_peri_2       VARCHAR2(6);
    lv_cod_peri_3       VARCHAR2(6);
    ln_ind_Periodo      NUMBER(5); -- Variable para determinar el numero de periodos

    CURSOR c_pact  IS
      SELECT pc.cod_peri
        FROM cra_perio cp,
             seg_perio_corpo pc
       WHERE cp.peri_oid_peri = pc.oid_peri
         AND trunc(SYSDATE) >= cp.fec_inic
         AND trunc(SYSDATE) <= cp.fec_fina
      ORDER BY pc.cod_peri;

  BEGIN

    gv_log_cod_pais := p_cod_pais;
    gv_log_cod_soci := p_cod_soci;
    gv_log_user     := USER;
    gv_log_cod_modu := 'CCC';  -- Cuentas Corrientes
    gv_log_cod_proc := '25';

    FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                           gv_log_user, gv_cod_proc_ejec );

    gv_des_log:='Inicio CCC_PR_ACTUA_SALDO_LEVAN ';
    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                               gv_cod_proc_ejec, gv_des_log );

    /* identifica  periodo actual ademas determian si hay  cruce  de campa?a */
    ln_ind_Periodo := 0;
    FOR  v_pact IN c_pact LOOP
      ln_ind_Periodo := ln_ind_Periodo + 1;
      IF ln_ind_Periodo = 1 THEN
        lv_cod_peri_actual := v_pact.cod_peri;
      ELSE
        IF ln_ind_Periodo = 2 THEN
          lv_cod_peri_cruce := v_pact.cod_peri;
        ELSE
          gv_des_log:='Error mas  de dos periodos en int_solic_conso_cabec... ' ;

          FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                     gv_cod_proc_ejec, gv_des_log );

          raise_application_error(-20010, gv_des_log);
        END IF;
      END IF;
    END LOOP;

    /*  calcula 3 periodos  anteriores */
    lv_cod_peri_1 := FIN_PKG_GENER.FIN_FN_CALCU_PERIO_NANTE(lv_cod_peri_actual, 1);
    lv_cod_peri_2 := FIN_PKG_GENER.FIN_FN_CALCU_PERIO_NANTE(lv_cod_peri_actual, 2);
    lv_cod_peri_3 := FIN_PKG_GENER.FIN_FN_CALCU_PERIO_NANTE(lv_cod_peri_actual, 3);

    IF ln_ind_Periodo = 2 THEN
      gv_des_log:='Cruce  de Campa?a Se  Procesa tambien como periodo actual: ' || lv_cod_peri_cruce ;

      FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                                 gv_cod_proc_ejec, gv_des_log );

      dbms_output.put_line(gv_des_log);

      CCC_PKG_PROCE.CCC_PR_ACTUA_SALDO(lv_cod_peri_cruce);
      -- COMMIT;
    END IF;

    gv_des_log:='Inicio Actulizacion de saldos para Levantamiento, peri actual: ' || lv_cod_peri_actual ;
    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                               gv_cod_proc_ejec, gv_des_log );
    dbms_output.put_line(gv_des_log);

    CCC_PKG_PROCE.CCC_PR_ACTUA_SALDO(lv_cod_peri_actual);
    -- COMMIT;

    gv_des_log:='Inicio Actu saldo Histo peri1: ' || lv_cod_peri_1 ;
    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                               gv_cod_proc_ejec, gv_des_log );
    dbms_output.put_line(gv_des_log);

    CCC_PKG_PROCE.CCC_PR_ACTUA_SALDO_HISTO( p_cod_pais, p_cod_soci, lv_cod_peri_1, 'DEP');
    -- COMMIT;

    gv_des_log:='Inicio Actu saldo Histo peri2: ' || lv_cod_peri_2 ;
    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                               gv_cod_proc_ejec, gv_des_log );
    dbms_output.put_line(gv_des_log);

    CCC_PKG_PROCE.CCC_PR_ACTUA_SALDO_HISTO( p_cod_pais, p_cod_soci, lv_cod_peri_2 , 'DEP');
    -- COMMIT;

    gv_des_log:='Inicio Actu saldo Histo peri3: ' || lv_cod_peri_3 ;
    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                               gv_cod_proc_ejec, gv_des_log );
    dbms_output.put_line(gv_des_log);

    CCC_PKG_PROCE.CCC_PR_ACTUA_SALDO_HISTO( p_cod_pais, p_cod_soci, lv_cod_peri_3, 'DEP' );
    -- COMMIT;

    UPDATE ccc_segu_leva_deud s
    SET s.cod_secc = GEN_PKG_GENER.gen_fn_clien_datos_CODIG(s.cod_clie,'COD_SECC')
    WHERE s.cod_secc IS NULL;

    gv_des_log:= 'Fin Actualizacion de saldos';
    dbms_output.put_line(gv_des_log);

    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                               gv_cod_proc_ejec, gv_des_log );

    FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                           gv_cod_proc_ejec, 2 );

  END CCC_PR_ACTUA_SALDO_LEVAN;

  /***************************************************************************
    Descripcion       : Proceso que realiza la evaluacion de un periodo activo
    Fecha Creacion    : 20/01/2010
    Autor             : Jose Luis Rodriguez
  ***************************************************************************/
 PROCEDURE CCC_PR_ACTUA_SALDO(
  p_cod_peri                     IN  seg_perio_corpo.cod_peri%TYPE)
 IS

  v_oid_peri                cra_perio.oid_peri%TYPE;
  v_seg_oid_peri            cra_perio.oid_peri%TYPE;
  v_oid_clie                NUMBER(12);
  v_ulti_movi_deud_ante     DATE;
  v_fech_ulti_pago          DATE;
    v_ulti_pago_actu          DATE;
    v_fec_docu_actu           DATE;
    v_oid_tipo_soli_cons      NUMBER(12);
    v_oid_soli_cabe           NUMBER(12);
    v_oid_tipo_soli_pais_cons NUMBER(12);
    v_cod_secc                VARCHAR2(4);
    v_oid_subp_ulti_deud_ant  NUMBER(12);
    v_dif                     NUMBER(12);
    v_dif_actu                NUMBER(12);
    v_deud_ant                NUMBER(12,2);
    v_mont_ped                NUMBER(12,2);
    v_mont_ped_pend           NUMBER(12,2);
    v_num_ped_fact            NUMBER(12);
    v_ind_anul                VARCHAR2(2);
    v_ind_fact                VARCHAR2(2);
    v_oid_anul                VARCHAR2(2);
    v_stat_deud_ant           VARCHAR2(50);
    v_regu_deud_ant           VARCHAR2(20);
    v_stat_deud_pedi          VARCHAR2(50);
    v_mont_perm               NUMBER(12,2);
    v_sub_pago                NUMBER(12);

    lv_cont_reg_lei           NUMBER(12);
    lv_cont_reg_ins           NUMBER(12);
    lv_cargo_flx              VARCHAR2(2);

    -- Se obtiene la relacion de clientes que han tenido levantamiento por deuda
    CURSOR c_clie IS
      SELECT c.*
        FROM int_solic_conso_cabec c
       WHERE c.ind_admi_cart = 1
         AND c.ind_erro_remp = 0
         AND c.ind_erro_deud = 2
          AND c.cod_peri = p_cod_peri;

  TYPE t_clie IS TABLE OF c_clie%ROWTYPE;
  v_clie t_clie;

 BEGIN
 
     FOR Y IN (  
    
    select a.sec_nume_docu, trunc(fec_crea) fec_crea, usu_crea, val_obse from  int_solic_conso_cabec a,  sto_clien_benef_deuda b
    where ind_ocs_proc=1 and ind_erro_deud=2 and ind_admi_cart=0 
    and b.clie_oid_clie=a.clie_oid_clie and b.oid_peri=a.perd_oid_peri
                 
                 ) LOOP

                      
                         update int_solic_conso_cabec a set a.ind_admi_cart=1, a.fec_admi_cart=y.fec_crea
                         , a.usu_admi_cart=y.usu_crea, a.obs_prub=y.val_obse where a.sec_nume_docu=y.sec_nume_docu
                         ;
                         


     END LOOP;
      
  --dbms_output.put_line('INICIO CCC_PR_ACTUA_SALDO  ' || p_cod_peri );
  v_mont_perm:=10;
  lv_cont_reg_lei := 0;
  lv_cont_reg_ins := 0;

  -- Eliminado data actual
  DELETE FROM ccc_segu_leva_deud d
  WHERE d.cod_peri = p_cod_peri;

  -- Obteniendo el oid del periodo corporativo
  SELECT s.oid_peri
  INTO v_seg_oid_peri
  FROM seg_perio_corpo s
  WHERE s.cod_peri = p_cod_peri;

  -- Obteniendo el oid del periodo del pais
  SELECT MIN(p.oid_peri)
  INTO v_oid_peri
  FROM cra_perio p
  WHERE p.peri_oid_peri = v_seg_oid_peri;

  -- Obteniendo el OID del tipo de solicitud Consolidado O/C
  SELECT pts.oid_tipo_soli
  INTO v_oid_tipo_soli_cons
  FROM ped_tipo_solic pts
  WHERE pts.cod_tipo_soli = 'C1';

  -- Obteniendo el OID del tipo de solicitud pais Consolidado O/C
  SELECT ptsp.oid_tipo_soli_pais
  INTO v_oid_tipo_soli_pais_cons
  FROM ped_tipo_solic_pais ptsp
  WHERE ptsp.tsol_oid_tipo_soli = v_oid_tipo_soli_cons;

  -- Obteniendo el OID del estado de anulacion
  SELECT pes.oid_esta_soli
  INTO v_oid_anul
  FROM ped_estad_solic pes
  WHERE pes.cod_esta_soli = 'AN';

  OPEN c_clie;
  LOOP
   FETCH c_clie BULK COLLECT INTO v_clie LIMIT 1000;
   EXIT WHEN v_clie.COUNT <= 0;

   FOR i IN v_clie.FIRST .. v_clie.LAST LOOP
    
    lv_cont_reg_lei := lv_cont_reg_lei + 1;
    
    IF (v_clie(i).ind_proc_gp2='1') THEN

     --La consultora facturo su pedido
     v_ind_fact := 'SI';
     v_fech_ulti_pago := NULL;
     v_regu_deud_ant := 0;
     v_deud_ant  := 0;

     -- Obteniendo el OID de la consultora
     SELECT m.oid_clie
     INTO v_oid_clie
     FROM mae_clien m
     WHERE m.cod_clie = v_clie(i).cod_clie;

     -- Validando si tiene pedidos no anulados
     SELECT COUNT(*)
     INTO v_num_ped_fact
     FROM ped_solic_cabec c
     WHERE c.clie_oid_clie = v_oid_clie
       AND c.perd_oid_peri = v_oid_peri
       AND c.tspa_oid_tipo_soli_pais = v_oid_tipo_soli_pais_cons
       AND c.val_tota_paga_loca > 0
       AND c.esso_oid_esta_soli <> v_oid_anul;

     IF (v_num_ped_fact > 0) THEN

      v_ind_anul := 'NO';

      /****** INICIO SEGUIMIENTO A LA DEUDA ANTERIOR ******/
      SELECT MAX(trunc(mcc.fec_ulti_movi))
      INTO v_ulti_movi_deud_ante
      FROM ccc_movim_cuent_corri mcc
      WHERE mcc.clie_oid_clie = v_oid_clie
        AND mcc.fec_venc <= trunc(v_clie(i).fec_admi_cart)
        AND mcc.imp_movi > 0
        AND mcc.subp_oid_subp_crea IN (2001,2010);
     
     
      -- VALIDANDO SI REALIZO ALGUN PAGO
      IF ( v_ulti_movi_deud_ante > trunc(v_clie(i).fec_admi_cart ) ) THEN

       v_fech_ulti_pago := v_ulti_movi_deud_ante;
       v_dif := trunc(v_fech_ulti_pago) - trunc(v_clie(i).fec_admi_cart);

       SELECT MAX(mcc.subp_oid_subp_ulti)
       INTO v_oid_subp_ulti_deud_ant
       FROM ccc_movim_cuent_corri mcc
       WHERE mcc.fec_ulti_movi = mcc.fec_ulti_movi
         AND mcc.clie_oid_clie = v_oid_clie
         AND mcc.fec_venc <= trunc(v_clie(i).fec_admi_cart);

       IF (v_oid_subp_ulti_deud_ant = 2007) THEN
                    v_regu_deud_ant:= 'CDR';
                  ELSE
                    v_regu_deud_ant:= 'BANCO';
                  END IF;

                ELSE
                  v_fech_ulti_pago := NULL;
                  v_regu_deud_ant := NULL;
                  v_stat_deud_ant := 'PENDIENTE';
                  v_dif := trunc(SYSDATE) - trunc(v_clie(i).fec_admi_cart);
       END IF;
                
       v_deud_ant:= CCC_PKG_GENER.CCC_FN_OBTIE_SALDO_CAMPA_ANTER(v_oid_clie,p_cod_peri);
 
       IF (v_Deud_ant < v_mont_perm)  THEN
        v_stat_deud_ant :='OK';
       ELSE
        v_stat_deud_ant :='SOLO PAGO PARCIAL';
       END IF;
        
       /* Buscando la deuda actual
                SELECT SUM(mcc.imp_pend)
                  INTO v_deud_ant
                  FROM ccc_movim_cuent_corri mcc
                 WHERE mcc.clie_oid_clie = v_oid_clie
                   AND mcc.fec_venc <= trunc(v_clie(i).fec_admi_cart);

                */
              
                /****** FIN SEGUIMIENTO A LA DEUDA ANTERIOR ******/


                /******* INICIO PEDIDO GENERADO ********************/

                -- Buscando el Monto el Pedido de la Campa?a
                BEGIN
                  SELECT c.oid_soli_cabe,
                         trunc(c.fec_fact)
                    INTO v_oid_soli_cabe,
                         v_fec_docu_actu
                    FROM ped_solic_cabec c
                   WHERE c.clie_oid_clie = v_oid_clie
                     AND c.perd_oid_peri = v_oid_peri
                     AND c.tspa_oid_tipo_soli_pais = v_oid_tipo_soli_pais_cons
                     AND c.val_tota_paga_loca > 0
                     AND c.esso_oid_esta_soli <> v_oid_anul;

                EXCEPTION
                  WHEN too_many_rows THEN
                    dbms_output.put_line('Cllie ' || v_oid_clie || 'Consolidado : ' || v_oid_tipo_soli_pais_cons );
                END;

                SELECT SUM(mcc.imp_movi),
                       SUM(mcc.imp_pend),
                       MAX(trunc(mcc.fec_ulti_movi))
                  INTO v_mont_ped,
                       v_mont_ped_pend,
                       v_ulti_pago_actu
                  FROM ccc_movim_cuent_corri mcc
                 WHERE mcc.clie_oid_clie = v_oid_clie
                   AND mcc.subp_oid_subp_crea IN (2001,2023)
                   AND mcc.imp_movi > 0
                   AND mcc.tspa_oid_tipo_soli_pais IN (2001,2133)
                   AND mcc.perd_oid_peri = v_oid_peri;

                IF v_mont_ped = v_mont_ped_pend THEN
                  v_stat_deud_pedi := 'PENDIENTE';
                  v_ulti_pago_actu := NULL;
                  v_dif_actu := trunc(SYSDATE) - v_Fec_docu_Actu;
                  v_stat_deud_pedi := NULL;
                ELSE
                  IF v_mont_ped_pend < 10 THEN
                    v_stat_deud_pedi := 'OK';
                    v_ulti_pago_actu := v_ulti_pago_actu;
                    v_dif_actu := v_ulti_pago_actu - v_Fec_docu_Actu;
                  ELSE
                    v_stat_deud_pedi := 'SOLO PAGO PARCIAL';
                    v_ulti_pago_actu := v_ulti_pago_actu;
                    v_dif_actu := v_ulti_pago_actu - v_Fec_docu_Actu;
                  END IF;

                  IF v_dif_actu < 0 THEN
                    v_ulti_pago_actu := v_Fec_docu_Actu;
                    v_dif_actu := 0;
                  END IF;

                  SELECT MAX(mcc.subp_oid_subp_ulti)
                    INTO v_sub_pago
                    FROM ccc_movim_cuent_corri mcc
                   WHERE mcc.subp_oid_subp_crea = 2001
                     AND mcc.soca_oid_soli_cabe = v_oid_soli_cabe
                     AND mcc.fec_ulti_movi = v_ulti_pago_actu;

                  IF v_sub_pago = '2007' THEN
                    v_stat_deud_pedi := 'CDR';
                  ELSE
                    v_stat_deud_pedi := 'BANCO';
                  END IF;
                END IF;

              ELSE
                -- La consultora paso pedido, pero lo anulo
                v_ind_anul := 'SI';
                v_fec_docu_actu := NULL;
                v_mont_ped := NULL;
                v_mont_ped_pend := NULL;
                v_ulti_pago_actu := NULL;
                v_dif := NULL;
                v_dif_actu := NULL;
                v_stat_deud_pedi := 'PEDIDO ANULADO';
                v_stat_deud_ant := 'PEDIDO ANULADO';
              END IF;

            ELSE
              -- La consultora tuvo levantamiento, pero no facturo.
              v_ind_fact := 'NO';
              v_fec_docu_actu := NULL;
              v_mont_ped := NULL;
              v_mont_ped_pend := NULL;
              v_ulti_pago_actu := NULL;
              v_dif := NULL;
              v_dif_actu := NULL;
              v_stat_deud_ant  := 'NO FACTURO';
              v_stat_deud_pedi := 'NO FACTURO';
            END IF;

            --Cargos por FLX
             SELECT decode(count(1),0,'NO','SI')
            INTO lv_cargo_flx
          from flx_cuota_flexi_factu_detal fd, ccc_movim_cuent_corri mcc, cra_perio cp, seg_perio_corpo sp
         WHERE fd.oid_movi_carg_flex = mcc.oid_movi_cc
           AND fd.oid_peri_cuot_flex =  cp.oid_peri
           AND cp.peri_oid_peri = sp.oid_peri
           AND sp.cod_peri = v_clie(i).cod_peri
           and fd.cod_clie = v_clie(i).cod_clie
           AND mcc.imp_pend > 0;

            INSERT INTO ccc_segu_leva_deud VALUES
                (v_clie(i).cod_pais, v_clie(i).cod_peri, v_clie(i).cod_regi, v_clie(i).des_regi, v_clie(i).cod_zona, v_cod_secc,
                 v_clie(i).cod_terr, v_clie(i).des_zona, v_clie(i).cod_clie, v_clie(i).nom_clie, v_clie(i).ind_admi_Cart,
                 v_clie(i).val_sald_deud, v_clie(i).usu_admi_cart, v_clie(i).obs_prub, v_ind_fact, v_ind_anul, trunc(v_clie(i).fec_admi_Cart),
                 v_fech_ulti_pago, v_regu_deud_ant, v_deud_ant, v_stat_deud_ant, v_dif, v_fec_docu_actu, v_mont_ped, v_ulti_pago_actu,
                 v_stat_deud_pedi, v_mont_ped_pend, v_stat_deud_pedi, v_dif_Actu,lv_cargo_flx);


            lv_cont_reg_ins := lv_cont_reg_ins + 1;

          END LOOP;

   EXIT WHEN c_clie%NOTFOUND;
        -- COMMIT;
  END LOOP;

  CLOSE c_clie;

  UPDATE ccc_segu_leva_deud s
  SET s.cod_secc = GEN_PKG_GENER.gen_fn_clien_datos_CODIG(s.cod_clie,'COD_SECC')
  WHERE s.cod_secc IS NULL;

  gv_des_log:='Fin Act CCC_PR_ACTUA_SALDO reg leidos: ' || lv_cont_reg_lei ||  '  reg  grabados ' ||  lv_cont_reg_ins;
  FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                               gv_cod_proc_ejec, gv_des_log );
    --dbms_output.put_line(gv_des_log);

 END CCC_PR_ACTUA_SALDO;

  /***************************************************************************
    Descripcion       : Proceso que realiza la evaluacion de un periodo que
                        es historico, es decir uno de los 3 periodos anteriores
                        al periodo activo.
    Fecha Creacion    : 20/01/2010
    Autor             : Jose Luis Rodriguez
  ***************************************************************************/
 PROCEDURE CCC_PR_ACTUA_SALDO_HISTO(
  p_cod_pais                     IN   seg_pais.cod_pais%TYPE,
  p_cod_soci                     IN   seg_socie.cod_soci%TYPE,
  p_cod_peri                     IN   seg_perio_corpo.cod_peri%TYPE,
  p_cod_tipo_eje                 IN   VARCHAR2) --  tipo ejecucion:  IND independiente genera log propio,
                               --                   DEP  dependiente  reporta  en log de proceso principal
 IS

    v_oid_peri                cra_perio.oid_peri%TYPE;
    v_seg_oid_peri            cra_perio.oid_peri%TYPE;
    v_oid_clie                NUMBER(12);
    v_ulti_movi_deud_ante     DATE;
    v_fech_ulti_pago          DATE;
    v_ulti_pago_actu          DATE;
    v_fec_docu_actu           DATE;
    v_oid_tipo_soli_cons      NUMBER(12);
    v_oid_soli_cabe           NUMBER(12);
    v_oid_tipo_soli_pais_cons NUMBER(12);
    v_cod_secc                VARCHAR2(4);
    v_oid_subp_ulti_deud_ant  NUMBER(12);
    v_dif                     NUMBER(12);
    v_dif_actu                NUMBER(12);
    v_deud_ant                NUMBER(12,2);
    v_mont_ped                NUMBER(12,2);
    v_mont_ped_pend           NUMBER(12,2);
    v_num_ped_fact            NUMBER(12);
    v_ind_anul                VARCHAR2(2);
    v_ind_fact                VARCHAR2(2);
    v_oid_anul                VARCHAR2(2);
    v_stat_deud_ant           VARCHAR2(50);
    v_regu_deud_ant           VARCHAR2(20);
    v_stat_deud_pedi          VARCHAR2(50);
    v_mont_perm               NUMBER(12,2);
    v_sub_pago                NUMBER(12);

    lv_cont_reg_lei           NUMBER(12);
    lv_cont_reg_ins           NUMBER(12);
    lv_cargo_flx              VARCHAR2(2);

    CURSOR c_clie IS
      SELECT c.*
        FROM ped_histo_solic_conso_cabec c
       WHERE c.ind_admi_cart=1
          AND c.ind_erro_remp=0
          AND c.ind_erro_deud=2
          AND c.cod_pais = p_cod_pais
          AND c.cod_peri= p_cod_peri;

    TYPE t_clie IS TABLE OF c_clie%ROWTYPE;
    v_clie t_clie;

  BEGIN
    
     FOR Y IN (  
    
    select a.sec_nume_docu, trunc(fec_crea) fec_crea, usu_crea, val_obse from  ped_histo_solic_conso_cabec a,  sto_clien_benef_deuda b
    where ind_ocs_proc=1 and ind_erro_deud=2 and ind_admi_cart=0 and cod_peri=p_cod_peri
    and b.clie_oid_clie=a.clie_oid_clie and b.oid_peri=a.perd_oid_peri
                 
                 ) LOOP

                      
                         update ped_histo_solic_conso_cabec a set a.ind_admi_cart=1, a.fec_admi_cart=y.fec_crea
                         , a.usu_admi_cart=y.usu_crea, a.obs_prub=y.val_obse where a.sec_nume_docu=y.sec_nume_docu
                         and a.cod_peri=p_cod_peri
                         ;
                         


     END LOOP;
   
    dbms_output.put_line('INICIO CCC_PR_ACTUA_SALDO_HISTO  ' || p_cod_peri );

    IF p_cod_tipo_eje = 'IND' THEN
      /*  SI  TIPO DE PROCESO ES INDEPENDIENTE INICIAR  NUEVO  LOG */
      gv_log_cod_pais := p_cod_pais;
      gv_log_cod_soci := p_cod_soci;
      gv_log_user     := USER;
      gv_log_cod_modu := 'CCC';  -- Cuentas Corrientes ...
      gv_log_cod_proc := '25';
      FIN_PKG_GENER.FIN_PR_REGIS_PROCE_EJEC(gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_log_user, gv_cod_proc_ejec);
    END IF;

    gv_des_log:='INICIO CCC_PR_ACTUA_SALDO_HISTO  ' || p_cod_peri;
    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                               gv_cod_proc_ejec, gv_des_log );
    dbms_output.put_line(gv_des_log);

    v_mont_perm := 10;

    lv_cont_reg_lei := 0;
    lv_cont_reg_ins := 0;

    -- Eliminado data actual
    DELETE FROM ccc_segu_leva_deud d
     WHERE d.cod_peri = p_cod_peri;

    -- Obteniendo el oid del periodo corporativo
    SELECT s.oid_peri
      INTO v_seg_oid_peri
       FROM seg_perio_corpo s
     WHERE s.cod_peri = p_cod_peri;

    -- Obteniendo el oid del periodo del pais
    SELECT MIN(p.oid_peri)
      INTO v_oid_peri
      FROM cra_perio p
     WHERE p.peri_oid_peri = v_seg_oid_peri;

    -- Obteniendo el OID del tipo de solicitud Consolidado O/C
    SELECT pts.oid_tipo_soli
      INTO v_oid_tipo_soli_cons
      FROM ped_tipo_solic pts
     WHERE pts.cod_tipo_soli = 'C1';

    -- Obteniendo el OID del tipo de solicitud pais Consolidado O/C
    SELECT ptsp.oid_tipo_soli_pais
      INTO v_oid_tipo_soli_pais_cons
      FROM ped_tipo_solic_pais ptsp
     WHERE ptsp.tsol_oid_tipo_soli = v_oid_tipo_soli_cons;

    -- Obteniendo el OID del estado de anulacion
    SELECT pes.oid_esta_soli
      INTO v_oid_anul
      FROM ped_estad_solic pes
     WHERE pes.cod_esta_soli = 'AN';

    OPEN c_clie;
      LOOP
      FETCH c_clie BULK COLLECT INTO v_clie LIMIT 1000;
        EXIT WHEN v_clie.COUNT <= 0;
        FOR i IN v_clie.FIRST .. v_clie.LAST LOOP
          lv_cont_reg_lei := lv_cont_reg_lei + 1 ;
          v_fech_ulti_pago := null;
          v_regu_deud_ant := 0;
          v_deud_ant  := 0;

          IF (v_clie(i).ind_proc_gp2 = '1') THEN

            --La consultora facturo su pedido
            v_ind_fact := 'SI';

            -- Obteniendo el OID de la consultora
            SELECT m.oid_clie
              INTO v_oid_clie
              FROM mae_clien m
             WHERE m.cod_clie = v_clie(i).cod_clie;

            -- Validando si tiene pedidos no anulados
            SELECT COUNT(*)
              INTO v_num_ped_fact
              FROM ped_solic_cabec c
             WHERE c.clie_oid_clie = v_oid_clie
               AND c.perd_oid_peri = v_oid_peri
               AND c.tspa_oid_tipo_soli_pais = v_oid_tipo_soli_pais_cons
               AND c.val_tota_paga_loca > 0
               AND c.esso_oid_esta_soli <> v_oid_anul;

            IF (v_num_ped_fact > 0) THEN
              v_ind_anul := 'NO';

              /****** INICIO SEGUIMIENTO A LA DEUDA ANTERIOR ******/

              SELECT MAX(trunc(mcc.fec_ulti_movi))
                INTO v_ulti_movi_deud_ante
                FROM ccc_movim_cuent_corri mcc
               WHERE mcc.clie_oid_clie = v_oid_clie
                 AND mcc.fec_venc <= trunc(v_clie(i).fec_admi_cart)
                 AND mcc.imp_movi > 0
                 AND mcc.subp_oid_subp_crea IN (2001,2010);

              -- VALIDANDO SI REALIZO ALGUN PAGO
              IF ( v_ulti_movi_deud_ante > trunc(v_clie(i).fec_admi_cart) ) THEN
                v_fech_ulti_pago := v_ulti_movi_deud_ante;
                v_dif := trunc(v_fech_ulti_pago) - trunc(v_clie(i).fec_admi_cart);

                SELECT MAX(mcc.subp_oid_subp_ulti)
                  INTO v_oid_subp_ulti_deud_ant
                  FROM ccc_movim_cuent_corri mcc
                 WHERE mcc.fec_ulti_movi = mcc.fec_ulti_movi
                   AND mcc.clie_oid_clie = v_oid_clie
                   AND mcc.fec_venc <= trunc(v_clie(i).fec_admi_cart);

                IF (v_oid_subp_ulti_deud_ant = 2007) THEN
                  v_regu_deud_ant := 'CDR';
                ELSE
                  v_regu_deud_ant := 'CDR';
                END IF;

              ELSE
                v_fech_ulti_pago := NULL;
                v_regu_deud_ant := NULL;
                v_stat_deud_ant := 'PENDIENTE';
                v_dif := trunc(SYSDATE) - trunc(v_clie(i).fec_admi_cart);
              END IF;

              -- Buscando la deuda actual
              /*
              SELECT SUM(mcc.imp_pend)
                INTO v_Deud_ant
                FROM ccc_movim_cuent_corri mcc
               WHERE mcc.clie_oid_clie = v_oid_clie
                 AND mcc.fec_venc <= trunc(v_clie(i).fec_admi_cart) ;
              */
                 
              v_deud_ant:= CCC_PKG_GENER.CCC_FN_OBTIE_SALDO_CAMPA_ANTER(v_oid_clie,p_cod_peri);
              
              IF (v_Deud_ant < v_mont_perm)  THEN
                v_stat_deud_ant := 'OK';
              ELSE
                v_stat_deud_ant := 'SOLO PAGO PARCIAL';
              END IF;

              /****** FIN SEGUIMIENTO A LA DEUDA ANTERIOR ******/

              /******* INICIO PEDIDO GENERADO ********************/
              -- Buscando el Monto el Pedido de la Campa?a
              BEGIN
                  SELECT c.oid_soli_cabe,
                         trunc(c.fec_fact)
                    INTO v_oid_soli_cabe ,
                         v_Fec_docu_Actu
                    FROM ped_solic_cabec c
                   WHERE c.clie_oid_clie = v_oid_clie
                     AND c.perd_oid_peri = v_oid_peri
                     AND c.tspa_oid_tipo_soli_pais = v_oid_tipo_soli_pais_cons
                     AND c.val_tota_paga_loca > 0
                     AND c.esso_oid_esta_soli <> v_oid_anul;
              EXCEPTION
                WHEN too_many_rows THEN
                  dbms_output.put_line('Cllie ' || v_oid_clie || 'Consolidado : ' || v_oid_tipo_soli_pais_cons );
              END;

              SELECT SUM(mcc.imp_movi),
                     SUM(mcc.imp_pend),
                     MAX(trunc(mcc.fec_ulti_movi))
                INTO v_mont_ped,
                     v_mont_ped_pend,
                     v_ulti_pago_actu
                FROM ccc_movim_cuent_corri mcc
               WHERE mcc.clie_oid_clie = v_oid_clie
                 AND mcc.subp_oid_subp_crea IN (2001,2023)
                 AND mcc.imp_movi > 0
                 AND mcc.tspa_oid_tipo_soli_pais IN (2001,2133)
                 AND mcc.perd_oid_peri = v_oid_peri;

              IF v_mont_ped = v_mont_ped_pend THEN
                v_stat_deud_pedi := 'PENDIENTE';
                v_ulti_pago_actu := NULL;
                v_dif_actu := trunc(SYSDATE) - v_Fec_docu_Actu;
                v_stat_deud_pedi := NULL;
              ELSE
                IF v_mont_ped_pend < 10 THEN
                  v_stat_deud_pedi := 'OK';
                  v_ulti_pago_actu := v_ulti_pago_actu;
                  v_dif_actu := v_ulti_pago_actu - v_Fec_docu_Actu;
                ELSE
                  v_stat_deud_pedi := 'SOLO PAGO PARCIAL';
                  v_ulti_pago_actu := v_ulti_pago_actu;
                  v_dif_actu := v_ulti_pago_actu - v_Fec_docu_Actu;
                END IF;

                IF v_dif_actu < 0 THEN
                  v_ulti_pago_actu := v_Fec_docu_Actu;
                  v_dif_actu := 0;
                END IF;

                SELECT MAX(mcc.subp_oid_subp_ulti)
                  INTO v_sub_pago
                  FROM ccc_movim_cuent_corri mcc
                 WHERE mcc.subp_oid_subp_crea = 2001
                   AND mcc.soca_oid_soli_cabe = v_oid_soli_cabe
                   AND mcc.fec_ulti_movi = v_ulti_pago_actu;

                IF v_sub_pago ='2007' THEN
                  v_stat_deud_pedi := 'CDR';
                ELSE
                  v_stat_deud_pedi := 'BANCO';
                END IF;
              END IF;

            ELSE
              -- La consultora paso pedido, pero lo anulo
              v_ind_anul := 'SI';
              v_fec_docu_actu := NULL;
              v_mont_ped := NULL;
              v_mont_ped_pend := NULL;
              v_ulti_pago_actu := NULL;
              v_dif := NULL;
              v_dif_actu := NULL;
              v_stat_deud_pedi := 'PEDIDO ANULADO';
              v_stat_deud_ant := 'PEDIDO ANULADO';
            END IF;
          ELSE
            -- La consultora tuvo levantamiento, pero no facturo.
            v_ind_fact := 'NO';
            v_fec_docu_actu := NULL;
            v_mont_ped := NULL;
            v_mont_ped_pend := NULL;
            v_ulti_pago_actu := NULL;
            v_dif := NULL;
            v_dif_actu := NULL;
            v_stat_deud_ant := 'NO FACTURO';
            v_stat_deud_pedi := 'NO FACTURO';
          END IF;

         --Cargos por uso FLX
         SELECT decode(count(1),0,'NO','SI')
            INTO lv_cargo_flx
          from flx_cuota_flexi_factu_detal fd, ccc_movim_cuent_corri mcc, cra_perio cp, seg_perio_corpo sp
         WHERE fd.oid_movi_carg_flex = mcc.oid_movi_cc
           AND fd.oid_peri_cuot_flex =  cp.oid_peri
           AND cp.peri_oid_peri = sp.oid_peri
           AND sp.cod_peri = v_clie(i).cod_peri
           and fd.cod_clie = v_clie(i).cod_clie
           AND mcc.imp_pend > 0;

          INSERT INTO ccc_segu_leva_deud VALUES
            (v_clie(i).cod_pais, v_clie(i).cod_peri, v_clie(i).cod_regi, v_clie(i).des_regi, v_clie(i).cod_zona, v_cod_secc, v_clie(i).cod_terr,
             v_clie(i).des_zona, v_clie(i).cod_clie, v_clie(i).nom_clie, v_clie(i).ind_admi_Cart, v_clie(i).val_sald_deud, v_clie(i).usu_Admi_cart,
             v_clie(i).obs_prub, v_ind_fact, v_ind_anul, trunc(v_clie(i).fec_admi_Cart), v_Fech_ulti_pago, v_regu_deud_ant, v_deud_ant,
             v_stat_deud_ant, v_dif, v_fec_docu_actu, v_mont_ped, v_ulti_pago_actu, v_stat_deud_pedi, v_mont_ped_pend, v_stat_deud_pedi ,v_dif_Actu,lv_cargo_flx);

          lv_cont_reg_ins := lv_cont_reg_ins +1 ;

        END LOOP;

        EXIT WHEN c_clie%NOTFOUND;
        -- COMMIT;
      END LOOP;
    CLOSE c_clie;
    -- COMMIT;

    UPDATE ccc_segu_leva_deud s
    SET s.cod_secc = GEN_PKG_GENER.gen_fn_clien_datos_CODIG(s.cod_clie,'COD_SECC')
    WHERE s.cod_secc IS NULL;

    gv_des_log := 'Fin Act FIN CCC_PR_ACTUA_SALDO_HISTO reg leidos: ' || lv_cont_reg_lei ||  '  reg  grabados ' ||  lv_cont_reg_ins;
    FIN_PKG_GENER.FIN_PR_ACTUA_LOG_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc,
                                               gv_cod_proc_ejec, gv_des_log );
    dbms_output.put_line(gv_des_log);

    IF  p_cod_tipo_eje = 'IND' THEN
      FIN_PKG_GENER.FIN_PR_FINAL_PROCE_EJEC( gv_log_cod_pais, gv_log_cod_soci, gv_log_cod_modu, gv_log_cod_proc, gv_cod_proc_ejec, 2 );
    END IF;

  END CCC_PR_ACTUA_SALDO_HISTO;
    /**************************************************************************
  Descripcion        :
  Fecha Creacion     : 10/02/2013

  Autor              : Rosalvina Ramirez
  ***************************************************************************/

 PROCEDURE CCC_PR_GENER_INTER_MORA(psCodigoPais seg_pais.cod_pais%type) IS

    ln_val_mont_mini       NUMBER(12,2);
    ln_num_dias_cade       NUMBER(4);
    ln_num_dias_cort       NUMBER(4);
    ln_val_tasa_inte_mens  NUMBER(12,2);
    ln_val_tasa_impu       NUMBER(12,2);
    ln_val_impo_fijo       NUMBER(12,2);
    lv_num_lote            VARCHAR2(15);
    ln_oid_tipo_soli_pais_soc  NUMBER(12);
    ln_oid_tipo_soli_pais_c1  NUMBER(12);
    ln_oid_peri            NUMBER(12);
    ln_num_deci            NUMBER(5);
    lv_fec_fact            date;
    ln_ind_inte_pago       NUMBER(1);
    ln_ind_inte_sald       NUMBER(1);

  BEGIN

   delete gtt_ccc_inter_mora;

   lv_num_lote := ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;

   select tsp.oid_tipo_soli_pais
     INTO ln_oid_tipo_soli_pais_soc
     FROM ped_tipo_solic_pais tsp, ped_tipo_solic ts
    WHERE ts.oid_tipo_soli = tsp.tsol_oid_tipo_soli
      AND ts.cod_tipo_soli = 'SOC';

   select tsp.oid_tipo_soli_pais
     INTO ln_oid_tipo_soli_pais_c1
     FROM ped_tipo_solic_pais tsp, ped_tipo_solic ts
    WHERE ts.oid_tipo_soli = tsp.tsol_oid_tipo_soli
      AND ts.cod_tipo_soli = 'C1';

   select sm.num_deci
     INTO ln_num_deci
     from seg_moned sm, seg_pais sp
    where sm.oid_mone = sp.mone_oid_mone
      and sp.cod_pais = psCodigoPais;

   SELECT bc.fec_proc,
          (select cp.oid_peri
             from cra_perio cp, seg_perio_corpo sp
            where sp.oid_peri = cp.peri_oid_peri
              and sp.cod_peri = bc.cod_peri)
     INTO lv_fec_fact, ln_oid_peri
     FROM bas_ctrl_fact bc
    WHERE bc.ind_camp_act = 1
      AND bc.sta_camp = 0;

     insert into GTT_CCC_INTER_MORA
         (select psc.clie_oid_clie, psc.oid_soli_cabe, FIN_PKG_GENER.FIN_FN_OBTIE_OID_PERIO(psCodigoPais,me.camp_ulti_pedi)
       from ped_solic_cabec psc, mae_clien_estat me
      where psc.tspa_oid_tipo_soli_pais = ln_oid_tipo_soli_pais_soc
        and psc.perd_oid_peri = ln_oid_peri
        and psc.grpr_oid_grup_proc =  3
        and psc.clie_oid_clie = me.oid_clie);

    select pi.num_dias_cade, pi.num_dias_cort, pi.val_mont_mini, pi.val_imp_fijo, pi.val_tasa_inte_mens,pi.val_tasa_impu,
           pi.ind_inte_pago, pi.ind_inte_sald
      into ln_num_dias_cade, ln_num_dias_cort, ln_val_mont_mini, ln_val_impo_fijo, ln_val_tasa_inte_mens, ln_val_tasa_impu,
           ln_ind_inte_pago, ln_ind_inte_sald
      from ccc_param_inter_mora pi
      where pi.ind_acti='1';

            INSERT INTO CCC_CONSO_GENER_INTER_MORA
            (
                OID_MOVI_CC             ,
                OID_CLIE                ,
                OID_PERI                ,
                OID_SOCA                ,
                OID_PERI_ANT            ,
                OID_SOCA_ANT            ,
                FEC_VENC                ,
                FEC_ULT_MOVI            ,
                IMP_DEUD_PEND           ,
                IMP_PAGO                ,
                ULTI_NUME_HIST          ,
                IMP_TASA_INTE           ,
                IMP_INTE_FIJO           ,
                IMP_INTE_VARI           ,
                NUM_LOTE                ,
                FEC_GENE                ,
                IND_GENE
             )
       (
     SELECT mcc.oid_movi_cc,
           g.clie_oid_clie,
              ln_oid_peri,
           g.soca_oid_soli,--soca_actual
           g.per_oid_peri_ant, -- oid_peri anteriro
           psc1.oid_soli_cabe, --soca anterior
           DECODE(gen_pkg_gener.gen_fn_param_pais(psCodigoPais,'CCC','003'),
                                      NULL, mcc.fec_venc,
                                      (psc1.fec_fact+ to_number(gen_pkg_gener.gen_fn_param_pais(psCodigoPais,'CCC','003')) ) ),---mcc.fec_venc,
           mcc.fec_ulti_movi,
           mcc.imp_pend,
           mcc.imp_pago,
           mcc.val_ulti_nume_hist,
              to_number(ln_val_tasa_inte_mens),
              ln_val_impo_fijo,
              null,
              lv_num_lote,
              sysdate,
              1
      FROM PED_SOLIC_CABEC psc1, gtt_ccc_inter_mora g, ccc_movim_cuent_corri mcc
     WHERE psc1.TSPA_OID_TIPO_SOLI_PAIS = ln_oid_tipo_soli_pais_c1
       AND psc1.CLIE_OID_CLIE = g.clie_oid_clie
       and g.clie_oid_clie = mcc.clie_oid_clie
       and psc1.perd_oid_peri = g.per_oid_peri_ant
       and mcc.subp_oid_subp_crea = 2001
       AND mcc.imp_movi > 0
       and mcc.soca_oid_soli_cabe = psc1.oid_soli_cabe
          --En caso sea el mismo para toda la parametria
       and mcc.imp_pend >= ln_val_mont_mini
       and mcc.fec_ulti_movi - DECODE(gen_pkg_gener.gen_fn_param_pais(psCodigoPais,'CCC','003'),
                                      NULL, mcc.fec_venc,
                                      (psc1.fec_fact+ to_number(gen_pkg_gener.gen_fn_param_pais(psCodigoPais,'CCC','003')) ) ) > ln_num_dias_cade
       and mcc.fec_ulti_movi - DECODE(gen_pkg_gener.gen_fn_param_pais(psCodigoPais,'CCC','003'),
                                      NULL, mcc.fec_venc,
                                      (psc1.fec_fact+ to_number(gen_pkg_gener.gen_fn_param_pais(psCodigoPais,'CCC','003')) ) )  <= ln_num_dias_cort
       AND NOT EXISTS ( select null
             FROM  zon_zona        zon,
             zon_secci             sec,
             zon_terri_admin       zta,
             zon_terri             ter,
             CCC_ZONEX_INTER_MORA  ze
             WHERE zon.oid_zona = sec.zzon_oid_zona
         AND sec.oid_secc = zta.zscc_oid_secc
         AND ter.oid_terr = zta.terr_oid_terr
         AND zon.ind_acti = 1
         AND ter.ind_borr = 0
         AND zon.cod_zona = ze.cod_zona
         AND sec.cod_Secc = nvl(ze.cod_secc,sec.cod_Secc)
          AND zta.terr_oid_terr = psc1.ztad_oid_terr_admi
         )                                      
          AND NOT EXISTS (SELECT null
              FROM ccc_conso_gener_inter_mora cgi
             where cgi.oid_movi_cc = mcc.oid_movi_cc
               and cgi.ind_gene = '1')
             );

      --Universo de consultoras con su ultima cuota FLX
     IF (gen_pkg_gener.gen_fn_param_pais(psCodigoPais,'CCC','002') = '1') THEN

            INSERT INTO CCC_CONSO_GENER_INTER_MORA
            (
                OID_MOVI_CC             ,
                OID_CLIE                ,
                OID_PERI                ,
                OID_SOCA                ,
                OID_PERI_ANT            ,
                OID_SOCA_ANT            ,
                FEC_VENC                ,
                FEC_ULT_MOVI            ,
                IMP_DEUD_PEND           ,
                IMP_PAGO                ,
                ULTI_NUME_HIST          ,
                IMP_TASA_INTE           ,
                IMP_INTE_FIJO           ,
                IMP_INTE_VARI           ,
                NUM_LOTE                ,
                FEC_GENE                ,
                IND_GENE
             )
       select  mcc.oid_movi_cc,
       psc.clie_oid_clie,
       psc.perd_oid_peri,
       psc.oid_soli_cabe,
       mcc.perd_oid_peri,
       mcc.soca_oid_soli_cabe,
       mcc.fec_venc,
       mcc.fec_ulti_movi,
       mcc.imp_pend,
       (select mcc2.imp_pago - (select nvl(max(fd.val_mont_carg_uso),0) from flx_cuota_flexi_factu_detal fd where fd.oid_clie = mcc2.clie_oid_clie
       and fd.oid_peri_cuot_flex - 1 = ln_oid_peri)
       from ccc_movim_cuent_corri mcc2
       where mcc2.soca_oid_soli_cabe = mcc.soca_oid_soli_cabe
       and mcc2.tcab_oid_tcab_crea = 2001
       and mcc2.clie_oid_clie = mcc.clie_oid_clie),
       mcc.val_ulti_nume_hist,
       to_number(ln_val_tasa_inte_mens),
       ln_val_impo_fijo,
       null,
       lv_num_lote,
       sysdate,
       1
  from ped_solic_cabec psc, ccc_movim_cuent_corri mcc
 where psc.tspa_oid_tipo_soli_pais = ln_oid_tipo_soli_pais_soc
   and psc.perd_oid_peri = ln_oid_peri
   and psc.grpr_oid_grup_proc = 3
   and psc.clie_oid_clie = mcc.clie_oid_clie
   and mcc.subp_oid_subp_crea = 203
   AND mcc.imp_movi > 0
          --En caso sea el mismo para toda la parametria
       and mcc.imp_pend >= ln_val_mont_mini
       and mcc.fec_ulti_movi - mcc.fec_venc > ln_num_dias_cade
       and mcc.fec_ulti_movi - mcc.fec_venc <= ln_num_dias_cort
          AND NOT EXISTS (SELECT null
              FROM ccc_conso_gener_inter_mora cgi
             where cgi.oid_movi_cc = mcc.oid_movi_cc
               and cgi.ind_gene = '1');

     END IF;

    IF (gen_pkg_gener.gen_fn_param_pais(psCodigoPais,'CCC','001') = '0') THEN --Si es variable inserta el detalle de sus pagos

    INSERT INTO ccc_detal_gener_inter_mora
            (   OID_MVCC_OID_CC    ,
                NUM_HIST         ,
                OID_PERI_ANT     ,
                OID_SOCA_ANT     ,
                OID_CLIE         ,
                FEC_VENC         ,
                FEC_MOVI         ,
                IMP_DEUD_PEND    ,
                IMP_PAGO         ,
                IMP_INTE_VARI    ,
                NUM_LOTE         ,
                FEC_GENE         ,
                IND_GENE         ,
                NUM_DIAS_DIFE    ,
                IMP_TASA_INTE
            )
    ( select hmc.mvcc_oid_movi_cc,
                hmc.num_hist,
                cgi.oid_peri_ant,
                cgi.oid_soca_ant,
                cgi.oid_clie,
                cgi.fec_venc, --hmc.fec_venc,
                hmc.fec_movi, --fecha_pago
                hmc.imp_pen,
                hmc.imp_pago,
                    /*ln_ind_inte_pago*ROUND(hmc.imp_pago * cgi.imp_tasa_inte * (hmc.fec_movi - cgi.fec_venc) / 3000 , ln_num_deci) --Intereses sobre pagos
                  + ln_ind_inte_sald*ROUND(hmc.imp_pen * cgi.imp_tasa_inte *(sysdate - cgi.fec_venc) / 3000 , ln_num_deci)
                  +*/ cgi.imp_inte_fijo imp_vari, --Intereses sobre saldo pendientes
                lv_num_lote,
                sysdate,
                1,
                0,
                cgi.imp_tasa_inte
           from ccc_conso_gener_inter_mora cgi, ccc_histo_movim_cc hmc
          where cgi.oid_movi_cc = hmc.mvcc_oid_movi_cc
            and cgi.oid_clie = hmc.clie_oid_clie
            and hmc.num_hist != 0
            AND hmc.fec_movi >  cgi.fec_venc--AND hmc.fec_movi <>  cgi.fec_fact_ulti
            and cgi.num_lote = lv_num_lote
             AND NOT EXISTS
          (SELECT null
                   FROM ccc_detal_gener_inter_mora cgd
                  where cgd.num_hist =  hmc.num_hist
                    and cgd.oid_mvcc_oid_cc = cgi.oid_movi_cc)
         union all
         select cgi.oid_movi_cc,
                cgi.ulti_nume_hist,
                cgi.oid_peri_ant,
                cgi.oid_soca_ant,
                cgi.oid_clie,
                cgi.fec_venc,
                cgi.fec_ult_movi, --fecha pago
                cgi.imp_deud_pend,
                cgi.imp_pago,
                   /* ln_ind_inte_pago*ROUND(cgi.imp_pago * cgi.imp_tasa_inte * (cgi.fec_ult_movi - cgi.fec_venc) / 3000 , ln_num_deci) --Intereses sobre pagos
                  + ln_ind_inte_sald*ROUND(cgi.imp_deud_pend * cgi.imp_tasa_inte *(trunc(sysdate) - cgi.fec_venc) / 3000 , ln_num_deci)
                  +*/ cgi.imp_inte_fijo imp_vari, --Intereses sobre saldo pendientes
                lv_num_lote,
                sysdate,
                1,
                0,
                cgi.imp_tasa_inte 
           from ccc_conso_gener_inter_mora cgi
          where cgi.num_lote = lv_num_lote
            AND cgi.ulti_nume_hist != 0
            AND cgi.fec_ult_movi > cgi.fec_venc
            AND NOT EXISTS
          (SELECT null
                   FROM ccc_detal_gener_inter_mora cgd
                  where cgd.num_hist = cgi.ulti_nume_hist
                    and cgd.oid_mvcc_oid_cc = cgi.oid_movi_cc)
          --order by 1, 2
            );
            
       IF (ln_ind_inte_pago = 1) THEN

        update ccc_detal_gener_inter_mora set imp_inte_vari = --imp_inte_vari +
           ln_ind_inte_pago*ROUND(imp_pago * imp_tasa_inte * (fec_movi - fec_venc) / 3000 , ln_num_deci) --Intereses sobre pagos
              + ln_ind_inte_sald*ROUND((imp_deud_pend+imp_pago) * imp_tasa_inte *num_dias_dife / 3000 , ln_num_deci); --intereses sobre saldos

       update ccc_conso_gener_inter_mora cgi
          set cgi.imp_inte_vari =
              (select ROUND(sum(dgi.imp_inte_vari)*(1+ln_val_tasa_impu/100),ln_num_deci)
                 from ccc_detal_gener_inter_mora dgi
                where dgi.num_lote = lv_num_lote
                  and dgi.oid_mvcc_oid_cc = cgi.oid_movi_cc
                  and dgi.fec_movi - dgi.fec_venc > ln_num_dias_cade
                  and dgi.fec_movi > dgi.fec_venc
                group by dgi.oid_mvcc_oid_cc)
        where cgi.num_lote = lv_num_lote;
         
       END IF;

      IF (ln_ind_inte_sald = 1) THEN
        
         --DELETE FROM ccc_detal_calcu_inter_saldo;
         
          --Colocar el pago fictisio a la fecha
          INSERT INTO ccc_detal_gener_inter_saldo
              SELECT cgi.oid_movi_cc,
                cgi.ulti_nume_hist + 1,
                cgi.oid_peri,
                cgi.oid_soca_ant,
                cgi.oid_clie,
                cgi.fec_venc,
                trunc(sysdate) , --fecha pago
                0 imp_pend,--cgi.imp_pend,
                cgi.imp_deud_pend imp_pago,
                cgi.imp_inte_fijo  imp_inte_vari,
                lv_num_lote,
                sysdate,
                '1',
                 0,
               cgi.imp_tasa_inte
           FROM ccc_conso_gener_inter_mora cgi
           WHERE cgi.num_lote = lv_num_lote
           and cgi.imp_deud_pend > 0;
              
          update ccc_detal_gener_inter_mora p set p.num_dias_dife = p.fec_movi - decode(p.num_hist,
                                  (select min(c.num_hist) from ccc_detal_gener_inter_mora c
                                  where c.oid_mvcc_oid_cc = p.oid_mvcc_oid_cc)
                                  , p.fec_venc,
                                  (select c.fec_movi from ccc_detal_gener_inter_mora c
                                  where c.oid_mvcc_oid_cc = p.oid_mvcc_oid_cc
                                  and c.num_hist = (p.num_hist - 1)))  
          WHERE p.num_lote = lv_num_lote;                                    
                      
         update ccc_detal_gener_inter_saldo p set p.num_dias_dife = p.fec_movi - nvl((
                           SELECT a.fec_movi
                              FROM ccc_detal_gener_inter_mora a,
                                   (SELECT c.oid_mvcc_oid_cc,
                                           MAX(c.num_hist) num_hist 
                                      FROM ccc_detal_gener_inter_mora c
                                     WHERE c.num_hist <> 0
                                     GROUP BY c.oid_mvcc_oid_cc) x
                             WHERE 
                             a.oid_mvcc_oid_cc = x.oid_mvcc_oid_cc
                             AND a.num_hist = x.num_hist
                             AND a.oid_mvcc_oid_cc = p.oid_mvcc_oid_cc
                              ),p.fec_venc)
       WHERE p.num_lote = lv_num_lote;

                                  
         update ccc_detal_gener_inter_mora set imp_inte_vari = --imp_inte_vari +
              ln_ind_inte_pago*ROUND(imp_pago * imp_tasa_inte * (fec_movi - fec_venc) / 3000 , ln_num_deci) --Intereses sobre pagos
              + ln_ind_inte_sald*ROUND((imp_deud_pend+imp_pago) * imp_tasa_inte *num_dias_dife / 3000 , ln_num_deci) --intereses sobre saldos
         WHERE num_lote = lv_num_lote;              
                                        
          update ccc_detal_gener_inter_saldo set imp_inte_vari =-- imp_inte_vari +
              ln_ind_inte_pago*ROUND(imp_pago * imp_tasa_inte * (fec_movi - fec_venc) / 3000 , ln_num_deci) --Intereses sobre pagos
              + ln_ind_inte_sald*ROUND((imp_deud_pend+imp_pago) * imp_tasa_inte *num_dias_dife / 3000 , ln_num_deci); --intereses sobre saldos
                           
          UPDATE ccc_conso_gener_inter_mora cgi
                SET cgi.imp_inte_vari = (select y.imp_inte_vari from
                    ((SELECT x.oid_mvcc_oid_cc, ROUND(sum(x.imp_inte_vari)*(1+ln_val_tasa_impu/100),ln_num_deci) imp_inte_vari
                       FROM (SELECT * FROM
                           ccc_detal_gener_inter_mora dgi
                          WHERE dgi.num_dias_dife > 0
                            UNION
                            SELECT * FROM
                             ccc_detal_gener_inter_saldo dgs
                          WHERE dgs.num_dias_dife > 0
                            ) x
                       GROUP BY x.oid_mvcc_oid_cc)) y
                       where y.oid_mvcc_oid_cc = cgi.oid_movi_cc ) 
          WHERE cgi.num_lote = lv_num_lote;          

      END IF;

     update ped_solic_cabec psc
        set psc.val_tota_gast_admi =
              (select sum(cgi.imp_inte_vari) --Variable
               from ccc_conso_gener_inter_mora cgi
              where cgi.num_lote = lv_num_lote
                and cgi.oid_soca = psc.oid_soli_cabe)
          where exists (select null from ccc_conso_gener_inter_mora cgi2
                  where cgi2.oid_soca=psc.oid_soli_cabe
                   and cgi2.num_lote = lv_num_lote);


     ELSE

     update ped_solic_cabec psc
        set psc.val_tota_gast_admi =
              (select sum(cgi.IMP_INTE_FIJO) --Fijo
               from ccc_conso_gener_inter_mora cgi
              where cgi.num_lote = lv_num_lote
                and cgi.oid_soca = psc.oid_soli_cabe)
          where exists (select null from ccc_conso_gener_inter_mora cgi2
                  where cgi2.oid_soca=psc.oid_soli_cabe
                   and cgi2.num_lote = lv_num_lote);

    END IF;
  EXCEPTION

    WHEN OTHERS THEN
      ln_sqlcode := SQLCODE;
      ls_sqlerrm := substr(SQLERRM,
                           1,
                           250);
      raise_application_error(-20123,
                              'ERROR CCC_PR_GENER_INTER_MORA: ' || ls_sqlerrm);

 END CCC_PR_GENER_INTER_MORA;

 /****************************************************************************
   Descripcion       : Registrar Cliente de la Lista de Clientes castigadas por Bloqueo Incobrable
   Fecha Creacion    :
   Fecha Modificacion: 19/11/2013
   Parametros:         p_num_docu_iden: Numero de Documento Identidad
   Autor: CSVD
 *****************************************************************************/
 PROCEDURE CCC_PR_REGIS_CLIEN_INCOB(
  p_num_docu_iden                  IN   VARCHAR2)
 IS

  lv_cod_tipo_docu                 CHAR(2):='01';
  lv_cod_geog_dept                 CHAR(6);
  lv_cod_geog_prov                 CHAR(6);
  lv_cod_geog_dist                 CHAR(6);
  lv_oid_zon_terr_admi             NUMBER(5);
  lv_oid_terr                      NUMBER(5);
  lv_oid_esta_inco                 NUMBER(1);
  lv_oid_pais                      seg_pais.oid_pais%TYPE;
  lv_oid_peri                      cra_perio.oid_peri%TYPE;
  lv_oid_peri_ante                 cra_perio.oid_peri%TYPE;
  lv_oid_peri_ant2                 cra_perio.oid_peri%TYPE;

 CURSOR c_envioscc
 IS
  SELECT
   NULL, --cons.cod_pais,
   NULL,  --cons.cod_peri,
   NULL,  --cons.cod_clie,
   NULL, --cons.num_lote,
   NULL, --cons.sec_nume_docu,
   lv_oid_pais, --cons.oid_pais, -- posicion 61
   NULL, --cons.val_ape1_fiad, -- posicion 32
   NULL, --cons.val_ape2_fiad, -- posicion 33
   NULL, --cons.val_nom1_fiad, -- posicion 34
   NULL, --cons.val_nom2_fiad, -- posicion 35
   TRUNC(SYSDATE), --cons.fec_proc, -- posicion 5
   NULL, --cons.fec_naci, --posicion 15
   NULL, --cons.ind_esta_civi, --posicion 19
   lv_oid_peri, --cons.oid_peri, --posicion 64
   NULL, --cons.val_mail_clie, ---posicion 29
   lv_oid_zon_terr_admi, --cons.oid_terr_admi, --posicion 63
   NULL, --cons.tip_via_clie, --posicion 47
   lv_oid_terr, --cons.oid_terr, --posicion 62
   NULL, --cons.num_dire_clie, --posicion 49
   NULL, --cons.val_nomb_vicl, --posicion 48
   cons.val_dire, --cons.val_dire_clie, --posicion 21
   lv_cod_geog_dept, --cons.cod_depa_clie, --posicion 50
   lv_cod_geog_prov, --cons.cod_prov_clie, --posicion 51
   lv_cod_geog_dist, --cons.cod_dist_clie, --posicion 52
   NULL, --cons.cod_sect_clie, --posicion 53
   NULL, --cons.val_tefl_fiad, --posicion 40
   NULL, --cons.val_celu_fiad, --posicion 41
   NULL, --cons.val_telf_trfi, --posicion 42
   NULL, --cons.cod_clie_rete, --posicion 9
   NULL, --cons.num_premi, --posicion 66
   NULL, --cons.oid_para_nive_prem, --posicion 65
   lv_cod_tipo_docu, --posicion 16
   cons.num_docu_iden, --posicion 17
   NULL, --cons.num_ruc, --posicion 18
   cons.val_ape1, --posicion 11
   cons.val_ape2, -- posicion 12
   cons.val_nom1, --posicion 13
   cons.val_nom2, --posicion 14
   NULL, --cons.val_telf_clie, -- posicion 25
   NULL, --cons.val_celu_clie, --posicion 26
   NULL, --cons.val_telf_trab, -- posicion 27
   NULL, --cons.oid_para_gral, --POSICION  70
   NULL, --cons.cod_prem, --POSICION 10
   NULL, --cons.cod_docu_idfi, --posicion 31
   NULL, --cons.cod_fiad, --posicion 68
   NULL, --cons.tip_via_fiad, --posicion 54
   NULL, --cons.val_nomb_vifi, --posicion 55
   NULL, --cons.num_dire_fiad, --posicion 56
   NULL, --cons.cod_depa_fiad, --posicion 57
   NULL, --cons.cod_prov_fiad, --posicion 58
   NULL, --cons.cod_dist_fiad, --posicion 59
   NULL, --cons.cod_sect_fiad, --posicon 60
   NULL, --cons.val_dire_fiad, --posicion 36
   NULL, --cons.tip_docu_fiad, --posicion 30
   NULL, --cons.ind_nive_educ, --posicion 20
   null, --cons.num_docu, --posicion 4
   NULL,  --cons.val_dire_entre_clie, --posicion 71
   NULL,  --cons.val_tele_entre_clie, --posicion 75
   NULL,  --cons.val_celu_entre_clie, --posicion 76
   NULL,  --cons.val_barr_fiad, --Posicion 37
   NULL,  --cons.val_ciud_fiad, -- Posicion 38
   NULL,  --cons.val_depa_fiad, -- Posicion 39
   NULL,  --cons.val_tipo_vinc_fiad, --Posicion 95
   NULL,  --cons.val_nomb_empr_fiad, -- Posicion 92
   NULL,  --cons.val_dire_empr_fiad, -- Posicion 93
   NULL,  --cons.val_carg_fiad, -- Posicion 94
   NULL,  --cons.val_nom1_refe_fami_clie, --Posicion 78
   NULL,  --cons.val_ape1_refe_fami_clie, --Posicion 77
   NULL,  --cons.val_dire_refe_fami_clie, --Posicion 79
   NULL,  --cons.val_barr_refe_fami_clie, --Posicion  80
   NULL,  --cons.val_ciud_refe_fami_clie, --Posicion  82
   NULL,  --cons.val_depa_refe_fami_clie, --Posicion  83
   NULL,  --cons.val_tele_refe_fami_clie, --Posicion  84
   NULL,  --cons.val_celu_refe_fami_clie, --Posicion  85
   NULL,  --cons.val_tipo_vinc_refe_fami_clie, --Posicion 86
   NULL,  --cons.val_ape1_refe_nofa_clie, --Posicion 87
   NULL,  --cons.val_nom1_refe_nofa_clie, --Posicion 88
   NULL,  --cons.val_tele_refe_nofa_clie, --Posicion 89
   NULL,  --cons.val_celu_refe_nofa_clie, --Posicion 90
   NULL,  --cons.val_tipo_vinc_refe_nofa_clie, --Posicion 91
   NULL,  --cons.val_dire_refe_nofa_clie, --Posicion 104
   NULL,  --cons.val_barr_clie,
   'F',  --cons.cod_sexo,
   NULL, --cons.ind_vend_mar1,
   NULL, --cons.ind_vend_mar2,
   NULL, --cons.ind_vend_mar3,
   NULL, --cons.ind_vend_mar4,
   NULL, --cons.ind_vend_mar5,
   NULL, --cons.ind_vend_mar6,
   NULL, --cons.ind_vend_mar7,
   NULL, --cons.cod_marc_vema,
   NULL, --cons.IND_REQU_IMPR_BOLE,
   NULL --cons.COD_LIDE_RECO
  FROM ccc_consu_casti_cabec cons
  WHERE cons.num_docu_iden = p_num_docu_iden;

 TYPE t_codpais IS TABLE OF int_solic_conso_credi.cod_pais%TYPE;
 TYPE t_codperi IS TABLE OF int_solic_conso_credi.cod_peri%TYPE;
 TYPE t_codclie IS TABLE OF int_solic_conso_credi.cod_clie%TYPE;
 TYPE t_numlote IS TABLE OF int_solic_conso_credi.num_lote%TYPE;

    TYPE t_secnumdocu IS TABLE OF int_solic_conso_credi.sec_nume_docu%TYPE;
    TYPE t_oidpais IS TABLE OF int_solic_conso_credi.oid_pais%TYPE;
    TYPE t_primerapellfiador IS TABLE OF int_solic_conso_credi.val_ape1_fiad%TYPE;
    TYPE t_secondapellfiador IS TABLE OF int_solic_conso_credi.val_ape2_fiad%TYPE;
    TYPE t_primernomfiador IS TABLE OF int_solic_conso_credi.val_nom1_fiad%TYPE;
    TYPE t_secondnomfiador IS TABLE OF int_solic_conso_credi.val_nom2_fiad%TYPE;
    TYPE t_fechaproceso IS TABLE OF int_solic_conso_credi.fec_proc%TYPE;
    TYPE t_fechanacimiento IS TABLE OF int_solic_conso_credi.fec_naci%TYPE;
    TYPE t_estadocivil IS TABLE OF int_solic_conso_credi.ind_esta_civi%TYPE;
    TYPE t_oidperiodo IS TABLE OF int_solic_conso_credi.oid_peri%TYPE;
    TYPE t_valormail IS TABLE OF int_solic_conso_credi.val_mail_clie%TYPE;
    TYPE t_oidterradmin IS TABLE OF int_solic_conso_credi.oid_terr_admi%TYPE;
    TYPE t_tipovia IS TABLE OF int_solic_conso_credi.tip_via_clie%TYPE;
    TYPE t_oidterritorio IS TABLE OF int_solic_conso_credi.oid_terr%TYPE;
    TYPE t_direccioncliente IS TABLE OF int_solic_conso_credi.num_dire_clie%TYPE;
    TYPE t_valnombrevia IS TABLE OF int_solic_conso_credi.val_nomb_vicl%TYPE;
    TYPE t_valdireccion IS TABLE OF int_solic_conso_credi.val_dire_clie%TYPE;
    TYPE t_coddepartamento IS TABLE OF int_solic_conso_credi.cod_depa_clie%TYPE;
    TYPE t_codprovincia IS TABLE OF int_solic_conso_credi.cod_prov_clie%TYPE;
    TYPE t_coddistrito IS TABLE OF int_solic_conso_credi.cod_dist_clie%TYPE;
    TYPE t_codsector IS TABLE OF int_solic_conso_credi.cod_sect_clie%TYPE;
    TYPE t_valtelefiador IS TABLE OF int_solic_conso_credi.val_tefl_fiad%TYPE;
    TYPE t_valcelufiador IS TABLE OF int_solic_conso_credi.val_celu_fiad%TYPE;
    TYPE t_valtrabfiador IS TABLE OF int_solic_conso_credi.val_telf_trfi%TYPE;
    TYPE t_codclientereco IS TABLE OF int_solic_conso_credi.cod_clie_rete%TYPE;
    TYPE t_numeropremio IS TABLE OF int_solic_conso_credi.num_premi%TYPE;
    TYPE t_oidnivelpremio IS TABLE OF int_solic_conso_credi.oid_para_nive_prem%TYPE;
    TYPE t_tipodocumento IS TABLE OF int_solic_conso_credi.tip_docu%TYPE;
    TYPE t_numerodocumento IS TABLE OF int_solic_conso_credi.num_docu_iden%TYPE;
    TYPE t_ruccliente IS TABLE OF int_solic_conso_credi.num_ruc%TYPE;
    TYPE t_apell1cliente IS TABLE OF int_solic_conso_credi.val_ape1%TYPE;
    TYPE t_apell2cliente IS TABLE OF int_solic_conso_credi.val_ape2%TYPE;
    TYPE t_nom1cliente IS TABLE OF int_solic_conso_credi.val_nom1%TYPE;
    TYPE t_nom2cliente IS TABLE OF int_solic_conso_credi.val_nom2%TYPE;
    TYPE t_telfcliente IS TABLE OF int_solic_conso_credi.val_telf_clie%TYPE;
    TYPE t_celcliente IS TABLE OF int_solic_conso_credi.val_celu_clie%TYPE;
    TYPE t_teltrabcliente IS TABLE OF int_solic_conso_credi.val_telf_trab%TYPE;
    TYPE t_oid_para_gral IS TABLE OF int_solic_conso_credi.oid_para_gral%TYPE;
    TYPE t_cod_prem IS TABLE OF int_solic_conso_credi.cod_prem%TYPE;
    TYPE t_cod_docu_idfi IS TABLE OF int_solic_conso_credi.cod_docu_idfi%TYPE;
    TYPE t_cod_fiad IS TABLE OF int_solic_conso_credi.cod_fiad%TYPE;
    TYPE t_tip_via_fiad IS TABLE OF int_solic_conso_credi.tip_via_fiad%TYPE;
    TYPE t_val_nomb_vifi IS TABLE OF int_solic_conso_credi.val_nomb_vifi%TYPE;
    TYPE t_num_dire_fiad IS TABLE OF int_solic_conso_credi.num_dire_fiad%TYPE;
    TYPE t_cod_depa_fiad IS TABLE OF int_solic_conso_credi.cod_depa_fiad%TYPE;
    TYPE t_cod_prov_fiad IS TABLE OF int_solic_conso_credi.cod_prov_fiad%TYPE;
    TYPE t_cod_dist_fiad IS TABLE OF int_solic_conso_credi.cod_dist_fiad%TYPE;
    TYPE t_cod_sect_fiad IS TABLE OF int_solic_conso_credi.cod_sect_fiad%TYPE;
    TYPE t_val_dire_fiad IS TABLE OF int_solic_conso_credi.val_dire_fiad%TYPE;
    TYPE t_tip_docu_fiad IS TABLE OF int_solic_conso_credi.tip_docu_fiad%TYPE;

    TYPE t_ind_nive_educ IS TABLE OF int_solic_conso_credi.ind_nive_educ%TYPE;
    TYPE t_val_nume_docu IS TABLE OF int_solic_conso_credi.num_docu%TYPE;
    TYPE t_val_dire_entr IS TABLE OF int_solic_conso_credi.val_dire_entre_clie%TYPE;
    TYPE t_val_tele_entr IS TABLE OF int_solic_conso_credi.val_tele_entre_clie%TYPE;
    TYPE t_val_celu_entr IS TABLE OF int_solic_conso_credi.val_celu_entre_clie%TYPE;
    TYPE t_val_barr_fiad IS TABLE OF int_solic_conso_credi.val_barr_fiad%TYPE;
    TYPE t_val_ciud_fiad IS TABLE OF int_solic_conso_credi.val_ciud_fiad%TYPE;
    TYPE t_val_depa_fiad IS TABLE OF int_solic_conso_credi.val_depa_fiad%TYPE;
    TYPE t_val_tipo_vinc_fiad IS TABLE OF int_solic_conso_credi.val_tipo_vinc_fiad%TYPE;
    TYPE t_val_nomb_empr_fiad IS TABLE OF int_solic_conso_credi.val_nomb_empr_fiad%TYPE;
    TYPE t_val_dire_empr_fiad IS TABLE OF int_solic_conso_credi.val_dire_empr_fiad%TYPE;
    TYPE t_val_carg_fiad IS TABLE OF int_solic_conso_credi.val_carg_fiad%TYPE;
    TYPE t_val_nomb_refe_fami IS TABLE OF int_solic_conso_credi.val_nom1_refe_fami_clie%TYPE;
    TYPE t_val_apel_refe_fami IS TABLE OF int_solic_conso_credi.val_ape1_refe_fami_clie%TYPE;
    TYPE t_val_dire_refe_fami IS TABLE OF int_solic_conso_credi.val_dire_refe_fami_clie%TYPE;

    TYPE t_val_barr_refe_fami IS TABLE OF int_solic_conso_credi.val_barr_refe_fami_clie%TYPE;
    TYPE t_val_ciud_refe_fami IS TABLE OF int_solic_conso_credi.val_ciud_refe_fami_clie%TYPE;
    TYPE t_val_depa_refe_fami IS TABLE OF int_solic_conso_credi.val_depa_refe_fami_clie%TYPE;
    TYPE t_val_tele_refe_fami IS TABLE OF int_solic_conso_credi.val_tele_refe_fami_clie%TYPE;
    TYPE t_val_celu_refe_fami IS TABLE OF int_solic_conso_credi.val_celu_refe_fami_clie%TYPE;
    TYPE t_val_tipo_vinc_refe_fami IS TABLE OF int_solic_conso_credi.val_tipo_vinc_refe_fami_clie%TYPE;

    TYPE t_val_ape1_refe_nofa IS TABLE OF int_solic_conso_credi.val_ape1_refe_nofa_clie%TYPE;
    TYPE t_val_nomb_refe_nofa IS TABLE OF int_solic_conso_credi.val_nom1_refe_nofa_clie%TYPE;
    TYPE t_val_tele_refe_nofa IS TABLE OF int_solic_conso_credi.val_tele_refe_nofa_clie%TYPE;
    TYPE t_val_celu_refe_nofa IS TABLE OF int_solic_conso_credi.val_celu_refe_nofa_clie%TYPE;
    TYPE t_val_tipo_vinc_refe_nofa IS TABLE OF int_solic_conso_credi.val_tipo_vinc_refe_nofa_clie%TYPE;
    TYPE t_val_dire_refe_nofa IS TABLE OF int_solic_conso_credi.val_dire_refe_nofa_clie%TYPE;
    TYPE t_val_barr_clie IS TABLE OF int_solic_conso_credi.val_barr_clie%TYPE;
    TYPE t_val_codsexo_clie IS TABLE OF int_solic_conso_credi.cod_sexo%TYPE;

    TYPE t_ind_vend_mar1 IS TABLE OF int_solic_conso_credi.ind_vend_mar1%TYPE;
    TYPE t_ind_vend_mar2 IS TABLE OF int_solic_conso_credi.ind_vend_mar2%TYPE;
    TYPE t_ind_vend_mar3 IS TABLE OF int_solic_conso_credi.ind_vend_mar3%TYPE;
    TYPE t_ind_vend_mar4 IS TABLE OF int_solic_conso_credi.ind_vend_mar4%TYPE;
    TYPE t_ind_vend_mar5 IS TABLE OF int_solic_conso_credi.ind_vend_mar5%TYPE;
    TYPE t_ind_vend_mar6 IS TABLE OF int_solic_conso_credi.ind_vend_mar6%TYPE;
    TYPE t_ind_vend_mar7 IS TABLE OF int_solic_conso_credi.ind_vend_mar7%TYPE;
    TYPE t_cod_marc_vema IS TABLE OF int_solic_conso_credi.cod_marc_vema%TYPE;

    TYPE t_IND_REQU_IMPR_BOLE IS TABLE OF VARCHAR2(6);--int_solic_conso_credi.IND_REQU_IMPR_BOLE%TYPE;
    TYPE t_COD_LIDE_RECO IS TABLE OF VARCHAR2(15);--int_solic_conso_credi.COD_LIDE_RECO%TYPE;

    v_codpais t_codpais;
    v_codperi t_codperi;
    v_codclie t_codclie;
    v_numlote t_numlote;

    v_secnumdocu        t_secnumdocu;
    v_oidpais           t_oidpais;
    v_primerapellfiador t_primerapellfiador;
    v_secondapellfiador t_secondapellfiador;
    v_primernomfiador   t_primernomfiador;
    v_secondnomfiador   t_secondnomfiador;
    v_fechaproceso      t_fechaproceso;
    v_fechanacimiento   t_fechanacimiento;

    v_estadocivil      t_estadocivil;
    v_oidperiodo       t_oidperiodo;
    v_valormail        t_valormail;
    v_oidterradmin     t_oidterradmin;
    v_tipovia          t_tipovia;
    v_oidterritorio    t_oidterritorio;
    v_direccioncliente t_direccioncliente;
    v_valnombrevia     t_valnombrevia;
    v_valdireccion     t_valdireccion;
    v_coddepartamento  t_coddepartamento;
    v_codprovincia     t_codprovincia;
    v_coddistrito      t_coddistrito;
    v_codsector        t_codsector;
    v_valtelefiador    t_valtelefiador;
    v_valcelufiador    t_valcelufiador;
    v_valtrabfiador    t_valtrabfiador;
    v_codclientereco   t_codclientereco;
    v_numeropremio     t_numeropremio;
    v_oidnivelpremio   t_oidnivelpremio;
    v_tipodocumento    t_tipodocumento;
    v_numerodocumento  t_numerodocumento;
    v_ruccliente       t_ruccliente;
    v_apell1cliente    t_apell1cliente;
    v_apell2cliente    t_apell2cliente;
    v_nom1cliente      t_nom1cliente;
    v_nom2cliente      t_nom2cliente;
    v_telfcliente      t_telfcliente;
    v_celcliente       t_celcliente;
    v_teltrabcliente   t_teltrabcliente;
    v_oid_para_gral    t_oid_para_gral;
    v_cod_prem         t_cod_prem;
    v_cod_docu_idfi    t_cod_docu_idfi;
    v_cod_fiad         t_cod_fiad;
    v_tip_via_fiad     t_tip_via_fiad;
    v_val_nomb_vifi    t_val_nomb_vifi;
    v_num_dire_fiad    t_num_dire_fiad;
    v_cod_depa_fiad    t_cod_depa_fiad;
    v_cod_prov_fiad    t_cod_prov_fiad;
    v_cod_dist_fiad    t_cod_dist_fiad;
    v_cod_sect_fiad    t_cod_sect_fiad;
    v_val_dire_fiad    t_val_dire_fiad;
    v_tip_docu_fiad    t_tip_docu_fiad;

    v_ind_nive_educ t_ind_nive_educ;
    v_val_nume_docu t_val_nume_docu;
    v_val_dire_entr t_val_dire_entr;
    v_val_tele_entr t_val_tele_entr;
    v_val_celu_entr t_val_celu_entr;
    v_val_barr_fiad t_val_barr_fiad;
    v_val_ciud_fiad t_val_ciud_fiad;
    v_val_depa_fiad t_val_depa_fiad;

    v_val_tipo_vinc_fiad t_val_tipo_vinc_fiad;
    v_val_nomb_empr_fiad t_val_nomb_empr_fiad;
    v_val_dire_empr_fiad t_val_dire_empr_fiad;
    v_val_carg_fiad      t_val_carg_fiad;
    v_val_nomb_refe_fami t_val_nomb_refe_fami;
    v_val_apel_refe_fami t_val_apel_refe_fami;
    v_val_dire_refe_fami t_val_dire_refe_fami;

  v_val_barr_refe_fami      t_val_barr_refe_fami;
  v_val_ciud_refe_fami      t_val_ciud_refe_fami;
  v_val_depa_refe_fami      t_val_depa_refe_fami;
  v_val_tele_refe_fami      t_val_tele_refe_fami;
  v_val_celu_refe_fami      t_val_celu_refe_fami;
  v_val_tipo_vinc_refe_fami t_val_tipo_vinc_refe_fami;

  v_val_ape1_refe_nofa             t_val_ape1_refe_nofa;
  v_val_nomb_refe_nofa             t_val_nomb_refe_nofa;
  v_val_tele_refe_nofa             t_val_tele_refe_nofa;
  v_val_celu_refe_nofa             t_val_celu_refe_nofa;
  v_val_tipo_vinc_refe_nofa        t_val_tipo_vinc_refe_nofa;
  v_val_dire_refe_nofa             t_val_dire_refe_nofa;
  v_val_barr_clie                  t_val_barr_clie;
  v_val_codsexo_clie               t_val_codsexo_clie;

  v_val_ind_vend_mar1              t_ind_vend_mar1;
  v_val_ind_vend_mar2              t_ind_vend_mar2;
  v_val_ind_vend_mar3              t_ind_vend_mar3;
  v_val_ind_vend_mar4              t_ind_vend_mar4;
  v_val_ind_vend_mar5              t_ind_vend_mar5;
  v_val_ind_vend_mar6              t_ind_vend_mar6;
  v_val_ind_vend_mar7              t_ind_vend_mar7;
  v_val_cod_marc_vema              t_cod_marc_vema;

  v_IND_REQU_IMPR_BOLE             t_IND_REQU_IMPR_BOLE;
  v_COD_LIDE_RECO                  t_COD_LIDE_RECO ;

  i                                BINARY_INTEGER := 0;

  lscod_zona                       zon_zona.cod_zona%TYPE;
  lscod_regi                       zon_regio.cod_regi%TYPE;

  lsnum_posi_nume_clie             seg_pais.num_posi_nume_clie%TYPE;
  lscodigo_tmp                     ped_numer_solic.val_ulti_nume_soli%TYPE;
  lscodigo_tmp1                    mae_clien.cod_clie%TYPE;
  lstmp_oid_clie                   mae_clien.oid_clie%TYPE;
  lstmp_oid_clie_tipo_subti        mae_clien_tipo_subti.oid_clie_tipo_subt%TYPE;

  lstm_poid_clie_rete              inc_clien_recte.oid_clie_rete%TYPE;

  lscodigomarca                    seg_marca.cod_marc%TYPE;
  lnidmarca                        seg_marca.oid_marc%TYPE;

  lscodigo_tipo_asig               mae_param_clien.cod_tipo_asig%TYPE;
  lsdigitochequeo                  mae_clien.cod_digi_ctrl%TYPE;
  lscodtmpdigitochequeo            VARCHAR2(10);

  lsparadigitochequeo              sto_param_gener_occrr.val_param%TYPE;
  lsparagenecodclie                sto_param_gener_occrr.val_param%TYPE;
  lstipomodulo                     mae_clien_modul.mod_vali%TYPE;

  contador_mae_clien_direc         NUMBER;
  lnnumregistros                   NUMBER;
  lnnumsoliinicio                  NUMBER;

  lsdirbarrio                      VARCHAR2(1);
  lnvendemarca                     NUMBER;

  lnoidclientercdte                mae_clien.oid_clie%TYPE;

  lv_cod_pais                      seg_pais.cod_pais%TYPE;

 BEGIN

  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_geog_dept := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoDeptIncobrable');
  lv_cod_geog_prov := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoProvIncobrable');
  lv_cod_geog_dist := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoDistIncobrable');
  lv_oid_zon_terr_admi := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('OidZonTerrAdmIncobrable');
  lv_oid_terr := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('OidTerrIncobrable');
  lv_oid_esta_inco := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('OidEstadoIncobrable');

  lv_oid_pais := gen_pkg_gener.gen_fn_devuelve_id_pais(lv_cod_pais); -- id del pais consultante
  lv_oid_peri := fin_pkg_gener.fin_fn_obtie_perio_actu;
  lv_oid_peri_ante := fin_pkg_gener.FIN_FN_OBTIE_OID_PERIO(fin_pkg_gener.FIN_FN_CALCU_PERIO_NANTE(FIN_PKG_GENER.FIN_FN_OBTIE_CODIG_PERIO(lv_oid_peri),1));
  lv_oid_peri_ant2 := fin_pkg_gener.FIN_FN_OBTIE_OID_PERIO(fin_pkg_gener.FIN_FN_CALCU_PERIO_NANTE(FIN_PKG_GENER.FIN_FN_OBTIE_CODIG_PERIO(lv_oid_peri_ante),1));

  SELECT num_posi_nume_clie INTO lsnum_posi_nume_clie FROM seg_pais WHERE oid_pais = lv_oid_pais;

  SELECT cod_tipo_asig
  INTO lscodigo_tipo_asig
  FROM mae_param_clien
  WHERE pais_oid_pais = lv_oid_pais; --Posicion 61

  SELECT mod_vali
  INTO lstipomodulo
  FROM mae_clien_modul
  WHERE cod_pais = lv_cod_pais
    AND tip_vali = 'VAL_CODCLIE';

  lsparadigitochequeo := sto_pkg_gener.sto_fn_obten_param_ocr(lv_cod_pais,
                                                                'STO_PARAM_DIGI_CHEQ');

  lsparagenecodclie := sto_pkg_gener.sto_fn_obten_param_ocr(lv_cod_pais,
                                                              'STO_GENER_COD_CLIE');

  lsdirbarrio       := sto_pkg_gener.sto_fn_obten_param_ocr(lv_cod_pais,
                                                                      'STO_DIR_BARRIO');

  IF (lsparagenecodclie = '1' AND lscodigo_tipo_asig != 'M') THEN

   lnnumregistros:=1;

   lnnumsoliinicio := sto_pkg_gener.sto_fn_resrv_secue_nsoli(lv_cod_pais,
                                                                'MAECLT',
                                                                NULL,
                                                                lnnumregistros,
                                                                NULL);

  END IF;

  OPEN c_envioscc;
  LOOP
   FETCH c_envioscc BULK COLLECT
    INTO v_codpais,
         v_codperi,
         v_codclie,
         v_numlote,
         v_secnumdocu,
         v_oidpais,
         v_primerapellfiador,
         v_secondapellfiador,
         v_primernomfiador,
         v_secondnomfiador,
         v_fechaproceso,
         v_fechanacimiento,
             v_estadocivil,
             v_oidperiodo,
             v_valormail,
             v_oidterradmin,
             v_tipovia,
             v_oidterritorio,
             v_direccioncliente,
             v_valnombrevia,
             v_valdireccion,
             v_coddepartamento,
             v_codprovincia,
             v_coddistrito,
             v_codsector,
             v_valtelefiador,
             v_valcelufiador,
             v_valtrabfiador,
             v_codclientereco,
             v_numeropremio,
             v_oidnivelpremio,
             v_tipodocumento,
             v_numerodocumento,
             v_ruccliente,
             v_apell1cliente,
             v_apell2cliente,
             v_nom1cliente,
             v_nom2cliente,
             v_telfcliente,
             v_celcliente,
             v_teltrabcliente,
             v_oid_para_gral,
             v_cod_prem,
             v_cod_docu_idfi,
             v_cod_fiad,
             v_tip_via_fiad,
             v_val_nomb_vifi,
             v_num_dire_fiad,
             v_cod_depa_fiad,
             v_cod_prov_fiad,
             v_cod_dist_fiad,
             v_cod_sect_fiad,
             v_val_dire_fiad,
             v_tip_docu_fiad,
             v_ind_nive_educ,
             v_val_nume_docu,
             v_val_dire_entr,
             v_val_tele_entr,
             v_val_celu_entr,
             v_val_barr_fiad,
             v_val_ciud_fiad,
             v_val_depa_fiad,
             v_val_tipo_vinc_fiad,
             v_val_nomb_empr_fiad,
             v_val_dire_empr_fiad,
             v_val_carg_fiad,
             v_val_nomb_refe_fami,
             v_val_apel_refe_fami,
             v_val_dire_refe_fami,
             v_val_barr_refe_fami,
             v_val_ciud_refe_fami,
             v_val_depa_refe_fami,
             v_val_tele_refe_fami,
             v_val_celu_refe_fami,
             v_val_tipo_vinc_refe_fami,
             v_val_ape1_refe_nofa,
             v_val_nomb_refe_nofa,
             v_val_tele_refe_nofa,
             v_val_celu_refe_nofa,
             v_val_tipo_vinc_refe_nofa,
             v_val_dire_refe_nofa,
             v_val_barr_clie,
             v_val_codsexo_clie,
             v_val_ind_vend_mar1,
             v_val_ind_vend_mar2,
             v_val_ind_vend_mar3,
             v_val_ind_vend_mar4,
             v_val_ind_vend_mar5,
             v_val_ind_vend_mar6,
             v_val_ind_vend_mar7,
             v_val_cod_marc_vema,
             v_IND_REQU_IMPR_BOLE,
             v_COD_LIDE_RECO;

      IF v_codpais.count > 0 THEN

        FOR i IN v_codpais.first .. v_codpais.last
        LOOP

          SELECT mae_clie_seq.nextval INTO lstmp_oid_clie FROM dual;
          SELECT mae_ctsu_seq.nextval INTO lstmp_oid_clie_tipo_subti FROM dual;

          IF ((lsparagenecodclie != '0') OR (v_codclie(i) IS NULL)) THEN

            IF lscodigo_tipo_asig = 'M' THEN
              v_codclie(i) := lpad(v_numerodocumento(i),
                                   lsnum_posi_nume_clie,
                                   '0');
            ELSE

              lnnumsoliinicio := lnnumsoliinicio + 1;

              lscodigo_tmp := lnnumsoliinicio;

              IF lscodigo_tipo_asig = 'A' THEN

                IF (lstipomodulo = 'MOD11') THEN

                  lsdigitochequeo := sto_pkg_gener.sto_fn_devue_modul_once(lscodigo_tmp,
                                                                           lv_cod_pais);
                  v_codclie(i) := lpad(lscodigo_tmp || lsdigitochequeo,
                                       lsnum_posi_nume_clie,
                                       '0');
                ELSIF (lstipomodulo = 'MOD03') THEN

                  lscodigo_tmp1 := lpad(lscodigo_tmp1,
                                        lsnum_posi_nume_clie,
                                        '0');

                  IF lsparagenecodclie = '2' THEN
                    lscodigo_tmp1 := mae_pkg_proce_clien.mae_fn_obten_secue_codig_clien(lv_cod_pais);
                    lscodigo_tmp1 := lpad(lscodigo_tmp1,
                                          lsnum_posi_nume_clie,
                                          '0');
                  END IF;

                  lscodtmpdigitochequeo := substr(lscodigo_tmp1,
                                                  length(lscodigo_tmp1) - 5,
                                                  length(lscodigo_tmp1));
                  lsdigitochequeo := sto_pkg_gener.sto_fn_devue_codig_refer(lscodtmpdigitochequeo,
                                                                            lv_cod_pais);
                  v_codclie(i) := lpad(lscodigo_tmp1,
                                       lsnum_posi_nume_clie,
                                       '0');
                ELSIF (lstipomodulo = 'MOD02') THEN

                  lscodigo_tmp          := lpad(lscodigo_tmp,
                                                lsnum_posi_nume_clie,
                                                '0');
                  lscodtmpdigitochequeo := substr(lscodigo_tmp,
                                                  length(lscodigo_tmp) - 6,
                                                  length(lscodigo_tmp));

                  lsdigitochequeo := sto_pkg_gener.sto_fn_devue_codre_esika(lscodtmpdigitochequeo,
                                                                            lv_cod_pais);

                  lsdigitochequeo := lpad(lsdigitochequeo,
                                          2,
                                          '0');
                  v_codclie(i) := lpad(lscodigo_tmp,
                                       lsnum_posi_nume_clie,
                                       '0');

                ELSE
                  v_codclie(i) := lpad(lscodigo_tmp,
                                       lsnum_posi_nume_clie,
                                       '0');
                END IF;

              END IF;

            END IF;

          END IF;

          --Insercion en MAE_CLIEN
          INSERT INTO mae_clien
            (oid_clie,--1
             cod_clie,--2
             ind_fich_insc,--3
             pais_oid_pais,--4
             cod_digi_ctrl,--5
             val_ape1,--6
             val_ape2,--7
             val_nom1,--8
             val_nom2,--9
             val_trat,--10
             val_crit_bus1,--11
             val_crit_bus2,--12
             cod_sexo,--13
             fec_ingr,--14
             fopa_oid_form_pago,--15
             val_apel_casa,--16
             fec_crea,--17
             fec_ulti_actu,--18
             fec_ulti_gene_cupo,--19
             ind_orig_regi--20
             )
          VALUES
            (lstmp_oid_clie,--1
             v_codclie(i),--2
             0,--3
             v_oidpais(i),--4
             decode(lsparadigitochequeo,
                    NULL,
                    lsdigitochequeo,
                    lsparadigitochequeo || lsdigitochequeo),--5
             v_apell1cliente(i),--6
             v_apell2cliente(i),--7
             v_nom1cliente(i),--8
             v_nom2cliente(i),--9
             '3',--10
             v_apell1cliente(i),--11
             v_nom1cliente(i),--12
             v_val_codsexo_clie(i),--13
             to_date(v_fechaproceso(i),
                     'DD/MM/YY'),--14
             NULL,--15
             NULL,--16
             v_fechaproceso(i),--17
             v_fechaproceso(i),--18
             v_fechaproceso(i),--19
             'T'--20
             );--ingreso de cuenta corriente

          --Insercion en MAE_CLIEN_DATOS_ADICI

          INSERT INTO mae_clien_datos_adici
            (clie_oid_clie,--1
             nsep_oid_nsep,--2
             oid_clie_dato_adic,--3
             cod_empl,--4
             fec_naci,--5
             val_edad,--6
             val_ocup,--7
             val_prof,--8
             val_cent_trab,--9
             val_carg_dese,--10
             val_cent_estu,--11
             val_nive_soci_eco3,--12
             num_hijo,--13
             num_pers_depe,--14
             num_camp_sin_pedi,--15
             imp_ingr_fami,--16
             imp_mont_line_cred,--17
             niri_oid_nive_ries,--18
             nied_oid_nive_estu,--19
             snon_oid_naci,--20
             escv_oid_esta_civi,--21
             perd_oid_peri_nive_ries,--22
             perd_oid_peri_line_cred,--23
             ind_corr,--24
             ind_acti,--25
             esta_oid_esta_clie,--26
             tclv_oid_cicl_vida,--27
             val_emai,--28
             fec_ulti_actu,--29
             ind_impr_docu,--30
             USU_CARG,--31
             FEC_CARG,--32
             TIP_CARG--33
             )
          VALUES
            (lstmp_oid_clie,--1
             NULL,--2
             mae_clda_seq.nextval,--3
             NULL,--4
             trunc(v_fechanacimiento(i)),--5
             floor((months_between(SYSDATE,v_fechanacimiento(i)) / 12)),--6
             NULL,--7
             NULL,--8
             NULL,--9
             NULL,--10
             NULL,--11
             NULL,--12
             NULL,--13
             NULL,--14
             19,--15
             NULL,--16
             0,--17
             nvl((SELECT oid_nive_ries
                   FROM car_nivri_secci
                  WHERE oid_secc = (SELECT zscc_oid_secc
                                      FROM zon_terri_admin
                                     WHERE oid_terr_admi = v_oidterradmin(i))),
                 4),--18
             v_ind_nive_educ(i) + 2000, --NULL,--19
             nvl(sto_pkg_gener.sto_fn_obten_param_ocr(lv_cod_pais,
                                                      'STO_SCC_COD_NACI'),
                 2001),--20
             v_estadocivil(i) + 2000, --(SELECT oid_esta_civi FROM mae_estad_civil WHERE cod_esta_civi = TRIM(to_char(v_estadocivil(i), '00'))),--21
             v_oidperiodo(i),--22
             v_oidperiodo(i),--23
             1,--24
             0, -- indicador actividad--25
             lv_oid_esta_inco, -- estado retirada incobrable--26
             NULL,--27
             NULL, --v_valormail(i),--28
             SYSDATE,--29
             DECODE(nvl(v_ruccliente(i),'0'),'0',DECODE(v_IND_REQU_IMPR_BOLE(i),'N','0','1' ),'0' ),--30
             USER,--31
             SYSDATE,--32
             DECODE(nvl(v_ruccliente(i),'0'),'0','2',NULL)--33
             );

             --decode(nvl(v_ruccliente(i),'0'),'0','1','0'))

          --Insercion en MAE_CLIEN_UNIDA_ADMIN

          INSERT INTO mae_clien_unida_admin
            (oid_clie_unid_admi,
             clie_oid_clie,
             perd_oid_peri_ini,
             perd_oid_peri_fin,
             ztad_oid_terr_admi,
             ind_acti,
             fec_ulti_actu)
          VALUES
            (mae_cuad_seq.nextval,
             lstmp_oid_clie,
             lv_oid_peri_ante,
             NULL,
             v_oidterradmin(i),
             1,
             SYSDATE);

          --Insercion en MAE_CLIEN_DIREC

          INSERT INTO mae_clien_direc
            (oid_clie_dire,--1
             clie_oid_clie,--2
             tidc_oid_tipo_dire,--3
             tivi_oid_tipo_via,--4
             terr_oid_terr,--5
             zvia_oid_via,--
             num_ppal,
             val_nomb_via,
             val_cod_post,
             val_inte,
             val_manz,
             val_lote,
             val_km,
             val_obse,
             val_barr,
             val_nomb_fich,
             val_coor_x,
             val_coor_y,
             val_coor_z,
             ind_dire_ppal,
             ind_ctrl_inte_geor,
             fec_ulti_actu,
             cod_unid_geog,
             ind_elim)
          VALUES
            (mae_cldi_seq.nextval,
             lstmp_oid_clie,
             2001,
             (SELECT oid_tipo_via
                FROM seg_tipo_via
               WHERE cod_tipo_via = nvl(v_tipovia(i),
                                        '99')),
             v_oidterritorio(i),
             NULL,
             v_direccioncliente(i),
             v_valnombrevia(i),
             NULL,
             NULL,
             NULL,
             NULL,
             NULL,
             /*v_valdireccion(i) || decode(v_val_barr_clie(i),
                                         NULL,
                                         NULL,
                                         ' - ' || v_val_barr_clie(i)),*/
             v_valdireccion(i)  || DECODE ( lsdirbarrio, 'N', '', decode(v_val_barr_clie(i), NULL, NULL,  ' - ' || v_val_barr_clie(i)) ),
             v_val_barr_clie(i),
             NULL,
             0,
             0,
             0,
             1,
             'S',
             SYSDATE,
             v_coddepartamento(i) || v_codprovincia(i) || v_coddistrito(i) || v_codsector(i),
             0);

          --IF v_val_nume_docu(i) is not NULL THEN
          /*          IF sto_pkg_gener.sto_fn_obten_param_ocr(pscodigopais,
                                               'COD_TIPO_DIRE_ENTR') IS NOT NULL AND

          v_val_dire_entr(i) IS NOT NULL THEN*/
          IF v_val_dire_entr(i) IS NOT NULL THEN
            INSERT INTO mae_clien_direc
              (oid_clie_dire,
               clie_oid_clie,
               tidc_oid_tipo_dire,
               tivi_oid_tipo_via,
               terr_oid_terr,
               zvia_oid_via,
               num_ppal,
               val_nomb_via,
               val_cod_post,
               val_inte,
               val_manz,
               val_lote,
               val_km,
               val_obse,
               val_nomb_fich,
               val_coor_x,
               val_coor_y,
               val_coor_z,
               ind_dire_ppal,
               ind_ctrl_inte_geor,
               fec_ulti_actu,
               cod_unid_geog,
               ind_elim)
            VALUES
              (mae_cldi_seq.nextval,
               lstmp_oid_clie,
               (SELECT oid_tipo_dire
                  FROM mae_tipo_direc
                 WHERE cod_tipo_dire =
                       sto_pkg_gener.sto_fn_obten_param_ocr(lv_cod_pais,
                                                            'COD_TIPO_DIRE_ENTR')),
               (SELECT oid_tipo_via FROM seg_tipo_via WHERE cod_tipo_via = '99'),
               v_oidterritorio(i),
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               v_val_dire_entr(i),
               NULL,
               0,
               0,
               0,
               0,
               'S',
               SYSDATE,
               v_coddepartamento(i) || v_codprovincia(i) || v_coddistrito(i) || v_codsector(i),
               0);
          END IF;

          --Insercion en MAE_CLIEN_COMUN

          IF v_telfcliente(i) IS NOT NULL THEN

            INSERT INTO mae_clien_comun
              (oid_clie_comu,
               clie_oid_clie,
               ticm_oid_tipo_comu,
               val_dia_comu,
               val_text_comu,
               fec_hora_desd,
               fec_hora_hast,
               val_inte_comu,
               ind_comu_ppal,
               fec_ulti_actu)
            VALUES
              (mae_clco_seq.nextval,
               lstmp_oid_clie,
               1,
               'L',
               v_telfcliente(i),
               NULL,
               NULL,
               1,
               1,
               SYSDATE);
          END IF;

          IF v_celcliente(i) IS NOT NULL THEN

            INSERT INTO mae_clien_comun
              (oid_clie_comu,
               clie_oid_clie,
               ticm_oid_tipo_comu,
               val_dia_comu,
               val_text_comu,
               fec_hora_desd,
               fec_hora_hast,
               val_inte_comu,
               ind_comu_ppal,
               fec_ulti_actu)
            VALUES
              (mae_clco_seq.nextval,
               lstmp_oid_clie,
               6,
               'L',
               v_celcliente(i),
               NULL,
               NULL,
               1,
               0,
               SYSDATE);
          END IF;

          IF v_teltrabcliente(i) IS NOT NULL THEN

            INSERT INTO mae_clien_comun
              (oid_clie_comu,
               clie_oid_clie,
               ticm_oid_tipo_comu,
               val_dia_comu,
               val_text_comu,
               fec_hora_desd,
               fec_hora_hast,
               val_inte_comu,
               ind_comu_ppal,
               fec_ulti_actu)
            VALUES
              (mae_clco_seq.nextval,
               lstmp_oid_clie,
               7,
               'L',
               v_teltrabcliente(i),
               NULL,
               NULL,
               1,
               0,
               SYSDATE);
          END IF;

          IF v_valormail(i) IS NOT NULL THEN
            INSERT INTO mae_clien_comun
              (oid_clie_comu,
               clie_oid_clie,
               ticm_oid_tipo_comu,
               val_dia_comu,
               val_text_comu,
               fec_hora_desd,
               fec_hora_hast,
               val_inte_comu,
               ind_comu_ppal,
               fec_ulti_actu)
            VALUES
              (mae_clco_seq.nextval,
               lstmp_oid_clie,
               3,
               'L',
               v_valormail(i),
               NULL,
               NULL,
               1,
               0,
               SYSDATE);
          END IF;

          IF v_val_tele_entr(i) IS NOT NULL THEN
            INSERT INTO mae_clien_comun
              (oid_clie_comu,
               clie_oid_clie,
               ticm_oid_tipo_comu,
               val_dia_comu,
               val_text_comu,
               fec_hora_desd,
               fec_hora_hast,
               val_inte_comu,
               ind_comu_ppal,
               fec_ulti_actu)
            VALUES
              (mae_clco_seq.nextval,
               lstmp_oid_clie,
               (SELECT oid_tipo_comu
                  FROM mae_tipo_comun
                 WHERE cod_tipo_comu =
                       sto_pkg_gener.sto_fn_obten_param_ocr(lv_cod_pais,
                                                            'COD_TIPO_TELE_ENTR')),
               'L',
               v_val_tele_entr(i),
               NULL,
               NULL,
               1,
               0,
               SYSDATE);
          END IF;

          IF v_val_celu_entr(i) IS NOT NULL THEN
            INSERT INTO mae_clien_comun
              (oid_clie_comu,
               clie_oid_clie,
               ticm_oid_tipo_comu,
               val_dia_comu,
               val_text_comu,
               fec_hora_desd,
               fec_hora_hast,
               val_inte_comu,
               ind_comu_ppal,
               fec_ulti_actu)
            VALUES
              (mae_clco_seq.nextval,
               lstmp_oid_clie,
               (SELECT oid_tipo_comu
                  FROM mae_tipo_comun
                 WHERE cod_tipo_comu =
                       sto_pkg_gener.sto_fn_obten_param_ocr(lv_cod_pais,
                                                            'COD_TIPO_CELU_ENTR')),
               'L',
               v_val_celu_entr(i),
               NULL,
               NULL,
               1,
               0,
               SYSDATE);
          END IF;

          --Insercion en MAE_CLIEN_HISTO_ESTAT

          INSERT INTO mae_clien_histo_estat
            (oid_hist_esta,
             perd_oid_peri,
             clie_oid_clie,
             perd_oid_peri_peri_fin,
             esta_oid_esta_clie)
          VALUES
            (mae_clhe_seq.nextval,
             lv_oid_peri_ant2,
             lstmp_oid_clie,
             NULL,
             7);

          --Insercion en MAE_CLIEN_TIPO_SUBTI

          INSERT INTO mae_clien_tipo_subti
            (oid_clie_tipo_subt,
             clie_oid_clie,
             ticl_oid_tipo_clie,
             sbti_oid_subt_clie,
             ind_ppal,
             fec_ulti_actu)
          VALUES
            (lstmp_oid_clie_tipo_subti,
             lstmp_oid_clie,
             2,
             1,
             1,
             SYSDATE);

          -- Insercion en MAE_CLIEN_CLASI
          BEGIN
            SELECT DISTINCT zz.cod_zona,
                            zr.cod_regi
              INTO lscod_zona,
                   lscod_regi
              FROM zon_terri_admin zta,
                   zon_secci       zs,
                   zon_zona        zz,
                   zon_regio       zr
             WHERE zta.zscc_oid_secc = zs.oid_secc
               AND zs.zzon_oid_zona = zz.oid_zona
               AND zz.zorg_oid_regi = zr.oid_regi
               AND zs.ind_acti = 1
               AND zz.ind_acti = 1
               AND zr.ind_acti = 1
               AND zta.ind_borr = 0
               AND zta.terr_oid_terr = v_oidterritorio(i);

            INSERT INTO mae_clien_clasi
              (oid_clie_clas,
               ctsu_oid_clie_tipo_subt,
               clas_oid_clas,
               perd_oid_peri,
               tccl_oid_tipo_clasi,
               fec_clas,
               ind_ppal,
               fec_ulti_actu)

              SELECT mae_clcl_seq.nextval,
                     a.*
                FROM (SELECT lstmp_oid_clie_tipo_subti,
                             (SELECT b.oid_clas
                                FROM mae_clasi b
                               WHERE b.tccl_oid_tipo_clas IN
                                     (SELECT a.oid_tipo_clas
                                        FROM mae_tipo_clasi_clien a
                                       WHERE a.sbti_oid_subt_clie = 1
                                         AND a.cod_tipo_clas = cod_tipo_clasi)
                                 AND b.cod_clas = cod_clasi) AS oid_clas,
                             v_oidperiodo(i),
                             (SELECT a.oid_tipo_clas
                                FROM mae_tipo_clasi_clien a
                               WHERE a.sbti_oid_subt_clie = 1
                                 AND a.cod_tipo_clas = cod_tipo_clasi) AS oid_tipo_clasi,
                             trunc(SYSDATE),
                             1,
                             SYSDATE
                        FROM sto_param_clasi_occrr
                       WHERE ((cod_regio IS NULL AND cod_zona IS NULL) OR
                             (cod_regio = lscod_regi AND
                             (cod_zona = lscod_zona OR cod_zona IS NULL)))
                         AND (cod_peri = (SELECT b.cod_peri
                                            FROM cra_perio       a,
                                                 seg_perio_corpo b
                                           WHERE a.peri_oid_peri = b.oid_peri
                                             AND a.oid_peri = v_oidperiodo(i)
                                             AND a.pais_oid_pais = v_oidpais(i)) OR
                             cod_peri IS NULL)
                       GROUP BY cod_tipo_clasi,
                                cod_clasi) a;

          END;

          --Insercion en MAE_CLIEN_VINCU
          IF (v_codclientereco(i) IS NOT NULL) THEN

            INSERT INTO mae_clien_vincu
              (oid_clie_vinc,
               fec_desd,
               fec_hast,
               clie_oid_clie_vnte,
               clie_oid_clie_vndo,
               tivc_oid_tipo_vinc,
               ind_vinc_ppal,
               fec_ulti_actu)
            VALUES
              (mae_cvin_seq.nextval,
               trunc(v_fechaproceso(i)),
               trunc(v_fechaproceso(i)) + 365,
               (SELECT oid_clie FROM mae_clien WHERE cod_clie = v_codclientereco(i)),
               lstmp_oid_clie,
               9,
               1,
               SYSDATE);

          END IF;

          -- iNSERCION INC_CLIEN_RECTE

          IF (v_cod_prem(i) IS NOT NULL AND v_codclientereco(i) IS NOT NULL) THEN
            --IF (v_codclientereco(i) IS NOT NULL) THEN
            BEGIN
              SELECT a.oid_clie_rete
                INTO lstm_poid_clie_rete
                FROM inc_clien_recte a
               WHERE clie_oid_clie =
                     (SELECT oid_clie FROM mae_clien WHERE cod_clie = v_codclientereco(i))
                 AND copa_oid_para_gral = v_oid_para_gral(i);

            EXCEPTION
              WHEN no_data_found THEN
                SELECT inc_clr3_seq.nextval INTO lstm_poid_clie_rete FROM dual;

                INSERT INTO inc_clien_recte
                  (oid_clie_rete,
                   ind_fin_vinc,
                   clie_oid_clie,
                   copa_oid_para_gral,
                   ind_eval,
                   oid_modu,
                   fec_crea)
                VALUES
                  (lstm_poid_clie_rete,
                   NULL,
                   (SELECT oid_clie FROM mae_clien WHERE cod_clie = v_codclientereco(i)),
                   v_oid_para_gral(i),
                   NULL,
                   1,
                   SYSDATE);

            END;

            IF (v_codclientereco(i) IS NOT NULL AND lstm_poid_clie_rete IS NOT NULL) THEN

              INSERT INTO inc_clien_recdo
                (oid_clie_redo,
                 ind_efec,
                 num_prem,
                 clie_oid_clie,
                 clr3_oid_clie_rete,
                 perd_oid_peri,
                 panp_oid_para_nive_prem,
                 ind_eval,
                 oid_modu,
                 fec_crea)
              VALUES
                (inc_clre_seq.nextval,
                 NULL,
                 v_numeropremio(i),
                 lstmp_oid_clie,
                 lstm_poid_clie_rete,
                 v_oidperiodo(i),
                 v_oidnivelpremio(i),
                 NULL,
                 1,
                 SYSDATE);
            END IF;

          END IF;

          IF (v_cod_prem(i) IS NULL AND v_codclientereco(i) IS NOT NULL) THEN
            SELECT oid_clie
              INTO lnoidclientercdte
              FROM mae_clien
             WHERE cod_clie = v_codclientereco(i);

            inc_pkg_proce_incen.inc_pr_inser_regis_recom(v_oidpais(i),
                                                         lstmp_oid_clie,
                                                         v_oidperiodo(i),
                                                         lnoidclientercdte,
                                                         1,
                                                        'C');
          END IF;

          --Insercion en MAE_CLIEN_IDENT

          IF (v_numerodocumento(i) IS NOT NULL AND v_tipodocumento(i) IS NOT NULL) THEN

            INSERT INTO mae_clien_ident
              (oid_clie_iden,
               tdoc_oid_tipo_docu,
               clie_oid_clie,
               num_docu_iden,
               val_iden_docu_prin,
               val_iden_pers_empr,
               fec_ulti_actu)
            VALUES
              (mae_clid_seq.nextval,
               (SELECT oid_tipo_docu FROM mae_tipo_docum WHERE cod_tipo_docu = v_tipodocumento(i)),
               lstmp_oid_clie,
               v_numerodocumento(i),
               decode(v_ruccliente(i),
                      NULL,
                      1,
                      0),
               'P',
               SYSDATE);
          END IF;

          IF (v_ruccliente(i) IS NOT NULL) THEN

            contador_mae_clien_direc := 0;

            SELECT COUNT(1)
              INTO contador_mae_clien_direc
              FROM mae_clien_ident
             WHERE clie_oid_clie = lstmp_oid_clie
               AND tdoc_oid_tipo_docu =
                   (SELECT oid_tipo_docu FROM mae_tipo_docum WHERE val_sigl = 'RUC');

            IF contador_mae_clien_direc = 0 THEN

              INSERT INTO mae_clien_ident
                (oid_clie_iden,
                 tdoc_oid_tipo_docu,
                 clie_oid_clie,
                 num_docu_iden,
                 val_iden_docu_prin,
                 val_iden_pers_empr,
                 fec_ulti_actu)
              VALUES
                (mae_clid_seq.nextval,
                 (SELECT oid_tipo_docu FROM mae_tipo_docum WHERE val_sigl = 'RUC'),
                 lstmp_oid_clie,
                 v_ruccliente(i),
                 1,
                 'P',
                 SYSDATE);

            ELSE

              UPDATE mae_clien_ident
                 SET num_docu_iden      = v_ruccliente(i),
                     fec_ulti_actu      = SYSDATE,
                     val_iden_docu_prin = 1
               WHERE tdoc_oid_tipo_docu =
                     (SELECT oid_tipo_docu FROM mae_tipo_docum WHERE val_sigl = 'RUC')
                 AND clie_oid_clie = lstmp_oid_clie;

            END IF;

          END IF;

          lscodigomarca := sto_pkg_gener.sto_fn_obten_param_ocr(lv_cod_pais,
                                                                'STO_MARC');
          lnidmarca := gen_pkg_gener.gen_fn_devuelve_id_marca(lscodigomarca);

          INSERT INTO mae_clien_marca
            (oid_clie_marc,
             clie_oid_clie,
             marc_oid_marc,
             ind_ppal,
             fec_ulti_actu)
          VALUES
            (mae_clmr_seq.nextval,
             lstmp_oid_clie,
             lnidmarca,
             1,
             SYSDATE);

          INSERT INTO mae_clien_prime_conta
            (oid_clie_prim_cont,
             clie_oid_clie,
             ctsu_clie_cont,
             fec_cont,
             fec_sigu_cont,
             cod_tipo_cont,
             marc_oid_marc,
             cana_oid_cana,
             perd_oid_peri,
             fec_ulti_actu)
          VALUES
            (mae_cprc_seq.nextval,
             lstmp_oid_clie,
             /*nvl((SELECT MAX(oid_clie_tipo_subt)
                   FROM mae_clien_tipo_subti
                  WHERE clie_oid_clie =
                        (SELECT oid_clie FROM mae_clien WHERE cod_clie = 'MIGRACION')),
             1),*/
             lstmp_oid_clie_tipo_subti,
             v_fechaproceso(i),
             v_fechaproceso(i) + 365,
             'I',
             2003,
             2001,
             v_oidperiodo(i),
             SYSDATE);

          --Informacion del Fiador

          IF (v_cod_docu_idfi(i) IS NOT NULL) THEN

            INSERT INTO mae_refer
              (cod_clie,
               tipo_refe,
               tipo_docu_refe,
               num_docu_refe,
               val_ape1,
               val_ape2,
               val_nom1,
               val_nom2,
               val_dire,
               val_barr,
               val_ciud,
               val_depa,
               val_telf,
               val_celu,
               val_telf_trab,
               tipo_via,
               val_nom_via,
               num_dire,
               cod_depa,
               cod_prov,
               cod_dist,
               cod_sect,
               tipo_vincu,
               nom_empre,
               dir_empre,
               carg_empre)
            VALUES
              (v_codclie(i),
               3,
               nvl(v_tip_docu_fiad(i),
                   '01'), -- le colocara 01 por default en caso venga en null
               v_cod_docu_idfi(i),
               v_primerapellfiador(i),
               v_secondapellfiador(i),
               v_primernomfiador(i),
               v_secondnomfiador(i),
               v_val_dire_fiad(i),
               v_val_barr_fiad(i),
               v_val_ciud_fiad(i),
               v_val_depa_fiad(i),
               v_valtelefiador(i),
               v_valcelufiador(i),
               v_valtrabfiador(i),
               v_tip_via_fiad(i),
               v_val_nomb_vifi(i),
               v_num_dire_fiad(i),
               v_cod_depa_fiad(i),
               v_cod_prov_fiad(i),
               v_cod_dist_fiad(i),
               v_cod_sect_fiad(i),
               v_val_tipo_vinc_fiad(i),
               v_val_nomb_empr_fiad(i),
               v_val_dire_empr_fiad(i),
               v_val_carg_fiad(i));
          END IF;

          --Informacion del Referencia Familiar
          IF v_val_nomb_refe_fami(i) IS NOT NULL THEN
            INSERT INTO mae_refer
              (cod_clie,
               tipo_refe,
               tipo_docu_refe,
               num_docu_refe,
               val_ape1,
               val_ape2,
               val_nom1,
               val_nom2,
               val_dire,
               val_barr,
               val_ciud,
               val_depa,
               val_telf,
               val_celu,
               val_telf_trab,
               tipo_via,
               val_nom_via,
               num_dire,
               cod_depa,
               cod_prov,
               cod_dist,
               cod_sect,
               tipo_vincu,
               nom_empre,
               dir_empre,
               carg_empre)
            VALUES
              (v_codclie(i),
               1,
               NULL,
               NULL,
               v_val_apel_refe_fami(i),
               NULL,
               v_val_nomb_refe_fami(i),
               NULL,
               v_val_dire_refe_fami(i),
               v_val_barr_refe_fami(i),
               v_val_ciud_refe_fami(i),
               v_val_depa_refe_fami(i),
               v_val_tele_refe_fami(i),
               v_val_celu_refe_fami(i),
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               v_val_tipo_vinc_refe_fami(i),
               NULL,
               NULL,
               NULL);
          END IF;

          IF v_val_nomb_refe_nofa(i) IS NOT NULL THEN
            INSERT INTO mae_refer
              (cod_clie,
               tipo_refe,
               tipo_docu_refe,
               num_docu_refe,
               val_ape1,
               val_ape2,
               val_nom1,
               val_nom2,
               val_dire,
               val_barr,
               val_ciud,
               val_depa,
               val_telf,
               val_celu,
               val_telf_trab,
               tipo_via,
               val_nom_via,
               num_dire,
               cod_depa,
               cod_prov,
               cod_dist,
               cod_sect,
               tipo_vincu,
               nom_empre,
               dir_empre,
               carg_empre)
            VALUES
              (v_codclie(i),
               2,
               NULL,
               NULL,
               v_val_ape1_refe_nofa(i),
               NULL,
               v_val_nomb_refe_nofa(i),
               NULL,
               v_val_dire_refe_nofa(i),
               NULL,
               NULL,
               NULL,
               v_val_tele_refe_nofa(i),
               v_val_celu_refe_nofa(i),
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               v_val_tipo_vinc_refe_nofa(i),
               NULL,
               NULL,
               NULL);
          END IF;

          --Informacion de marcas que vende la consultora
          IF (v_val_ind_vend_mar1(i) IS NOT NULL OR v_val_ind_vend_mar2(i) IS NOT NULL OR
             v_val_ind_vend_mar3(i) IS NOT NULL OR v_val_ind_vend_mar4(i) IS NOT NULL OR
             v_val_ind_vend_mar5(i) IS NOT NULL OR v_val_ind_vend_mar6(i) IS NOT NULL OR
             v_val_ind_vend_mar7(i) IS NOT NULL OR v_val_cod_marc_vema(i) IS NOT NULL) THEN

             SELECT COUNT(1)
             INTO lnvendemarca
             FROM mae_clien_vende_marca
             WHERE CLIE_OID_CLIE = lstmp_oid_clie;

             IF lnvendemarca = 0 THEN

            INSERT INTO mae_clien_vende_marca
              (clie_oid_clie,
               ind_mrc1,
               ind_mrc2,
               ind_mrc3,
               ind_mrc4,
               ind_mrc5,
               ind_mrc6,
               ind_mrc7,
               ind_marc_masv)
            VALUES
              (lstmp_oid_clie,
               decode(v_val_ind_vend_mar1(i),
                      'S',
                      1,
                      0),
               decode(v_val_ind_vend_mar2(i),
                      'S',
                      1,
                      0),
               decode(v_val_ind_vend_mar3(i),
                      'S',
                      1,
                      0),
               decode(v_val_ind_vend_mar4(i),
                      'S',
                      1,
                      0),
               decode(v_val_ind_vend_mar5(i),
                      'S',
                      1,
                      0),
               decode(v_val_ind_vend_mar6(i),
                      'S',
                      1,
                      0),
               decode(v_val_ind_vend_mar7(i),
                      'S',
                      1,
                      0),
               nvl(v_val_cod_marc_vema(i),
                   0));
              END IF;
          END IF;

        END LOOP;
      ELSE
        RAISE_application_error(-20123, 'ERROR CCC_PR_REGIS_CLIEN_INCOB: No existe el numero de documento ingresado');
      END IF;

      EXIT WHEN c_envioscc %NOTFOUND;
    END LOOP;

    CLOSE c_envioscc;


 EXCEPTION

  WHEN OTHERS THEN

   gv_reco_trac := FIN_PKG_GENER.FIN_FN_OBTIE_LINEA_ERROR(DBMS_UTILITY.format_error_backtrace);
   RAISE_APPLICATION_ERROR (-20000,
                             ' *** Error ' || SQLERRM  ||
                             ' *** encontrado en la linea ' || gv_reco_trac.line_number ||
                             ' en el programa ' ||
                             gv_reco_trac.program_owner || '.' || gv_reco_trac.program_name );

 END CCC_PR_REGIS_CLIEN_INCOB;

 PROCEDURE CCC_PR_ELIMI_MOVIM_CUENT_CORRI(
  p_oid_movi_cc                  IN   ccc_movim_cuent_corri.oid_movi_cc%TYPE)
 IS

  lv_oid_clie                    mae_clien.oid_clie%TYPE;

 BEGIN

  SELECT mcc.clie_oid_clie
  INTO lv_oid_clie
  FROM ccc_movim_cuent_corri mcc
  WHERE mcc.oid_movi_cc = p_oid_movi_cc;

  DELETE FROM ccc_detal_cargo_abono_direc det
  WHERE det.mvcc_oid_movi_cc = p_oid_movi_cc;

  DELETE FROM ccc_histo_movim_cc his
  WHERE his.mvcc_oid_movi_cc = p_oid_movi_cc;

  DELETE FROM cob_repor_estad_recup_cobra cbz
  WHERE cbz.oid_movi_cc = p_oid_movi_cc;

  INSERT INTO ccc_movim_cuent_elimi
   SELECT * FROM ccc_movim_cuent_corri mcc
   WHERE mcc.oid_movi_cc = p_oid_movi_cc;

  DELETE FROM ccc_movim_cuent_corri mcc
  WHERE mcc.oid_movi_cc = p_oid_movi_cc;

  UPDATE cob_repor_estad_recup_cobra cbz
  SET cbz.ulti_nume_hist = 0
  WHERE cbz.oid_movi_cc IN (
    SELECT cad.mvcc_oid_movi_carg
    FROM ccc_aplic_abono_cargo cad
    WHERE cad.mvcc_oid_movi_abon = p_oid_movi_cc);

  CCC_PR_DESTR_CUENT_CORRI_INDIV(lv_oid_clie,1);

 END CCC_PR_ELIMI_MOVIM_CUENT_CORRI;

 PROCEDURE CCC_PR_ELIMI_MOVIM_BANCA(
  p_oid_movi_banc                  IN   ccc_movim_banca.oid_movi_banc%TYPE)
 IS

  lv_oid_clie                      mae_clien.oid_clie%TYPE;

 BEGIN

  SELECT mb.clie_oid_clie
  INTO lv_oid_clie
  FROM ccc_movim_banca mb
  WHERE mb.oid_movi_banc = p_oid_movi_banc;

  DELETE FROM ccc_detal_cargo_abono_direc det
  WHERE det.cmba_oid_movi_banc = p_oid_movi_banc;

  INSERT INTO ccc_movim_banca_elimi
   SELECT * FROM ccc_movim_banca mb
   WHERE mb.oid_movi_banc = p_oid_movi_banc;

  DELETE FROM ccc_movim_banca mb
  WHERE mb.oid_movi_banc = p_oid_movi_banc;

  UPDATE cob_repor_estad_recup_cobra cbz
  SET cbz.ulti_nume_hist = 0
  WHERE cbz.oid_movi_cc IN (
    SELECT cad.mvcc_oid_movi_carg
    FROM ccc_aplic_abono_cargo cad
    WHERE cad.cmba_oid_movi_banc = p_oid_movi_banc);

  CCC_PR_DESTR_CUENT_CORRI_INDIV(lv_oid_clie,1);

 END CCC_PR_ELIMI_MOVIM_BANCA;

 PROCEDURE CCC_PR_ELIMI_LOTE_BANCA_LIQUI(
  p_num_lote                       IN   ccc_movim_banca.num_lote%TYPE,
  p_cod_usua                       IN   seg_usuar.use_usua%TYPE,
  p_val_moti                       IN   VARCHAR2)
 IS

 CURSOR c_pagos
 IS
  SELECT mb.oid_movi_banc
  FROM ccc_movim_banca mb
  WHERE mb.num_lote = p_num_lote;

 BEGIN
  
  INSERT INTO ccc_numer_lote_banca_elimi
   SELECT 
    r.cod_pais,
    r.cod_soci,
    r.cod_cuen_corr_banc,
    r.num_lote,
    r.cod_iden_proc,
    r.fec_pago_mini,
    r.fec_pago_maxi,
    r.val_cant_regi_tota,
    r.val_impo_regi_tota,
    r.val_cant_regi_ok,
    r.val_impo_regi_ok,
    r.val_cant_regi_erro,
    r.val_impo_regi_erro,
    r.fec_proc,
    r.usu_crea,
    r.fec_crea,
    r.tipo_lote,
    r.cod_tipo_orig,
    r.cod_usua_liqu,
    r.fec_inic_liqu,
    r.num_lote_mult,
    r.fec_fina_liqu,
    p_cod_usua,
    SYSDATE,
    p_val_moti
   FROM ccc_numer_lote_banca_recep r
   WHERE r.num_lote = p_num_lote;
  
  DELETE FROM ccc_numer_lote_banca_recep r
  WHERE r.num_lote = p_num_lote;
    
  FOR v_pagos IN c_pagos LOOP

   CCC_PR_ELIMI_MOVIM_BANCA(v_pagos.oid_movi_banc);

  END LOOP;

 END CCC_PR_ELIMI_LOTE_BANCA_LIQUI;

 PROCEDURE CCC_PR_GENER_REPOR_EMAIL_USUAR
 IS

  lv_subj_mens                     VARCHAR2(100);
  lv_cuer_mens                     CLOB;
  lv_clob_adju                     CLOB;
  lv_sql                           VARCHAR2(4000);
  lv_repo_name                     VARCHAR2(400);
  attachments                      FIN_PKG_SEND_MAIL.ARRAY_ATTACHMENTS := FIN_PKG_SEND_MAIL.ARRAY_ATTACHMENTS();

 CURSOR c_proc_usua
 IS
  SELECT
   c.cod_envi_repo,
   c.val_mail_orig,
   c.val_mail_dest,
   c.val_mail_copi,
   c.val_mail_subj,
   c.val_salu_usua,
   c.ind_diar
  FROM
   ccc_envio_repor_email c
  WHERE c.ind_acti = 1;

 CURSOR c_repo_deta_adju(
  pc_cod_proc                     IN   ccc_envio_repor_email.cod_envi_repo%TYPE)
 IS
  SELECT
   ca.num_orde,
   ca.val_repo_name,
   ca.val_sql,
   ca.des_prog_exec
  FROM
   ccc_envio_repor_email_adjun ca
  WHERE ca.cod_envi_repo = pc_cod_proc
    AND ca.ind_acti = 1
  ORDER BY ca.num_orde ASC;

 BEGIN

  EXECUTE IMMEDIATE 'alter session set nls_territory=AMERICA';

  FOR v_proc_usua IN c_proc_usua LOOP

   lv_subj_mens := v_proc_usua.val_mail_subj || ' - '|| TO_CHAR(SYSDATE,'DD/MM/YYYY');

   --lv_cuer_mens := '';
   lv_cuer_mens := lv_cuer_mens || '<html><body>';
   lv_cuer_mens := lv_cuer_mens || '<table style="text-align: left; width: 90%" border="0" cellpadding="0" cellspacing="0">';
   lv_cuer_mens := lv_cuer_mens || '<tr>';
   lv_cuer_mens := lv_cuer_mens || '<b>' || v_proc_usua.val_salu_usua || '</b>';
   lv_cuer_mens := lv_cuer_mens || '</tr>';
   lv_cuer_mens := lv_cuer_mens || '<tr><td style="height: 172px; width: 256px;"><font color="#4188b2" face="Arial" size="4"><b>';
   lv_cuer_mens := lv_cuer_mens || '   Adjunto encontraras los reportes generados para el dia de hoy';
   lv_cuer_mens := lv_cuer_mens || '</b></font></td></tr></table>';
   lv_cuer_mens := lv_cuer_mens || '<font face="Arial" size="1"><br><b>NOTA: Por favor no responda a este mensaje, es generado automaticamente desde una cuenta no monitoreada.</b><br><br><br></font><br><br><br></body></html>';

   attachments.delete();

   FOR v_repo_deta_adju IN c_repo_deta_adju(v_proc_usua.cod_envi_repo) LOOP

    FIN_PKG_GENER.FIN_PR_EXECU_DINAM_SQL(v_repo_deta_adju.des_prog_exec);

    lv_sql := v_repo_deta_adju.val_sql;

    lv_repo_name := v_repo_deta_adju.val_repo_name;

    gen_pkg_xls.gen_pr_gener_file_excel_tclob(lv_sql,lv_repo_name,1000,lv_clob_adju);

    attachments.extend(1);
    attachments(v_repo_deta_adju.num_orde).attach_name := lv_repo_name;
    attachments(v_repo_deta_adju.num_orde).data_type := 'text/plain';
    attachments(v_repo_deta_adju.num_orde).attach_content := lv_clob_adju;

   END LOOP;

   FIN_PKG_SEND_MAIL.SEND_MAIL(
                            v_proc_usua.val_mail_orig,
                            v_proc_usua.val_mail_dest,
                            lv_subj_mens,
                            lv_cuer_mens,
                            v_proc_usua.val_mail_copi,
                            attachments,'text/html');

   lv_subj_mens := '';
   lv_cuer_mens := '';

  END LOOP;

 END CCC_PR_GENER_REPOR_EMAIL_USUAR;

 PROCEDURE CCC_PR_INSER_PAGO_WEBSE(
  p_cod_banc                     IN    VARCHAR2,
  p_num_oper                     IN   VARCHAR2,
  p_cod_clie                     IN   VARCHAR2,
  p_fec_pago                     IN   VARCHAR2,
  p_val_pago                     IN   VARCHAR2,
  p_ind_ejec                     OUT   VARCHAR2)
 IS

  lv_fec_pago                    DATE;
  lv_cod_pais                    ccc_param_gener.val_para%TYPE;
  lv_cod_soci                    ccc_param_gener.val_para%TYPE;
  lv_num_lote                    ccc_movim_banca.num_lote%TYPE;

  lv_reg_ccc_movim_banca         ccc_movim_banca%ROWTYPE;

 BEGIN

  lv_fec_pago:= TO_DATE(p_fec_pago,'DD/MM/YYYY');
  lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
  lv_cod_soci := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoSociedad');


  SELECT ccc_cmba_seq.NEXTVAL
  INTO lv_reg_ccc_movim_banca.oid_movi_banc
  FROM dual;

  SELECT tt.oid_tipo_tran
  INTO lv_reg_ccc_movim_banca.ttra_oid_tipo_trans
  FROM ccc_tipo_trans tt
  WHERE tt.cod_tipo_tran = 'TBWEB';

  lv_reg_ccc_movim_banca.clie_oid_clie := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CLIENTE(p_cod_clie);
  lv_reg_ccc_movim_banca.pais_oid_pais := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(lv_cod_pais);
  lv_reg_ccc_movim_banca.soci_oid_soci := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_SOCIE(lv_cod_soci);
  lv_reg_ccc_movim_banca.subp_oid_marc_crea :=  CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_OID_SUBPR('TES001','1');
  lv_reg_ccc_movim_banca.tcab_oid_abon_crea := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_OID_TICAB(lv_reg_ccc_movim_banca.subp_oid_marc_crea);
  lv_reg_ccc_movim_banca.subp_oid_marc_ulti := lv_reg_ccc_movim_banca.subp_oid_marc_crea;
  lv_reg_ccc_movim_banca.tcab_oid_abon_ulti:= lv_reg_ccc_movim_banca.tcab_oid_abon_crea;
  lv_reg_ccc_movim_banca.ccba_oid_cc_banc := CCC_PKG_GENER.CCC_FN_OBTIE_CODIG_BANCO_CCBAN(p_cod_banc);
  lv_num_lote := lv_reg_ccc_movim_banca.ccba_oid_cc_banc  || TO_NUMBER(p_num_oper);
  lv_reg_ccc_movim_banca.num_lote := lv_num_lote;
  lv_reg_ccc_movim_banca.num_cons_tran := p_num_oper;
  lv_reg_ccc_movim_banca.cod_cons := p_cod_clie;
  lv_reg_ccc_movim_banca.val_esta_movi_pend := 'P';
  lv_reg_ccc_movim_banca.fec_pago := lv_fec_pago;
  lv_reg_ccc_movim_banca.fec_proc := TRUNC(SYSDATE);
  lv_reg_ccc_movim_banca.val_hora_proc := SYSDATE;
  --lv_reg_ccc_movim_banca.val_hora_norm_adic := lc_val_cod_iden_esta_ok;
  lv_reg_ccc_movim_banca.cod_iden_proc := 'T';
  lv_reg_ccc_movim_banca.imp_pago := TO_NUMBER(p_val_pago,'999999999.99');
  lv_reg_ccc_movim_banca.val_usua_proc := USER;
  lv_reg_ccc_movim_banca.cod_usua := USER;
  lv_reg_ccc_movim_banca.val_obse := 'COBRANZA MANUAL';
  lv_reg_ccc_movim_banca.num_hist := 0;
  lv_reg_ccc_movim_banca.imp_apli := 0;
  lv_reg_ccc_movim_banca.imp_sald_pend := TO_NUMBER(p_val_pago,'999999999.99');
  lv_reg_ccc_movim_banca.fec_movi_apli := SYSDATE;
  lv_reg_ccc_movim_banca.val_impo_movi := TO_NUMBER(p_val_pago,'999999999.99');
  lv_reg_ccc_movim_banca.cod_usua_rece := USER;
  lv_reg_ccc_movim_banca.val_hora_rece := SYSDATE;
  lv_reg_ccc_movim_banca.ind_pago_regu := 0;
  lv_reg_ccc_movim_banca.ind_pago_reve := 0;

  INSERT INTO ccc_movim_banca VALUES lv_reg_ccc_movim_banca;

  CCC_PKG_GENER.CCC_PR_REGIS_LOTE_BANCA(p_cod_banc,gc_cod_tipo_orig_web,lv_num_lote,USER);

  CCC_PKG_PROCE.CCC_PR_LIQUI_LOTE_BANCA(lv_num_lote,USER);

  p_ind_ejec:= 1;

 EXCEPTION

  WHEN OTHERS THEN
   p_ind_ejec:= 0;

 END CCC_PR_INSER_PAGO_WEBSE;

 PROCEDURE CCC_PR_REVER_PAGO_WEBSE(
  p_cod_banc                     IN    VARCHAR2,
  p_num_oper                     IN   VARCHAR2,
  p_cod_clie                     IN   VARCHAR2,
  p_fec_pago                     IN   VARCHAR2,
  p_ind_ejec                     OUT   VARCHAR2)
 IS

  lv_oid_movi_banc               NUMBER(12);
  lv_imp_pago                    NUMBER(12,2);

 BEGIN

  SELECT MIN(mb.oid_movi_banc)
  INTO lv_oid_movi_banc
  FROM
   ccc_movim_banca mb,
   ccc_cuent_corri_banca ccb,
   mae_clien mc
  WHERE mb.ccba_oid_cc_banc = ccb.oid_cuen_corr_banc
    AND mc.oid_clie = mb.clie_oid_clie
    AND ccb.cod_cc = p_cod_banc
    AND mc.cod_clie = p_cod_clie
    AND mb.num_cons_tran = TO_NUMBER(p_num_oper)
    AND mb.fec_pago = TO_DATE(p_fec_pago,'DD/MM/YYYY')
    AND mb.ind_pago_reve = 0;


  IF lv_oid_movi_banc IS NOT NULL THEN

   SELECT mb.imp_pago
   INTO lv_imp_pago
   FROM ccc_movim_banca mb
   WHERE mb.oid_movi_banc = lv_oid_movi_banc;

   UPDATE ccc_movim_banca mb
   SET mb.ind_pago_reve = 1
   WHERE mb.oid_movi_banc = lv_oid_movi_banc;

   CCC_PKG_PROCE.CCC_PR_GENER_CARGO_ABONO_INTER(702,p_cod_clie, TRUNC(SYSDATE),lv_imp_pago,USER);

   p_ind_ejec := 1;

  ELSE

   p_ind_ejec := 9;

  END IF;

 EXCEPTION

  WHEN OTHERS THEN
   p_ind_ejec := 0;

 END CCC_PR_REVER_PAGO_WEBSE;

 PROCEDURE CCC_PR_CONSU_SALDO_WEBSE(
  p_cod_clie                     IN   VARCHAR2,
  p_nom_clie                     OUT  VARCHAR2,
  p_val_sal                      OUT  VARCHAR2,
  p_ind_ejec                     OUT  VARCHAR2)
 IS
 BEGIN

  SELECT
   mc.val_ape1 || ' ' || mc.val_ape2 || ' ' || mc.val_nom1 || ' ' || mc.val_nom2,
   TO_CHAR(mc.sal_deud_ante,'999999999999.99')
  INTO
   p_nom_clie,
   p_val_sal
  FROM mae_clien mc
  WHERE mc.cod_clie = p_cod_clie;

  p_ind_ejec := '1';

 EXCEPTION

  WHEN OTHERS THEN
   p_ind_ejec := '0';

 END CCC_PR_CONSU_SALDO_WEBSE;

 /*
 PROCEDURE CCC_PR_GENER_CUADR_SAPFI_DIARI(
  p_fec_gene                 IN   VARCHAR2)
 IS

 lv_fec_cier                 DATE;
 lv_reg_ccc_cuadr_inic       ccc_saldo_inici_cuadr%ROWTYPE;
 lv_reg_ccc_cuadr_fina       ccc_saldo_inici_cuadr%ROWTYPE;

 lv_fec_inic                 DATE;
 lv_fec_fina                 DATE;
 lv_fec_cier_ante            DATE;

 lv_imp_apli_clie            NUMBER(15,2);
 lv_imp_apli_nota_exce       NUMBER(15,2);
 lv_imp_apli_fami_prot       NUMBER(15,2);
 lv_imp_apli_cobr_exce       NUMBER(15,2);
 lv_imp_apli_inco            NUMBER(15,2);

BEGIN

 dbms_output.put_line('Fecha de Generacion ' || p_fec_gene);

 lv_fec_cier := TO_DATE(p_fec_gene,'DD/MM/YYYY');

 dbms_output.put_line('Fecha de Cierre ' || lv_fec_cier);

 SELECT MAX(x.fec_cier)
 INTO lv_fec_cier_ante
 FROM ccc_saldo_inici_cuadr x
 WHERE x.fec_cier < lv_fec_cier;

 dbms_output.put_line('Fecha de Cierre Anterior ' || lv_fec_cier_ante);

 SELECT x.*
 INTO lv_reg_ccc_cuadr_inic
 FROM ccc_saldo_inici_cuadr x
 WHERE x.fec_cier = lv_fec_cier_ante;

 lv_fec_inic := lv_reg_ccc_cuadr_inic.fec_cier + 1;
 lv_fec_fina := lv_fec_cier;

 -- Cliente  --
 SELECT NVL(SUM(imp_movi_clie),0)
 INTO lv_imp_apli_clie
 FROM
 ((SELECT NVL(SUM(mcc.imp_movi),0) imp_movi_clie
 FROM ccc_movim_cuent_corri mcc
 WHERE mcc.fec_docu >= lv_fec_inic
   AND mcc.fec_docu <= lv_fec_fina
   AND mcc.subp_oid_subp_crea = 2001
   AND mcc.imp_movi > 0)
 UNION ALL
(SELECT NVL(SUM(mcc.imp_movi),0) imp_movi_clie
 FROM ccc_movim_cuent_corri mcc,
     ccc_subpr su
WHERE mcc.subp_oid_subp_crea = su.oid_subp
AND su.ind_carg_dire = 1
AND mcc.fec_docu >= lv_fec_inic
AND mcc.fec_docu <= lv_fec_fina
AND mcc.subp_oid_subp_crea <> 707
AND mcc.imp_movi > 0)
UNION ALL
(SELECT NVL(SUM(mcc.imp_movi),0) imp_movi_clie
 FROM ccc_movim_cuent_corri mcc
 WHERE mcc.fec_docu >= lv_fec_inic
 AND mcc.fec_docu <= lv_fec_fina
 AND mcc.subp_oid_subp_crea = 2001
 AND mcc.imp_movi < 0)
 UNION ALL
(SELECT NVL(SUM(mcc.imp_movi),0) imp_movi_clie
 FROM ccc_movim_cuent_corri mcc
 WHERE mcc.fec_docu >= lv_fec_inic
 AND mcc.fec_docu <= lv_fec_fina
 AND mcc.subp_oid_subp_crea <> 2001
 AND mcc.imp_movi < 0)
UNION ALL
 (SELECT NVL(SUM(mb.imp_apli_clie*-1),0) imp_movi_clie
 FROM ccc_movim_banca mb,
      ccc_numer_lote_banca_recep br
 WHERE mb.fec_proc >= lv_fec_inic
 AND mb.fec_proc <= lv_fec_fina
 AND mb.num_lote = br.num_lote
 AND br.cod_tipo_orig in ('INT','EXC','DIG'))
UNION ALL
 (SELECT NVL(SUM(mb.imp_pago*-1),0) imp_movi_clie
 FROM ccc_movim_banca mb,
      ccc_numer_lote_banca_recep br
 WHERE mb.fec_proc >= lv_fec_inic
 AND mb.fec_proc <= lv_fec_fina
 AND mb.num_lote = br.num_lote
 AND br.cod_tipo_orig IN ('REG')));

 -----------------
 --Nota en Exceso --
 SELECT NVL(SUM(mb.imp_apli_exce*-1),0)
 INTO lv_imp_apli_nota_exce
 FROM ccc_movim_banca mb,
      ccc_numer_lote_banca_recep br
 WHERE mb.fec_proc >= lv_fec_inic
 AND mb.fec_proc <= lv_fec_fina
 AND mb.num_lote = br.num_lote
 AND br.cod_tipo_orig in ('INT','EXC','DIG');

 ------------------
 SELECT NVL(sum(imp_apli_fami_prot),0)
 INTO lv_imp_apli_fami_prot
 FROM
 ((SELECT NVL(SUM(mcc.imp_movi),0) imp_apli_fami_prot
  FROM ccc_movim_cuent_corri mcc
  WHERE mcc.fec_docu >= lv_fec_inic
    AND mcc.fec_docu <= lv_fec_fina
    AND mcc.subp_oid_subp_crea = 707
    AND mcc.imp_movi > 0)
UNION ALL
 (SELECT NVL(SUM(mb.imp_apli_fami_prot*-1),0) imp_apli_fami_prot
 FROM ccc_movim_banca mb,
      ccc_numer_lote_banca_recep br
 WHERE mb.fec_proc >= lv_fec_inic
 AND mb.fec_proc <= lv_fec_fina
 AND mb.num_lote = br.num_lote
 AND br.cod_tipo_orig in ('INT','EXC','DIG')
 GROUP BY mb.fec_proc));

 SELECT NVL(SUM(mb.imp_apli_cobr_exte*-1),0)
 INTO lv_imp_apli_cobr_exce
 FROM ccc_movim_banca mb,
      ccc_numer_lote_banca_recep br
 WHERE mb.fec_proc >= lv_fec_inic
 AND mb.fec_proc <= lv_fec_fina
 AND mb.num_lote = br.num_lote
 AND br.cod_tipo_orig in ('INT','EXC','DIG');

 SELECT NVL(SUM(mb.imp_apli_inco*-1),0)
 INTO lv_imp_apli_inco
 FROM ccc_movim_banca mb,
      ccc_numer_lote_banca_recep br
 WHERE mb.fec_proc >= lv_fec_inic
 AND mb.fec_proc <= lv_fec_fina
 AND mb.num_lote = br.num_lote
 AND br.cod_tipo_orig in ('INT','EXC','DIG');

 lv_reg_ccc_cuadr_fina.fec_cier := lv_fec_cier;
 lv_reg_ccc_cuadr_fina.imp_sald_cuen_clie := lv_reg_ccc_cuadr_inic.imp_sald_cuen_clie + lv_imp_apli_clie;
 lv_reg_ccc_cuadr_fina.imp_sald_cuen_nota_exce := lv_reg_ccc_cuadr_inic.imp_sald_cuen_nota_exce + lv_imp_apli_nota_exce;
 lv_reg_ccc_cuadr_fina.imp_sald_cuen_fami_prot := lv_reg_ccc_cuadr_inic.imp_sald_cuen_fami_prot + lv_imp_apli_fami_prot;
 lv_reg_ccc_cuadr_fina.imp_sald_cuen_cobr_exte := lv_reg_ccc_cuadr_inic.imp_sald_cuen_cobr_exte + lv_imp_apli_cobr_exce;
 lv_reg_ccc_cuadr_fina.imp_sald_cuen_inco := lv_reg_ccc_cuadr_inic.imp_sald_cuen_inco + lv_imp_apli_inco;

 SELECT
 (SELECT NVL(SUM(mcc.imp_movi),0)
  FROM ccc_movim_cuent_corri mcc
  WHERE mcc.fec_docu <= lv_fec_fina) +
 (SELECT NVL(SUM(mb.imp_pago*-1),0)
  FROM ccc_movim_banca mb
  WHERE mb.fec_proc <= lv_fec_fina
  AND mb.cod_iden_proc = 'P')
  INTO lv_reg_ccc_cuadr_fina.imp_sald_cuen_corr
  FROM dual;

  INSERT INTO ccc_saldo_inici_cuadr VALUES lv_reg_ccc_cuadr_fina;

 END CCC_PR_GENER_CUADR_SAPFI_DIARI;

 PROCEDURE CCC_PR_GENER_CUADR_SAPFI(
  p_fec_gene                       IN   VARCHAR2 DEFAULT NULL)
 IS

  lv_fec_inic                      DATE;
  lv_fec_fina                      DATE;
  lv_fec_ejec                      DATE;

 BEGIN

  SELECT MAX(x.fec_cier) + 1
  INTO lv_fec_inic
  FROM ccc_saldo_inici_cuadr x;

  IF p_fec_gene IS NULL THEN
   lv_fec_fina :=  TRUNC(SYSDATE-1);
  ELSE
   lv_fec_fina := TO_DATE(p_fec_gene,'DD/MM/YYYY');
  END IF;

  lv_fec_ejec := lv_fec_inic;

  LOOP
   dbms_output.put_line('Fecha Ejecucion : ' || lv_fec_ejec);
   CCC_PR_GENER_CUADR_SAPFI_DIARI(TO_CHAR(lv_fec_ejec,'DD/MM/YYYY'));
   lv_fec_ejec := lv_fec_ejec + 1;
   EXIT WHEN lv_fec_ejec = lv_fec_fina;

  END LOOP;

 END CCC_PR_GENER_CUADR_SAPFI;
 */

PROCEDURE CCC_PR_GENER_CARGO_ABONO(
  p_oid_tipo_abon                  IN   ccc_tipo_abono_subpr.oid_tipo_abon_subp%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_val_impo                       IN   ccc_movim_cuent_corri.imp_movi%TYPE,
  p_cod_usua                       IN   seg_usuar.cod_usua%TYPE,
  p_resu                           OUT  NUMBER)

 IS

  lv_oid_subp_asoc                 NUMBER(12);
  
 BEGIN

  BEGIN

   CCC_PKG_PROCE.CCC_PR_GENER_CARGO_ABONO_INTER(
    p_oid_tipo_abon,
    p_cod_clie,
    TRUNC(SYSDATE),
    p_val_impo,
    p_cod_usua);

   SELECT su.oid_subp_asoc
   INTO lv_oid_subp_asoc
   FROM ccc_subpr su
   WHERE su.oid_subp = p_oid_tipo_abon;
   
   CCC_PKG_PROCE.CCC_PR_GENER_CARGO_ABONO_INTER(
    lv_oid_subp_asoc,
    p_cod_clie,
    TRUNC(SYSDATE),
    p_val_impo,
    p_cod_usua);

  END;

  p_resu:=1;

 EXCEPTION

  WHEN OTHERS THEN
   p_resu := 0;

 END CCC_PR_GENER_CARGO_ABONO;

 PROCEDURE CCC_PR_GENER_CARGO_ABONO(
  p_cod_peri                       IN   seg_perio_corpo.cod_peri%TYPE,
  p_cod_clie                       IN   mae_clien.cod_clie%TYPE,
  p_fec_venc                       IN   VARCHAR2,
  p_val_obse                       IN   VARCHAR2,
  p_importe                        IN   VARCHAR2,
  p_resul                          OUT  number)

  IS

  ln_tipo_abono                    NUMBER;

  BEGIN

  SELECT
   TPSP.OID_TIPO_ABON_SUBP
   INTO ln_tipo_abono
  FROM
   CCC_PROCE            PRO,
       CCC_SUBPR            SBP,
       CCC_TIPO_ABONO_SUBPR TPSP,
       CCC_TIPO_CARGO_ABONO TCA
 WHERE PRO.OID_PROC = SBP.CCPR_OID_PROC
   AND SBP.OID_SUBP = TPSP.SUBP_OID_SUBP
   AND TCA.OID_TIPO_CARG_ABON = TPSP.TCAB_OID_TCAB
   AND PRO.IND_CV_DIRE = 1
   AND SBP.VAL_INDI_CONS <> 'N'
   AND TCA.COD_TIPO_CARG_ABON = 'ADI'; --Abono Directo

   BEGIN
      CCC_PKG_PROCE.CCC_PR_GENER_CARGO_ABONO_MANUA(
                    p_cod_peri,
                    ln_tipo_abono,
                    p_cod_clie,
                    p_fec_venc,
                    p_val_obse,
                    p_importe,
                    'USU_LET' );
   END;

    p_resul:=1;

  EXCEPTION
    WHEN others THEN
         p_resul := 0;
   END CCC_PR_GENER_CARGO_ABONO;
   
 PROCEDURE CCC_PR_CALCU_INTER_MORA IS
   
    ln_val_mont_mini       NUMBER(12,2);
    ln_num_dias_cade       NUMBER(4);
    ln_num_dias_cort       NUMBER(4);
    ln_val_tasa_inte_mens  NUMBER(12,2);
    ln_val_tasa_impu       NUMBER(12,2);
    ln_val_impo_fijo       NUMBER(12,2);
    ln_num_deci            NUMBER(5);
    ln_ind_inte_pago       NUMBER(1);
    ln_ind_inte_sald          ccc_param_inter_mora.ind_inte_sald%TYPE;
    ln_sal_perm               ccc_param_inter_mora.sal_perm%TYPE;
    ln_num_dias_bloq          ccc_param_inter_mora.num_dias_bloq%TYPE;

    lv_cod_pais                      seg_pais.cod_pais%TYPE;
    lv_fec_fact_bas                  bas_ctrl_fact.fec_proc%TYPE;
    lv_oid_peri                      cra_perio.oid_peri%TYPE;
    lv_cod_peri                      seg_perio_corpo.cod_peri%TYPE;

    lv_cod_tipo_bloq               mae_tipo_bloqu.cod_tipo_bloq%TYPE;
    lv_oid_tipo_bloq               mae_tipo_bloqu.oid_tipo_bloq%TYPE;
    lv_oid_valo_acci_bloq          mae_valor_accio_bloqu.oid_valo_acci_bloq%TYPE;


 BEGIN

    lv_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');
    FIN_PKG_GENER.FIN_PR_OBTIE_PARAM_FACTU(lv_oid_peri,lv_cod_peri,lv_fec_fact_bas);

     SELECT sm.num_deci
       INTO ln_num_deci
       FROM seg_moned sm, seg_pais sp
      WHERE sm.oid_mone = sp.mone_oid_mone
        AND sp.cod_pais = lv_cod_pais;

    SELECT pi.num_dias_cade, pi.num_dias_cort, pi.val_mont_mini, pi.val_imp_fijo, pi.val_tasa_inte_mens,pi.val_tasa_impu,
           pi.ind_inte_pago, pi.ind_inte_sald, pi.sal_perm, pi.num_dias_bloq
      INTO ln_num_dias_cade, ln_num_dias_cort, ln_val_mont_mini, ln_val_impo_fijo, ln_val_tasa_inte_mens, ln_val_tasa_impu,
           ln_ind_inte_pago, ln_ind_inte_sald, ln_sal_perm, ln_num_dias_bloq
      FROM ccc_param_inter_mora pi
     WHERE pi.ind_acti='1';


   lv_cod_tipo_bloq := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoBloqueoInteMora');

  --Obteniendo el Tipo De Bloqueo Financiero
  SELECT mtb.oid_tipo_bloq
  INTO lv_oid_tipo_bloq
  FROM mae_tipo_bloqu mtb
  WHERE mtb.cod_tipo_bloq = lv_cod_tipo_bloq;

  --Obteniendo el Valor Accion de Bloqueo
  SELECT vab.oid_valo_acci_bloq
  INTO lv_oid_valo_acci_bloq
  FROM mae_valor_accio_bloqu vab
  WHERE vab.cod_valo_bloq = 'A';

  --Borrando las desbloqueadas
  delete from ccc_conso_calcu_inter_mora cgi
  where exists (select * from mae_clien_bloqu mcb where
        mcb.clie_oid_clie = cgi.clie_oid_clie
        and mcb.tibq_oid_tipo_bloq=lv_oid_tipo_bloq
        AND mcb.fec_desb IS not NULL );

  delete from ccc_detal_calcu_inter_mora dcg
   where dcg.oid_mvcc_oid_cc in
         (select cgi.oid_movi_cc
            from ccc_conso_calcu_inter_mora cgi
           where exists (select *
                    from mae_clien_bloqu mcb
                   where mcb.clie_oid_clie = cgi.clie_oid_clie
                     and mcb.tibq_oid_tipo_bloq = lv_oid_tipo_bloq
                     AND mcb.fec_desb IS not NULL));

     --Actualiza calculo de interes dirario--
    UPDATE ccc_conso_calcu_inter_mora cgi
       SET cgi.imp_pend = (select mcc.imp_pend from ccc_movim_cuent_corri mcc
           where mcc.oid_movi_cc = cgi.oid_movi_cc),
       cgi.imp_pago =  (select mcc.imp_pago from ccc_movim_cuent_corri mcc
           where mcc.oid_movi_cc = cgi.oid_movi_cc),
       cgi.ulti_nume_hist =(select mcc.val_ulti_nume_hist from ccc_movim_cuent_corri mcc
           where mcc.oid_movi_cc = cgi.oid_movi_cc),
       cgi.imp_tasa_inte = to_number(ln_val_tasa_inte_mens),
       cgi.fec_proc = lv_fec_fact_bas,
       cgi.fec_modi = SYSDATE,
       cgi.perd_oid_peri = lv_oid_peri,
       cgi.cod_peri = lv_cod_peri,
       cgi.fec_ulti_movi =  (select mcc.fec_ulti_movi from ccc_movim_cuent_corri mcc
           where mcc.oid_movi_cc = cgi.oid_movi_cc)
  WHERE EXISTS (SELECT null
      FROM ccc_conso_calcu_inter_mora cg, ccc_movim_cuent_corri mcc
     WHERE cg.oid_movi_cc = mcc.oid_movi_cc
           AND cg.ind_fact = 0
           AND mcc.subp_oid_subp_crea = 2001
           AND mcc.imp_movi > 0
           AND mcc.soca_oid_soli_cabe = cgi.soca_oid_soca_ant
           AND mcc.imp_pend >= ln_sal_perm
           AND SYSDATE - cg.fec_venc > ln_num_dias_bloq
           AND cg.oid_movi_cc = cgi.oid_movi_cc
       );

    INSERT INTO ccc_conso_calcu_inter_mora
    SELECT mcc.oid_movi_cc    oid_movi_cc,
           me.oid_clie        clie_oid_clie,
           lv_oid_peri        perd_oid_peri,
           lv_cod_peri        cod_peri,
           me.soca_oid_soca   soca_oid_soca_ant,
           me.camp_ulti_pedi  camp_ulti_pedi,
           me.fec_fact_ulti,
           DECODE(gen_pkg_gener.gen_fn_param_pais(lv_cod_pais,'CCC','003'),
                   NULL, mcc.fec_venc,
                   (me.fec_fact_ulti+ to_number(gen_pkg_gener.gen_fn_param_pais(lv_cod_pais,'CCC','003')) ) ) fec_venc,
           me.val_nume_soli,
           mcc.fec_ulti_movi,
           me.val_mont_fact,
           mcc.imp_pend,
           mcc.imp_pago,
           mcc.val_ulti_nume_hist,
           to_number(ln_val_tasa_inte_mens) imp_tasa_inte,
           ln_val_impo_fijo imp_inte_fijo,
           null imp_inte_vari,
           null mon_fact,
           lv_fec_fact_bas fec_proc,
           SYSDATE fec_digi,
           USER usu_digi,
           null fec_modi,
           null usu_modi,
           0 ind_fact,
           null fec_fact,
           null usu_fact,
           '0' ind_bloq,
           null fec_bloq,
           null num_lote
      FROM mae_clien_estat me, ccc_movim_cuent_corri mcc, mae_clien mc
     WHERE me.oid_clie = mc.oid_clie
       AND me.oid_clie = mcc.clie_oid_clie
       AND mcc.subp_oid_subp_crea = 2001
       AND mcc.imp_movi > 0
       AND mcc.soca_oid_soli_cabe = me.soca_oid_soca --consolidado
          --En caso sea el mismo para toda la parametria
       AND mcc.imp_pend >= ln_sal_perm
       --AND decode(me.fec_fact_ulti, mcc.fec_ulti_movi, sysdate,  mcc.fec_ulti_movi)
       AND SYSDATE - DECODE(gen_pkg_gener.gen_fn_param_pais(lv_cod_pais,'CCC','003'),
                                      NULL, mcc.fec_venc,
                                      (me.fec_fact_ulti+ to_number(gen_pkg_gener.gen_fn_param_pais(lv_cod_pais,'CCC','003')) ) ) > ln_num_dias_bloq
       AND NOT EXISTS (SELECT null
              FROM ccc_conso_calcu_inter_mora cgi
             where cgi.oid_movi_cc = mcc.oid_movi_cc )
       AND NOT EXISTS ( select null
             FROM  zon_zona        zon,
             zon_secci             sec,
             zon_terri_admin       zta,
             zon_terri             ter,
             CCC_ZONEX_INTER_MORA  ze
             WHERE zon.oid_zona = sec.zzon_oid_zona
         AND sec.oid_secc = zta.zscc_oid_secc
         AND ter.oid_terr = zta.terr_oid_terr
         AND zon.ind_acti = 1
         AND ter.ind_borr = 0
         AND zon.cod_zona = ze.cod_zona
         AND sec.cod_Secc = nvl(ze.cod_secc,sec.cod_Secc)
          AND zta.terr_oid_terr = mcc.ztad_oid_terr_admi
         )
      AND NOT EXISTS (SELECT null
              FROM ccc_conso_calcu_inter_histo cgh
             where cgh.clie_oid_clie = mc.oid_clie
             and cgh.perd_oid_peri = lv_oid_peri)
      UNION --Bloqueadas que ya pagaron el interes
      SELECT (select max(mcc.oid_movi_cc)
          from ccc_movim_cuent_corri mcc
         where mcc.clie_oid_clie = mcb.clie_oid_clie) oid_movi_cc,
       mcb.clie_oid_clie clie_oid_clie,
       lv_oid_peri perd_oid_peri,
       lv_cod_peri cod_peri,
       null soca_oid_soca_ant,
       null camp_ulti_pedi,
       null fec_fact_ulti,
       null fec_venc,
       null val_nume_soli,
       null fec_ulti_movi,
       0 val_mont_fact,
       0 imp_pend,
       0 imp_pago,
       0 val_ulti_nume_hist,
       to_number(ln_val_tasa_inte_mens) imp_tasa_inte,
       ln_val_impo_fijo imp_inte_fijo,
       null imp_inte_vari,
       null mon_fact,
       lv_fec_fact_bas fec_proc,
       SYSDATE fec_digi,
       USER usu_digi,
       null fec_modi,
       null usu_modi,
       0 ind_fact,
       null fec_fact,
       null usu_fact,
       '1' ind_bloq,
       mcb.fec_bloq fec_bloq,
       null num_lote
  FROM mae_clien_bloqu mcb
 WHERE mcb.tibq_oid_tipo_bloq = lv_oid_tipo_bloq
   AND mcb.fec_desb IS NULL
   AND NOT EXISTS (SELECT *
          FROM ccc_conso_calcu_inter_mora cgi
         where cgi.clie_oid_clie = mcb.clie_oid_clie
           and cgi.ind_bloq = 1)
   AND NOT EXISTS
 (SELECT *
          FROM ccc_conso_calcu_inter_histo cgh
         where cgh.clie_oid_clie = mcb.clie_oid_clie
           and cgh.perd_oid_peri = lv_oid_peri)
   and (nvl((select sum(mcc.imp_pend)
              from ccc_movim_cuent_corri mcc
             where mcc.clie_oid_clie = mcb.clie_oid_clie
               and mcc.imp_pend <> 0
               and mcc.perd_oid_peri <= lv_oid_peri),
            0) - nvl((SELECT SUM(mb.imp_sald_pend)
                        FROM ccc_movim_banca mb
                       WHERE mb.clie_oid_clie = mcb.clie_oid_clie
                         AND mb.cod_iden_proc = 'P'
                         AND mb.imp_sald_pend > 0),
                      0)) < 0;

    INSERT INTO ccc_detal_calcu_inter_mora
    (SELECT hmc.mvcc_oid_movi_cc,
            hmc.num_hist,
            cgi.perd_oid_peri,
            cgi.soca_oid_soca_ant,
            cgi.clie_oid_clie,
            cgi.fec_venc, --hmc.fec_venc,
            hmc.fec_movi, --fecha_pago
            hmc.imp_pen,
            hmc.imp_pago,
                /*ln_ind_inte_pago*ROUND(hmc.imp_pago * cgi.imp_tasa_inte * (hmc.fec_movi - cgi.fec_venc) / 3000 , ln_num_deci) --Intereses sobre pagos
              + ln_ind_inte_sald*ROUND(hmc.imp_pen * cgi.imp_tasa_inte *(sysdate - cgi.fec_venc) / 3000 , ln_num_deci)
              +*/ cgi.imp_inte_fijo imp_inte_vari, --Intereses sobre saldo pendientes
           lv_fec_fact_bas fec_proc,
           SYSDATE fec_digi,
           USER usu_digi,
           null fec_modi,
           null usu_modi,
           0 num_dias_dife,
           cgi.imp_tasa_inte
       FROM ccc_conso_calcu_inter_mora cgi, ccc_histo_movim_cc hmc
      WHERE cgi.oid_movi_cc = hmc.mvcc_oid_movi_cc
        AND cgi.clie_oid_clie = hmc.clie_oid_clie
        AND hmc.num_hist != 0
        AND hmc.fec_movi >  cgi.fec_venc--AND hmc.fec_movi <>  cgi.fec_fact_ulti
        AND not exists
      (SELECT null
               FROM ccc_detal_calcu_inter_mora cgd
              where cgd.num_hist =  hmc.num_hist
                and cgd.oid_mvcc_oid_cc = cgi.oid_movi_cc)
       UNION ALL
     SELECT cgi.oid_movi_cc,
            cgi.ulti_nume_hist,
            cgi.perd_oid_peri,
            cgi.soca_oid_soca_ant,
            cgi.clie_oid_clie,
            cgi.fec_venc,
            cgi.fec_ulti_movi fec_movi, --fecha pago
            cgi.imp_pend,
            cgi.imp_pago,
                /*ln_ind_inte_pago*ROUND(cgi.imp_pago * cgi.imp_tasa_inte * (cgi.fec_ulti_movi - cgi.fec_venc) / 3000 , ln_num_deci) --Intereses sobre pagos
              + ln_ind_inte_sald*ROUND(cgi.imp_pend * cgi.imp_tasa_inte *(trunc(sysdate) - cgi.fec_venc) / 3000 , ln_num_deci)
              + */cgi.imp_inte_fijo imp_inte_vari, --Intereses sobre saldo pendientes
           lv_fec_fact_bas fec_proc,
           SYSDATE fec_digi,
           USER usu_digi,
           null fec_modi,
           null usu_modi,
           0 num_dias_dife,
           cgi.imp_tasa_inte
       FROM ccc_conso_calcu_inter_mora cgi
      WHERE cgi.ulti_nume_hist != 0
      AND cgi.fec_ulti_movi > cgi.fec_venc
      AND NOT EXISTS
      (SELECT null
               FROM ccc_detal_calcu_inter_mora cgd
              WHERE cgd.num_hist = cgi.ulti_nume_hist
                AND cgd.oid_mvcc_oid_cc = cgi.oid_movi_cc));

     IF (ln_ind_inte_pago = 1) THEN

      update ccc_detal_calcu_inter_mora set imp_inte_vari = --imp_inte_vari +
      ln_ind_inte_pago*ROUND(imp_pago * imp_tasa_inte * (fec_movi - fec_venc) / 3000 , ln_num_deci) --Intereses sobre pagos
              + ln_ind_inte_sald*ROUND((imp_pend+imp_pago) * imp_tasa_inte *num_dias_dife / 3000 , ln_num_deci); --intereses sobre saldos

       UPDATE ccc_conso_calcu_inter_mora cgi
          SET cgi.imp_inte_vari =
                  (SELECT ROUND(sum(dgi.imp_inte_vari)*(1+ln_val_tasa_impu/100),ln_num_deci)
                 FROM ccc_detal_calcu_inter_mora dgi
                WHERE dgi.oid_mvcc_oid_cc = cgi.oid_movi_cc
                  AND dgi.fec_movi - dgi.fec_venc > ln_num_dias_bloq
                  AND dgi.fec_movi > dgi.fec_venc
                GROUP BY dgi.oid_mvcc_oid_cc)
        WHERE cgi.ind_fact = 0;
     END IF;

      IF (ln_ind_inte_sald = 1) THEN

         DELETE FROM ccc_detal_calcu_inter_saldo;

          --Colocar el pago fictisio a la fecha
          INSERT INTO ccc_detal_calcu_inter_saldo
              SELECT cgi.oid_movi_cc,
                cgi.ulti_nume_hist + 1,
                cgi.perd_oid_peri,
                cgi.soca_oid_soca_ant,
                cgi.clie_oid_clie,
                cgi.fec_venc,
                trunc(sysdate) , --fec_movi fecha pago
                0 imp_pend,--cgi.imp_pend,
                cgi.imp_pend imp_pago,
                cgi.imp_inte_fijo  imp_inte_vari,
                lv_fec_fact_bas
               fec_proc,
               SYSDATE fec_digi,
               USER usu_digi,
               sysdate fec_modi,
               USER usu_modi,
               round(sysdate - cgi.fec_ulti_movi)  num_dias_dife,
               cgi.imp_tasa_inte
           FROM ccc_conso_calcu_inter_mora cgi
           where cgi.imp_pend > 0;

          update ccc_detal_calcu_inter_mora p set p.num_dias_dife = p.fec_movi - decode(p.num_hist,
                                  (select min(c.num_hist) from ccc_detal_calcu_inter_mora c
                                  where c.oid_mvcc_oid_cc = p.oid_mvcc_oid_cc)
                                  , p.fec_venc,
                                  (select c.fec_movi from ccc_detal_calcu_inter_mora c
                                  where c.oid_mvcc_oid_cc = p.oid_mvcc_oid_cc
                                  and c.num_hist = (p.num_hist - 1))),
                                  p.fec_modi = sysdate;

         update ccc_detal_calcu_inter_saldo p set p.num_dias_dife = p.fec_movi - nvl((
                                   SELECT a.fec_movi
                                      FROM ccc_detal_calcu_inter_mora a,
                                           (SELECT c.oid_mvcc_oid_cc,
                                                   MAX(c.num_hist) num_hist
                                              FROM ccc_detal_calcu_inter_mora c
                                              WHERE c.num_hist <> 0
                                             GROUP BY c.oid_mvcc_oid_cc) x
                                     WHERE
                                     a.oid_mvcc_oid_cc = x.oid_mvcc_oid_cc
                                     AND a.num_hist = x.num_hist
                                     AND a.oid_mvcc_oid_cc = p.oid_mvcc_oid_cc
                                  ),p.fec_venc),
                                  p.fec_modi = sysdate;


         update ccc_detal_calcu_inter_mora set imp_inte_vari =-- imp_inte_vari +
              ln_ind_inte_pago*ROUND(imp_pago * imp_tasa_inte * (fec_movi - fec_venc) / 3000 , 2) --Intereses sobre pagos
              + ln_ind_inte_sald*ROUND((imp_pend+imp_pago) * imp_tasa_inte *num_dias_dife / 3000 , 2); --intereses sobre saldos


          update ccc_detal_calcu_inter_saldo set imp_inte_vari =-- imp_inte_vari +
              ln_ind_inte_pago*ROUND(imp_pago * imp_tasa_inte * (fec_movi - fec_venc) / 3000 , 2) --Intereses sobre pagos
              + ln_ind_inte_sald*ROUND((imp_pend+imp_pago) * imp_tasa_inte *num_dias_dife / 3000 , 2); --intereses sobre saldos



          UPDATE ccc_conso_calcu_inter_mora cgi
                SET cgi.imp_inte_vari = nvl((select y.imp_inte_vari from
                    ((SELECT x.oid_mvcc_oid_cc, ROUND(sum(x.imp_inte_vari)*(1+ln_val_tasa_impu/100),ln_num_deci) imp_inte_vari
                       FROM (SELECT * FROM
                           ccc_detal_calcu_inter_mora dgi
                          WHERE dgi.num_dias_dife > 0
                            UNION
                            SELECT * FROM
                           ccc_detal_calcu_inter_saldo dgs
                          WHERE dgs.num_dias_dife > 0
                            ) x
                       GROUP BY x.oid_mvcc_oid_cc)) y
                       where y.oid_mvcc_oid_cc = cgi.oid_movi_cc ),0)
              WHERE cgi.ind_fact = 0;

      END IF;


   --------------Bloqueo

  INSERT INTO mae_clien_bloqu
      (oid_bloq,
      clie_oid_clie,
      tibq_oid_tipo_bloq,
      fec_bloq,
      val_moti_bloq,
      val_usua_bloq,
      obs_bloq,
      maab_oid_valo_acci_bloq)
  SELECT mae_clbl_seq.NEXTVAL,
       cgi.clie_oid_clie,
       lv_oid_tipo_bloq,
       lv_fec_fact_bas,
       'BLOQUEADA POR DEUDA > '||ln_num_dias_bloq||' DIAS '||to_char(lv_fec_fact_bas,'DD/MM/YYYY'),
       USER,
       'BLOQUEADA POR DEUDA > '||ln_num_dias_bloq||' DIAS '||to_char(lv_fec_fact_bas,'DD/MM/YYYY'),
       lv_oid_valo_acci_bloq
  FROM ccc_conso_calcu_inter_mora cgi
  WHERE cgi.ind_bloq = 0
  AND NOT EXISTS (SELECT null FROM mae_clien_bloqu mcb
      WHERE mcb.clie_oid_clie = cgi.clie_oid_clie
      AND mcb.tibq_oid_tipo_bloq = lv_oid_tipo_bloq
      AND mcb.fec_desb IS NULL);

  UPDATE ccc_conso_calcu_inter_mora cgi SET cgi.ind_bloq = 1, cgi.fec_bloq = lv_fec_fact_bas
  WHERE
         EXISTS (SELECT null FROM mae_clien_bloqu mcb
                WHERE mcb.clie_oid_clie = cgi.clie_oid_clie
                --AND mcb.fec_bloq = lv_fec_fact_bas
                --AND mcb.val_moti_bloq = 'BLOQUEADA POR DEUDA > '||ln_num_dias_bloq||' DIAS '||to_char(lv_fec_fact_bas,'DD/MM/YYYY')
                );

  EXCEPTION
    WHEN OTHERS THEN
      ln_sqlcode := SQLCODE;
      ls_sqlerrm := substr(SQLERRM,
                           1,
                           250);
      raise_application_error(-20123,
                              'ERROR CCC_PR_CALCU_INTER_MORA: ' || ls_sqlerrm);
              
 END CCC_PR_CALCU_INTER_MORA;
 
 
 PROCEDURE CCC_PR_FACTU_INTER_MORA(
     p_num_lote                    IN VARCHAR2,
     p_usuario                     IN VARCHAR2) IS

  CURSOR c1

     IS
     SELECT psc.oid_soli_cabe
      FROM ccc_conso_calcu_inter_mora cgi, ped_solic_cabec psc
      WHERE psc.clie_oid_clie = cgi.clie_oid_clie
      AND psc.tspa_oid_tipo_soli_pais = fin_pkg_gener.FIN_FN_OBTIE_OID_SOLIC_PAIS('FI')
      --AND psc.soca_oid_soli_cabe = cgi.soca_oid_soca_ant
      AND cgi.num_lote = p_num_lote
    ORDER BY 1;

  v_cod_pais                int_rec_cabec_borec.cod_pais%TYPE;

  v_fopa_oid_form_pago           ped_tipo_solic_pais.fopa_oid_form_pago%TYPE;
  v_ind_perm_unio_sol            ped_tipo_solic_pais.ind_perm_unio%TYPE;
  v_soci_oid_soci                ped_tipo_solic_pais.soci_oid_soci%TYPE;
  v_tspa_oid_tipo_soli_pais_cons ped_tipo_solic_pais.tsol_oid_tipo_cons%TYPE;
  v_val_glos_obse                ped_tipo_solic_pais.val_glos%TYPE;
  v_ind_pedi_prue                ped_tipo_solic_pais.ind_pedi_prue%TYPE;
  v_mone_oid_mone                ped_tipo_solic_pais.mone_oid_mone%TYPE;
  v_acfi_oid_acce_fisi           ped_acces_fisic.oid_acce_fisi%TYPE;
  v_sbac_oid_sbac                ped_tipo_solic.sbac_oid_sbac%TYPE;
  v_clso_oid_clas_soli           ped_tipo_solic.clso_oid_clas_soli%TYPE;
  v_oid_alma                     ped_tipo_solic_pais.almc_oid_alma%TYPE;
  v_ind_orde_comp                ped_clase_solic.ind_orde_comp%TYPE;
  v_ind_soli_nega                ped_tipo_solic.ind_soli_nega%TYPE;
  v_oid_tipo_soli_pais           ped_tipo_solic_pais.oid_tipo_soli_pais%TYPE;
  v_almc_oid_alma                ped_tipo_solic_pais.almc_oid_alma%TYPE;

  v_tido_oid_tipo_doc2           mae_tipo_docum.tido_oid_tipo_docu%TYPE;

  v_fec_prog_fact                cra_perio.fec_fina%TYPE;
  v_perd_oid_peri                cra_perio.oid_peri%TYPE;
  lv_cod_peri                    cra_perio.val_nomb_peri%type;
  lnIdPais                       seg_pais.oid_pais%type;
  lv_sql                         VARCHAR2(250);
  lsparametroconso               VARCHAR2(1);
  lv_oid_prod_inte               MAE_PRODU.OID_PROD%TYPE;

 BEGIN

    v_cod_pais := CCC_PKG_GENER.CCC_FN_OBTIE_PARAM_GENER('CodigoPais');

     lnIdPais := gen_pkg_gener.gen_fn_devuelve_id_pais(v_cod_pais);

    SELECT mp.oid_prod
    INTO lv_oid_prod_inte
    FROM mae_produ mp
    WHERE mp.cod_sap = nvl(gen_pkg_gener.gen_fn_param_pais(v_cod_pais,'CCC','012'),'9999999994');

    lsparametroconso := nvl(sto_pkg_gener.sto_fn_obten_param_ocr(v_cod_pais,'STO_TIPO_CALC_FACT'),'1');

     SELECT tsp.fopa_oid_form_pago v_fopa_oid_form_pago,
         tsp.ind_perm_unio      v_ind_perm_unio_sol,
         tsp.soci_oid_soci      v_soci_oid_soci,
         tsp.tsol_oid_tipo_cons v_tspa_oid_tipo_soli_pais_cons,
         tsp.val_glos           v_val_glos_obse,
         tsp.ind_pedi_prue      v_ind_pedi_prue,
         tsp.mone_oid_mone      v_mone_oid_mone,
         NULL                   v_acfi_oid_acce_fisi,
         ts.sbac_oid_sbac       v_sbac_oid_sbac,
         ts.clso_oid_clas_soli  v_clso_oid_clas_soli,
         tsp.almc_oid_alma      v_oid_alma,
         cs.ind_orde_comp       v_ind_orde_comp,
         ts.ind_soli_nega       v_ind_soli_nega,
         tsp.oid_tipo_soli_pais v_oid_tipo_soli_pais,
         tsp.almc_oid_alma      v_almc_oid_alma,
         tsp.tido_oid_tipo_docu v_tido_oid_tipo_docu
    INTO v_fopa_oid_form_pago,
         v_ind_perm_unio_sol,
         v_soci_oid_soci,
         v_tspa_oid_tipo_soli_pais_cons,
         v_val_glos_obse,
         v_ind_pedi_prue,
         v_mone_oid_mone,
         v_acfi_oid_acce_fisi,
         v_sbac_oid_sbac,
         v_clso_oid_clas_soli,
         v_oid_alma,
         v_ind_orde_comp,
         v_ind_soli_nega,
         v_oid_tipo_soli_pais,
         v_almc_oid_alma,
         v_tido_oid_tipo_doc2
    FROM ped_tipo_solic_pais tsp,
         ped_tipo_solic      ts,
         ped_clase_solic     cs
   WHERE tsp.tsol_oid_tipo_soli = ts.oid_tipo_soli
     AND ts.clso_oid_clas_soli = cs.oid_clas_soli
     AND ts.cod_tipo_soli = 'FI';

    FIN_PKG_GENER.FIN_PR_OBTIE_PARAM_FACTU(v_perd_oid_peri,lv_cod_peri,v_fec_prog_fact);
    
    INSERT INTO ped_solic_cabec
    (oid_soli_cabe,
     fec_prog_fact,
     fec_fact,
     num_clien,
     tspa_oid_tipo_soli_pais,
     tids_oid_tipo_desp,
     almc_oid_alma,
     modu_oid_modu,
     ticl_oid_tipo_clie,
     perd_oid_peri,
     soca_oid_soli_cabe,
     clie_oid_clie,
     clie_oid_clie_rece_fact,
     clie_oid_clie_paga,
     clie_oid_clie_dest,
     cldi_oid_clie_dire,
     tdoc_oid_tipo_docu,
     soci_oid_soci,
     sbac_oid_sbac,
     terr_oid_terr,
     zzon_oid_zona,
     val_nume_soli,
     val_usua,
     val_tasa_impu,
     fec_cron,
     ind_perm_unio_sol,
     val_tipo_camb,
     num_docu_orig,
     val_base_flet_loca,
     val_impo_flet_loca,
     val_impo_flet_tota_loca,
     val_impo_flet_sin_impu_tota,
     val_reca_flet_loca,
     val_otro_reca_loca,
     val_tota_paga_loca,
     val_prec_cata_tota_loca,
     val_prec_cata_sin_impu_tota,
     val_prec_fact_tota_loca,
     val_impo_impu_tota_loca,
     val_impo_desc_1_tota_loca,
     val_impo_desc_1_tota_docu,
     val_impo_desc_1_sin_impu_tota,
     val_impo_desc_3_tota_docu,
     val_impo_desc_3_sin_impu_tota,
     val_impo_desc_tota_loca,
     val_impo_dto_1_sin_imp_tot_loc,
     val_impo_redo_loca,
     val_base_flet_docu,
     val_impo_flet_docu,
     val_impo_desc_tota_docu,
     val_impo_flet_sin_impu_docu,
     val_reca_flet_docu,
     val_otro_reca_docu,
     val_tota_flet_docu,
     val_impo_flet_tota_docu,
     val_tota_flet_loca,
     val_tota_paga_docu,
     val_prec_cata_tota_docu,
     val_prec_cata_sin_impu_tota_do,
     val_prec_cont_tota_loca,
     val_prec_cont_sin_impu_tota,
     val_prec_cont_sin_impu_tota_1,
     val_prec_fact_tota_docu,
     val_prec_cata_tota_loc_uni_dem,
     val_prec_neto_tota_docu,
     val_prec_neto_tota_loca,
     val_impo_impu_tota_docu,
     val_impo_redo_docu,
     val_impo_redo_cons_loca,
     val_impo_redo_cons_docu,
     ind_oc,
     ind_pedi_prue,
     ind_ts_no_conso,
     val_glos_obse,
     val_impo_desc_3_tota_loca,
     val_impo_dto_3_sin_imp_tot_loc,
     pais_oid_pais,
     tido_oid_tipo_docu,
     vepo_oid_valo_estr_geop,
     esso_oid_esta_soli,
     grpr_oid_grup_proc,
     sbti_oid_subt_clie,
     acfi_oid_acce_fisi,
     tspa_oid_tipo_soli_pais_cons,
     fopa_oid_form_pago,
     clso_oid_clas_soli,
     ztad_oid_terr_admi,
     oper_oid_oper,
     proc_oid_proc,
     ind_inte_lari_gene,
     fec_prog_fact_comp,
     soca_oid_docu_refe)
  SELECT
     ped_soca_seq.NEXTVAL,                        --oid_soli_cabe,
     v_fec_prog_fact,                             --fec_prog_fact,
     NULL,                                        --fec_fact,
     0,                                           --num_clien,
     v_oid_tipo_soli_pais, 											  --tspa_oid_tipo_soli_pais,
     3,															              --tids_oid_tipo_desp,
     v_almc_oid_alma,                             --almc_oid_alma,
     27,               					                  --modu_oid_modu,
     ms.ticl_oid_tipo_clie,                        --ticl_oid_tipo_clie,
     v_perd_oid_peri,                             --perd_oid_peri,
     NULL,                                        --soca_oid_soli_cabe,
     m.oid_clie,                                  --clie_oid_clie,
     m.oid_clie,                                  --clie_oid_clie_rece_fact,
     m.oid_clie,                                  --clie_oid_clie_paga,
     m.oid_clie,                                  --clie_oid_clie_dest,
     d.oid_clie_dire,                              --cldi_oid_clie_dire,
     ide.tdoc_oid_tipo_docu,                      --tdoc_oid_tipo_docu,
     v_soci_oid_soci,                             --soci_oid_soci,
     v_sbac_oid_sbac,                             --sbac_oid_sbac,
     ztad.terr_oid_terr,                          --terr_oid_terr,
     zs.zzon_oid_zona,                            --zzon_oid_zona,
     (to_char(SYSDATE,
                   'YY') || lpad(sto_pkg_gener.sto_fn_resrv_secue_nsoli(v_cod_pais,
                                                              'PED001',
                                                              '000',
                                                              1),
                                8,
                                '0') + 1),				--val_nume_soli,
     NULL,                                        --val_usua,
     0,                                           --val_tasa_impu,
     trunc(SYSDATE),                              --fec_cron,
     1,                                           --ind_perm_unio_sol,
     1,                                           --val_tipo_camb,
     0,                                           --num_docu_orig,
     0,                                           --val_base_flet_loca,
     0,                                           --val_impo_flet_loca,
     0,                                           --val_impo_flet_tota_loca,
     0,                                           --val_impo_flet_sin_impu_tota,
     0,                                           --val_reca_flet_loca,
     0,                                           --val_otro_reca_loca,
     0,                                           --val_tota_paga_loca,
     0,                                           --val_prec_cata_tota_loca,
     0,                                           --val_prec_cata_sin_impu_tota,
     0,                                           --val_prec_fact_tota_loca,
     0,                                           --val_impo_impu_tota_loca,
     0,                                           --val_impo_desc_1_tota_loca,
     0,                                           --val_impo_desc_1_tota_docu,
     0,                                           --val_impo_desc_1_sin_impu_tota,
     0,                                           --val_impo_desc_3_tota_docu,
     0,                                           --val_impo_desc_3_sin_impu_tota,
     0,                                           --val_impo_desc_tota_loca,
     0,                                           --val_impo_dto_1_sin_imp_tot_loc,
     0,                                           --val_impo_redo_loca,
     0,                                           --val_base_flet_docu,
     0,                                           --val_impo_flet_docu,
     0,                                           --val_impo_desc_tota_docu,
     0,                                           --val_impo_flet_sin_impu_docu,
     0,                                           --val_reca_flet_docu,
     0,                                           --val_otro_reca_docu,
     0,                                           --val_tota_flet_docu,
     0,                                           --val_impo_flet_tota_docu,
     0,                                           --val_tota_flet_loca,
     0,                                           --val_tota_paga_docu,
     0,                                           --val_prec_cata_tota_docu,
     0,                                           --val_prec_cata_sin_impu_tota_do,
     0,                                           --val_prec_cont_tota_loca,
     0,                                           --val_prec_cont_sin_impu_tota,
     0,                                           --val_prec_cont_sin_impu_tota_1,
     0,                                           --val_prec_fact_tota_docu,
     0,                                           --val_prec_cata_tota_loc_uni_dem,
     0,                                           --val_prec_neto_tota_docu,
     0,                                           --val_prec_neto_tota_loca,
     0,                                           --val_impo_impu_tota_docu,
     0,                                           --val_impo_redo_docu,
     0,                                           --val_impo_redo_cons_loca,
     0,                                           --val_impo_redo_cons_docu,
     0,                                           --ind_oc,
     0,                                           --ind_pedi_prue,
     1,                                           --ind_ts_no_conso,
     'CARGO FACT. INTERES',                       --val_glos_obse,
     0,                                           --val_impo_desc_3_tota_loca,
     0,                                           --val_impo_dto_3_sin_imp_tot_loc,
     lnIdPais,--v_pais_oid_pais,                  --pais_oid_pais,
     mt.tido_oid_tipo_docu,                       --tido_oid_tipo_docu,
     terr.vepo_oid_valo_estr_geop,                --vepo_oid_valo_estr_geop,
     1,                                           --esso_oid_esta_soli,
     4,                                           --grpr_oid_grup_proc,
     ms.sbti_oid_subt_clie,                       --sbti_oid_subt_clie,
     1,                                           --acfi_oid_acce_fisi,
     v_tspa_oid_tipo_soli_pais_cons,              --tspa_oid_tipo_soli_pais_cons,
     v_fopa_oid_form_pago,                        --fopa_oid_form_pago,
     v_clso_oid_clas_soli,                        --clso_oid_clas_soli,
     ad.ztad_oid_terr_admi,                       --ztad_oid_terr_admi,
     44,												                  --oper_oid_oper,
     6,										                        --proc_oid_proc,
     0,                                           --ind_inte_lari_gene,
     to_char(v_fec_prog_fact, 'yyyymmdd'),--fec_prog_fact_comp,
     cgi.soca_oid_soca_ant                        --soca_oid_docu_refe
    FROM mae_clien             m,
         mae_clien_direc       d,
         mae_clien_unida_admin ad,
         mae_clien_ident       ide,
         zon_terri_admin       ztad,
         zon_terri             terr,
         zon_secci             zs,
         mae_tipo_docum        mt,
         mae_clien_tipo_subti  ms,
         ccc_conso_calcu_inter_mora  cgi
   WHERE m.oid_clie = d.clie_oid_clie
     AND m.oid_clie = ad.clie_oid_clie
     AND m.oid_clie = ide.clie_oid_clie
     AND ztad.oid_terr_admi = ad.ztad_oid_terr_admi
     AND ztad.zscc_oid_secc = zs.oid_secc
     AND mt.oid_tipo_docu = ide.tdoc_oid_tipo_docu
     AND ide.val_iden_docu_prin = 1
     AND ad.perd_oid_peri_fin IS NULL
     AND d.ind_dire_ppal = 1
     AND d.ind_elim = 0
     AND ms.clie_oid_clie = m.oid_clie
     AND ms.ind_ppal = 1
     AND terr.oid_terr = ztad.terr_oid_terr
     AND cgi.clie_oid_clie = m.oid_clie
     AND cgi.num_lote = p_num_lote;

     INSERT INTO PED_SOLIC_POSIC
		    (oid_soli_posi,
		     cod_posi,
		     num_unid_dema,
		     num_unid_por_aten,
		     val_tasa_impu,
		     soca_oid_soli_cabe,
		     taim_oid_tasa_impu,
		     tpos_oid_tipo_posi,
		     prod_oid_prod,
		     val_prec_cata_unit_loca,
		     val_prec_cont_unit_loca,
		     val_prec_cata_unit_docu,
		     val_prec_conta_unit_docu,
		     val_prec_fact_unit_loca,
		     val_prec_fact_unit_docu,
		     val_prec_sin_impu_unit_loca,
		     val_prec_sin_impu_unit_docu,
		     val_prec_sin_impu_tota_docu,
		     val_impo_desc_unit_loca,
		     val_prec_neto_unit_loca,
		     val_prec_neto_tota_docu,
		     val_prec_neto_unit_docu,
		     val_prec_tota_tota_loca,
		     val_prec_tota_tota_docu,
		     val_impo_impu_unit_loca,
		     val_impo_impu_unit_docu,
		     val_impo_desc_tota_docu,
		     val_impo_impu_tota_loca,
		     val_impo_impu_tota_docu,
		     val_impo_desc_tota_loca,
		     val_prec_tota_unit_loca,
		     val_prec_tota_unit_docu,
		     val_prec_cont_tota_loca,
		     val_prec_cata_tota_loca,
		     val_prec_cata_tota_docu,
		     val_prec_cont_tota_docu,
		     val_prec_cata_tota_loca_unid,
		     num_unid_dema_real,
		     num_unid_compr,
		     num_unid_aten,
		     val_prec_fact_tota_loca,
		     val_prec_fact_tota_docu,
		     val_prec_sin_impu_tota_loca,
		     val_prec_neto_tota_loca,
		     espo_oid_esta_posi,
		     stpo_oid_subt_posi,
		     ind_no_impr,
		     num_cons,
		     val_impo_des_sin_imp_unit_loca,
		     val_impo_des_sin_imp_unit_docu,
		     val_impo_des_sin_imp_tota,
		     val_impo_des_sin_imp_tota_docu,
         val_codi_vent,
         VAL_CODI_VENT_FICT,
         VAL_PORC_DESC,
         OFDE_OID_DETA_OFER)
     SELECT
		 ped_sopo_seq.NEXTVAL,               --oid_soli_posi,
		 1,                                  --cod_posi,
		 1,                                  --num_unid_dema,
		 1,                                  --num_unid_por_aten,
		 NULL,                               --val_tasa_impu,
		 psc.oid_soli_cabe,                  --soca_oid_soli_cabe,
		 NULL,                               --taim_oid_tasa_impu,
		 11,                            			--tpos_oid_tipo_posi,
     lv_oid_prod_inte,                               --prod_oid_prod,
		 cgi.mon_fact,                       --val_prec_cata_unit_loca,
		 0,                                  --val_prec_cont_unit_loca,
		 0,                                  --val_prec_cata_unit_docu,
		 0,                                  --val_prec_conta_unit_docu,
		 0,                                  --val_prec_fact_unit_loca,
		 0,                                  --val_prec_fact_unit_docu,
		 0,                                  --val_prec_sin_impu_unit_loca,
		 0,                                  --val_prec_sin_impu_unit_docu,
		 0,                                  --val_prec_sin_impu_tota_docu,
		 0,                                  --val_impo_desc_unit_loca,
		 0,                                  --val_prec_neto_unit_loca,
		 0,                                  --val_prec_neto_tota_docu,
		 0,                                  --val_prec_neto_unit_docu,
		 0,                                  --val_prec_tota_tota_loca,
		 0,                                  --val_prec_tota_tota_docu,
		 0,                                  --val_impo_impu_unit_loca,
		 0,                                  --val_impo_impu_unit_docu,
		 0,                                  --val_impo_desc_tota_docu,
		 0,                                  --val_impo_impu_tota_loca,
		 0,                                  --val_impo_impu_tota_docu,
		 0,                                  --val_impo_desc_tota_loca,
		 0,                                  --val_prec_tota_unit_loca,
		 0,                                  --val_prec_tota_unit_docu,
		 0,                                  --val_prec_cont_tota_loca,
		 0,                                  --val_prec_cata_tota_loca,
		 0,                                  --val_prec_cata_tota_docu,
		 0,                                  --val_prec_cont_tota_docu,
		 0,                                  --val_prec_cata_tota_loca_unid,
		 1,                                  --num_unid_dema_real,
		 1,                                  --num_unid_compr,
		 1,                                  --num_unid_aten,
		 0,                                  --val_prec_fact_tota_loca,
		 0,                                  --val_prec_fact_tota_docu,
		 0,                                  --val_prec_sin_impu_tota_loca,
		 0,                                  --val_prec_neto_tota_loca,
		 4,                              			--espo_oid_esta_posi,
		 15,                      						--stpo_oid_subt_posi,
		 0,                                  --ind_no_impr,
		 NULL,                               --num_cons,
		 0,                                  --val_impo_des_sin_imp_unit_loca,
		 0,                                  --val_impo_des_sin_imp_unit_docu,
		 0,                                  --val_impo_des_sin_imp_tota,
		 0,                                  --val_impo_des_sin_imp_tota_docu,
     null,                               --val_codi_vent,
     null,                               --VAL_CODI_VENT_FICT,
     0,                                  --VAL_PORC_DESC,
     null                                --OFDE_OID_DETA_OFER
    FROM ccc_conso_calcu_inter_mora cgi, ped_solic_cabec psc
    WHERE psc.clie_oid_clie = cgi.clie_oid_clie
    AND psc.tspa_oid_tipo_soli_pais = fin_pkg_gener.FIN_FN_OBTIE_OID_SOLIC_PAIS('FI')
    AND psc.soca_oid_docu_refe = cgi.soca_oid_soca_ant
    AND cgi.num_lote = p_num_lote;

        FOR v1 IN c1 LOOP
         lv_sql := 'BEGIN sto_pkg_envio_valid_sicc.sto_pr_genera_consolidado( ' || v1.oid_soli_cabe || ' , '
                                                                              ||''''|| to_char(v_fec_prog_fact, 'dd/mm/yyyy') ||''','
                                                                              ||''''||v_cod_pais||''','
                                                                              ||''''||lsparametroconso||''','
                                                                              ||''''|| 'C' ||''''||
                                                                              '  );  END;';
         EXECUTE IMMEDIATE lv_sql;
         COMMIT;
        END LOOP;

    UPDATE ccc_conso_calcu_inter_mora cgi SET cgi.ind_fact = 1, cgi.usu_fact = p_usuario,
           cgi.fec_fact = SYSDATE, cgi.fec_modi = SYSDATE, cgi.usu_modi = p_usuario
    WHERE  cgi.num_lote = p_num_lote;

    INSERT INTO CCC_CONSO_CALCU_INTER_HISTO
    SELECT * FROM ccc_conso_calcu_inter_mora cgi
    WHERE cgi.num_lote = p_num_lote
    AND cgi.ind_fact = 1;

    INSERT INTO CCC_DETAL_CALCU_INTER_HISTO
    SELECT * FROM ccc_detal_calcu_inter_mora cdg
    WHERE cdg.oid_mvcc_oid_cc in (    SELECT cgi.oid_movi_cc FROM ccc_conso_calcu_inter_mora cgi
    WHERE cgi.num_lote = p_num_lote
    AND cgi.ind_fact = 1 );

    DELETE FROM ccc_detal_calcu_inter_mora cdg
    WHERE cdg.oid_mvcc_oid_cc in (    SELECT cgi.oid_movi_cc FROM ccc_conso_calcu_inter_mora cgi
    WHERE cgi.num_lote = p_num_lote
    AND cgi.ind_fact = 1 );

    DELETE FROM ccc_conso_calcu_inter_mora cgi
    WHERE cgi.num_lote = p_num_lote
    AND cgi.ind_fact = 1;

  EXCEPTION
    WHEN OTHERS THEN
      ln_sqlcode := SQLCODE;
      ls_sqlerrm := substr(SQLERRM,
                           1,
                           250);
      raise_application_error(-20123,
                              'ERROR CCC_PR_FACTU_INTER_MORA: ' || ls_sqlerrm);

END CCC_PR_FACTU_INTER_MORA;

/***************************************************************************
    Descripcion       : Valida la carga de consultora y monto interes
    Fecha Creacion    : 17/04/2015
    Autor             : Diego Torres Loyola
    ***************************************************************************/
    PROCEDURE CCC_PR_VALIDAR_CONSULTORA_MONT(psCodigoUsuario VARCHAR2) IS

        CURSOR C_DATA IS
        SELECT
        NUM_FILA,
        COD_CONSULTORA,
        MONTO_INTERES
        FROM CCC_TEMP_CONSUL_MONT_INTER
        WHERE COD_USUA = psCodigoUsuario;

        TYPE tipoData IS RECORD
        (
            numeroFila              CCC_TEMP_CONSUL_MONT_INTER.NUM_FILA%TYPE,
            codigoConsultora        CCC_TEMP_CONSUL_MONT_INTER.COD_CONSULTORA%TYPE,
            montoInteres         CCC_TEMP_CONSUL_MONT_INTER.MONTO_INTERES%TYPE
        );

      TYPE tipoDataTab  IS TABLE OF tipoData;
      tipoDataRecordN tipoDataTab;

      lsMensajeError            CCC_TEMP_CONSUL_MONT_INTER.MEN_ERRO%TYPE;
      lnNumeroFila              CCC_TEMP_CONSUL_MONT_INTER.NUM_FILA%TYPE;
      lnTempo   NUMBER;



    BEGIN


      OPEN C_DATA;
      LOOP
        FETCH C_DATA BULK COLLECT INTO tipoDataRecordN LIMIT W_FILAS;
        IF tipoDataRecordN.COUNT > 0 THEN
          FOR x IN tipoDataRecordN.FIRST .. tipoDataRecordN.LAST LOOP

            lnNumeroFila   := tipoDataRecordN(x).numeroFila;
            lsMensajeError := '';
     

      
      SELECT count(1)
        INTO lnTempo
        FROM CCC_CONSO_CALCU_INTER_MORA CI, MAE_CLIEN MC
       WHERE MC.OID_CLIE = CI.CLIE_OID_CLIE
         AND CI.IND_BLOQ = 1
         AND CI.IND_FACT = 0
         AND MC.COD_CLIE = tipoDataRecordN(x).codigoConsultora;
      IF lnTempo = 0 THEN
                lsMensajeError := lsMensajeError||'Codigo de Consultora no existe, ';
            END IF;
      
      
      
            -- --

            IF(length(lsMensajeError) > 0) THEN
               lsMensajeError := substr(lsMensajeError,1,length(lsMensajeError)-2);
               UPDATE CCC_TEMP_CONSUL_MONT_INTER
               SET EST_REGI = 0,
               MEN_ERRO = lsMensajeError
               WHERE COD_USUA = psCodigoUsuario
               AND NUM_FILA = tipoDataRecordN(x).numeroFila;
            ELSE
               UPDATE CCC_TEMP_CONSUL_MONT_INTER
               SET
               EST_REGI = '1'
               WHERE COD_USUA = psCodigoUsuario
               AND NUM_FILA = tipoDataRecordN(x).numeroFila;

            END IF;

          END LOOP;
        END IF;
      EXIT WHEN C_DATA%NOTFOUND;
      END LOOP;
      CLOSE C_DATA;

    EXCEPTION
      WHEN OTHERS THEN
           ln_sqlcode := SQLCODE;
           ls_sqlerrm := SUBSTR(SQLERRM,1,150);
           RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_VALIDAR_CONSULTORA_MONT: '||ls_sqlerrm);
    END CCC_PR_VALIDAR_CONSULTORA_MONT;
    
  /***************************************************************************
    Descripcion       : Realiza la carga consultora y monto interes
    Fecha Creacion    : 17/04/2015
    Autor             : Diego Torres Loyola
    ***************************************************************************/
    PROCEDURE CCC_PR_CARGAR_CONSULTORA_MONT(psCodigoUsuario VARCHAR2) IS
  
  CURSOR C_DATA IS
          SELECT
            COD_CONSULTORA,
            MONTO_INTERES
            FROM CCC_TEMP_CONSUL_MONT_INTER
            WHERE EST_REGI = '1'
            AND COD_USUA = psCodigoUsuario;

          TYPE tipoData IS RECORD
          (
            codigoConsultora        CCC_TEMP_CONSUL_MONT_INTER.COD_CONSULTORA%TYPE,
            montoInteres         CCC_TEMP_CONSUL_MONT_INTER.MONTO_INTERES%TYPE
          );

          TYPE tipoDataTab  IS TABLE OF tipoData;
          tipoDataRecordN tipoDataTab;
          lv_num_lote VARCHAR2(15);
  
    BEGIN
    
       lv_num_lote := ccc_pkg_gener.CCC_FN_OBTIE_NUMER_LOTE;
       
       UPDATE ccc_conso_calcu_inter_mora cgi SET cgi.num_lote = lv_num_lote,
       cgi.mon_fact = (SELECT ctm.monto_interes FROM CCC_TEMP_CONSUL_MONT_INTER ctm, mae_clien mc
             WHERE ctm.cod_consultora = mc.cod_clie
             AND mc.oid_clie = cgi.clie_oid_clie
             AND ctm.cod_usua = psCodigoUsuario)
       WHERE EXISTS (SELECT null FROM CCC_TEMP_CONSUL_MONT_INTER ctm, mae_clien mc
             WHERE ctm.cod_consultora = mc.cod_clie
             AND mc.oid_clie = cgi.clie_oid_clie
             AND ctm.cod_usua = psCodigoUsuario)
      AND cgi.ind_fact = 0;
      
       OPEN C_DATA;
      LOOP
        FETCH C_DATA BULK COLLECT INTO tipoDataRecordN LIMIT W_FILAS;
        IF tipoDataRecordN.COUNT > 0 THEN
          FOR x IN tipoDataRecordN.FIRST .. tipoDataRecordN.LAST LOOP
      
         CCC_PKG_PROCE.CCC_PR_FACTU_INTER_MORA(lv_num_lote,psCodigoUsuario);

          END LOOP;
        END IF;
      EXIT WHEN C_DATA%NOTFOUND;
      END LOOP;
      CLOSE C_DATA;
        
    EXCEPTION
      WHEN OTHERS THEN
           ln_sqlcode := SQLCODE;
           ls_sqlerrm := SUBSTR(SQLERRM,1,150);
           RAISE_APPLICATION_ERROR(-20123, 'ERROR CCC_PR_CARGAR_CONSULTORA_MONT: '||ls_sqlerrm);
    END CCC_PR_CARGAR_CONSULTORA_MONT; 

END CCC_PKG_PROCE;
/
