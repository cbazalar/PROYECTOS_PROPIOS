CREATE OR REPLACE PACKAGE "IMP_PKG_PROCE_MATRI" AS

-- Constantes
CODIGO_CANAL VARCHAR2(10) := 'VD';
CODIGO_MARCA VARCHAR2(10) := 'T';

COD_TIPO_DOCUM_BOLET VARCHAR2(3) := '011';
COD_TIPO_DOCUM_FACTU VARCHAR2(3) := '001';

COD_NOTA_CREDI_BOLET VARCHAR2(3) := '020';
COD_NOTA_CREDI_FACTU VARCHAR2(3) := '021';

-- Valores posibles del parametro de
-- visualizacion saldo del cupon
SALDO_VENCIDO VARCHAR2(10) := 'SV';
SALDO_PERIODO VARCHAR2(10) := 'SP';
SALDO_TOTAL   VARCHAR2(10) := 'ST';
MONTO_PEDIDO  VARCHAR2(10) := 'MP';

w_filas               NUMBER := 1000;

/**************************************************************************
Descripcion         :
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 10/02/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Parametros Entrada  :
    p_codigoPais            : Codigo del pais
    p_codigoPeriodo         : Periodo del cupon
    p_fechaFacturacion      : Fecha de Facturacion
    p_codigoFormularioCupon : Codigo del formulario del cupon (FAC_FORMU) este
                              valor es cruzado contra la tabla FAC_FORMU_TIPO_SOLIC
                              de tal forma que se generaran cupones para los tipos
                              de solicitud que esten alli registrados y que hayan
                              sido facturados de acuerdo a los parametros anteriores.
    p_indicadorEnvioLarissa : Valor a comparar contra la columna IND_INTE_LARI_GENE
                              de los consolidados.
   p_indicadorEnvioUltimoLote:Indicador usado para determinar si se envia la informacion
                              del ultimo lote de facturacion o la totalidad de la fecha.
    p_tipoSaldoCupon        : Determina el valor del saldo a mostrar el cupon,
                              pudiendo ser Monto del Pedido (MP), Saldo Vencido (SV),
                              Saldo Total (ST) o Saldo del Periodo (SP).
    p_codigoTipoDocumento   : Parametro que determina a que consultoras se les va a
                              generar cupon, si el parametro es distinto de NULL se
                              les generará cupon a las consultoras cuyo consolidado
                              haya generado el tipo de documento contable indicado
                              por este valor, si es NULL no se tomara en cuenta el
                              hecho que se les haya generado un documento contable,
                              si se omite de la invocación al procedimiento se tomara
                              el valor de Factura 1 por defecto (001).
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_CUPON_MATRI(p_codigoPais VARCHAR2,
                                   p_codigoPeriodo VARCHAR2,
                                   p_fechaFacturacion VARCHAR2,
                                   p_codigoFormularioCupon VARCHAR2,
                                   p_indicadorEnvioLarissa NUMBER := 0,
                                   p_indicadorEnvioUltimoLote VARCHAR2 := 'N',
                                   p_tipoSaldoCupon VARCHAR2 := SALDO_VENCIDO,
                                   p_codigoTipoDocumento VARCHAR2 := '001');

/**************************************************************************
Descripcion         :
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_CUPON_MATRI(p_codigoPais VARCHAR2,
                                   p_codigoPeriodo VARCHAR2,
                                   p_fechaFacturacion VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);
/**************************************************************************
Descripcion         :
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_CUPON_MATRI_Z(p_oidzona NUMBER);

/**************************************************************************
Descripcion         : Genera el documento del cupon matricial en el formato
                      de Venezuela Esika.
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_CUPON_MATRI_VEE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del cupon matricial en el formato
                      de Venezuela LBEL.
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_CUPON_MATRI_VEL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del cupon matricial en el formato
                      de Panama LBEL.
Fecha Creación      : 02/09/2009
Fecha Modificacion  : 02/09/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_CUPON_MATRI_PAL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         :
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_CUPON_VEE(p_codigoPais VARCHAR2,
                                       p_nombreArchivo VARCHAR2,
                                       p_directorio VARCHAR2);

/**************************************************************************
Descripcion         :
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_CUPON_VEL(p_codigoPais VARCHAR2,
                                       p_nombreArchivo VARCHAR2,
                                       p_directorio VARCHAR2);

/**************************************************************************
Descripcion         :
Fecha Creación      : 02/09/2009
Fecha Modificacion  : 02/09/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_CUPON_PAL(p_codigoPais VARCHAR2,
                                       p_nombreArchivo VARCHAR2,
                                       p_directorio VARCHAR2);


/**************************************************************************
Descripcion         :
Fecha Creación      : 06/05/2009
Fecha Modificacion  : 06/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_DIVID_TEXTO(p_textoOriginal VARCHAR2,
                            p_separador VARCHAR2 := ' ') RETURN VARCHAR2;

/**************************************************************************
Descripcion         :
Fecha Creación      : 07/05/2009
Fecha Modificacion  : 07/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_NUMER_FACTU(p_oidConsolidado NUMBER) RETURN VARCHAR2;

/**************************************************************************
Descripcion         : Calcula el saldo de la consultora en base a la fecha
                      de vencimiento tomando en cuenta todos los importes
                      pendientes anteriores a dicha fecha.
Fecha Creación      : 07/05/2009
Fecha Modificacion  : 07/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_CALCU_SALDO_CUPON(p_oidCliente NUMBER,
                                  p_fechaVencimiento DATE) RETURN NUMBER;

/**************************************************************************
Descripcion         : Obtiene el saldo del periodo para una determinada
                      consultora en base al periodo y fecha de vencimiento
                      tomando en cuenta todos los importes pendientes
                      anteriores a dicha fecha pero de la campaña indicada.
Fecha Creación      : 02/10/2009
Fecha Modificacion  : 02/10/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_CALCU_SALDO_CUPON_PERIO(p_oidCliente NUMBER,
                                        p_oidPeriodo NUMBER,
                                        p_fechaVencimiento DATE) RETURN NUMBER;

/**************************************************************************
Descripcion         : Obtiene el saldo del periodo para una determinada
                      consultora en base al periodo y fecha de vencimiento
                      tomando en cuenta todos los importes realizados (no
                      los pendientes) anteriores a dicha fecha pero de la
                      campaña indicada.  Adicionalmente se suman importes
                      de campañas anteriores con una ,cuyas fechas  de
                      vencimiento  se encuentren entre las fechas de inicio
                      y fin del periodo siguiente.
Fecha Creación      : 04/11/2009
Fecha Modificacion  : 02/12/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_CALCU_SALDO_CUPON_PERIO(p_oidCliente NUMBER,
                                        p_oidPeriodo NUMBER,
                                        p_fechaVencimiento DATE,
                                        p_fechaVencimientoAnterior DATE) RETURN NUMBER;

/**************************************************************************
Descripcion         :
Fecha Creación      : 07/05/2009
Fecha Modificacion  : 07/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_FACTU_MATRI(p_codigoPais VARCHAR2,
                                   p_codigoPeriodo VARCHAR2,
                                   p_fechaFacturacion VARCHAR2,
                                   p_codigoTipoDocumento VARCHAR2,
                                   p_indicadorEnvioLarissa NUMBER := 0,
                                   p_indicadorEnvioUltimoLote VARCHAR2 := 'N');

/**************************************************************************
Descripcion         :
Fecha Creación      : 18/05/2009
Fecha Modificacion  : 18/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI(p_codigoPais VARCHAR2,
                                   p_codigoPeriodo VARCHAR2,
                                   p_fechaFacturacion VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);
/**************************************************************************
Descripcion         :
Fecha Creación      : 18/05/2009
Fecha Modificacion  : 18/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_Z(p_oidzona NUMBER);

/**************************************************************************
Descripcion         :
Fecha Creación      : 18/05/2009
Fecha Modificacion  : 18/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_BOLET_MATRI_Z(p_oidzona NUMBER);


/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_FACTU(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);
/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_FACTU2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);
/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_BOLET2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_INICI_ARCHI_FACTU(p_codigoPais VARCHAR2) RETURN VARCHAR2;

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_FIN_ARCHI_FACTU(p_codigoPais VARCHAR2) RETURN VARCHAR2;

/**************************************************************************
Descripcion         : Genera el documento del factura matricial en el formato
                      de Venezuela Esika.
Fecha Creación      : 08/05/2009
Fecha Modificacion  : 08/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_VEE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del factura matricial en el formato
                      de Venezuela LBEL.
Fecha Creación      : 08/05/2009
Fecha Modificacion  : 08/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_VEL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika.
Fecha Creación      : 24/07/2009
Fecha Modificacion  : 24/07/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_PEE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);
/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika con bonificaciones.
Fecha Creación      : 25/05/2011
Fecha Modificacion  : 25/05/2011
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_PEE_B(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);
/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika con bonificaciones por consolidado.
Fecha Creación      : 26/03/2012
Fecha Modificacion  : 26/03/2012
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_PEE_F(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2);
/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika con bonificaciones por consolidado.
Fecha Creación      : 26/03/2012
Fecha Modificacion  : 26/03/2012
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_BOLET_MATRI_PEE_F(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2);
/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika con bonificaciones por consolidado.
Fecha Creación      : 26/03/2012
Fecha Modificacion  : 26/03/2012
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_CLE(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2);
/**************************************************************************
Descripcion         : Genera el documento del factura individual para MX.
Fecha Creación      : 13/11/2014
Fecha Modificacion  : 13/11/2014
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_MXL(p_codpais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);
/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika con bonificaciones por consolidado.
Fecha Creación      : 26/03/2012
Fecha Modificacion  : 26/03/2012
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_BOLET_MATRI_CLE(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2);
/**************************************************************************
Descripcion         : Genera el documento de factura global para MX.
Fecha Creación      : 26/03/2012
Fecha Modificacion  : 26/03/2012
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_BOLET_MATRI_MXL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Ecuador Esika.
Fecha Creación      : 24/07/2009
Fecha Modificacion  : 24/07/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_ECE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Panama LBEL.
Fecha Creación      : 29/03/2010
Fecha Modificacion  : 29/03/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_PAL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del factura matricial en el formato
                      de Guatemala LBEL.
Fecha Creación      : 04/11/2009
Fecha Modificacion  : 04/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_GTL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del factura matricial en el formato
                      de Guatemala Esika.
Fecha Creación      : 09/11/2009
Fecha Modificacion  : 09/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_GTE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del factura matricial en el formato
                      de El Salvador.
Fecha Creación      : 09/11/2009
Fecha Modificacion  : 09/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_SVL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Obtiene la informacion para la generacion de las notas
                      de credito matriciales.
Fecha Creación      : 27/05/2009
Fecha Modificacion  : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_NOTA_CREDI(p_codigoPais VARCHAR2,
                                  p_codigoTipoDocumento VARCHAR2);

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales.
Fecha Creación      : 27/05/2009
Fecha Modificacion  : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);
/**************************************************************************
Descripcion         : Genera las notas de credito matriciales.
Fecha Creación      : 27/05/2009
Fecha Modificacion  : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_Z(p_oidzona NUMBER);

/**************************************************************************
Descripcion         : Genera el archivo matricial de notas de credito.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_NOCRE(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);
/**************************************************************************
Descripcion         : Genera el archivo matricial de notas de credito.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_NOCRE2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_INICI_ARCHI_NOCRE(p_codigoPais VARCHAR2) RETURN VARCHAR2;

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_FIN_ARCHI_NOCRE(p_codigoPais VARCHAR2) RETURN VARCHAR2;

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales en el formato
                      de Venezuela Esika.
Fecha Creación      : 27/05/2009
Fecha Modificacion  : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_VEE(p_codigoPais VARCHAR2);

/**************************************************************************
Descripcion         : Genera notas de credito matriciales en el formato
                      de Venezuela LBEL.
Fecha Creación      : 27/05/2009
Fecha Modificacion  : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_VEL(p_codigoPais VARCHAR2);

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales en el formato
                      de Ecuador Esika.
Fecha Creación      : 03/05/2009
Fecha Modificacion  : 03/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_ECE(p_codigoPais VARCHAR2);

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales en el formato
                      de Guatenala LBEL.
Fecha Creación      : 09/11/2009
Fecha Modificacion  : 09/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_GTL(p_codigoPais VARCHAR2);

/**************************************************************************
Descripcion         : Genera notas de credito matriciales en el formato
                      de Guatemala Esika.
Fecha Creación      : 09/11/2009
Fecha Modificacion  : 09/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_GTE(p_codigoPais VARCHAR2);

/**************************************************************************
Descripcion         : Genera notas de credito matriciales en el formato
                      de El Salvador.
Fecha Creación      : 09/11/2009
Fecha Modificacion  : 09/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_SVL(p_codigoPais VARCHAR2);
/**************************************************************************
Descripcion         : Genera el documento del NC individual para MX.
Fecha Creación      : 13/11/2014
Fecha Modificacion  : 13/11/2014
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_MXL(p_codpais varchar2);

/**************************************************************************
Descripcion         : Genera el documento NC Global para MX.
Fecha Creación      : 13/11/2014
Fecha Modificacion  : 13/11/2014
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_MXL2(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);
/**************************************************************************
Descripcion         : Genera notas de credito matriciales en el formato
                      de Perú Esika.
Fecha Creación      : 17/11/2009
Fecha Modificacion  : 17/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_PEE(p_codigoPais VARCHAR2);
/**************************************************************************
Descripcion         : Genera notas de credito matriciales en el formato
                      de Perú Esika.
Fecha Creación      : 17/11/2009
Fecha Modificacion  : 17/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_PEE_2(p_codigoPais VARCHAR2);

/**************************************************************************
Descripcion         : Genera notas de credito matriciales en el formato
                      de Panama LBEL.
Fecha Creación      : 15/01/2010
Fecha Modificacion  : 15/01/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_PAL(p_codigoPais VARCHAR2);

/**************************************************************************
Descripcion         : Obtiene los datos de un reclamo en base al OID documento
                      contable (nota de credito).
Fecha Creación      : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_OBTIE_INFOR_RECLA(p_oidDocumento IN NUMBER,
                                   p_numeroReclamo OUT NUMBER,
                                   p_descripcionOperacion OUT VARCHAR2);

/**************************************************************************
Descripcion         : Obtiene los datos de la factura de referencia  en
                      base al OID documento contable (nota de credito).
Fecha Creación      : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_OBTIE_INFOR_DOCLE_REFER(p_oidDocumento IN NUMBER,
                                         p_serieDocumentoReferencia OUT VARCHAR2,
                                         p_numeroDocumentoReferencia OUT NUMBER,
                                         p_codigoInternoReferencia OUT NUMBER,
                                         p_fechaReferencia OUT DATE,
                                         p_montoReferencia OUT NUMBER,
                                         p_oidTipoDocumentoReferencia OUT NUMBER,
                                         p_tipoDocumentoReferencia OUT VARCHAR2);

/**************************************************************************
Descripcion         : Actualiza el valor del correlativo de control usado
                      para la impresion de algunos documentos matriciales
                      (notas de credito y debito) cuyo OID inicial esta en
                      la tabla IMP_CONTR_DOCUM_CONTA.
Fecha Creación      : 29/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_ACTUA_CONTR_DOCUM_CONTA(p_codigoPais VARCHAR2,
                                         p_codigoTipoDocumento VARCHAR2);

/**************************************************************************
Descripcion         : Obtiene la informacion para la generacion de las notas
                      de debito matriciales.
Fecha Creación      : 01/06/2009
Fecha Modificacion  : 01/06/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_NOTA_DEBIT(p_codigoPais VARCHAR2,
                                  p_codigoTipoDocumento VARCHAR2);

/**************************************************************************
Descripcion         : Genera las notas de debito matriciales.
Fecha Creación      : 01/06/2009
Fecha Modificacion  : 01/06/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);
/**************************************************************************
Descripcion         : Genera las notas de debito matriciales.
Fecha Creación      : 01/06/2009
Fecha Modificacion  : 01/06/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_Z(p_oidzona NUMBER);

/**************************************************************************
Descripcion         : Genera el archivo matricial de notas de debito.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_NODEB(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);

/**************************************************************************
Descripcion         : Genera el archivo matricial de notas de debito.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_NODEB2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_INICI_ARCHI_NODEB(p_codigoPais VARCHAR2) RETURN VARCHAR2;

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_FIN_ARCHI_NODEB(p_codigoPais VARCHAR2) RETURN VARCHAR2;

/**************************************************************************
Descripcion         : Genera las notas de debito matriciales en el formato
                      de Venezuela Esika.
Fecha Creación      : 01/06/2009
Fecha Modificacion  : 01/06/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_VEE(p_codigoPais VARCHAR2);

/**************************************************************************
Descripcion         : Genera notas de debito matriciales en el formato
                      de Venezuela LBEL.
Fecha Creación      : 01/06/2009
Fecha Modificacion  : 01/06/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_VEL(p_codigoPais VARCHAR2);

/**************************************************************************
Descripcion         : Genera las notas de debito matriciales en el formato
                      de Guatemala Esika.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_GTE(p_codigoPais VARCHAR2);

/**************************************************************************
Descripcion         : Genera notas de debito matriciales en el formato
                      de Guatemala LBEL.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_GTL(p_codigoPais VARCHAR2);


/**************************************************************************
Descripcion         : Genera las notas de debito matriciales en el formato
                      de El Salvador.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_SVL(p_codigoPais VARCHAR2);


/**************************************************************************
Descripcion         : Genera notas de debito matriciales en el formato
                      de Peru Esika.
Fecha Creación      : 19/11/2009
Fecha Modificacion  : 19/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/

PROCEDURE IMP_PR_GENER_NODEB_MATRI_PAL(p_codigoPais VARCHAR2);
/**************************************************************************
Descripcion         : Genera notas de debito matriciales en el formato
                      de Peru Esika.
Fecha Creación      : 19/11/2009
Fecha Modificacion  : 19/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/

PROCEDURE IMP_PR_GENER_NODEB_MATRI_PEE(p_codigoPais VARCHAR2);


/**************************************************************************
Descripcion         :  Proceso que obtiene la informacion de las boletas y
                       facturas de premios para luego generar el archivo en
                       el formato del pais.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_FACTU_PREMI_MATRI(p_codigoPais VARCHAR2,
                                         p_codigoPeriodo VARCHAR2,
                                         p_fechaFacturacion VARCHAR2,
                                         p_codigoTipoDocumento VARCHAR2,
                                         p_indicadorEnvioLarissa NUMBER := 0,
                                         p_indicadorEnvioUltimoLote VARCHAR2 := 'N');

/**************************************************************************
Descripcion         : Proceso que genera el archivo de boletas y facturas
                      de premios.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_MATRI(p_codigoPais VARCHAR2,
                                         p_codigoPeriodo VARCHAR2,
                                         p_fechaFacturacion VARCHAR2,
                                         p_nombreArchivo VARCHAR2,
                                         p_directorio VARCHAR2);
/**************************************************************************
Descripcion         : Proceso que genera el archivo de boletas y facturas
                      de premios.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_MAT_Z(p_oidzona NUMBER);

/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Ecuador Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_ECE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);
/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Ecuador Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_SVE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Panama LBEL.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_PAL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Peru Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_PEE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);
/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Peru Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_PEE_2(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);

/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Peru Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_PEE_3(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2);
/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Peru Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_PEE_F(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2);

/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_FACTU_PRE2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);

/**************************************************************************
Descripcion         : Recupera informacion del concurso asociado a una
                      factura de premios para visualizarlos en la impresion.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_OBTIE_INFOR_CONCU(p_oidDocumento IN NUMBER,
                                   p_oidDetalle IN NUMBER,
                                   p_numeroConcurso OUT VARCHAR2,
                                   p_periodoInicio OUT VARCHAR2,
                                   p_periodoFin OUT VARCHAR2);

/**************************************************************************
Descripcion         : Proceso que obtiene la informacion de las guias de
                      remision para luego generar el archivo en el formato
                      del pais.
Fecha Creación      : 04/05/2010
Fecha Modificacion  : 04/05/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_GUIA_REMIS_MATRI(p_codigoPais VARCHAR2,
                                        p_codigoPeriodo VARCHAR2,
                                        p_fechaFacturacion VARCHAR2,
                                        p_codigoTipoDocumento VARCHAR2,
                                        p_indicadorEnvioLarissa NUMBER := 0,
                                        p_indicadorEnvioUltimoLote VARCHAR2 := 'N');

/**************************************************************************
Descripcion         : Proceso que genera el archivo de guias de remision.
Fecha Creación      : 04/05/2010
Fecha Modificacion  : 04/05/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_GUIA_REMIS_MATRI(p_codigoPais VARCHAR2,
                                        p_codigoPeriodo VARCHAR2,
                                        p_fechaFacturacion VARCHAR2,
                                        p_nombreArchivo VARCHAR2,
                                        p_directorio VARCHAR2);
/**************************************************************************
Descripcion         : Proceso que genera el archivo de guias de remision.
Fecha Creación      : 04/05/2010
Fecha Modificacion  : 04/05/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_GUIA_REMIS_MAT_Z(p_oidzona NUMBER);

/**************************************************************************
Descripcion         : Genera el documento de guia de remision matricial
                      en el formato de Peru Esika.
Fecha Creación      : 04/05/2010
Fecha Modificacion  : 04/05/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_GUIA_REMIS_PEE(p_codigoPais VARCHAR2,
                                      p_codigoPeriodo VARCHAR2,
                                      p_fechaFacturacion VARCHAR2);
/**************************************************************************
Descripcion         : Genera el documento de guia de remision matricial
                      en el formato de Peru Esika.
Fecha Creación      : 04/05/2010
Fecha Modificacion  : 04/05/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_GUIA_REMIS_PEE_F(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2);
/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_FACTU_GR2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2);


/**************************************************************************
Descripcion         : Valida la existencia de documentos con numeros de
                      documento inteno con saltos o en null y de encontrar registros, procede
                      con la resecuenciacion de documentos.
Fecha Creación      : 07/03/2011
Fecha Modificacion  : 07/03/2011
Autor               : Jorge Florencio - jflorencio@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_REGEN_SECUE_DOCUM_INTER(p_oidPais NUMBER,
                                         p_codigoTipoDocumento VARCHAR2,
                                         p_oidDocumentoInicial NUMBER);
END;
/
CREATE OR REPLACE PACKAGE BODY "IMP_PKG_PROCE_MATRI" AS

/**************************************************************************
Descripcion         :
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 10/02/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Parametros Entrada  :
    p_codigoPais            : Codigo del pais
    p_codigoPeriodo         : Periodo del cupon
    p_fechaFacturacion      : Fecha de Facturacion
    p_codigoFormularioCupon : Codigo del formulario del cupon (FAC_FORMU) este
                              valor es cruzado contra la tabla FAC_FORMU_TIPO_SOLIC
                              de tal forma que se generaran cupones para los tipos
                              de solicitud que esten alli registrados y que hayan
                              sido facturados de acuerdo a los parametros anteriores.
    p_indicadorEnvioLarissa : Valor a comparar contra la columna IND_INTE_LARI_GENE
                              de los consolidados.
   p_indicadorEnvioUltimoLote:Indicador usado para determinar si se envia la informacion
                              del ultimo lote de facturacion o la totalidad de la fecha.
    p_tipoSaldoCupon        : Determina el valor del saldo a mostrar el cupon,
                              pudiendo ser Monto del Pedido (MP), Saldo Vencido (SV),
                              Saldo Total (ST) o Saldo del Periodo (SP).
    p_codigoTipoDocumento   : Parametro que determina a que consultoras se les va a
                              generar cupon, si el parametro es distinto de NULL se
                              les generará cupon a las consultoras cuyo consolidado
                              haya generado el tipo de documento contable indicado
                              por este valor, si es NULL no se tomara en cuenta el
                              hecho que se les haya generado un documento contable,
                              si se omite de la invocación al procedimiento se tomara
                              el valor de Factura 1 por defecto (001).
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_CUPON_MATRI(p_codigoPais VARCHAR2,
                                   p_codigoPeriodo VARCHAR2,
                                   p_fechaFacturacion VARCHAR2,
                                   p_codigoFormularioCupon VARCHAR2,
                                   p_indicadorEnvioLarissa NUMBER := 0,
                                   p_indicadorEnvioUltimoLote VARCHAR2 := 'N',
                                   p_tipoSaldoCupon VARCHAR2 := SALDO_VENCIDO,
                                   p_codigoTipoDocumento VARCHAR2 := '001') IS

CURSOR c_cupones(oidPeriodo NUMBER,
                 numeroLoteFacturacion NUMBER) IS
SELECT SP.OID_PAIS,
       SP.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_TOTA_PAGA_LOCA,
       REG.OID_REGI,
       REG.COD_REGI,
       ZON.OID_ZONA,
       ZON.COD_ZONA,
       TER.OID_TERR,
       TER.COD_TERR
FROM MAE_CLIEN MC,
     PED_SOLIC_CABEC CON,
     ZON_REGIO REG,
     ZON_ZONA ZON,
     ZON_TERRI TER,
     SEG_PAIS SP,
     PED_SOLIC_CABEC_SECUE SEC,
     FAC_FORMU_TIPO_SOLIC FTS,
     FAC_FORMU FF
WHERE MC.OID_CLIE = CON.CLIE_OID_CLIE
AND CON.ZZON_OID_ZONA = ZON.OID_ZONA
AND ZON.ZORG_OID_REGI = REG.OID_REGI
AND TER.OID_TERR = CON.TERR_OID_TERR
AND CON.OID_SOLI_CABE = SEC.SOCA_OID_SOLI_CABE
AND CON.TSPA_OID_TIPO_SOLI_PAIS = FTS.TSPA_OID_TIPO_SOLI_PAIS
AND FTS.FORS_OID_FORM = FF.OID_FORM
AND FF.IND_ACTI = 1
AND FF.COD_FORM = p_codigoFormularioCupon
AND SP.OID_PAIS = MC.PAIS_OID_PAIS
AND SP.COD_PAIS = p_codigoPais
AND CON.IND_INTE_LARI_GENE = p_indicadorEnvioLarissa
AND (numeroLoteFacturacion IS NULL OR CON.NUM_LOTE_FACT = numeroLoteFacturacion)
AND CON.FEC_FACT = TO_DATE (p_fechaFacturacion, 'DD/MM/YYYY')
AND CON.PERD_OID_PERI = oidPeriodo
AND CON.NUM_UNID_ATEN_TOTA > 0
AND (
    p_codigoTipoDocumento IS NULL OR
    EXISTS (
        SELECT NULL
        FROM FAC_DOCUM_CONTA_CABEC DOC,
             FAC_TIPO_DOCUM FTD
        WHERE DOC.TIDO_OID_TIPO_DOCU = FTD.OID_TIPO_DOCU
        AND DOC.SOCA_OID_SOLI_CABE = CON.OID_SOLI_CABE
        AND FTD.COD_TIPO_DOCU = p_codigoTipoDocumento
    )
)

ORDER BY SEC.NUM_SECU_ZONA_RUTA, SEC.NUM_SECU_FACT_DIAR;


TYPE cuponrecord IS RECORD (
    oid_pais            seg_pais.oid_pais%TYPE,
    cod_pais            seg_pais.cod_pais%TYPE,
    oid_clie            mae_clien.oid_clie%TYPE,
    cod_clie            mae_clien.cod_clie%TYPE,
    cod_digi_ctrl       mae_clien.cod_digi_ctrl%TYPE,
    val_nom1            mae_clien.val_nom1%TYPE,
    val_nom2            mae_clien.val_nom2%TYPE,
    val_ape1            mae_clien.val_ape1%TYPE,
    val_ape2            mae_clien.val_ape2%TYPE,
    oid_soli_cabe       ped_solic_cabec.oid_soli_cabe%TYPE,
    val_nume_soli       ped_solic_cabec.val_nume_soli%TYPE,
    fec_fact            ped_solic_cabec.fec_fact%TYPE,
    val_tota_paga_loca  ped_solic_cabec.val_tota_paga_loca%TYPE,
    oid_regi            zon_regio.oid_regi%TYPE,
    cod_regi            zon_regio.cod_regi%TYPE,
    oid_zona            zon_zona.oid_zona%TYPE,
    cod_zona            zon_zona.cod_zona%TYPE,
    oid_terr            zon_terri.oid_terr%TYPE,
    cod_terr            zon_terri.cod_terr%TYPE
);

TYPE cupontype IS TABLE OF cuponrecord;
r_cupon    cupontype;

-- Variables locales
l_oidPais                   NUMBER;
l_oidPeriodo                NUMBER;
l_oidPeriodoSgte            NUMBER;
l_codPeriodoSgte            VARCHAR2(6);
l_oidCanal                  NUMBER;
l_oidMarca                  NUMBER;
l_correlativo               NUMBER := 1;
l_oidActividad              NUMBER;
l_fechaVencimiento          DATE;
l_fechaVencimientoAnterior  DATE;
l_saldoCupon                NUMBER(12,2) := 0.00;
l_saldoCupon1                NUMBER(12,2) := 0.00;
l_saldoCupon2                NUMBER(12,2) := 0.00;
l_saldoPeriodo              NUMBER(12,2) := 0.00;
l_saldoTotal                NUMBER(12,2) := 0.00;
l_tipoSaldoCupon            VARCHAR2(10);
l_clienteDobleCupon         NUMBER := 0;
l_numeroLoteFacturacion     NUMBER;

l_mensajeError              VARCHAR2(1000);


lv_generaDobleCupon VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codigoPais,'STO_DOBLE_CUPON'),'N');


BEGIN

    -- Obtenemos el OID del periodo
    l_oidPais    := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_codigoPais);
    l_oidCanal   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CANAL(CODIGO_CANAL);
    l_oidMarca   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(CODIGO_MARCA);
    l_oidPeriodo := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CRA_PERIO(p_codigoPeriodo, l_oidMarca, l_oidCanal);

    -- Obtenemos el OID del periodo siguiente
    l_codPeriodoSgte := GEN_FN_CALCU_PERIO(p_codigoPeriodo, 1);
    l_oidPeriodoSgte := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CRA_PERIO(l_codPeriodoSgte, l_oidMarca, l_oidCanal);

    -- Obtenemos el valor del ultimo numero de lote de facturacion
    IF (p_indicadorEnvioUltimoLote = '1' OR p_indicadorEnvioUltimoLote = 'S') THEN
        BEGIN
          SELECT MAX(con.num_lote_fact)
          INTO l_numeroLoteFacturacion
          FROM ped_solic_cabec con,
               int_lar_tipo_solici_pedido_dis tspd
         WHERE con.perd_oid_peri = l_oidPeriodo
           AND con.fec_fact = to_date(p_fechaFacturacion, 'dd/mm/yyyy')
           AND con.ind_inte_lari_gene = p_indicadorEnvioLarissa
           AND con.ind_ts_no_conso = 0
           AND (con.ind_pedi_prue = 0 OR con.ind_pedi_prue IS NULL)
           AND con.tspa_oid_tipo_soli_pais = tspd.tspa_oid_tipo_soli_pais
           AND con.pais_oid_pais = l_oidPais;
        EXCEPTION
        WHEN OTHERS THEN
            l_numeroLoteFacturacion := NULL;
        END;
    END IF;

    -- Obtenemos el OID de la actividad
    SELECT ACT.OID_ACTI
    INTO l_oidActividad
    FROM CRA_ACTIV ACT
    WHERE ACT.PAIS_OID_PAIS = l_oidPais
    AND ACT.MARC_OID_MARC = l_oidMarca
    AND ACT.CANA_OID_CANA = l_oidCanal
    AND ACT.COD_ACTI = 'CV'; -- Cupon de Vencimiento

    EXECUTE IMMEDIATE 'TRUNCATE TABLE IMP_CUPON_MATRI';

    -- Abrimos el cursor principal
    OPEN c_cupones(l_oidPeriodo, l_numeroLoteFacturacion);
    LOOP
        FETCH c_cupones BULK COLLECT
        INTO r_cupon LIMIT w_filas;

        IF  r_cupon.COUNT > 0 THEN
            FOR i IN r_cupon.FIRST..r_cupon.LAST
            LOOP

                -- Obtenemos la fecha de vencimiento de la zona del cliente
                BEGIN
                    SELECT CRO.FEC_INIC
                    INTO l_fechaVencimiento
                    FROM CRA_CRONO CRO
                    WHERE CRO.ZZON_OID_ZONA = r_cupon(i).oid_zona
                    AND CRO.PERD_OID_PERI = l_oidPeriodoSgte
                    AND CRO.CACT_OID_ACTI = l_oidActividad;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    l_mensajeError := 'La zona con codigo ' || r_cupon(i).cod_zona || ' no tiene la actividad CV configurada para el periodo ' || l_codPeriodoSgte;
                    RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
                END;

                -- Obtenemos la fecha de vencimiento anterior de la zona del cliente
                BEGIN
                    SELECT CRO.FEC_INIC
                    INTO l_fechaVencimientoAnterior
                    FROM CRA_CRONO CRO
                    WHERE CRO.ZZON_OID_ZONA = r_cupon(i).oid_zona
                    AND CRO.PERD_OID_PERI = l_oidPeriodo
                    AND CRO.CACT_OID_ACTI = l_oidActividad;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    l_mensajeError := 'La zona con codigo ' || r_cupon(i).cod_zona || ' no tiene la actividad CV configurada para el periodo ' || p_codigoPeriodo;
                    RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
                END;

                -- Calculamos los saldos de la consultora
                -- Saldo Vencido
                l_saldoCupon := IMP_FN_CALCU_SALDO_CUPON(r_cupon(i).oid_clie, l_fechaVencimiento);

                -- Saldo del Periodo
                l_saldoPeriodo := IMP_FN_CALCU_SALDO_CUPON_PERIO(r_cupon(i).oid_clie,
                                                                 l_oidPeriodo,
                                                                 l_fechaVencimiento,
                                                                 l_fechaVencimientoAnterior);

                -- Saldo Total
                l_saldoTotal := CCC_PKG_GENER.CCC_FN_OBTIE_SALDO_TOTAL(r_cupon(i).oid_clie);

                -- Validamos si a la consultora se la ha de generar mas de un cupon
                SELECT COUNT(*)
                INTO l_clienteDobleCupon
                FROM CCC_GENER_CONSU_CUPON
                WHERE OID_CLIE = r_cupon(i).oid_clie;

                -- Asignamos el tipo de saldo segun el caso
                l_tipoSaldoCupon := p_tipoSaldoCupon;

                -- Si la consultora esta en la tabla anterior al primer cupon se
                -- le asigna el valor del monto del pedido
                --IF l_clienteDobleCupon > 0 THEN
                --    l_tipoSaldoCupon := MONTO_PEDIDO;
                --END IF;

                IF lv_generaDobleCupon='S' THEN
                    --l_saldoCupon := round(l_saldoCupon/2,2);
                    l_saldoCupon1:= round(l_saldoCupon*0.6,2);
                    l_saldoCupon2:=l_saldoCupon-l_saldoCupon1;
                END IF;

                -- Insertamos los datos del cupon
                INSERT INTO IMP_CUPON_MATRI(
                cor_cupo_matr,
                oid_pais,
                cod_pais,
                oid_peri,
                cod_peri,
                oid_clie,
                cod_clie,
                cod_digi_ctrl,
                val_nom1,
                val_nom2,
                val_ape1,
                val_ape2,
                oid_soli_cabe,
                val_nume_soli,
                fec_fact,
                val_tota_paga_loca,
                oid_regi,
                cod_regi,
                oid_zona,
                cod_zona,
                oid_terr,
                cod_terr,
                fec_venc,
                val_sald,
                val_sald_peri,
                val_sald_tota,
                cod_tipo_sald,
                val_buff
                )
                VALUES(
                l_correlativo,
                r_cupon(i).oid_pais,
                r_cupon(i).cod_pais,
                l_oidPeriodo,
                p_codigoPeriodo,
                r_cupon(i).oid_clie,
                r_cupon(i).cod_clie,
                r_cupon(i).cod_digi_ctrl,
                r_cupon(i).val_nom1,
                r_cupon(i).val_nom2,
                r_cupon(i).val_ape1,
                r_cupon(i).val_ape2,
                r_cupon(i).oid_soli_cabe,
                r_cupon(i).val_nume_soli,
                r_cupon(i).fec_fact,
                r_cupon(i).val_tota_paga_loca,
                r_cupon(i).oid_regi,
                r_cupon(i).cod_regi,
                r_cupon(i).oid_zona,
                r_cupon(i).cod_zona,
                r_cupon(i).oid_terr,
                r_cupon(i).cod_terr,
                l_fechaVencimiento,
                l_saldoCupon1,
                l_saldoPeriodo,
                l_saldoTotal,
                l_tipoSaldoCupon,
                EMPTY_CLOB
                );

                l_correlativo := l_correlativo + 1;

                -- Validamos si se le genera un cupon adicional a la consultora
                IF l_clienteDobleCupon > 0 THEN

                    -- Insertamos el cupon adicional
                    INSERT INTO IMP_CUPON_MATRI(
                    cor_cupo_matr,
                    oid_pais,
                    cod_pais,
                    oid_peri,
                    cod_peri,
                    oid_clie,
                    cod_clie,
                    cod_digi_ctrl,
                    val_nom1,
                    val_nom2,
                    val_ape1,
                    val_ape2,
                    oid_soli_cabe,
                    val_nume_soli,
                    fec_fact,
                    val_tota_paga_loca,
                    oid_regi,
                    cod_regi,
                    oid_zona,
                    cod_zona,
                    oid_terr,
                    cod_terr,
                    fec_venc,
                    val_sald,
                    val_sald_peri,
                    val_sald_tota,
                    cod_tipo_sald,
                    num_cupo, -- Numero de cupon
                    val_buff
                    )
                    VALUES(
                    l_correlativo,
                    r_cupon(i).oid_pais,
                    r_cupon(i).cod_pais,
                    l_oidPeriodo,
                    p_codigoPeriodo,
                    r_cupon(i).oid_clie,
                    r_cupon(i).cod_clie,
                    r_cupon(i).cod_digi_ctrl,
                    r_cupon(i).val_nom1,
                    r_cupon(i).val_nom2,
                    r_cupon(i).val_ape1,
                    r_cupon(i).val_ape2,
                    r_cupon(i).oid_soli_cabe,
                    r_cupon(i).val_nume_soli,
                    r_cupon(i).fec_fact,
                    r_cupon(i).val_tota_paga_loca,
                    r_cupon(i).oid_regi,
                    r_cupon(i).cod_regi,
                    r_cupon(i).oid_zona,
                    r_cupon(i).cod_zona,
                    r_cupon(i).oid_terr,
                    r_cupon(i).cod_terr,
                    l_fechaVencimiento,
                    l_saldoCupon2,
                    l_saldoPeriodo,
                    l_saldoTotal,
                    l_tipoSaldoCupon,
                    2, -- Segundo cupon para la consultora
                    EMPTY_CLOB
                    );

                    l_correlativo := l_correlativo + 1;

                END IF;


                -- Validamos si se le genera un cupon adicional a la consultora
                IF lv_generaDobleCupon='S' /*and  l_saldoCupon-r_cupon(i).val_tota_paga_loca> 0*/ THEN

                    -- Insertamos el cupon adicional
                    INSERT INTO IMP_CUPON_MATRI(
                    cor_cupo_matr,
                    oid_pais,
                    cod_pais,
                    oid_peri,
                    cod_peri,
                    oid_clie,
                    cod_clie,
                    cod_digi_ctrl,
                    val_nom1,
                    val_nom2,
                    val_ape1,
                    val_ape2,
                    oid_soli_cabe,
                    val_nume_soli,
                    fec_fact,
                    val_tota_paga_loca,
                    oid_regi,
                    cod_regi,
                    oid_zona,
                    cod_zona,
                    oid_terr,
                    cod_terr,
                    fec_venc,
                    val_sald,
                    val_sald_peri,
                    val_sald_tota,
                    cod_tipo_sald,
                    num_cupo, -- Numero de cupon
                    val_buff
                    )
                    VALUES(
                    l_correlativo,
                    r_cupon(i).oid_pais,
                    r_cupon(i).cod_pais,
                    l_oidPeriodo,
                    p_codigoPeriodo,
                    r_cupon(i).oid_clie,
                    r_cupon(i).cod_clie,
                    r_cupon(i).cod_digi_ctrl,
                    r_cupon(i).val_nom1,
                    r_cupon(i).val_nom2,
                    r_cupon(i).val_ape1,
                    r_cupon(i).val_ape2,
                    r_cupon(i).oid_soli_cabe,
                    r_cupon(i).val_nume_soli,
                    r_cupon(i).fec_fact,
                    r_cupon(i).val_tota_paga_loca,
                    r_cupon(i).oid_regi,
                    r_cupon(i).cod_regi,
                    r_cupon(i).oid_zona,
                    r_cupon(i).cod_zona,
                    r_cupon(i).oid_terr,
                    r_cupon(i).cod_terr,
                    NULL,
                    l_saldoCupon2,
                    l_saldoPeriodo,
                    l_saldoTotal,
                    l_tipoSaldoCupon,
                    2, -- Segundo cupon para la consultora
                    EMPTY_CLOB
                    );

                    l_correlativo := l_correlativo + 1;

                END IF;

            END LOOP;

        END IF;

        EXIT WHEN c_cupones%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_cupones;

END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_CUPON_MATRI(p_codigoPais VARCHAR2,
                                   p_codigoPeriodo VARCHAR2,
                                   p_fechaFacturacion VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

BEGIN

    IF p_codigoPais = 'VEE' THEN
        IMP_PR_GENER_CUPON_MATRI_VEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        IMP_PR_GENER_ARCHI_CUPON_VEE(p_codigoPais, p_nombreArchivo, p_directorio);
    ELSIF p_codigoPais = 'VEL' THEN
        IMP_PR_GENER_CUPON_MATRI_VEL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        IMP_PR_GENER_ARCHI_CUPON_VEL(p_codigoPais, p_nombreArchivo, p_directorio);
    ELSIF p_codigoPais = 'PAL' THEN
        IMP_PR_GENER_CUPON_MATRI_PAL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        IMP_PR_GENER_ARCHI_CUPON_PAL(p_codigoPais, p_nombreArchivo, p_directorio);
    ELSE
        IMP_PR_GENER_CUPON_MATRI_VEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        IMP_PR_GENER_ARCHI_CUPON_VEE(p_codigoPais, p_nombreArchivo, p_directorio);
    END IF;

END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_CUPON_MATRI_Z(p_oidzona NUMBER) IS

BEGIN

    return;
    /*IF p_codigoPais = 'VEE' THEN
        IMP_PR_GENER_CUPON_MATRI_VEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        IMP_PR_GENER_ARCHI_CUPON_VEE(p_codigoPais, p_nombreArchivo, p_directorio);
    ELSIF p_codigoPais = 'VEL' THEN
        IMP_PR_GENER_CUPON_MATRI_VEL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        IMP_PR_GENER_ARCHI_CUPON_VEL(p_codigoPais, p_nombreArchivo, p_directorio);
    ELSIF p_codigoPais = 'PAL' THEN
        IMP_PR_GENER_CUPON_MATRI_PAL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        IMP_PR_GENER_ARCHI_CUPON_PAL(p_codigoPais, p_nombreArchivo, p_directorio);
    ELSE
        IMP_PR_GENER_CUPON_MATRI_VEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        IMP_PR_GENER_ARCHI_CUPON_VEE(p_codigoPais, p_nombreArchivo, p_directorio);
    END IF;*/

END;
/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_INICI_ARCHI_CUPON(p_codigoPais VARCHAR2) RETURN VARCHAR2 IS

l_inicioArchivo VARCHAR2(100);

BEGIN
    IF (p_codigoPais = 'VEE' OR p_codigoPais = 'VEL') THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66)  || CHR(27)  || CHR(67)  || CHR(68)  || CHR(13)  || CHR(10)  || CHR(27)  || CHR(48);
    ELSIF p_codigoPais = 'PAL' THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSE
        l_inicioArchivo := '';
    END IF;

    RETURN l_inicioArchivo;
END;
/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_FIN_ARCHI_CUPON(p_codigoPais VARCHAR2) RETURN VARCHAR2 IS

l_finArchivo VARCHAR2(100);

BEGIN
    IF (p_codigoPais = 'VEE' OR p_codigoPais = 'VEL') THEN
        l_finArchivo := CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF p_codigoPais = 'PAL' THEN
        l_finArchivo := CHR(12) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSE
        l_finArchivo := '';
    END IF;

    RETURN l_finArchivo;
END;

/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_CUPON2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100);
l_finArchivo    VARCHAR2(100);
l_contador      NUMBER := 0;
l_total         NUMBER := 0;

CURSOR c_documentos IS
SELECT VAL_BUFF
FROM Imp_Paque_Docum_Bolet_Matri
--WHERE COD_PAIS = p_codigoPais
ORDER BY COR_bole;

BEGIN

    l_inicioArchivo := IMP_FN_INICI_ARCHI_CUPON(p_codigoPais);
    l_finArchivo := IMP_FN_FIN_ARCHI_CUPON(p_codigoPais);

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    -- Iteramos sobre el cursor
    OPEN c_documentos;
    LOOP
        FETCH c_documentos INTO t_clob;
        EXIT WHEN c_documentos%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12)), TRUE);

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_documentos;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_FACTU2: '||substr(SQLERRM,1,250));

END;


/**************************************************************************
Descripcion         : Genera el documento del cupon matricial en el formato
                      de Venezuela Esika.
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_CUPON_MATRI_VEE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_cupones IS
SELECT COR_CUPO_MATR,
       COD_PAIS,
       COD_CLIE,
       COD_DIGI_CTRL,
       VAL_NOM1,
       VAL_NOM2,
       VAL_APE1,
       VAL_APE2,
       OID_SOLI_CABE,
       VAL_NUME_SOLI,
       FEC_FACT,
       VAL_TOTA_PAGA_LOCA,
       COD_REGI,
       COD_ZONA,
       COD_TERR,
       VAL_SALD,
       VAL_SALD_PERI,
       VAL_SALD_TOTA,
       COD_TIPO_SALD,
       NUM_CUPO,
       FEC_VENC
FROM IMP_CUPON_MATRI
ORDER BY COR_CUPO_MATR;

TYPE cuponrecord IS RECORD (
    cor_cupo_matr       imp_cupon_matri.cor_cupo_matr%TYPE,
    cod_pais            imp_cupon_matri.cod_pais%TYPE,
    cod_clie            imp_cupon_matri.cod_clie%TYPE,
    cod_digi_ctrl       imp_cupon_matri.cod_digi_ctrl%TYPE,
    val_nom1            imp_cupon_matri.val_nom1%TYPE,
    val_nom2            imp_cupon_matri.val_nom2%TYPE,
    val_ape1            imp_cupon_matri.val_ape1%TYPE,
    val_ape2            imp_cupon_matri.val_ape2%TYPE,
    oid_soli_cabe       imp_cupon_matri.oid_soli_cabe%TYPE,
    val_nume_soli       imp_cupon_matri.val_nume_soli%TYPE,
    fec_fact            imp_cupon_matri.fec_fact%TYPE,
    val_tota_paga_loca  imp_cupon_matri.val_tota_paga_loca%TYPE,
    cod_regi            imp_cupon_matri.cod_regi%TYPE,
    cod_zona            imp_cupon_matri.cod_zona%TYPE,
    cod_terr            imp_cupon_matri.cod_terr%TYPE,
    val_sald            imp_cupon_matri.val_sald%TYPE,
    val_sald_peri       imp_cupon_matri.val_sald_peri%TYPE,
    val_sald_tota       imp_cupon_matri.val_sald_tota%TYPE,
    cod_tipo_sald       imp_cupon_matri.cod_tipo_sald%TYPE,
    num_cupo            imp_cupon_matri.num_cupo%TYPE,
    fec_venc            imp_cupon_matri.fec_venc%TYPE
);

TYPE cupontype IS TABLE OF cuponrecord;
r_cupon    cupontype;

l_saldoCupon                NUMBER(12,2) := 0.00;
l_textoActual               VARCHAR2(1000) := '';
vcodsecc                    VARCHAR2(1000) := '';
l_inicioNegrita             VARCHAR2(10) := CHR(27) || CHR(69);
l_finNegrita                VARCHAR2(10) := CHR(27) || CHR(70);
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);
l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_cupones;
    LOOP
        FETCH c_cupones BULK COLLECT
        INTO r_cupon LIMIT w_filas;

        IF  r_cupon.COUNT > 0 THEN
            FOR i IN r_cupon.FIRST..r_cupon.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_CUPON_MATRI
                WHERE COR_CUPO_MATR = r_cupon(i).cor_cupo_matr
                FOR UPDATE;

                -- Creamos el texto del cupon
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Saldo a pagar
                l_saldoCupon := 0;
                -- Si se trata del primer cupon
                IF r_cupon(i).num_cupo = 1 THEN
                    -- Evaluamos el tipo de saldo a mostrar
                    IF r_cupon(i).cod_tipo_sald = SALDO_VENCIDO THEN
                        -- Saldo Vencido
                        l_saldoCupon := r_cupon(i).val_sald;
                    ELSIF r_cupon(i).cod_tipo_sald = SALDO_PERIODO THEN
                        -- Saldo del Periodo
                        l_saldoCupon := r_cupon(i).val_sald_peri;
                    ELSIF r_cupon(i).cod_tipo_sald = SALDO_TOTAL THEN
                        -- Deuda Total
                        l_saldoCupon := r_cupon(i).val_sald_tota;
                    ELSIF r_cupon(i).cod_tipo_sald = MONTO_PEDIDO THEN
                        -- Valor del pedido
                        l_saldoCupon := r_cupon(i).val_tota_paga_loca;
                    ELSE
                        -- Valor por defecto
                        l_saldoCupon := r_cupon(i).val_sald;
                    END IF;
                ELSE
                    -- Si es el segundo cupon, el saldo es igual al saldo vencido
                    -- menos el monto del pedido (que es considerado en el primer cupon)
                    l_saldoCupon := r_cupon(i).val_sald - r_cupon(i).val_tota_paga_loca;
                END IF;

                -- Revisamos que el valor calculado sea siempre mayor a cero
                IF l_saldoCupon < 0 THEN
                    l_saldoCupon := 0;
                END IF;

                l_textoSaldoNumerico := IMP_FN_DIVID_TEXTO(TRIM(TO_CHAR(l_saldoCupon, '9999999990.00')));
                l_textoActual := LPAD(l_inicioNegrita || l_textoSaldoNumerico, 82);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

                l_textoActual := LPAD(l_textoSaldoNumerico, 80);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente
                l_textoActual := LPAD(' ', 61) || IMP_FN_DIVID_TEXTO(r_cupon(i).cod_clie || r_cupon(i).cod_digi_ctrl);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

                l_textoActual := LPAD(' ', 61) || IMP_FN_DIVID_TEXTO(r_cupon(i).cod_clie || r_cupon(i).cod_digi_ctrl) || l_finNegrita;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Periodo
                l_textoActual := LPAD(IMP_FN_DIVID_TEXTO(SUBSTR(p_codigoPeriodo, 1, 4)), 15) || LPAD(IMP_FN_DIVID_TEXTO(SUBSTR(p_codigoPeriodo, 5, 2)), 6);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

                select max(cod_secc) into vcodsecc from zon_secci a, zon_terri_admin b, zon_terri c
                where a.oid_secc=b.zscc_oid_secc and b.terr_oid_terr=c.oid_terr and c.cod_terr=r_cupon(i).cod_terr and c.ind_borr=0 and b.ind_borr=0;

                -- Zona / Territorio
                l_textoActual := LPAD(' ', 6) || RPAD(l_inicioNegrita || r_cupon(i).cod_zona || '-' || vcodsecc || '-' || r_cupon(i).cod_terr || l_finNegrita, 22);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

                -- Fecha
                l_textoActual := TO_CHAR(r_cupon(i).fec_fact, 'dd/mm/yy');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del Cliente
                l_nombreCompleto := TRIM(r_cupon(i).val_ape1 || ' ' || r_cupon(i).val_ape2 || ' ' || r_cupon(i).val_nom1 || ' ' || r_cupon(i).val_nom2);
                l_textoActual := LPAD(' ', 10) || l_inicioNegrita || l_nombreCompleto || l_finNegrita;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Numero de Pedido
                l_textoActual := LPAD(' ', 27) || 'Factura Nro. : ' || r_cupon(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Monto en letras
                IF l_saldoCupon > 0 THEN
                    l_textoActual := LPAD(' ', 7) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_saldoCupon))) || ' CON ' || TO_CHAR((l_saldoCupon - TRUNC(l_saldoCupon)) * 100) || '/100 Bs.F. ';
                ELSE
                    l_textoActual := LPAD(' ', 7) || 'CERO CON 0/100 Bs.F. ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Ultimo dia de pago
                l_textoActual := LPAD(' ', 54) || 'Pague antes de: ' || TO_CHAR(r_cupon(i).fec_venc, 'DD-MM-YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Glosa adicional para los cupones adicionales
                IF r_cupon(i).num_cupo = 2 THEN
                    l_textoActual := LPAD(' ', 30) || 'CUALQUIER DUDA SOBRE ESTA DEUDA CONSULTAR CON SU GZ';
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;
            END LOOP;

        END IF;

        EXIT WHEN c_cupones%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_cupones;

END;

/**************************************************************************
Descripcion         : Genera el documento del cupon matricial en el formato
                      de Venezuela LBEL.
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_CUPON_MATRI_VEL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS
CURSOR c_cupones IS
SELECT COR_CUPO_MATR,
       COD_PAIS,
       OID_CLIE,
       COD_CLIE,
       COD_DIGI_CTRL,
       VAL_NOM1,
       VAL_NOM2,
       VAL_APE1,
       VAL_APE2,
       OID_SOLI_CABE,
       VAL_NUME_SOLI,
       FEC_FACT,
       VAL_TOTA_PAGA_LOCA,
       COD_REGI,
       COD_ZONA,
       COD_TERR,
       VAL_SALD,
       VAL_SALD_PERI,
       VAL_SALD_TOTA,
       COD_TIPO_SALD,
       NUM_CUPO,
       FEC_VENC
FROM IMP_CUPON_MATRI
ORDER BY COR_CUPO_MATR;

TYPE cuponrecord IS RECORD (
    cor_cupo_matr       imp_cupon_matri.cor_cupo_matr%TYPE,
    cod_pais            imp_cupon_matri.cod_pais%TYPE,
    oid_clie            imp_cupon_matri.oid_clie%TYPE,
    cod_clie            imp_cupon_matri.cod_clie%TYPE,
    cod_digi_ctrl       imp_cupon_matri.cod_digi_ctrl%TYPE,
    val_nom1            imp_cupon_matri.val_nom1%TYPE,
    val_nom2            imp_cupon_matri.val_nom2%TYPE,
    val_ape1            imp_cupon_matri.val_ape1%TYPE,
    val_ape2            imp_cupon_matri.val_ape2%TYPE,
    oid_soli_cabe       imp_cupon_matri.oid_soli_cabe%TYPE,
    val_nume_soli       imp_cupon_matri.val_nume_soli%TYPE,
    fec_fact            imp_cupon_matri.fec_fact%TYPE,
    val_tota_paga_loca  imp_cupon_matri.val_tota_paga_loca%TYPE,
    cod_regi            imp_cupon_matri.cod_regi%TYPE,
    cod_zona            imp_cupon_matri.cod_zona%TYPE,
    cod_terr            imp_cupon_matri.cod_terr%TYPE,
    val_sald            imp_cupon_matri.val_sald%TYPE,
    val_sald_peri       imp_cupon_matri.val_sald_peri%TYPE,
    val_sald_tota       imp_cupon_matri.val_sald_tota%TYPE,
    cod_tipo_sald       imp_cupon_matri.cod_tipo_sald%TYPE,
    num_cupo            imp_cupon_matri.num_cupo%TYPE,
    fec_venc            imp_cupon_matri.fec_venc%TYPE
);

TYPE cupontype IS TABLE OF cuponrecord;
r_cupon    cupontype;

l_oidPais                   NUMBER;
l_oidPeriodo                NUMBER;
l_oidCanal                  NUMBER;
l_oidMarca                  NUMBER;
l_saldoCupon                NUMBER(12, 2) := 0.00;
l_textoActual               VARCHAR2(1000) := '';
vcodsecc                    VARCHAR2(1000) := '';
l_inicioNegrita             VARCHAR2(10) := CHR(27) || CHR(69);
l_finNegrita                VARCHAR2(10) := CHR(27) || CHR(70);
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);
l_CLOB                      CLOB;

lv_sinsaldo VARCHAR2(100) := nvl(IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS','cuponSinSaldo'),'N');


BEGIN

    -- Abrimos el cursor principal
    OPEN c_cupones;
    LOOP
        FETCH c_cupones BULK COLLECT
        INTO r_cupon LIMIT w_filas;

        IF  r_cupon.COUNT > 0 THEN
            FOR i IN r_cupon.FIRST..r_cupon.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_CUPON_MATRI
                WHERE COR_CUPO_MATR = r_cupon(i).cor_cupo_matr
                FOR UPDATE;

                -- Creamos el texto del cupon
                l_textoActual := case when r_cupon(i).num_cupo='1' then ' 1/2' else ' 2/2' end;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Saldo a pagar
                l_saldoCupon := 0;
                -- Si se trata del primer cupon
                IF r_cupon(i).num_cupo = 1 THEN
                    -- Evaluamos el tipo de saldo a mostrar
                    IF r_cupon(i).cod_tipo_sald = SALDO_VENCIDO THEN
                        -- Saldo Vencido
                        l_saldoCupon := r_cupon(i).val_sald;
                    ELSIF r_cupon(i).cod_tipo_sald = SALDO_PERIODO THEN
                        -- Saldo del Periodo
                        l_saldoCupon := r_cupon(i).val_sald_peri;
                    ELSIF r_cupon(i).cod_tipo_sald = SALDO_TOTAL THEN
                        -- Deuda Total
                        l_saldoCupon := r_cupon(i).val_sald_tota;
                    ELSIF r_cupon(i).cod_tipo_sald = MONTO_PEDIDO THEN
                        -- Valor del pedido
                        l_saldoCupon := r_cupon(i).val_tota_paga_loca;
                        if nvl(r_cupon(i).val_sald,0)<r_cupon(i).val_tota_paga_loca then
                          l_saldoCupon:=r_cupon(i).val_sald;
                        end if;
                    ELSE
                        -- Valor por defecto
                        l_saldoCupon := r_cupon(i).val_sald;
                    END IF;
                ELSE
                    -- Si es el segundo cupon, el saldo es igual al saldo vencido
                    -- menos el monto del pedido (que es considerado en el primer cupon)
                    l_saldoCupon := r_cupon(i).val_sald;--r_cupon(i).val_sald - r_cupon(i).val_tota_paga_loca;
                END IF;

                -- Revisamos que el valor calculado sea siempre mayor a cero
                IF l_saldoCupon < 0 THEN
                    l_saldoCupon := 0;
                END IF;

                l_textoSaldoNumerico := IMP_FN_DIVID_TEXTO(TRIM(TO_CHAR(l_saldoCupon, '9999999990.00')));
                if lv_sinsaldo='S' then
                   l_textoSaldoNumerico := ' ';
                end if;
                
                l_textoActual := LPAD(l_inicioNegrita || l_textoSaldoNumerico, 82);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

                l_textoActual := LPAD(l_textoSaldoNumerico, 80);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente
                l_textoActual := LPAD(' ', 61) || IMP_FN_DIVID_TEXTO(r_cupon(i).cod_clie || r_cupon(i).cod_digi_ctrl);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

                l_textoActual := LPAD(' ', 61) || IMP_FN_DIVID_TEXTO(r_cupon(i).cod_clie || r_cupon(i).cod_digi_ctrl) || l_finNegrita;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Periodo
                l_textoActual := LPAD(IMP_FN_DIVID_TEXTO(SUBSTR(p_codigoPeriodo, 1, 4)), 15) || LPAD(IMP_FN_DIVID_TEXTO(SUBSTR(p_codigoPeriodo, 5, 2)), 6);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

                select max(cod_secc) into vcodsecc from zon_secci a, zon_terri_admin b, zon_terri c
                where a.oid_secc=b.zscc_oid_secc and b.terr_oid_terr=c.oid_terr and c.cod_terr=r_cupon(i).cod_terr and c.ind_borr=0 and b.ind_borr=0;

                -- Zona / Territorio
                l_textoActual := LPAD(' ', 6) || RPAD(l_inicioNegrita || r_cupon(i).cod_zona || '-' || vcodsecc || '-' || r_cupon(i).cod_terr || l_finNegrita, 22);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

                -- Fecha
                l_textoActual := TO_CHAR(r_cupon(i).fec_fact, 'dd/mm/yy');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del Cliente
                l_nombreCompleto := TRIM(r_cupon(i).val_ape1 || ' ' || r_cupon(i).val_ape2 || ' ' || r_cupon(i).val_nom1 || ' ' || r_cupon(i).val_nom2);
                l_textoActual := LPAD(' ', 20) || l_inicioNegrita || l_nombreCompleto || l_finNegrita;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Numero de Pedido
                l_textoActual := LPAD(' ', 37) || 'Factura : ' || r_cupon(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Monto en letras
                IF l_saldoCupon > 0 THEN
                   if lv_sinsaldo<>'S' then
                    l_textoActual := LPAD(' ', 7) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_saldoCupon))) || ' CON ' || TO_CHAR((l_saldoCupon - TRUNC(l_saldoCupon)) * 100) || '/100 Bs. ';
                   else
                       l_textoActual := ' ';
                   
                   end if;
                ELSE
                    l_textoActual := LPAD(' ', 7) || 'CERO CON 0/100 Bs. ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Ultimo dia de pago
                IF r_cupon(i).num_cupo <> 2 THEN
                l_textoActual := LPAD(' ', 54) || 'Pague antes de: ' || TO_CHAR(r_cupon(i).fec_venc, 'DD-MM-YYYY');
                else
                l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Glosa adicional para los cupones adicionales
                IF r_cupon(i).num_cupo = 2 THEN
                    l_textoActual := LPAD(' ', 30) || 'TU 2DO CUPON VENCE 2 DIAS ANTES DE CONFERENCIA';
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;
            END LOOP;

        END IF;

        EXIT WHEN c_cupones%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_cupones;

END;

/**************************************************************************
Descripcion         : Genera el documento del cupon matricial en el formato
                      de Panama LBEL.
Fecha Creación      : 02/09/2009
Fecha Modificacion  : 02/09/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_CUPON_MATRI_PAL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS
CURSOR c_cupones IS
SELECT COR_CUPO_MATR,
       COD_PAIS,
       OID_CLIE,
       COD_CLIE,
       COD_DIGI_CTRL,
       VAL_NOM1,
       VAL_NOM2,
       VAL_APE1,
       VAL_APE2,
       OID_SOLI_CABE,
       VAL_NUME_SOLI,
       FEC_FACT,
       VAL_TOTA_PAGA_LOCA,
       COD_REGI,
       COD_ZONA,
       COD_TERR,
       VAL_SALD,
       FEC_VENC
FROM IMP_CUPON_MATRI
ORDER BY COR_CUPO_MATR;

TYPE cuponrecord IS RECORD (
    cor_cupo_matr       imp_cupon_matri.cor_cupo_matr%TYPE,
    cod_pais            imp_cupon_matri.cod_pais%TYPE,
    oid_clie            imp_cupon_matri.oid_clie%TYPE,
    cod_clie            imp_cupon_matri.cod_clie%TYPE,
    cod_digi_ctrl       imp_cupon_matri.cod_digi_ctrl%TYPE,
    val_nom1            imp_cupon_matri.val_nom1%TYPE,
    val_nom2            imp_cupon_matri.val_nom2%TYPE,
    val_ape1            imp_cupon_matri.val_ape1%TYPE,
    val_ape2            imp_cupon_matri.val_ape2%TYPE,
    oid_soli_cabe       imp_cupon_matri.oid_soli_cabe%TYPE,
    val_nume_soli       imp_cupon_matri.val_nume_soli%TYPE,
    fec_fact            imp_cupon_matri.fec_fact%TYPE,
    val_tota_paga_loca  imp_cupon_matri.val_tota_paga_loca%TYPE,
    cod_regi            imp_cupon_matri.cod_regi%TYPE,
    cod_zona            imp_cupon_matri.cod_zona%TYPE,
    cod_terr            imp_cupon_matri.cod_terr%TYPE,
    val_sald            imp_cupon_matri.val_sald%TYPE,
    fec_venc            imp_cupon_matri.fec_venc%TYPE
);

TYPE cupontype IS TABLE OF cuponrecord;
r_cupon    cupontype;

l_numeroDocumento           MAE_CLIEN_IDENT.NUM_DOCU_IDEN%TYPE;
l_saldoCupon                NUMBER(12, 2) := 0.00;
l_textoActual               VARCHAR2(1000) := '';
l_inicioNegrita             VARCHAR2(10) := CHR(27) || CHR(69);
l_finNegrita                VARCHAR2(10) := CHR(27) || CHR(70);
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);
l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_cupones;
    LOOP
        FETCH c_cupones BULK COLLECT
        INTO r_cupon LIMIT w_filas;

        IF  r_cupon.COUNT > 0 THEN
            FOR i IN r_cupon.FIRST..r_cupon.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_CUPON_MATRI
                WHERE COR_CUPO_MATR = r_cupon(i).cor_cupo_matr
                FOR UPDATE;

                -- Creamos el texto del cupon
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha de vencimiento y monto a pagar
                l_textoActual := LPAD(' ', 17) || IMP_FN_DIVID_TEXTO(to_char(r_cupon(i).fec_venc, 'dd'));
                l_textoActual := l_textoActual || LPAD(' ', 6)  || IMP_FN_DIVID_TEXTO(to_char(r_cupon(i).fec_venc, 'mm'));
                l_textoActual := l_textoActual || LPAD(' ', 6)  || IMP_FN_DIVID_TEXTO(to_char(r_cupon(i).fec_venc, 'yyyy'));
                l_textoActual := l_textoActual || LPAD(' ', 24) || IMP_FN_DIVID_TEXTO(TRIM(TO_CHAR(r_cupon(i).val_sald, '9999999990.00')));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente
                l_textoActual := LPAD(' ', 23) || IMP_FN_DIVID_TEXTO(r_cupon(i).cod_clie);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del Cliente
                l_nombreCompleto := TRIM(r_cupon(i).val_ape1 || ' ' || r_cupon(i).val_ape2 || ' ' || r_cupon(i).val_nom1 || ' ' || r_cupon(i).val_nom2);
                l_textoActual := LPAD(' ', 23)|| l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Documento de identidad
                BEGIN
                    SELECT MCI.NUM_DOCU_IDEN
                    INTO l_numeroDocumento
                    FROM MAE_CLIEN_IDENT MCI
                    WHERE MCI.CLIE_OID_CLIE = r_cupon(i).oid_clie
                    AND MCI.VAL_IDEN_DOCU_PRIN = 1
                    AND ROWNUM = 1;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    l_numeroDocumento := ' ';
                END;

                l_textoActual := LPAD(' ', 23)|| l_numeroDocumento;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

            END LOOP;

        END IF;

        EXIT WHEN c_cupones%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_cupones;

END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_CUPON_VEE(p_codigoPais VARCHAR2,
                                       p_nombreArchivo VARCHAR2,
                                       p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100) := CHR(18) || CHR(27) || CHR(67) || CHR(66)  || CHR(27)  || CHR(67)  || CHR(68)  || CHR(13)  || CHR(10)  || CHR(27)  || CHR(48);
l_finArchivo    VARCHAR2(100) := CHR(27) || CHR(67) || CHR(66) || CHR(18);
l_contador      NUMBER := 0;
l_total         NUMBER := 0;

CURSOR c_cupones IS
SELECT VAL_BUFF
FROM IMP_CUPON_MATRI
WHERE COD_PAIS = p_codigoPais
ORDER BY COR_CUPO_MATR;

BEGIN

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    SELECT COUNT(1)
    INTO l_total
    FROM IMP_CUPON_MATRI;

    -- Iteramos sobre el cursor
    OPEN c_cupones;
    LOOP
        FETCH c_cupones INTO t_clob;
        EXIT WHEN c_cupones%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        IF MOD(l_contador, 2) = 0 THEN
            -- Salto de pagina
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12) || CHR(13) || CHR(13) || CHR(10)), TRUE);
        ELSE
            IF l_contador != l_total THEN
                -- Saltos de linea
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
            END IF;
        END IF;
    END LOOP;

    -- Para el caso en que el total es un valor impar
    IF MOD(l_contador, 2) != 0 THEN
        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12) || CHR(13)), TRUE);
    END IF;


    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_cupones;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_CUPON_VEE: '||substr(SQLERRM,1,250));

END;


/**************************************************************************
Descripcion         :
Fecha Creación      : 05/05/2009
Fecha Modificacion  : 05/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_CUPON_VEL(p_codigoPais VARCHAR2,
                                       p_nombreArchivo VARCHAR2,
                                       p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100) := CHR(18) || CHR(27) || CHR(67) || CHR(66)  || CHR(27)  || CHR(67)  || CHR(68)  || CHR(13)  || CHR(10)  || CHR(27)  || CHR(48);
l_finArchivo    VARCHAR2(100) := CHR(27) || CHR(67) || CHR(66) || CHR(18);
l_contador      NUMBER := 0;
l_total         NUMBER := 0;

CURSOR c_cupones IS
SELECT VAL_BUFF
FROM IMP_CUPON_MATRI
WHERE COD_PAIS = p_codigoPais
ORDER BY COR_CUPO_MATR;

BEGIN

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    SELECT COUNT(1)
    INTO l_total
    FROM IMP_CUPON_MATRI;

    -- Iteramos sobre el cursor
    OPEN c_cupones;
    LOOP
        FETCH c_cupones INTO t_clob;
        EXIT WHEN c_cupones%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        IF MOD(l_contador, 2) = 0 THEN
            -- Salto de pagina
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12) || CHR(13) || CHR(13) || CHR(10)), TRUE);
        ELSE
            IF l_contador != l_total THEN
                -- Saltos de linea
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
                UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(13) || CHR(10)), TRUE);
            END IF;
        END IF;
    END LOOP;

    -- Para el caso en que el total es un valor impar
    IF MOD(l_contador, 2) != 0 THEN
        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12) || CHR(13)), TRUE);
    END IF;


    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_cupones;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_CUPON_VEL: '||substr(SQLERRM,1,250));

END;


/**************************************************************************
Descripcion         :
Fecha Creación      : 02/09/2009
Fecha Modificacion  : 02/09/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_CUPON_PAL(p_codigoPais VARCHAR2,
                                       p_nombreArchivo VARCHAR2,
                                       p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100) := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
l_finArchivo    VARCHAR2(100) := CHR(12) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
l_contador      NUMBER := 0;
l_total         NUMBER := 0;

CURSOR c_cupones IS
SELECT VAL_BUFF
FROM IMP_CUPON_MATRI
WHERE COD_PAIS = p_codigoPais
ORDER BY COR_CUPO_MATR;

BEGIN

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    SELECT COUNT(1)
    INTO l_total
    FROM IMP_CUPON_MATRI;

    -- Iteramos sobre el cursor
    OPEN c_cupones;
    LOOP
        FETCH c_cupones INTO t_clob;
        EXIT WHEN c_cupones%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_cupones;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_CUPON_VEL: '||substr(SQLERRM,1,250));

END;


FUNCTION IMP_FN_DIVID_TEXTO(p_textoOriginal VARCHAR2,
                            p_separador VARCHAR2 := ' ') RETURN VARCHAR2 IS

l_resultado VARCHAR2(1000) := '';

BEGIN

    IF p_textoOriginal IS NOT NULL AND LENGTH(p_textoOriginal) > 0 THEN

        FOR i IN 1..LENGTH(p_textoOriginal) LOOP

            IF i > 1 THEN
                l_resultado := l_resultado || p_separador || SUBSTR(p_textoOriginal, i, 1);
            ELSE
                l_resultado := SUBSTR(p_textoOriginal, i, 1);
            END IF;

        END LOOP;

        l_resultado := TRIM(l_resultado);

    END IF;

    RETURN l_resultado;

END;


/**************************************************************************
Descripcion         :
Fecha Creación      : 07/05/2009
Fecha Modificacion  : 07/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_NUMER_FACTU(p_oidConsolidado NUMBER) RETURN VARCHAR2 IS

l_resultado VARCHAR2(500) := '';
l_numeroDocumentoLegal NUMBER;

CURSOR c_facturas IS
SELECT CON.NUM_DOCU_LEGA
FROM FAC_DOCUM_CONTA_CABEC CON
WHERE CON.SOCA_OID_SOLI_CABE = p_oidConsolidado;

BEGIN

    OPEN c_facturas;
    LOOP
        FETCH c_facturas INTO l_numeroDocumentoLegal;
        EXIT WHEN c_facturas%NOTFOUND;

        l_resultado := l_resultado || ' ' || l_numeroDocumentoLegal;

    END LOOP;
    CLOSE c_facturas;

    RETURN TRIM(l_resultado);

END;


/**************************************************************************
Descripcion         :
Fecha Creación      : 07/05/2009
Fecha Modificacion  : 07/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_CALCU_SALDO_CUPON(p_oidCliente NUMBER,
                                  p_fechaVencimiento DATE) RETURN NUMBER IS

l_saldo NUMBER;

BEGIN

    SELECT NVL(SUM(MCC.IMP_PEND), 0)
    INTO l_saldo
    FROM CCC_MOVIM_CUENT_CORRI MCC
    WHERE MCC.CLIE_OID_CLIE = p_oidCliente
    AND MCC.IMP_PEND <> 0
    AND MCC.FEC_VENC <= p_fechaVencimiento;

    RETURN l_saldo;

END;

/**************************************************************************
Descripcion         : Obtiene el saldo del periodo para una determinada
                      consultora.
Fecha Creación      : 02/10/2009
Fecha Modificacion  : 02/10/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_CALCU_SALDO_CUPON_PERIO(p_oidCliente NUMBER,
                                        p_oidPeriodo NUMBER,
                                        p_fechaVencimiento DATE) RETURN NUMBER IS

l_saldo NUMBER;

BEGIN

    SELECT NVL(SUM(MCC.IMP_PEND), 0)
    INTO l_saldo
    FROM CCC_MOVIM_CUENT_CORRI MCC
    WHERE MCC.CLIE_OID_CLIE = p_oidCliente
    AND MCC.IMP_PEND <> 0
    AND MCC.PERD_OID_PERI = p_oidPeriodo
    AND MCC.FEC_VENC <= p_fechaVencimiento;

    RETURN l_saldo;

END;

/**************************************************************************
Descripcion         : Obtiene el saldo del periodo para una determinada
                      consultora en base al periodo y fecha de vencimiento
                      tomando en cuenta todos los importes realizados (no
                      los pendientes) anteriores a dicha fecha pero de la
                      campaña indicada.  Adicionalmente se suman importes
                      de campañas anteriores con una ,cuyas fechas  de
                      vencimiento  se encuentren entre las fechas de inicio
                      y fin del periodo siguiente.
Fecha Creación      : 04/11/2009
Fecha Modificacion  : 02/12/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_CALCU_SALDO_CUPON_PERIO(p_oidCliente NUMBER,
                                        p_oidPeriodo NUMBER,
                                        p_fechaVencimiento DATE,
                                        p_fechaVencimientoAnterior DATE) RETURN NUMBER IS

l_saldoPeriodo      NUMBER(12, 2);
l_abonosPeriodo     NUMBER(12, 2);
l_pagosDiferidos    NUMBER(12, 2);

BEGIN

    SELECT NVL(SUM(MCC.IMP_MOVI), 0)
    INTO l_saldoPeriodo
    FROM CCC_MOVIM_CUENT_CORRI MCC
    WHERE MCC.CLIE_OID_CLIE = p_oidCliente
    AND MCC.IMP_MOVI > 0
    AND MCC.PERD_OID_PERI = p_oidPeriodo
    AND MCC.FEC_VENC <= p_fechaVencimiento;

    SELECT NVL(SUM(MCC.IMP_MOVI), 0)
    INTO l_abonosPeriodo
    FROM CCC_MOVIM_CUENT_CORRI MCC
    WHERE MCC.CLIE_OID_CLIE = p_oidCliente
    AND MCC.IMP_MOVI < 0
    AND MCC.PERD_OID_PERI = p_oidPeriodo;

    SELECT NVL(SUM(MCC.IMP_MOVI), 0)
    INTO l_pagosDiferidos
    FROM CCC_MOVIM_CUENT_CORRI MCC
    WHERE MCC.CLIE_OID_CLIE = p_oidCliente
    AND MCC.IMP_MOVI > 0
    AND MCC.PERD_OID_PERI < p_oidPeriodo
    AND MCC.FEC_VENC <= p_fechaVencimiento
    AND MCC.FEC_VENC > p_fechaVencimientoAnterior;

    RETURN l_saldoPeriodo + l_pagosDiferidos + l_abonosPeriodo;

END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 07/05/2009
Fecha Modificacion  : 07/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_FACTU_MATRI(p_codigoPais VARCHAR2,
                                   p_codigoPeriodo VARCHAR2,
                                   p_fechaFacturacion VARCHAR2,
                                   p_codigoTipoDocumento VARCHAR2,
                                   p_indicadorEnvioLarissa NUMBER := 0,
                                   p_indicadorEnvioUltimoLote VARCHAR2 := 'N') IS

CURSOR c_facturas(oidPeriodo NUMBER,
                  oidPeriodoSgte NUMBER,
                  oidActividad NUMBER,
                  numeroLoteFacturacion NUMBER) IS
SELECT SP.OID_PAIS,
       SP.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_IMPO_REDO_LOCA VAL_IMPO_REDO_CONS,
       PTI.OID_TASA_IMPU,
       PTI.VAL_INDI_IMPU,
       PTI.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       CAB.NUM_DOCU_LEGA,
       REG.OID_REGI,
       REG.COD_REGI,
       ZON.OID_ZONA,
       ZON.COD_ZONA,
       SEC.OID_SECC,
       SEC.COD_SECC,
       TER.OID_TERR,
       TER.COD_TERR,
       CRO.FEC_INIC,
       FTD.OID_TIPO_DOCU,
       FTD.COD_TIPO_DOCU
FROM FAC_DOCUM_CONTA_CABEC CAB,
     FAC_TIPO_DOCUM FTD,
     MAE_CLIEN MC,
     PED_SOLIC_CABEC CON,
     PED_TASA_IMPUE PTI,
     ZON_REGIO REG,
     ZON_ZONA ZON,
     ZON_SECCI SEC,
     ZON_TERRI TER,
     SEG_PAIS SP,
     CRA_CRONO CRO
WHERE SP.OID_PAIS = MC.PAIS_OID_PAIS
AND MC.OID_CLIE = CON.CLIE_OID_CLIE
AND CON.OID_SOLI_CABE = CAB.SOCA_OID_SOLI_CABE
AND CON.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
AND CAB.TIDO_OID_TIPO_DOCU = FTD.OID_TIPO_DOCU
AND CAB.ZORG_OID_REGI = REG.OID_REGI
AND CAB.ZZON_OID_ZONA = ZON.OID_ZONA
AND CAB.ZSCC_OID_SECC = SEC.OID_SECC
AND CAB.TERR_OID_TERR = TER.OID_TERR
AND CAB.ZZON_OID_ZONA = CRO.ZZON_OID_ZONA
AND CRO.PERD_OID_PERI = oidPeriodoSgte
AND CRO.CACT_OID_ACTI = oidActividad
AND CAB.PERD_OID_PERI = oidPeriodo
AND SP.COD_PAIS = p_codigoPais
AND CAB.FEC_FACT = TO_DATE(p_fechaFacturacion, 'DD/MM/YYYY')
AND CON.IND_INTE_LARI_GENE = p_indicadorEnvioLarissa
AND (numeroLoteFacturacion IS NULL OR CON.NUM_LOTE_FACT = numeroLoteFacturacion)
AND FTD.COD_TIPO_DOCU = p_codigoTipoDocumento
AND EXISTS (
    SELECT NULL
    FROM FAC_DOCUM_CONTA_LINEA DET,
         PED_SOLIC_POSIC PSP,
         PRE_OFERT_DETAL POD
    WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
    AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
    AND DET.NUM_UNID_ATEN > 0
    AND DET.DCCA_OID_CABE = CAB.OID_CABE
    AND NOT EXISTS (
        SELECT NULL
        FROM FAC_TIPO_OFERT_EXCLU TOE
        WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
    )
)
ORDER BY TO_NUMBER(CAB.VAL_EJER_DOCU_INTE),
         CAB.NUM_DOCU_CONT_INTE;


TYPE facturarecord IS RECORD (
    oid_pais            seg_pais.oid_pais%TYPE,
    cod_pais            seg_pais.cod_pais%TYPE,
    oid_clie            mae_clien.oid_clie%TYPE,
    cod_clie            mae_clien.cod_clie%TYPE,
    cod_digi_ctrl       mae_clien.cod_digi_ctrl%TYPE,
    val_nom1            mae_clien.val_nom1%TYPE,
    val_nom2            mae_clien.val_nom2%TYPE,
    val_ape1            mae_clien.val_ape1%TYPE,
    val_ape2            mae_clien.val_ape2%TYPE,
    oid_soli_cabe       ped_solic_cabec.oid_soli_cabe%TYPE,
    val_nume_soli       ped_solic_cabec.val_nume_soli%TYPE,
    fec_fact            ped_solic_cabec.fec_fact%TYPE,
    val_impo_redo_cons  ped_solic_cabec.val_impo_redo_loca%TYPE,
    oid_tasa_impu       ped_tasa_impue.oid_tasa_impu%TYPE,
    val_indi_impu       ped_tasa_impue.val_indi_impu%TYPE,
    val_tasa_impu       ped_tasa_impue.val_tasa_impu%TYPE,
    oid_cabe            fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte  fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    num_docu_lega       fac_docum_conta_cabec.num_docu_lega%TYPE,
    oid_regi            zon_regio.oid_regi%TYPE,
    cod_regi            zon_regio.cod_regi%TYPE,
    oid_zona            zon_zona.oid_zona%TYPE,
    cod_zona            zon_zona.cod_zona%TYPE,
    oid_secc            zon_secci.oid_secc%TYPE,
    cod_secc            zon_secci.cod_secc%TYPE,
    oid_terr            zon_terri.oid_terr%TYPE,
    cod_terr            zon_terri.cod_terr%TYPE,
    fec_venc            cra_crono.fec_inic%TYPE,
    oid_tipo_docu       fac_tipo_docum.oid_tipo_docu%TYPE,
    cod_tipo_docu       fac_tipo_docum.cod_tipo_docu%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

-- Cursor para determinar el numero de paginas
CURSOR c_paginas IS
SELECT COR_DOCU_CONT_MATR,
       NUM_PAGI,
       NUM_TOTA_PAGI
FROM (
SELECT X.COR_DOCU_CONT_MATR,
       X.VAL_NUME_SOLI,
       ROW_NUMBER() OVER (PARTITION BY X.VAL_NUME_SOLI ORDER BY X.NUM_DOCU_CONT_INTE) NUM_PAGI,
       (SELECT COUNT(*) FROM IMP_DOCUM_CONTA_MATRI Y WHERE Y.VAL_NUME_SOLI = X.VAL_NUME_SOLI) NUM_TOTA_PAGI
FROM IMP_DOCUM_CONTA_MATRI X
ORDER BY X.COR_DOCU_CONT_MATR
)
WHERE NUM_TOTA_PAGI > 1;

TYPE t_cor_docu_cont_matr   IS TABLE OF  imp_docum_conta_matri.cor_docu_cont_matr%TYPE;
TYPE t_num_pagi             IS TABLE OF  imp_docum_conta_matri.num_pagi%TYPE;
TYPE t_num_tota_pagi        IS TABLE OF  imp_docum_conta_matri.num_tota_pagi%TYPE;

r_cor_docu_cont_matr    t_cor_docu_cont_matr;
r_num_pagi              t_num_pagi;
r_num_tota_pagi         t_num_tota_pagi;

-- Variables locales
l_oidPais               NUMBER;
l_oidPeriodo            NUMBER;
l_oidCanal              NUMBER;
l_oidMarca              NUMBER;
l_correlativo           NUMBER := 1;
l_oidPeriodoSgte        NUMBER;
l_codPeriodoSgte        VARCHAR2(6);
l_oidActividad          NUMBER;
l_fechaVencimiento      DATE;
l_numeroLoteFacturacion NUMBER;

BEGIN

    -- Obtenemos el OID del periodo
    l_oidPais    := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_codigoPais);
    l_oidCanal   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CANAL(CODIGO_CANAL);
    l_oidMarca   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(CODIGO_MARCA);
    l_oidPeriodo := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CRA_PERIO(p_codigoPeriodo, l_oidMarca, l_oidCanal);

    -- Obtenemos el OID del periodo siguiente
    l_codPeriodoSgte := GEN_FN_CALCU_PERIO(p_codigoPeriodo, 1);
    l_oidPeriodoSgte := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CRA_PERIO(l_codPeriodoSgte, l_oidMarca, l_oidCanal);

    -- Obtenemos el OID de la actividad
    SELECT ACT.OID_ACTI
    INTO l_oidActividad
    FROM CRA_ACTIV ACT
    WHERE ACT.PAIS_OID_PAIS = l_oidPais
    AND ACT.MARC_OID_MARC = l_oidMarca
    AND ACT.CANA_OID_CANA = l_oidCanal
    AND ACT.COD_ACTI = 'CV'; -- Cupon de Vencimiento

    -- Obtenemos el valor del ultimo numero de lote de facturacion
    IF (p_indicadorEnvioUltimoLote = '1' OR p_indicadorEnvioUltimoLote = 'S') THEN
        BEGIN
          SELECT MAX(con.num_lote_fact)
          INTO l_numeroLoteFacturacion
          FROM ped_solic_cabec con,
               int_lar_tipo_solici_pedido_dis tspd
         WHERE con.perd_oid_peri = l_oidPeriodo
           AND con.fec_fact = to_date(p_fechaFacturacion, 'dd/mm/yyyy')
           AND con.ind_inte_lari_gene = p_indicadorEnvioLarissa
           AND con.ind_ts_no_conso = 0
           AND (con.ind_pedi_prue = 0 OR con.ind_pedi_prue IS NULL)
           AND con.tspa_oid_tipo_soli_pais = tspd.tspa_oid_tipo_soli_pais
           AND con.pais_oid_pais = l_oidPais;
        EXCEPTION
        WHEN OTHERS THEN
            l_numeroLoteFacturacion := NULL;
        END;
    END IF;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE IMP_DOCUM_CONTA_MATRI';

    -- Abrimos el cursor principal
    OPEN c_facturas(l_oidPeriodo, l_oidPeriodoSgte, l_oidActividad, l_numeroLoteFacturacion);
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                INSERT INTO IMP_DOCUM_CONTA_MATRI(
                cor_docu_cont_matr,
                oid_pais,
                cod_pais,
                oid_clie,
                cod_clie,
                cod_digi_ctrl,
                val_nom1,
                val_nom2,
                val_ape1,
                val_ape2,
                oid_soli_cabe,
                val_nume_soli,
                fec_fact,
                val_impo_redo_cons,
                oid_tasa_impu,
                val_indi_impu,
                val_tasa_impu,
                oid_docu_cont_cabe,
                num_docu_cont_inte,
                num_docu_lega,
                oid_regi,
                cod_regi,
                oid_zona,
                cod_zona,
                oid_secc,
                cod_secc,
                oid_terr,
                cod_terr,
                oid_peri,
                cod_peri,
                fec_venc,
                oid_tipo_docu,
                cod_tipo_docu,
                val_buff
                )
                VALUES(
                l_correlativo,
                r_factura(i).oid_pais,
                r_factura(i).cod_pais,
                r_factura(i).oid_clie,
                r_factura(i).cod_clie,
                r_factura(i).cod_digi_ctrl,
                r_factura(i).val_nom1,
                r_factura(i).val_nom2,
                r_factura(i).val_ape1,
                r_factura(i).val_ape2,
                r_factura(i).oid_soli_cabe,
                r_factura(i).val_nume_soli,
                r_factura(i).fec_fact,
                r_factura(i).val_impo_redo_cons,
                r_factura(i).oid_tasa_impu,
                r_factura(i).val_indi_impu,
                r_factura(i).val_tasa_impu,
                r_factura(i).oid_cabe,
                r_factura(i).num_docu_cont_inte,
                r_factura(i).num_docu_lega,
                r_factura(i).oid_regi,
                r_factura(i).cod_regi,
                r_factura(i).oid_zona,
                r_factura(i).cod_zona,
                r_factura(i).oid_secc,
                r_factura(i).cod_secc,
                r_factura(i).oid_terr,
                r_factura(i).cod_terr,
                l_oidPeriodo,
                p_codigoPeriodo,
                r_factura(i).fec_venc,
                r_factura(i).oid_tipo_docu,
                r_factura(i).cod_tipo_docu,
                EMPTY_CLOB
                );

                l_correlativo := l_correlativo + 1;

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

    -- Abrimos el cursor de actualizacion de numeros de pagina
    OPEN c_paginas;
    LOOP
        FETCH c_paginas BULK COLLECT
        INTO r_cor_docu_cont_matr,
             r_num_pagi,
             r_num_tota_pagi LIMIT w_filas;

        FORALL j IN 1..r_cor_docu_cont_matr.COUNT
        UPDATE imp_docum_conta_matri
        SET num_pagi = r_num_pagi(j),
            num_tota_pagi = r_num_tota_pagi(j)
        WHERE cor_docu_cont_matr = r_cor_docu_cont_matr(j);

        EXIT WHEN c_paginas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_paginas;

END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 18/05/2009
Fecha Modificacion  : 18/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI(p_codigoPais VARCHAR2,
                                   p_codigoPeriodo VARCHAR2,
                                   p_fechaFacturacion VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

lstemp VARCHAR2(10):=IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'indicadorDocumBonif');

BEGIN

    -- Procesamos la informacion generando las facturas en el formato correspondiente
    IF p_codigoPais = 'VEE' THEN
        IMP_PR_GENER_FACTU_MATRI_VEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF p_codigoPais = 'VEL' THEN
        IMP_PR_GENER_FACTU_MATRI_VEL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL') THEN
        IF nvl(lstemp,'N')='S' then
                IMP_PR_GENER_FACTU_MATRI_PEE_B(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        else
                IMP_PR_GENER_FACTU_MATRI_PEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        end if;
    ELSIF (p_codigoPais = 'ECE' OR p_codigoPais = 'ECL') THEN
        IMP_PR_GENER_FACTU_MATRI_ECE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF p_codigoPais = 'PAL' THEN
        IMP_PR_GENER_FACTU_MATRI_PAL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF p_codigoPais = 'GTL' THEN
        IMP_PR_GENER_FACTU_MATRI_GTL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF p_codigoPais = 'GTE' THEN
        IMP_PR_GENER_FACTU_MATRI_GTE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF p_codigoPais = 'SVE' THEN
        IMP_PR_GENER_FACTU_MATRI_SVL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF p_codigoPais = 'MXL' THEN
        IMP_PR_GENER_BOLET_MATRI_MXL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSE
        IMP_PR_GENER_FACTU_MATRI_VEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    END IF;

    -- Generamos el archivo matricial
    IMP_PR_GENER_ARCHI_FACTU(p_codigoPais, p_nombreArchivo, p_directorio);

END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 18/05/2009
Fecha Modificacion  : 18/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_Z(
                                   p_oidzona NUMBER
                                   ) IS

CURSOR c_cons(p_oidperi NUMBER, p_fecfact VARCHAR2, numeroLoteFacturacion NUMBER, indicadorEnvioLarissa NUMBER) IS
select a.oid_soli_cabe
from ped_solic_cabec a
where a.perd_oid_peri=p_oidperi
and a.fec_fact=p_fecfact
and a.num_unid_aten_tota>0
and a.ind_ts_no_conso=0
AND a.IND_INTE_LARI_GENE = indicadorEnvioLarissa
AND (numeroLoteFacturacion IS NULL OR a.NUM_LOTE_FACT = numeroLoteFacturacion)
and a.zzon_oid_zona=p_oidzona
and a.tspa_oid_tipo_soli_pais in
(
select x.oid_tipo_soli_pais from ped_tipo_solic_pais x, ped_tipo_solic y
where x.tsol_oid_tipo_soli=y.oid_tipo_soli
and y.ind_cons=1 and y.ind_soli_nega=0
)
;

r_cons c_cons%ROWTYPE;



    ln_valtasa        NUMBER(2);
    ln_oidtasa        NUMBER(10);
    ln_valtasaflet    NUMBER(2);
    --ln_oidtasaflet    NUMBER(10);
    --w_filas        NUMBER(12);


    ln_oidperi    NUMBER(10);
    lv_fecfact   varchar2(20);

    lv_codpais   varchar2(20);
    lv_codperi   varchar2(20);
    --w_filas        NUMBER(12);

    l_indicadorEnvioLarissa         VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'indicadorEnvioLarissa');
    l_indicadorEnvioUltimoLote      VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'indicadorEnvioUltimoLote');
    l_numeroLoteFacturacion         NUMBER;
begin

    SELECT x.oid_peri   into ln_oidperi
                                   FROM cra_perio       x,
                                        seg_perio_corpo y,
                                        bas_ctrl_fact   z
                                  WHERE x.peri_oid_peri = y.oid_peri
                                    AND y.cod_peri = z.cod_peri
                                    AND z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.fec_proc   into lv_fecfact
                                   FROM bas_ctrl_fact   z
                                  WHERE z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.cod_pais   into lv_codpais
                                   FROM cra_perio       x,
                                        seg_perio_corpo y,
                                        bas_ctrl_fact   z
                                  WHERE x.peri_oid_peri = y.oid_peri
                                    AND y.cod_peri = z.cod_peri
                                    AND z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.cod_peri   into lv_codperi
                                   FROM bas_ctrl_fact   z
                                  WHERE z.ind_camp_act = 1
                                    AND z.sta_camp = 0;


    IF (l_indicadorEnvioUltimoLote = '1' OR l_indicadorEnvioUltimoLote = 'S') THEN
        BEGIN
          SELECT MAX(con.num_lote_fact)
          INTO l_numeroLoteFacturacion
          FROM ped_solic_cabec con,
               int_lar_tipo_solici_pedido_dis tspd
         WHERE con.perd_oid_peri = ln_oidperi
           AND con.fec_fact = to_date(lv_fecfact, 'dd/mm/yyyy')
           AND con.ind_inte_lari_gene = l_indicadorEnvioLarissa
           AND con.ind_ts_no_conso = 0
           AND (con.ind_pedi_prue = 0 OR con.ind_pedi_prue IS NULL)
           AND con.tspa_oid_tipo_soli_pais = tspd.tspa_oid_tipo_soli_pais;
           --AND con.pais_oid_pais = l_oidPais;
        EXCEPTION
        WHEN OTHERS THEN
            l_numeroLoteFacturacion := NULL;
        END;
    END IF;



    OPEN c_cons(ln_oidperi,lv_fecfact,l_numeroLoteFacturacion,l_indicadorEnvioLarissa);
    LOOP
    FETCH c_cons INTO r_cons;
    EXIT WHEN c_cons%NOTFOUND;


    -- Procesamos la informacion generando las facturas en el formato correspondiente
    IF lv_codpais = 'VEE' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_VEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF lv_codpais = 'VEL' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_VEL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF (lv_codpais = 'PE' OR lv_codpais = 'PEL') THEN
                IMP_PR_GENER_FACTU_MATRI_PEE_F(r_cons.Oid_Soli_Cabe,lv_codperi,lv_codpais);
    ELSIF lv_codpais = 'CLE'  THEN
                IMP_PR_GENER_FACTU_MATRI_CLE(r_cons.Oid_Soli_Cabe,lv_codperi,lv_codpais);
    ELSIF (lv_codpais = 'ECE' OR lv_codpais = 'ECL') THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_ECE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF lv_codpais = 'PAL' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_PAL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF lv_codpais = 'GTL' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_GTL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF lv_codpais = 'GTE' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_GTE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF lv_codpais = 'SVE' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_SVL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSE
        return;
        --IMP_PR_GENER_FACTU_MATRI_VEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    END IF;

    -- Generamos el archivo matricial
    --IMP_PR_GENER_ARCHI_FACTU(p_codigoPais, p_nombreArchivo, p_directorio);

    END LOOP;
    CLOSE c_cons;


END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 18/05/2009
Fecha Modificacion  : 18/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_BOLET_MATRI_Z(
                                   p_oidzona NUMBER
                                   ) IS

CURSOR c_cons(p_oidperi NUMBER, p_fecfact VARCHAR2, numeroLoteFacturacion NUMBER, indicadorEnvioLarissa NUMBER) IS
select a.oid_soli_cabe
from ped_solic_cabec a
where a.perd_oid_peri=p_oidperi
and a.fec_fact=p_fecfact
and a.num_unid_aten_tota>0
and a.ind_ts_no_conso=0
and a.zzon_oid_zona=p_oidzona
AND a.IND_INTE_LARI_GENE = indicadorEnvioLarissa
AND (numeroLoteFacturacion IS NULL OR a.NUM_LOTE_FACT = numeroLoteFacturacion)
and a.tspa_oid_tipo_soli_pais in
(
select x.oid_tipo_soli_pais from ped_tipo_solic_pais x, ped_tipo_solic y
where x.tsol_oid_tipo_soli=y.oid_tipo_soli
and y.ind_cons=1 and y.ind_soli_nega=0
)
;

r_cons c_cons%ROWTYPE;



    ln_valtasa        NUMBER(2);
    ln_oidtasa        NUMBER(10);
    ln_valtasaflet    NUMBER(2);
    --ln_oidtasaflet    NUMBER(10);
    --w_filas        NUMBER(12);


    ln_oidperi    NUMBER(10);
    lv_fecfact   varchar2(20);

    lv_codpais   varchar2(20);
    lv_codperi   varchar2(20);
    --w_filas        NUMBER(12);

    l_indicadorEnvioLarissa         VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'indicadorEnvioLarissa');
    l_indicadorEnvioUltimoLote      VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'indicadorEnvioUltimoLote');
    l_numeroLoteFacturacion         NUMBER;

begin

    SELECT x.oid_peri   into ln_oidperi
                                   FROM cra_perio       x,
                                        seg_perio_corpo y,
                                        bas_ctrl_fact   z
                                  WHERE x.peri_oid_peri = y.oid_peri
                                    AND y.cod_peri = z.cod_peri
                                    AND z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.fec_proc   into lv_fecfact
                                   FROM bas_ctrl_fact   z
                                  WHERE z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.cod_pais   into lv_codpais
                                   FROM cra_perio       x,
                                        seg_perio_corpo y,
                                        bas_ctrl_fact   z
                                  WHERE x.peri_oid_peri = y.oid_peri
                                    AND y.cod_peri = z.cod_peri
                                    AND z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.cod_peri   into lv_codperi
                                   FROM bas_ctrl_fact   z
                                  WHERE z.ind_camp_act = 1
                                    AND z.sta_camp = 0;



    IF (l_indicadorEnvioUltimoLote = '1' OR l_indicadorEnvioUltimoLote = 'S') THEN
        BEGIN
          SELECT MAX(con.num_lote_fact)
          INTO l_numeroLoteFacturacion
          FROM ped_solic_cabec con,
               int_lar_tipo_solici_pedido_dis tspd
         WHERE con.perd_oid_peri = ln_oidperi
           AND con.fec_fact = to_date(lv_fecfact, 'dd/mm/yyyy')
           AND con.ind_inte_lari_gene = l_indicadorEnvioLarissa
           AND con.ind_ts_no_conso = 0
           AND (con.ind_pedi_prue = 0 OR con.ind_pedi_prue IS NULL)
           AND con.tspa_oid_tipo_soli_pais = tspd.tspa_oid_tipo_soli_pais;
           --AND con.pais_oid_pais = l_oidPais;
        EXCEPTION
        WHEN OTHERS THEN
            l_numeroLoteFacturacion := NULL;
        END;
    END IF;




    OPEN c_cons(ln_oidperi,lv_fecfact,l_numeroLoteFacturacion,l_indicadorEnvioLarissa);
    LOOP
    FETCH c_cons INTO r_cons;
    EXIT WHEN c_cons%NOTFOUND;


    -- Procesamos la informacion generando las facturas en el formato correspondiente
    IF lv_codpais = 'VEE' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_VEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF lv_codpais = 'VEL' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_VEL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF (lv_codpais = 'PE' OR lv_codpais = 'PEL') THEN
                IMP_PR_GENER_BOLET_MATRI_PEE_F(r_cons.Oid_Soli_Cabe,lv_codperi,lv_codpais);
    ELSIF lv_codpais = 'CLE'  THEN
                IMP_PR_GENER_BOLET_MATRI_CLE(r_cons.Oid_Soli_Cabe,lv_codperi,lv_codpais);
    ELSIF (lv_codpais = 'ECE' OR lv_codpais = 'ECL') THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_ECE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF lv_codpais = 'PAL' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_PAL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF lv_codpais = 'GTL' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_GTL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF lv_codpais = 'GTE' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_GTE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF lv_codpais = 'SVE' THEN
        return;
        --IMP_PR_GENER_FACTU_MATRI_SVL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSE
        return;
        --IMP_PR_GENER_FACTU_MATRI_VEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    END IF;

    -- Generamos el archivo matricial
    --IMP_PR_GENER_ARCHI_FACTU(p_codigoPais, p_nombreArchivo, p_directorio);

    END LOOP;
    CLOSE c_cons;


END;

/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_FACTU(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100);
l_finArchivo    VARCHAR2(100);
l_saltopagina   VARCHAR2(100);

l_contador      NUMBER := 0;
l_total         NUMBER := 0;

CURSOR c_documentos IS
SELECT VAL_BUFF
FROM IMP_DOCUM_CONTA_MATRI
WHERE COD_PAIS = p_codigoPais
ORDER BY COR_DOCU_CONT_MATR;

BEGIN

    l_inicioArchivo := IMP_FN_INICI_ARCHI_FACTU(p_codigoPais);
    l_finArchivo := IMP_FN_FIN_ARCHI_FACTU(p_codigoPais);

    l_saltopagina := nvl(IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'saltoPagina'),'S');

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    -- Iteramos sobre el cursor
    OPEN c_documentos;
    LOOP
        FETCH c_documentos INTO t_clob;
        EXIT WHEN c_documentos%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        if l_saltopagina='S' then
        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12)), TRUE);

        end if;

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_documentos;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_FACTU: '||substr(SQLERRM,1,250));

END;

/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_FACTU2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100);
l_finArchivo    VARCHAR2(100);
l_contador      NUMBER := 0;
l_total         NUMBER := 0;

CURSOR c_documentos IS
SELECT VAL_BUFF
FROM Imp_Paque_Docum_Factu_Matri a, ped_solic_cabec b, ped_solic_cabec_secue c
WHERE a.val_nume_soli=b.val_nume_soli and b.oid_soli_cabe=c.soca_oid_soli_cabe
ORDER BY c.val_secu_ruta_terr asc;

BEGIN

    l_inicioArchivo := IMP_FN_INICI_ARCHI_FACTU(p_codigoPais);
    l_finArchivo := IMP_FN_FIN_ARCHI_FACTU(p_codigoPais);

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    -- Iteramos sobre el cursor
    OPEN c_documentos;
    LOOP
        FETCH c_documentos INTO t_clob;
        EXIT WHEN c_documentos%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12)), TRUE);

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_documentos;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_FACTU2: '||substr(SQLERRM,1,250));

END;

/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_BOLET2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100);
l_finArchivo    VARCHAR2(100);
l_contador      NUMBER := 0;
l_total         NUMBER := 0;

CURSOR c_documentos IS
SELECT VAL_BUFF
FROM Imp_Paque_Docum_Bolet_Matri a, ped_solic_cabec b, ped_solic_cabec_secue c
WHERE a.val_nume_soli=b.val_nume_soli and b.oid_soli_cabe=c.soca_oid_soli_cabe
ORDER BY c.val_secu_ruta_terr asc;

BEGIN

    l_inicioArchivo := IMP_FN_INICI_ARCHI_FACTU(p_codigoPais);
    l_finArchivo := IMP_FN_FIN_ARCHI_FACTU(p_codigoPais);

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    -- Iteramos sobre el cursor
    OPEN c_documentos;
    LOOP
        FETCH c_documentos INTO t_clob;
        EXIT WHEN c_documentos%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12)), TRUE);

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_documentos;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_FACTU2: '||substr(SQLERRM,1,250));

END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_INICI_ARCHI_FACTU(p_codigoPais VARCHAR2) RETURN VARCHAR2 IS

l_inicioArchivo VARCHAR2(100);

BEGIN
    IF (p_codigoPais = 'VEE' OR p_codigoPais = 'VEL') THEN
        l_inicioArchivo := CHR(27) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77)|| CHR(13) || CHR(10);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL') THEN
        l_inicioArchivo := CHR(27) || CHR(48) || CHR(27) || CHR(80) || CHR(12);
    ELSIF (p_codigoPais = 'ECE' OR p_codigoPais = 'ECL') THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSIF p_codigoPais = 'PAL' THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSIF (p_codigoPais = 'GTE' OR p_codigoPais = 'GTL') THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSIF (p_codigoPais = 'SVL' OR p_codigoPais = 'SVE') THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSIF p_codigoPais = 'CLE' THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(67) || CHR(24);
    ELSE
        l_inicioArchivo := '';
    END IF;

    RETURN l_inicioArchivo;
END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_FIN_ARCHI_FACTU(p_codigoPais VARCHAR2) RETURN VARCHAR2 IS

l_finArchivo VARCHAR2(100);

BEGIN
    IF (p_codigoPais = 'VEE' OR p_codigoPais = 'VEL') THEN
        l_finArchivo := CHR(12) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL') THEN
        l_finArchivo := CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'ECE' OR p_codigoPais = 'ECL') THEN
        l_finArchivo := CHR(12) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF p_codigoPais = 'PAL' THEN
        l_finArchivo := CHR(12) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'GTE' OR p_codigoPais = 'GTL') THEN
        l_finArchivo := CHR(13) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'SVL' OR p_codigoPais = 'SVE') THEN
        l_finArchivo := CHR(13) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF p_codigoPais = 'CLE'  THEN
        l_finArchivo := CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSE
        l_finArchivo := '';
    END IF;

    RETURN l_finArchivo;
END;


/**************************************************************************
Descripcion         : Genera el documento del factura matricial en el formato
                      de Venezuela Esika.
Fecha Creación      : 08/05/2009
Fecha Modificacion  : 08/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_VEE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       TRIM(CAB.VAL_NUME_IDEN_FISC) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       PSP.VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN > 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' ====================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Pedido y Codigo Interno
                l_textoActual := LPAD(' ', 60) || 'COD. INT.: ' || r_factura(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha
                l_textoActual := LPAD(' ', 6) || RPAD('GUATIRE', 14);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'MM'), 4);
                l_textoActual := l_textoActual || TO_CHAR(r_factura(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 18) || RPAD(r_factura(i).cod_clie || '-' || r_factura(i).cod_digi_ctrl, 32);
                l_textoActual := l_textoActual || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_secc || '-' || r_factura(i).cod_terr, 15);
                l_textoActual := l_textoActual || LPAD(r_factura(i).val_nume_iden_fisc, 22);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 18) || RPAD(l_nombreCompleto,60) || r_factura(i).cod_peri;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion
                l_textoActual := LPAD(' ', 11) || RPAD(r_factura(i).val_dire_comp, 69);
                l_textoActual := l_textoActual || ' N.PED.: ' || r_factura(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 4)  || RPAD(r_detalle(j).val_codi_vent ,11);
                            l_textoActual := l_textoActual || RPAD(r_detalle(j).des_prod ,41);
                            l_textoActual := l_textoActual || LPAD(r_detalle(j).num_unid_aten ,5);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 12);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12);

                            IF r_detalle(j).val_porc_desc > 0 THEN
                                    l_textoActual := l_textoActual || ' (D-' || r_detalle(j).val_porc_desc || '%)';
                            END IF;

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := LPAD(' ', 40) || 'Total Productos ' || LPAD(l_totalUnidades, 5) || '           :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 40) || '(-) Descuentos                  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                l_textoActual := LPAD(' ', 40) || '(+) Gastos de Transportes       :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                --l_totalFactura := r_factura(i).val_prec_fact_tota_loca;
                l_textoActual := LPAD(' ', 40) || 'Total Factura                   :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Espaciado
                FOR k IN 1..(l_totalEspaciado - (l_contadorDetalles + l_numLineasPieDetalle)) LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                END LOOP;

                -- Calculos de montos finales (impuestos)
                l_baseImponible := l_totalFactura / (1 + r_factura(i).val_tasa_impu / 100);
                l_impuesto := l_totalFactura - l_baseImponible;
                l_totalConImpuesto := l_totalFactura;

                -- Base Imponible
                l_textoActual := LPAD(' ', 54) || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 31);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Impuesto
                l_textoActual := LPAD(r_factura(i).val_tasa_impu || '%', 54) || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 31);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total con Impuesto
                l_textoActual := LPAD(' ', 54) || LPAD(TRIM(TO_CHAR(l_totalConImpuesto, '9999999990.00')), 31);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 7) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalConImpuesto))) || ' CON ' || TO_CHAR((l_totalConImpuesto - TRUNC(l_totalConImpuesto)) * 100)  || '/100';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Texto pie de factura
                l_textoActual := '  CONDICION DE PAGO: CREDITO - ** PAGAR ESTA FACTURA ANTES DEL DIA ' || TO_CHAR(r_factura(i).fec_venc, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del factura matricial en el formato
                      de Venezuela Esika.
Fecha Creación      : 08/05/2009
Fecha Modificacion  : 08/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_VEL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       TRIM(CAB.VAL_NUME_IDEN_FISC) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN > 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' =================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Pedido y Codigo Interno
                l_textoActual := LPAD(' ', 68) || 'COD. INT.: ' || r_factura(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha
                l_textoActual := LPAD(' ', 69) || RPAD('GUATIRE', 14);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'MM'), 4);
                l_textoActual := l_textoActual || TO_CHAR(r_factura(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 17) || RPAD(r_factura(i).cod_clie || '-' || r_factura(i).cod_digi_ctrl, 32);
                l_textoActual := l_textoActual || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_secc || '-' || r_factura(i).cod_terr, 15);
                l_textoActual := l_textoActual || LPAD(r_factura(i).val_nume_iden_fisc, 21);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 13) || RPAD(l_nombreCompleto,61) || r_factura(i).cod_peri;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion
                l_textoActual := LPAD(' ', 11) || RPAD(r_factura(i).val_dire_comp, 62)  || ' NUM PED: ' || r_factura(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 3)  || RPAD(r_detalle(j).val_codi_vent, 6);
                            l_textoActual := l_textoActual || LPAD(r_detalle(j).num_unid_aten ,3);
                            l_textoActual := l_textoActual || LPAD(' ', 5) || RPAD(r_detalle(j).des_prod ,37);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 14);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14);

                            IF r_detalle(j).val_porc_desc > 0 THEN
                                    l_textoActual := l_textoActual || '   (D-' || r_detalle(j).val_porc_desc || '%)';
                            END IF;

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := LPAD('Total', 7) || LPAD(l_totalUnidades, 5);
                l_textoActual := l_textoActual || LPAD(' ', 29) || 'Total Productos             :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 41) || '(-) Descuentos              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                l_textoActual := LPAD(' ', 41) || '(+) Gastos de Transportes   :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                --l_totalFactura := r_factura(i).val_prec_fact_tota_loca;
                l_textoActual := LPAD(' ', 41) || 'Total Factura               :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Espaciado
                FOR k IN 1..(l_totalEspaciado - (l_contadorDetalles + l_numLineasPieDetalle)) LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                END LOOP;

                -- Calculos de montos finales (impuestos)
                l_baseImponible := l_totalFactura / (1 + r_factura(i).val_tasa_impu / 100);
                l_impuesto := l_totalFactura - l_baseImponible;
                l_totalConImpuesto := l_totalFactura;

                -- Base Imponible
                l_textoActual := LPAD(' ', 54) || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Impuesto
                l_textoActual := LPAD(r_factura(i).val_tasa_impu || '%', 54) || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total con Impuesto
                l_textoActual := LPAD(' ', 54) || LPAD(TRIM(TO_CHAR(l_totalConImpuesto, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 7) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalConImpuesto))) || ' CON ' || TO_CHAR((l_totalConImpuesto - TRUNC(l_totalConImpuesto)) * 100)  || '/100';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Texto pie de factura
                l_textoActual := '  CONDICION DE PAGO: CREDITO - ** PAGAR ESTA FACTURA ANTES DEL DIA ' || TO_CHAR(r_factura(i).fec_venc, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika.
Fecha Creación      : 24/07/2009
Fecha Modificacion  : 24/07/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_PEE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 4) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 3) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 2) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 1)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.VAL_PREC_CONT_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE,
       CAB.Val_Tota_Gast_Admi,
       cab.val_tota_gast_admi_sin_impu
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                    imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl               imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                    imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                    imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                    imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                    imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe               imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli               imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                    imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons          imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte          imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                    imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                    imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                    imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                    imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                    imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi               imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_cabec.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    val_tota_gast_admi          fac_docum_conta_cabec.val_tota_gast_admi%TYPE,
    val_tota_gast_admi_sin_impu fac_docum_conta_cabec.val_tota_gast_admi%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       SUBSTR(SPC.COD_PERI, -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8') VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.IMP_DESC_SIN_IMPU_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       DET.VAL_PREC_SIN_IMPU_UNIT,
       DET.VAL_PREC_SIN_IMPU_TOTA_LOCA,
       DET.IMP_IMPU_TOTA_LOCA,
       nvl((select a.lot_sap from sap_traza_lote a, mae_produ b where b.oid_prod=det.prod_oid_prod
       and b.cod_sap=a.cod_sap and rownum=1
       ),' ') LOTE_PROD
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     PRE_MATRI_FACTU PMF,
     PRE_MATRI_FACTU_CABEC PMFC,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER(+)
AND PMF.OFDE_OID_DETA_OFER(+) = POD.OID_DETA_OFER
AND PMFC.OID_CABE(+) = PMF.MFCA_OID_CABE
AND PMFC.PERD_OID_PERI = CP.OID_PERI(+)
AND CP.PERI_OID_PERI = SPC.OID_PERI(+)
AND DET.NUM_UNID_ATEN > 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
)
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE,
    lote_prod                    gen_i18n_sicc_pais.val_i18n%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(200) := ' --------------------------------------------------------------------------------------------------------------------';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalBonificaci           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

l_CLOB                      CLOB;


lv_indiejec VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codigoPais,'STO_GASTO_ADMIN'),'N');

lv_loteprod VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codigoPais,'STO_LOTE_PROD'),'N');


BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG ' || LPAD(r_factura(i).num_pagi, 3) || ' DE ' || LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y fecha de emision
                l_textoActual := 'CAMPAÑA:' || RPAD(r_factura(i).cod_peri, 9, ' ') || 'EMISION:' || TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Codigo de Cliente
                l_textoActual := 'ZONA:' || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 12, ' ') || 'CUENTA:' || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DNI/RUC
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := 'RUC:' || r_factura(i).val_nume_iden_fisc;
                ELSE
                    l_textoActual := 'DNI:' || r_factura(i).val_nume_iden_fisc;
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_factura(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_factura(i).val_dire_comp, 1, 47);
                    IF LENGTH(r_factura(i).val_dire_comp) > 47 THEN
                        l_direccionLinea2 := SUBSTR(r_factura(i).val_dire_comp, 48, 47);
                    END IF;

                    IF LENGTH(r_factura(i).val_dire_comp) > 94 THEN
                        l_direccionLinea3 := SUBSTR(r_factura(i).val_dire_comp, 95, 47);
                    END IF;

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionLinea1 := SUBSTR(r_factura(i).val_ubig, 1, 47);
                IF LENGTH(r_factura(i).val_ubig) > 47 THEN
                    l_ubicacionLinea2 := SUBSTR(r_factura(i).val_ubig, 48, 47);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea1), l_ubicacionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea2), l_ubicacionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo Interno
                l_textoActual := LPAD('CODIGO INTERNO:', 87, ' ') || LPAD(r_factura(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Boleta de Despacho
                l_textoActual := LPAD('BOLETA DESPACHO:', 88, ' ') || LPAD(r_factura(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;
                l_totalBonificaci := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_factura(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN
                            -- Se imprime el separador a partir del segundo grupo de detalles
                            IF k > 0 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP
                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten , 4) || LPAD(' ',10) || RPAD(r_detalle(j).des_prod ,50) || lpad(r_detalle(j).val_codi_vent,8,' ');

                                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                                    l_precioUnitario := r_detalle(j).val_prec_sin_impu_unit;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_neto_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_neto_tota_loca;
                                ELSE
                                    l_precioUnitario :=  r_detalle(j).val_prec_cata_unit_loca + r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_fact_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_fact_tota_loca;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 18, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitarioFacturado, '9999999990.00')), 12, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14, ' ');
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                                if lv_loteprod='S' then

                                    l_textoActual := LPAD(' ',14) || 'LOTE:' || r_detalle(j).lote_prod;
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_contadorDetalles := l_contadorDetalles + 1;

                                end if;


                            END LOOP;
                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;

                -- Agregamos el ultimo separador
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_contadorSeparadores := l_contadorSeparadores + 1;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                IF r_factura(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_factura(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Imprimos tantos cambios de linea como sean necesarios
                l_numeroCambiosLinea := 53 - l_contadorDetalles - l_contadorSeparadores;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE
                -- Total de unidades
                l_textoActual := LPAD(l_totalUnidades, 5, ' ') || ' UNID';

                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_impu_tota_loca - r_factura(i).imp_flet_impu_tota_loca - nvl(r_factura(i).val_tota_gast_admi_sin_impu,0);
                    l_totalVentaCatalogo := l_totalVentaCatalogo + r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalDescuentos := r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_impu_tota_loca;
                    l_totalBonificaci := r_factura(i).val_prec_cont_sin_impu_tota;
                ELSE
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_flet_tota_loca + r_factura(i).imp_desc_tota_loca - nvl(r_factura(i).val_tota_gast_admi,0);
                    l_totalDescuentos := r_factura(i).imp_desc_tota_loca;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                    l_totalBonificaci := r_factura(i).val_prec_cont_tota_loca;
                END IF;
                -- Total Precio Catalogo
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 22, ' ');
                -- Total Descuento
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos-l_totalBonificaci, '9999999990.00')) || ')', 22, ' ');
                -- Total Bonificacion
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalBonificaci, '9999999990.00')) || ')', 20, ' ');
                -- Total Precio Facturado
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFacturado, '9999999990.00')), 20, ' ');
                -- Flete
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 18, ' ');

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Agregamos los valores faltantes al total
                l_totalAPagar := r_factura(i).val_tota_paga_loca;

                -- Total en texto
                IF l_totalAPagar <> 0 THEN
                    l_textoActual := LPAD(' ', 19, ' ') || 'SON:' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD(' ', 19, ' ') || 'SON:CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Monto Final en Numeros
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := LPAD(' ', 72, ' ') ||  LPAD(TRIM(TO_CHAR(r_factura(i).imp_impu_tota_loca, '9999999990.00')), 20, ' ') || '               S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 9, ' ');
                ELSE
                    l_textoActual := LPAD(' ', 95, ' ') || '            S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 9, ' ');
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Percepcion
                l_percepcion := (l_totalAPagar - r_factura(i).imp_flet_tota_loca) * 0.02;
                r_factura(i).val_tota_gast_admi:=nvl(r_factura(i).val_tota_gast_admi,0);
                if lv_indiejec<>'S' then
                       IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                          l_textoActual := LPAD(' ', 68, ' ') || 'PERCEPCION 2%                          S/.' || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 9, ' ');
                       else
                          l_textoActual := LPAD(' ', 73, ' ') || 'PERCEPCION 2%                     S/.' || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 9, ' ');
                       end if;
                   --l_textoActual := LPAD(' ', 8, ' ') || LPAD(' ', 47, ' ') || 'TOTAL A PAGAR S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                else
                       IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                          l_textoActual := LPAD(TRIM(TO_CHAR(r_factura(i).val_tota_gast_admi, '9999999990.00')), 8, ' ') || LPAD(' ', 60, ' ') || 'PERCEPCION 2%                          S/.' || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 9, ' ');
                       else
                          l_textoActual := LPAD(TRIM(TO_CHAR(r_factura(i).val_tota_gast_admi, '9999999990.00')), 8, ' ') || LPAD(' ', 65, ' ') || 'PERCEPCION 2%                     S/.' || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 9, ' ');
                       end if;
                   --l_textoActual := LPAD(TRIM(TO_CHAR(r_factura(i).val_tota_gast_admi, '9999999990.00')), 8, ' ') || LPAD(' ', 47, ' ') || 'TOTAL A PAGAR S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                end if;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total a Pagar
                l_totalConPercepcion := l_totalAPagar + l_percepcion;
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                   l_textoActual := LPAD(' ', 8, ' ') || LPAD(' ', 60, ' ') || 'TOTAL A PAGAR                          S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                else
                   l_textoActual := LPAD(' ', 8, ' ') || LPAD(' ', 65, ' ') || 'TOTAL A PAGAR                     S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                end if;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika con bonificaciones.
Fecha Creación      : 25/05/2011
Fecha Modificacion  : 25/05/2011
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_PEE_B(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 4) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 3) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 2) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 1)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.VAL_PREC_CONT_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE,
       CAB.Val_Tota_Gast_Admi,
       cab.val_tota_gast_admi_sin_impu
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                    imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl               imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                    imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                    imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                    imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                    imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe               imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli               imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                    imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons          imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte          imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                    imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                    imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                    imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                    imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                    imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi               imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_cabec.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    val_tota_gast_admi          fac_docum_conta_cabec.val_tota_gast_admi%TYPE,
    val_tota_gast_admi_sin_impu fac_docum_conta_cabec.val_tota_gast_admi_sin_impu%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       SUBSTR(SPC.COD_PERI, -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8') VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.IMP_DESC_SIN_IMPU_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       DET.VAL_PREC_SIN_IMPU_UNIT,
       DET.VAL_PREC_SIN_IMPU_TOTA_LOCA,
       DET.IMP_IMPU_TOTA_LOCA,
       nvl((select a.lot_sap from sap_traza_lote a, mae_produ b where b.oid_prod=det.prod_oid_prod
       and b.cod_sap=a.cod_sap and rownum=1
       ),' ') LOTE_PROD
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     PRE_MATRI_FACTU PMF,
     PRE_MATRI_FACTU_CABEC PMFC,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER(+)
AND PMF.OFDE_OID_DETA_OFER(+) = POD.OID_DETA_OFER
AND PMFC.OID_CABE(+) = PMF.MFCA_OID_CABE
AND PMFC.PERD_OID_PERI = CP.OID_PERI(+)
AND CP.PERI_OID_PERI = SPC.OID_PERI(+)
AND DET.NUM_UNID_ATEN > 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
)
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE,
    lote_prod                    gen_i18n_sicc_pais.val_i18n%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' =================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalBonificaci           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

l_CLOB                      CLOB;


lv_indiejec VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codigoPais,'STO_GASTO_ADMIN'),'N');

lv_loteprod VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codigoPais,'STO_LOTE_PROD'),'N');


BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG ' || LPAD(r_factura(i).num_pagi, 3) || ' DE ' || LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y fecha de emision
                l_textoActual := 'CAMPAÑA:' || RPAD(r_factura(i).cod_peri, 9, ' ') || 'EMISION:' || TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Codigo de Cliente
                l_textoActual := 'ZONA:' || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 12, ' ') || 'CUENTA:' || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DNI/RUC
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := 'RUC:' || r_factura(i).val_nume_iden_fisc;
                ELSE
                    l_textoActual := 'DNI:' || r_factura(i).val_nume_iden_fisc;
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_factura(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_factura(i).val_dire_comp, 1, 47);
                    IF LENGTH(r_factura(i).val_dire_comp) > 47 THEN
                        l_direccionLinea2 := SUBSTR(r_factura(i).val_dire_comp, 48, 47);
                    END IF;

                    IF LENGTH(r_factura(i).val_dire_comp) > 94 THEN
                        l_direccionLinea3 := SUBSTR(r_factura(i).val_dire_comp, 95, 47);
                    END IF;

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionLinea1 := SUBSTR(r_factura(i).val_ubig, 1, 47);
                IF LENGTH(r_factura(i).val_ubig) > 47 THEN
                    l_ubicacionLinea2 := SUBSTR(r_factura(i).val_ubig, 48, 47);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea1), l_ubicacionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea2), l_ubicacionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo Interno
                l_textoActual := LPAD('CODIGO INTERNO:', 67, ' ') || LPAD(r_factura(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Boleta de Despacho
                l_textoActual := LPAD('BOLETA DESPACHO:', 68, ' ') || LPAD(r_factura(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;
                l_totalBonificaci := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_factura(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN
                            -- Se imprime el separador a partir del segundo grupo de detalles
                            IF k > 0 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP
                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten , 4) || ' ' || RPAD(r_detalle(j).des_prod ,36) || lpad(r_detalle(j).val_codi_vent,8,' ');

                                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                                    l_precioUnitario := r_detalle(j).val_prec_sin_impu_unit;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_neto_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_neto_tota_loca;
                                ELSE
                                    l_precioUnitario :=  r_detalle(j).val_prec_cata_unit_loca + r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_fact_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_fact_tota_loca;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 10, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitarioFacturado, '9999999990.00')), 9, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12, ' ');
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                                if lv_loteprod='S' then

                                    l_textoActual := 'LOTE:' || r_detalle(j).lote_prod;
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_contadorDetalles := l_contadorDetalles + 1;

                                end if;


                            END LOOP;
                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;

                -- Agregamos el ultimo separador
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_contadorSeparadores := l_contadorSeparadores + 1;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                IF r_factura(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_factura(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Imprimos tantos cambios de linea como sean necesarios
                l_numeroCambiosLinea := 53 - l_contadorDetalles - l_contadorSeparadores;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE
                -- Total de unidades
                l_textoActual := LPAD(l_totalUnidades, 5, ' ') || ' UNID';

                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_impu_tota_loca - r_factura(i).imp_flet_impu_tota_loca - nvl(r_factura(i).val_tota_gast_admi_sin_impu,0);
                    l_totalVentaCatalogo := l_totalVentaCatalogo + r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalDescuentos := r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_impu_tota_loca;
                    l_totalBonificaci := r_factura(i).val_prec_cont_sin_impu_tota;
                ELSE
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_flet_tota_loca + r_factura(i).imp_desc_tota_loca - nvl(r_factura(i).val_tota_gast_admi,0);
                    l_totalDescuentos := r_factura(i).imp_desc_tota_loca;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                    l_totalBonificaci := r_factura(i).val_prec_cont_tota_loca;
                END IF;
                -- Total Precio Catalogo
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 16, ' ');
                -- Total Descuento
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos-l_totalBonificaci, '9999999990.00')) || ')', 12, ' ');
                -- Total Bonificacion
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalBonificaci, '9999999990.00')) || ')', 11, ' ');
                -- Total Precio Facturado
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFacturado, '9999999990.00')), 19, ' ');
                -- Flete
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13, ' ');

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Agregamos los valores faltantes al total
                l_totalAPagar := r_factura(i).val_tota_paga_loca;

                -- Total en texto
                IF l_totalAPagar <> 0 THEN
                    l_textoActual := LPAD(' ', 12, ' ') || 'SON:' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD(' ', 12, ' ') || 'SON:CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Monto Final en Numeros
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := LPAD(' ', 42, ' ') ||  LPAD(TRIM(TO_CHAR(r_factura(i).imp_impu_tota_loca, '9999999990.00')), 20, ' ') || '       S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 9, ' ');
                ELSE
                    l_textoActual := LPAD(' ', 57, ' ') || '            S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 9, ' ');
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Percepcion
                l_percepcion := (l_totalAPagar - r_factura(i).imp_flet_tota_loca) * 0.02;
                r_factura(i).val_tota_gast_admi:=nvl(r_factura(i).val_tota_gast_admi,0);
                if lv_indiejec<>'S' then
                       IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                          l_textoActual := LPAD(' ', 35, ' ') || 'PERCEPCION 2%                     S/.' || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 9, ' ');
                       else
                          l_textoActual := LPAD(' ', 45, ' ') || 'PERCEPCION 2%           S/.' || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 9, ' ');
                       end if;
                   --l_textoActual := LPAD(' ', 8, ' ') || LPAD(' ', 47, ' ') || 'TOTAL A PAGAR S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                else
                       IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                          l_textoActual := LPAD(TRIM(TO_CHAR(r_factura(i).val_tota_gast_admi, '9999999990.00')), 8, ' ') || LPAD(' ', 27, ' ') || 'PERCEPCION 2%                     S/.' || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 9, ' ');
                       else
                          l_textoActual := LPAD(TRIM(TO_CHAR(r_factura(i).val_tota_gast_admi, '9999999990.00')), 8, ' ') || LPAD(' ', 37, ' ') || 'PERCEPCION 2%           S/.' || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 9, ' ');
                       end if;
                   --l_textoActual := LPAD(TRIM(TO_CHAR(r_factura(i).val_tota_gast_admi, '9999999990.00')), 8, ' ') || LPAD(' ', 47, ' ') || 'TOTAL A PAGAR S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                end if;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total a Pagar
                l_totalConPercepcion := l_totalAPagar + l_percepcion;
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                   l_textoActual := LPAD(' ', 8, ' ') || LPAD(' ', 27, ' ') || 'TOTAL A PAGAR                     S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                else
                   l_textoActual := LPAD(' ', 8, ' ') || LPAD(' ', 37, ' ') || 'TOTAL A PAGAR           S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                end if;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika con bonificaciones por consolidado.
Fecha Creación      : 26/03/2012
Fecha Modificacion  : 26/03/2012
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_PEE_F(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2) IS

CURSOR c_facturas IS
SELECT --DOC.COR_DOCU_CONT_MATR,
       --DOC.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_IMPO_REDO_LOCA,
       --CON.VAL_INDI_IMPU,
       CON.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       ZR.COD_REGI,
       ZZ.COD_ZONA,
       ZS.COD_SECC,
       ZT.COD_TERR,
       --DOC.COD_PERI,
       --DOC.FEC_VENC,
       FTD.COD_TIPO_DOCU,
       1 NUM_PAGI,
       1 NUM_TOTA_PAGI,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 4) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 3) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 2) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 1)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.VAL_PREC_CONT_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE,
       CAB.Val_Tota_Gast_Admi
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_DIREC MCD,
     --MAE_CLIEN_IDENT MCI,
     MAE_CLIEN MC,
     ZON_TERRI_ADMIN ZTA,
     ZON_TERRI ZT,
     ZON_SECCI ZS,
     ZON_ZONA ZZ,
     ZON_REGIO ZR,
     FAC_TIPO_DOCUM FTD
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
AND CON.OID_SOLI_CABE=p_oidsoli
AND CAB.CLDI_OID_CLIE_DIRE=MCD.OID_CLIE_DIRE
AND MCD.CLIE_OID_CLIE=MC.OID_CLIE
--AND MC.OID_CLIE=MCI.CLIE_OID_CLIE
AND CON.ZTAD_OID_TERR_ADMI=ZTA.OID_TERR_ADMI
AND ZTA.TERR_OID_TERR=ZT.OID_TERR
AND ZTA.ZSCC_OID_SECC=ZS.OID_SECC
AND ZTA.IND_BORR=0
AND ZS.ZZON_OID_ZONA=ZZ.OID_ZONA
AND ZZ.ZORG_OID_REGI=ZR.OID_REGI
AND CAB.TIDO_OID_TIPO_DOCU=1
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
;

TYPE facturarecord IS RECORD (
    --cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    --cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    MAE_CLIEN.oid_clie%TYPE,
    cod_clie                    MAE_CLIEN.cod_clie%TYPE,
    cod_digi_ctrl               MAE_CLIEN.cod_digi_ctrl%TYPE,
    val_nom1                    MAE_CLIEN.val_nom1%TYPE,
    val_nom2                    MAE_CLIEN.val_nom2%TYPE,
    val_ape1                    MAE_CLIEN.val_ape1%TYPE,
    val_ape2                    MAE_CLIEN.val_ape2%TYPE,
    oid_soli_cabe               PED_SOLIC_CABEC.oid_soli_cabe%TYPE,
    val_nume_soli               PED_SOLIC_CABEC.val_nume_soli%TYPE,
    fec_fact                    PED_SOLIC_CABEC.fec_fact%TYPE,
    val_impo_redo_cons          PED_SOLIC_CABEC.val_impo_redo_LOCA%TYPE,
    --val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               PED_SOLIC_CABEC.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte          fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    cod_regi                    ZON_REGIO.cod_regi%TYPE,
    cod_zona                    ZON_ZONA.cod_zona%TYPE,
    cod_secc                    ZON_SECCI.cod_secc%TYPE,
    cod_terr                    ZON_TERRI.cod_terr%TYPE,
    --cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    --fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               FAC_TIPO_DOCUM.cod_tipo_docu%TYPE,
    num_pagi                    number(3),
    num_tota_pagi               NUMBER(3),
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_cabec.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    val_tota_gast_admi          fac_docum_conta_cabec.val_tota_gast_admi%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       SUBSTR(SPC.COD_PERI, -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8') VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.IMP_DESC_SIN_IMPU_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       DET.VAL_PREC_SIN_IMPU_UNIT,
       DET.VAL_PREC_SIN_IMPU_TOTA_LOCA,
       DET.IMP_IMPU_TOTA_LOCA
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     PRE_MATRI_FACTU PMF,
     PRE_MATRI_FACTU_CABEC PMFC,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER
AND PMF.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER
AND PMFC.OID_CABE = PMF.MFCA_OID_CABE
AND PMFC.PERD_OID_PERI = CP.OID_PERI
AND CP.PERI_OID_PERI = SPC.OID_PERI
AND DET.NUM_UNID_ATEN > 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
)
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' =================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalBonificaci           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

l_CLOB                      CLOB;


lv_indiejec VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codpais,'STO_GASTO_ADMIN'),'N');


BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                /*SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = 1--r_factura(i).cor_docu_cont_matr
                FOR UPDATE;*/

                INSERT INTO IMP_PAQUE_DOCUM_FACTU_MATRI (
                COR_FACT,
                COD_CONS,
                VAL_NUME_SOLI,
                VAL_BUFF)
                VALUES(
                r_factura(i).oid_docu_cont_cabe,
                r_factura(i).cod_clie,
                r_factura(i).val_nume_soli,
                EMPTY_CLOB())
                RETURNING VAL_BUFF INTO l_clob;

                -- Creamos el texto del factura
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG ' || LPAD(r_factura(i).num_pagi, 3) || ' DE ' || LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y fecha de emision
                l_textoActual := 'CAMPAÑA:' || RPAD(p_codperi, 9, ' ') || 'EMISION:' || TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Codigo de Cliente
                l_textoActual := 'ZONA:' || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 12, ' ') || 'CUENTA:' || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DNI/RUC
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := 'RUC:' || r_factura(i).val_nume_iden_fisc;
                ELSE
                    l_textoActual := 'DNI:' || r_factura(i).val_nume_iden_fisc;
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_factura(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_factura(i).val_dire_comp, 1, 47);
                    IF LENGTH(r_factura(i).val_dire_comp) > 47 THEN
                        l_direccionLinea2 := SUBSTR(r_factura(i).val_dire_comp, 48, 47);
                    END IF;

                    IF LENGTH(r_factura(i).val_dire_comp) > 94 THEN
                        l_direccionLinea3 := SUBSTR(r_factura(i).val_dire_comp, 95, 47);
                    END IF;

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionLinea1 := SUBSTR(r_factura(i).val_ubig, 1, 47);
                IF LENGTH(r_factura(i).val_ubig) > 47 THEN
                    l_ubicacionLinea2 := SUBSTR(r_factura(i).val_ubig, 48, 47);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea1), l_ubicacionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea2), l_ubicacionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo Interno
                l_textoActual := LPAD('CODIGO INTERNO:', 67, ' ') || LPAD(r_factura(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Boleta de Despacho
                l_textoActual := LPAD('BOLETA DESPACHO:', 68, ' ') || LPAD(r_factura(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;
                l_totalBonificaci := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_factura(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN
                            -- Se imprime el separador a partir del segundo grupo de detalles
                            IF k > 0 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP
                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten , 4) || ' ' || RPAD(r_detalle(j).des_prod ,36) || r_detalle(j).val_codi_vent;

                                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                                    l_precioUnitario := r_detalle(j).val_prec_sin_impu_unit;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_neto_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_neto_tota_loca;
                                ELSE
                                    l_precioUnitario :=  r_detalle(j).val_prec_cata_unit_loca + r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_fact_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_fact_tota_loca;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 10, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitarioFacturado, '9999999990.00')), 9, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12, ' ');
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                            END LOOP;
                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;

                -- Agregamos el ultimo separador
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_contadorSeparadores := l_contadorSeparadores + 1;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                IF r_factura(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_factura(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Imprimos tantos cambios de linea como sean necesarios
                l_numeroCambiosLinea := 53 - l_contadorDetalles - l_contadorSeparadores;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE
                -- Total de unidades
                l_textoActual := LPAD(l_totalUnidades, 5, ' ') || ' UNID';

                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_impu_tota_loca - r_factura(i).imp_flet_impu_tota_loca;
                    l_totalVentaCatalogo := l_totalVentaCatalogo + r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalDescuentos := r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_impu_tota_loca;
                    l_totalBonificaci := r_factura(i).val_prec_cont_sin_impu_tota;
                ELSE
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_flet_tota_loca + r_factura(i).imp_desc_tota_loca;
                    l_totalDescuentos := r_factura(i).imp_desc_tota_loca;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                    l_totalBonificaci := r_factura(i).val_prec_cont_tota_loca;
                END IF;
                -- Total Precio Catalogo
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 16, ' ');
                -- Total Descuento
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos-l_totalBonificaci, '9999999990.00')) || ')', 12, ' ');
                -- Total Bonificacion
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalBonificaci, '9999999990.00')) || ')', 11, ' ');
                -- Total Precio Facturado
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFacturado, '9999999990.00')), 19, ' ');
                -- Flete
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13, ' ');

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Agregamos los valores faltantes al total
                l_totalAPagar := r_factura(i).val_tota_paga_loca;

                -- Total en texto
                IF l_totalAPagar <> 0 THEN
                    l_textoActual := LPAD(' ', 5, ' ') || 'SON:' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD(' ', 5, ' ') || 'SON:CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Monto Final en Numeros
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := LPAD(' ', 42, ' ') ||  LPAD(TRIM(TO_CHAR(r_factura(i).imp_impu_tota_loca, '9999999990.00')), 15, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                ELSE
                    l_textoActual := LPAD(' ', 57, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Percepcion
                l_percepcion := (l_totalAPagar - r_factura(i).imp_flet_tota_loca) * 0.02;
                l_textoActual := LPAD(' ', 55, ' ') || 'PERCEPCION 2%    ' || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 9, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total a Pagar
                l_totalConPercepcion := l_totalAPagar + l_percepcion;
                r_factura(i).val_tota_gast_admi:=nvl(r_factura(i).val_tota_gast_admi,0);
                if lv_indiejec<>'S' then
                   l_textoActual := LPAD(' ', 8, ' ') || LPAD(' ', 47, ' ') || 'TOTAL A PAGAR S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                else
                   l_textoActual := LPAD(TRIM(TO_CHAR(r_factura(i).val_tota_gast_admi, '9999999990.00')), 8, ' ') || LPAD(' ', 47, ' ') || 'TOTAL A PAGAR S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                end if;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika con bonificaciones por consolidado.
Fecha Creación      : 26/03/2012
Fecha Modificacion  : 26/03/2012
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_BOLET_MATRI_PEE_F(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2) IS

CURSOR c_facturas IS
SELECT --DOC.COR_DOCU_CONT_MATR,
       --DOC.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_IMPO_REDO_LOCA,
       --CON.VAL_INDI_IMPU,
       CON.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       ZR.COD_REGI,
       ZZ.COD_ZONA,
       ZS.COD_SECC,
       ZT.COD_TERR,
       --DOC.COD_PERI,
       --DOC.FEC_VENC,
       FTD.COD_TIPO_DOCU,
       1 NUM_PAGI,
       1 NUM_TOTA_PAGI,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 4) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 3) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 2) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 1)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.VAL_PREC_CONT_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE,
       CAB.Val_Tota_Gast_Admi
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_DIREC MCD,
     --MAE_CLIEN_IDENT MCI,
     MAE_CLIEN MC,
     ZON_TERRI_ADMIN ZTA,
     ZON_TERRI ZT,
     ZON_SECCI ZS,
     ZON_ZONA ZZ,
     ZON_REGIO ZR,
     FAC_TIPO_DOCUM FTD
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
AND CON.OID_SOLI_CABE=p_oidsoli
AND CAB.CLDI_OID_CLIE_DIRE=MCD.OID_CLIE_DIRE
AND MCD.CLIE_OID_CLIE=MC.OID_CLIE
--AND MC.OID_CLIE=MCI.CLIE_OID_CLIE
AND CON.ZTAD_OID_TERR_ADMI=ZTA.OID_TERR_ADMI
AND ZTA.TERR_OID_TERR=ZT.OID_TERR
AND ZTA.ZSCC_OID_SECC=ZS.OID_SECC
AND ZTA.IND_BORR=0
AND ZS.ZZON_OID_ZONA=ZZ.OID_ZONA
AND ZZ.ZORG_OID_REGI=ZR.OID_REGI
AND CAB.TIDO_OID_TIPO_DOCU=29
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
;

TYPE facturarecord IS RECORD (
    --cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    --cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    MAE_CLIEN.oid_clie%TYPE,
    cod_clie                    MAE_CLIEN.cod_clie%TYPE,
    cod_digi_ctrl               MAE_CLIEN.cod_digi_ctrl%TYPE,
    val_nom1                    MAE_CLIEN.val_nom1%TYPE,
    val_nom2                    MAE_CLIEN.val_nom2%TYPE,
    val_ape1                    MAE_CLIEN.val_ape1%TYPE,
    val_ape2                    MAE_CLIEN.val_ape2%TYPE,
    oid_soli_cabe               PED_SOLIC_CABEC.oid_soli_cabe%TYPE,
    val_nume_soli               PED_SOLIC_CABEC.val_nume_soli%TYPE,
    fec_fact                    PED_SOLIC_CABEC.fec_fact%TYPE,
    val_impo_redo_cons          PED_SOLIC_CABEC.val_impo_redo_LOCA%TYPE,
    --val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               PED_SOLIC_CABEC.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte          fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    cod_regi                    ZON_REGIO.cod_regi%TYPE,
    cod_zona                    ZON_ZONA.cod_zona%TYPE,
    cod_secc                    ZON_SECCI.cod_secc%TYPE,
    cod_terr                    ZON_TERRI.cod_terr%TYPE,
    --cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    --fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               FAC_TIPO_DOCUM.cod_tipo_docu%TYPE,
    num_pagi                    number(3),
    num_tota_pagi               NUMBER(3),
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_cabec.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    val_tota_gast_admi          fac_docum_conta_cabec.val_tota_gast_admi%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       SUBSTR(SPC.COD_PERI, -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8') VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.IMP_DESC_SIN_IMPU_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       DET.VAL_PREC_SIN_IMPU_UNIT,
       DET.VAL_PREC_SIN_IMPU_TOTA_LOCA,
       DET.IMP_IMPU_TOTA_LOCA
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     PRE_MATRI_FACTU PMF,
     PRE_MATRI_FACTU_CABEC PMFC,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER
AND PMF.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER
AND PMFC.OID_CABE = PMF.MFCA_OID_CABE
AND PMFC.PERD_OID_PERI = CP.OID_PERI
AND CP.PERI_OID_PERI = SPC.OID_PERI
AND DET.NUM_UNID_ATEN > 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
)
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' =================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalBonificaci           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

l_CLOB                      CLOB;


lv_indiejec VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codpais,'STO_GASTO_ADMIN'),'N');


BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                /*SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = 1--r_factura(i).cor_docu_cont_matr
                FOR UPDATE;*/

                INSERT INTO IMP_PAQUE_DOCUM_BOLET_MATRI (
                COR_BOLE,
                COD_CONS,
                VAL_NUME_SOLI,
                VAL_BUFF)
                VALUES(
                r_factura(i).oid_docu_cont_cabe,
                r_factura(i).cod_clie,
                r_factura(i).val_nume_soli,
                EMPTY_CLOB())
                RETURNING VAL_BUFF INTO l_clob;


                -- Creamos el texto del factura
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG ' || LPAD(r_factura(i).num_pagi, 3) || ' DE ' || LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y fecha de emision
                l_textoActual := 'CAMPAÑA:' || RPAD(p_codperi, 9, ' ') || 'EMISION:' || TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Codigo de Cliente
                l_textoActual := 'ZONA:' || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 12, ' ') || 'CUENTA:' || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DNI/RUC
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := 'RUC:' || r_factura(i).val_nume_iden_fisc;
                ELSE
                    l_textoActual := 'DNI:' || r_factura(i).val_nume_iden_fisc;
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_factura(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_factura(i).val_dire_comp, 1, 47);
                    IF LENGTH(r_factura(i).val_dire_comp) > 47 THEN
                        l_direccionLinea2 := SUBSTR(r_factura(i).val_dire_comp, 48, 47);
                    END IF;

                    IF LENGTH(r_factura(i).val_dire_comp) > 94 THEN
                        l_direccionLinea3 := SUBSTR(r_factura(i).val_dire_comp, 95, 47);
                    END IF;

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionLinea1 := SUBSTR(r_factura(i).val_ubig, 1, 47);
                IF LENGTH(r_factura(i).val_ubig) > 47 THEN
                    l_ubicacionLinea2 := SUBSTR(r_factura(i).val_ubig, 48, 47);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea1), l_ubicacionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea2), l_ubicacionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo Interno
                l_textoActual := LPAD('CODIGO INTERNO:', 67, ' ') || LPAD(r_factura(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Boleta de Despacho
                l_textoActual := LPAD('BOLETA DESPACHO:', 68, ' ') || LPAD(r_factura(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;
                l_totalBonificaci := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_factura(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN
                            -- Se imprime el separador a partir del segundo grupo de detalles
                            IF k > 0 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP
                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten , 4) || ' ' || RPAD(r_detalle(j).des_prod ,36) || r_detalle(j).val_codi_vent;

                                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                                    l_precioUnitario := r_detalle(j).val_prec_sin_impu_unit;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_neto_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_neto_tota_loca;
                                ELSE
                                    l_precioUnitario :=  r_detalle(j).val_prec_cata_unit_loca + r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_fact_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_fact_tota_loca;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 10, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitarioFacturado, '9999999990.00')), 9, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12, ' ');
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                            END LOOP;
                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;

                -- Agregamos el ultimo separador
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_contadorSeparadores := l_contadorSeparadores + 1;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                IF r_factura(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_factura(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Imprimos tantos cambios de linea como sean necesarios
                l_numeroCambiosLinea := 53 - l_contadorDetalles - l_contadorSeparadores;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE
                -- Total de unidades
                l_textoActual := LPAD(l_totalUnidades, 5, ' ') || ' UNID';

                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_impu_tota_loca - r_factura(i).imp_flet_impu_tota_loca;
                    l_totalVentaCatalogo := l_totalVentaCatalogo + r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalDescuentos := r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_impu_tota_loca;
                    l_totalBonificaci := r_factura(i).val_prec_cont_sin_impu_tota;
                ELSE
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_flet_tota_loca + r_factura(i).imp_desc_tota_loca;
                    l_totalDescuentos := r_factura(i).imp_desc_tota_loca;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                    l_totalBonificaci := r_factura(i).val_prec_cont_tota_loca;
                END IF;
                -- Total Precio Catalogo
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 16, ' ');
                -- Total Descuento
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos-l_totalBonificaci, '9999999990.00')) || ')', 12, ' ');
                -- Total Bonificacion
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalBonificaci, '9999999990.00')) || ')', 11, ' ');
                -- Total Precio Facturado
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFacturado, '9999999990.00')), 19, ' ');
                -- Flete
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13, ' ');

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Agregamos los valores faltantes al total
                l_totalAPagar := r_factura(i).val_tota_paga_loca;

                -- Total en texto
                IF l_totalAPagar <> 0 THEN
                    l_textoActual := LPAD(' ', 5, ' ') || 'SON:' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD(' ', 5, ' ') || 'SON:CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Monto Final en Numeros
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := LPAD(' ', 42, ' ') ||  LPAD(TRIM(TO_CHAR(r_factura(i).imp_impu_tota_loca, '9999999990.00')), 15, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                ELSE
                    l_textoActual := LPAD(' ', 57, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Percepcion
                l_percepcion := (l_totalAPagar - r_factura(i).imp_flet_tota_loca) * 0.02;
                l_textoActual := LPAD(' ', 55, ' ') || 'PERCEPCION 2%    ' || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 9, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total a Pagar
                l_totalConPercepcion := l_totalAPagar + l_percepcion;
                r_factura(i).val_tota_gast_admi:=nvl(r_factura(i).val_tota_gast_admi,0);
                if lv_indiejec<>'S' then
                   l_textoActual := LPAD(' ', 8, ' ') || LPAD(' ', 47, ' ') || 'TOTAL A PAGAR S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                else
                   l_textoActual := LPAD(TRIM(TO_CHAR(r_factura(i).val_tota_gast_admi, '9999999990.00')), 8, ' ') || LPAD(' ', 47, ' ') || 'TOTAL A PAGAR S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 9, ' ');
                end if;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;
/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika con bonificaciones por consolidado.
Fecha Creación      : 26/03/2012
Fecha Modificacion  : 26/03/2012
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_CLE(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2) IS

CURSOR c_facturas IS
SELECT --DOC.COR_DOCU_CONT_MATR,
       --DOC.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_IMPO_REDO_LOCA,
       --CON.VAL_INDI_IMPU,
       CON.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       ZR.COD_REGI,
       ZZ.COD_ZONA,
       ZS.COD_SECC,
       ZT.COD_TERR,
       --DOC.COD_PERI,
       --DOC.FEC_VENC,
       FTD.COD_TIPO_DOCU,
       1 NUM_PAGI,
       1 NUM_TOTA_PAGI,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 3)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       substr(imp_pkg_proce_laser.imp_fn_obtiene_text_direc(CAB.Cldi_Oid_Clie_Dire,0),0,92) DIR1,
       mcd.des_villa_pobl DIR2,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.VAL_PREC_CONT_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE,
       CAB.VAL_IMPO_RETE_DESC
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_DIREC MCD,
     --MAE_CLIEN_IDENT MCI,
     MAE_CLIEN MC,
     ZON_TERRI_ADMIN ZTA,
     ZON_TERRI ZT,
     ZON_SECCI ZS,
     ZON_ZONA ZZ,
     ZON_REGIO ZR,
     FAC_TIPO_DOCUM FTD
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
AND CON.OID_SOLI_CABE=p_oidsoli
AND CAB.CLDI_OID_CLIE_DIRE=MCD.OID_CLIE_DIRE
AND MCD.CLIE_OID_CLIE=MC.OID_CLIE
--AND MC.OID_CLIE=MCI.CLIE_OID_CLIE
AND CON.ZTAD_OID_TERR_ADMI=ZTA.OID_TERR_ADMI
AND ZTA.TERR_OID_TERR=ZT.OID_TERR
AND ZTA.ZSCC_OID_SECC=ZS.OID_SECC
AND ZTA.IND_BORR=0
AND ZS.ZZON_OID_ZONA=ZZ.OID_ZONA
AND ZZ.ZORG_OID_REGI=ZR.OID_REGI
AND CAB.TIDO_OID_TIPO_DOCU=1
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and cab.val_impo_rete_desc>0
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
and exists
(select 1 from ped_solic_cabec where soca_oid_soli_cabe=cab.soca_oid_soli_cabe and ind_oc=1)
;

TYPE facturarecord IS RECORD (
    --cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    --cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    MAE_CLIEN.oid_clie%TYPE,
    cod_clie                    MAE_CLIEN.cod_clie%TYPE,
    cod_digi_ctrl               MAE_CLIEN.cod_digi_ctrl%TYPE,
    val_nom1                    MAE_CLIEN.val_nom1%TYPE,
    val_nom2                    MAE_CLIEN.val_nom2%TYPE,
    val_ape1                    MAE_CLIEN.val_ape1%TYPE,
    val_ape2                    MAE_CLIEN.val_ape2%TYPE,
    oid_soli_cabe               PED_SOLIC_CABEC.oid_soli_cabe%TYPE,
    val_nume_soli               PED_SOLIC_CABEC.val_nume_soli%TYPE,
    fec_fact                    PED_SOLIC_CABEC.fec_fact%TYPE,
    val_impo_redo_cons          PED_SOLIC_CABEC.val_impo_redo_LOCA%TYPE,
    --val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               PED_SOLIC_CABEC.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte          fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    cod_regi                    ZON_REGIO.cod_regi%TYPE,
    cod_zona                    ZON_ZONA.cod_zona%TYPE,
    cod_secc                    ZON_SECCI.cod_secc%TYPE,
    cod_terr                    ZON_TERRI.cod_terr%TYPE,
    --cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    --fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               FAC_TIPO_DOCUM.cod_tipo_docu%TYPE,
    num_pagi                    number(3),
    num_tota_pagi               NUMBER(3),
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    dir1                        fac_docum_conta_cabec.val_dire_comp%TYPE,
    dir2                        fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_cabec.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    VAL_IMPO_RETE_DESC          fac_docum_conta_cabec.VAL_IMPO_RETE_DESC%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' =================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalBonificaci           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';


l_CLOB                      CLOB;


lv_indiejec VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codpais,'STO_GASTO_ADMIN'),'N');

lv_loteprod VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codpais,'STO_LOTE_PROD'),'N');


BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                /*SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = 1--r_factura(i).cor_docu_cont_matr
                FOR UPDATE;*/

                INSERT INTO IMP_PAQUE_DOCUM_FACTU_MATRI (
                COR_FACT,
                COD_CONS,
                VAL_NUME_SOLI,
                VAL_BUFF)
                VALUES(
                r_factura(i).oid_docu_cont_cabe,
                r_factura(i).cod_clie,
                r_factura(i).val_nume_soli,
                EMPTY_CLOB())
                RETURNING VAL_BUFF INTO l_clob;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                --Fecha de emision
                l_textoActual := lpad(TO_CHAR(r_factura(i).fec_fact, 'DD'),53,' ') || lpad(TO_CHAR(r_factura(i).fec_fact, 'MM'),4,' ') ||  lpad(TO_CHAR(r_factura(i).fec_fact, 'YY'),4,' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := lpad(' ',7,' ') || TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := lpad(' ',7,' ') || r_factura(i).dir1;
                l_direccionLinea2 := lpad(' ',7,' ') || rpad(r_factura(i).dir2 || '-' || r_factura(i).val_ubig,38,' ') || substr(r_factura(i).val_nume_iden_fisc,1,length(r_factura(i).val_nume_iden_fisc)-1) || '-' || substr(r_factura(i).val_nume_iden_fisc,length(r_factura(i).val_nume_iden_fisc));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Código de la Cliente
                l_textoActual := lpad(' ',3,' ') || TRIM(r_factura(i).cod_clie);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Descuento
                l_textoActual := lpad(' ',3,' ') || RPAD(r_factura(i).cod_regi || '-' || r_factura(i).cod_zona || '-' || r_factura(i).cod_secc || '-' || r_factura(i).cod_terr, 20, ' ') || LPAD(TRIM(TO_CHAR(r_factura(i).IMP_DESC_TOTA_LOCA, '999G999G999G990')),37,' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Retención
                l_textoActual := lpad(' ',23,' ') || LPAD(TRIM(TO_CHAR(nvl(r_factura(i).VAL_IMPO_RETE_DESC,0), '999G999G999G990')),37,' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Comisión Liquida
                l_textoActual := lpad(' ',23,' ') || LPAD(TRIM(TO_CHAR(r_factura(i).IMP_DESC_TOTA_LOCA-nvl(r_factura(i).VAL_IMPO_RETE_DESC,0), '999G999G999G990')),37,' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);



            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del factura individual para MX.
Fecha Creación      : 13/11/2014
Fecha Modificacion  : 13/11/2014
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_MXL(p_codpais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_facturas IS
SELECT --DOC.COR_DOCU_CONT_MATR,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.VAL_NOM1 || ' ' || MC.VAL_NOM2 || ' ' || MC.VAL_APE1 || ' ' || MC.VAL_APE2 NOMBRE,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       ZR.COD_REGI || '-' || ZZ.COD_ZONA || '-' || ZS.COD_SECC || '-' || LPAD(ZT.COD_TERR,6,'0') uni_admi,
       FTD.COD_TIPO_DOCU,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 4) COLONIA,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 3) LOCALIDAD,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 2) MUNICIPIO,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 1) ESTADO,
       mcd.val_cod_post,
       mcd.val_nomb_via calle,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_TOTA_PAGA_LOCA,
       cab.val_prec_cata_sin_impu_tota,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.VAL_PREC_CONT_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       nvl(CAB.IMP_FLET_IMPU_TOTA_LOCA,0) imp_flet_impu_tota_loca,
       CAB.IMP_REDO_LOCA,
       cab.val_nume_auto,
       NULL fec_apro,
       cab.val_seri_docu_lega,
       cab.val_nume_iden_fisc num_docu_iden,
       substr(spc.cod_peri,3,2) || '-' || substr(spc.cod_peri,5) COD_PERI,
       con.val_tasa_impu val_tasa,
       cab.num_unid_aten_tota+decode(con.val_impo_flet_loca,0,0,1) num_unid_aten_tota,
       cab.fec_emis,
       nvl(cab.val_tota_gast_admi_sin_impu,0)+nvl(cab.val_tota_gast_admi2_sin_impu,0) val_tota_gast_admi_sin_impu
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_DIREC MCD,
     MAE_CLIEN MC,
     ZON_TERRI_ADMIN ZTA,
     ZON_TERRI ZT,
     ZON_SECCI ZS,
     ZON_ZONA ZZ,
     ZON_REGIO ZR,
     FAC_TIPO_DOCUM FTD,
     cra_perio cp,
     seg_perio_corpo spc
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
AND spc.cod_peri=p_codigoPeriodo
and cab.fec_fact=to_date(p_fechaFacturacion, 'dd/mm/yyyy')
and con.perd_oid_peri=cp.oid_peri
and cp.peri_oid_peri=spc.oid_peri
AND CAB.CLDI_OID_CLIE_DIRE=MCD.OID_CLIE_DIRE
AND MCD.CLIE_OID_CLIE=MC.OID_CLIE
AND CON.ZTAD_OID_TERR_ADMI=ZTA.OID_TERR_ADMI
AND ZTA.TERR_OID_TERR=ZT.OID_TERR
AND ZTA.ZSCC_OID_SECC=ZS.OID_SECC
AND ZTA.IND_BORR=0
AND ZS.ZZON_OID_ZONA=ZZ.OID_ZONA
AND ZZ.ZORG_OID_REGI=ZR.OID_REGI
AND CAB.TIDO_OID_TIPO_DOCU=1
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer(+)
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
order by cab.oid_cabe
;

r_facturas c_facturas%ROWTYPE;



CURSOR c_detalle(oidCabecera NUMBER) IS
select NUM_LINEA,
NUM_UNID_ATEN,
VAL_CODI_VENT,
DES_PROD,
VAL_PREC_CATA_UNIT_LOCA,
VAL_PREC_CATA_TOTA_LOCA,
Val_Prec_Sin_Impu_Unit,
Val_Prec_Sin_Impu_Tota_Loca,
VAL_PREC_CONT_UNIT_LOCA,
VAL_PREC_CONT_TOTA_LOCA,
IMP_DESC_TOTA_LOCA,
VAL_PREC_FACT_UNIT_LOCA,
VAL_PREC_FACT_TOTA_LOCA,
VAL_PREC_NETO_UNIT_LOCA,
VAL_PREC_NETO_TOTA_LOCA,
rownum linea
from
(
select *
from
(
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.Val_Prec_Sin_Impu_Unit,
       DET.Val_Prec_Sin_Impu_Tota_Loca,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA--,
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN > 0
AND DET.DCCA_OID_CABE = oidCabecera
--AND NOT EXISTS (
--    SELECT NULL
--    FROM FAC_TIPO_OFERT_EXCLU TOE
--    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
--)
UNION
SELECT 98 NUM_LINEA,
        1 NUM_UNID_ATEN,
       ' ' VAL_CODI_VENT,
       'SERVICIOS' DES_PROD,
       CAB.IMP_FLET_TOTA_LOCA VAL_PREC_CATA_UNIT_LOCA,
       CAB.IMP_FLET_TOTA_LOCA VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA Val_Prec_Sin_Impu_Unit,
       CAB.IMP_FLET_IMPU_TOTA_LOCA Val_Prec_Sin_Impu_Tota_Loca,
       0 AL_PREC_CONT_UNIT_LOCA,
       0 VAL_PREC_CONT_TOTA_LOCA,
       0 IMP_DESC_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA VAL_PREC_FACT_UNIT_LOCA,
       CAB.IMP_FLET_TOTA_LOCA VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA VAL_PREC_NETO_UNIT_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA VAL_PREC_NETO_TOTA_LOCA
       from fac_docum_conta_cabec cab
       where cab.oid_cabe=oidCabecera
       and CAB.IMP_FLET_TOTA_LOCA<>0
UNION
SELECT 99 NUM_LINEA,
        1 NUM_UNID_ATEN,
       ' ' VAL_CODI_VENT,
       'GASTOS ADMINISTRATIVOS' DES_PROD,
       nvl(CAB.VAL_TOTA_GAST_ADMI,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2,0) VAL_PREC_CATA_UNIT_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2,0) VAL_PREC_CATA_TOTA_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI_SIN_IMPU,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2_SIN_IMPU,0) Val_Prec_Sin_Impu_Unit,
       nvl(CAB.VAL_TOTA_GAST_ADMI_SIN_IMPU,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2_SIN_IMPU,0) Val_Prec_Sin_Impu_Tota_Loca,
       0 AL_PREC_CONT_UNIT_LOCA,
       0 VAL_PREC_CONT_TOTA_LOCA,
       0 IMP_DESC_TOTA_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2,0) VAL_PREC_FACT_UNIT_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2,0) VAL_PREC_FACT_TOTA_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI_SIN_IMPU,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2_SIN_IMPU,0) VAL_PREC_NETO_UNIT_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI_SIN_IMPU,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2_SIN_IMPU,0) VAL_PREC_NETO_TOTA_LOCA
       from fac_docum_conta_cabec cab
       where cab.oid_cabe=oidCabecera
       and nvl(CAB.VAL_TOTA_GAST_ADMI,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2,0)<>0
) order by num_linea
);

r_detalle c_detalle%ROWTYPE;

l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10);
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_Emisor_rfc                VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','001'),'BME060927I33');
l_Emisor_nombre             VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','002'),'BELCORP MEXICO S.A. DE C.V.');
l_Emisor_calle              VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','003'),'Prolongacion Paseo de la Reforma');
l_Emisor_noexterior         VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','004'),'1015');
l_Emisor_nointerior         VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','005'),'Torre B Piso 7');
l_Emisor_colonia            VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','006'),'Desarrollo Santa Fé');
l_Emisor_localidad          VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','007'),'');
l_Emisor_municipio          VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','008'),'Alvaro Obregon');
l_Emisor_estado             VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','009'),'D.F.');
l_Emisor_pais               VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','010'),'Mexico');
l_Emisor_codigopostal       VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','011'),'01376');
l_Receptor_rfc              VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','012'),'XAXX010101000');
l_Receptor_nombre           VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','013'),'COMPROBANTE GLOBAL DE OPERACIONES CON PUBLICO EN GENERAL');
l_Receptor_numerocliente    VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','014'),'');

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '----------------------------------------------------------------------------------------------';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalBonificaci           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_formatoNumerico           VARCHAR2(100) := nvl(IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'formatoNumerico'),'9999999G990D00');

l_oid_docu_suba             NUMBER(12) := 0;
l_num_docu_cont_inte        NUMBER(12) := 0;
l_anio                      NUMBER(12) := 0;
l_val_seri_docu_lega        VARCHAR2(15);
l_val_nume_auto             VARCHAR2(15);


l_CLOB                      CLOB;


BEGIN

delete from IMP_DOCUM_CONTA_MATRI;



    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
    FETCH c_facturas INTO r_facturas;
    EXIT WHEN c_facturas%NOTFOUND;

              select max(a.oid_docu_suba)
              into l_oid_docu_suba
              from fac_docum_subac a
              where a.tido_oid_tipo_docu=1
              ;

              select a.val_ulti_nume_docu_inte+1, a.val_ulti_ejer_docu_inte, a.val_seri_docu_lega, a.val_nume_auto
              into l_num_docu_cont_inte, l_anio, l_val_seri_docu_lega, l_val_nume_auto
              from fac_docum_subac a
              where a.oid_docu_suba=l_oid_docu_suba;

              update fac_docum_subac set val_ulti_nume_docu_inte=l_num_docu_cont_inte
              where oid_docu_suba=l_oid_docu_suba;

              update fac_regis_unico_venta a
              set a.num_docu_cont_inte=l_num_docu_cont_inte
              , a.val_nume_auto=l_val_nume_auto
              , a.val_seri_docu_lega=l_val_seri_docu_lega
              , a.val_nume_docu_lega=l_num_docu_cont_inte
              where dcca_oid_cabe=r_facturas.oid_cabe
              ;


              update fac_docum_conta_cabec a
              set a.num_docu_cont_inte=l_num_docu_cont_inte
              , a.val_nume_auto=l_val_nume_auto
              , a.val_seri_docu_lega=l_val_seri_docu_lega
              , a.num_docu_lega=l_num_docu_cont_inte
              where oid_cabe=r_facturas.oid_cabe
              ;



                INSERT INTO IMP_DOCUM_CONTA_MATRI (
                COR_DOCU_CONT_MATR,
                VAL_BUFF, COD_PAIS)
                VALUES(
                r_facturas.oid_cabe,
                EMPTY_CLOB(), p_codpais)
                RETURNING VAL_BUFF INTO l_clob;

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXINICIO    xxxPARSERXXX'), 'XXXINICIO    xxxPARSERXXX');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cliente    : BELCORP'), 'cliente    : BELCORP');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('elaboro    : Federico Enriquez'), 'elaboro    : Federico Enriquez');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('version    : 1.0'), 'version    : 1.0');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fecha      : 2007.04.22'), 'fecha      : 2007.04.22');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('adenda     : Ninguna'), 'adenda     : Ninguna');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Info Documento--------------------------------------------------------------------------------'), 'Info Documento--------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('num. aprob   = ' || l_val_nume_auto), 'num. aprob   = ' || l_val_nume_auto);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fecha ap     = ' || '20' || l_anio), 'fecha ap     = ' || '20' || l_anio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('serie        = ' || l_val_seri_docu_lega), 'serie        = ' || l_val_seri_docu_lega);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('folio        = ' || lpad(l_num_docu_cont_inte,6,'0')), 'folio        = ' || lpad(l_num_docu_cont_inte,6,'0'));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('foliointerno ='), 'foliointerno =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechaemision = ' || to_char(r_facturas.fec_fact,'yyyy/mm/dd') || ' ' || to_char(r_facturas.fec_emis,'hh:mm:ss')), 'fechaemision = ' || to_char(r_facturas.fec_fact,'yyyy/mm/dd') || ' ' || to_char(r_facturas.fec_emis,'hh:mm:ss'));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('formapago    ='), 'formapago    =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('termpagodias ='), 'termpagodias =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('condpago     ='), 'condpago     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('ordencompra  ='), 'ordencompra  =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechaoc      ='), 'fechaoc      =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechavenc.   ='), 'fechavenc.   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisor----------------------------------------------------------------------------------------'), 'Emisor----------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('rfc          = ' || l_Emisor_rfc), 'rfc          = ' || l_Emisor_rfc);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nombre       = ' || l_Emisor_nombre), 'nombre       = ' || l_Emisor_nombre);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisior Domicilio fiscal----------------------------------------------------------------------'), 'Emisior Domicilio fiscal----------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || l_Emisor_calle), 'calle        = ' || l_Emisor_calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   = ' || l_Emisor_noexterior), 'noexterior   = ' || l_Emisor_noexterior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   = ' || l_Emisor_nointerior), 'nointerior   = ' || l_Emisor_nointerior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || l_Emisor_colonia), 'colonia      = ' || l_Emisor_colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = ' || l_Emisor_localidad), 'localidad    = ' || l_Emisor_localidad);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || l_Emisor_municipio), 'municipio    = ' || l_Emisor_municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || l_Emisor_estado), 'estado       = ' || l_Emisor_estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || l_Emisor_codigopostal), 'codigopostal = ' || l_Emisor_codigopostal);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisior Domicilio expedicion------------------------------------------------------------------'), 'Emisior Domicilio expedicion------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('sucursal     ='), 'sucursal     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || l_Emisor_calle), 'calle        = ' || l_Emisor_calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   = ' || l_Emisor_noexterior), 'noexterior   = ' || l_Emisor_noexterior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   = ' || l_Emisor_nointerior), 'nointerior   = ' || l_Emisor_nointerior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || l_Emisor_colonia), 'colonia      = ' || l_Emisor_colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = ' ), 'localidad    = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || l_Emisor_municipio), 'municipio    = ' || l_Emisor_municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || l_Emisor_estado), 'estado       = ' || l_Emisor_estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || l_Emisor_codigopostal), 'codigopostal = ' || l_Emisor_codigopostal);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor--------------------------------------------------------------------------------------'), 'Receptor--------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('rfc          = ' || r_facturas.VAL_NUME_IDEN_FISC), 'rfc          = ' || r_facturas.VAL_NUME_IDEN_FISC);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nombre       = ' || r_facturas.nombre), 'nombre       = ' || r_facturas.nombre);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('numerocliente='), 'numerocliente=');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor domicilio fiscal---------------------------------------------------------------------'), 'Receptor domicilio fiscal---------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || r_facturas.calle), 'calle        = ' || r_facturas.calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   ='), 'noexterior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   ='), 'nointerior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || r_facturas.colonia), 'colonia      = ' || r_facturas.colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = ' || r_facturas.localidad), 'localidad    = ' || r_facturas.localidad);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('referencia   ='), 'referencia   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || r_facturas.municipio), 'municipio    = ' || r_facturas.municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || r_facturas.estado), 'estado       = ' || r_facturas.estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || r_facturas.val_cod_post), 'codigopostal = ' || r_facturas.val_cod_post);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor domicilio recepcion------------------------------------------------------------------'), 'Receptor domicilio recepcion------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('sucursal     ='), 'sucursal     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || r_facturas.calle), 'calle        = ' || r_facturas.calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   ='), 'noexterior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   ='), 'nointerior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || r_facturas.colonia), 'colonia      = ' || r_facturas.colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = ' || r_facturas.localidad), 'localidad    = ' || r_facturas.localidad);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('referencia   ='), 'referencia   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || r_facturas.municipio), 'municipio    = ' || r_facturas.municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || r_facturas.estado), 'estado       = ' || r_facturas.estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || r_facturas.val_cod_post), 'codigopostal = ' || r_facturas.val_cod_post);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Person.---------------------------------------------------------------------------------------'), 'Person.---------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('filename     = MFC1094M'), 'filename     = MFC1094M');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('count        = 1'), 'count        = 1');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('total        = 2'), 'total        = 2');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('group        = e4e191'), 'group        = e4e191');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cdgconsultora= ' || r_facturas.cod_clie), 'cdgconsultora= ' || r_facturas.cod_clie);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cdgterritor  = ' || r_facturas.uni_admi), 'cdgterritor  = ' || r_facturas.uni_admi);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('numdespacho  = ' || r_facturas.val_nume_soli), 'numdespacho  = ' || r_facturas.val_nume_soli);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('campaña      = ' || r_facturas.cod_peri), 'campaña      = ' || r_facturas.cod_peri);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalunidades= Total Unidades:        ' || r_facturas.num_unid_aten_tota), 'totalunidades= Total Unidades:        ' || r_facturas.num_unid_aten_tota);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pers10       ='), 'pers10       =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXDETALLES'), 'XXXDETALLES');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                    OPEN c_detalle(r_facturas.oid_cabe);
                    LOOP
                    FETCH c_detalle INTO r_detalle;
                    EXIT WHEN c_detalle%NOTFOUND;

                      l_textoActual:= rpad(r_detalle.num_unid_aten,6,' ') || '| ' || rpad(r_detalle.val_codi_vent,13,' ') || '| ' || rpad(r_detalle.des_prod,43,' ') || '| ' || rpad(to_char(r_detalle.Val_Prec_Sin_Impu_Unit,l_formatoNumerico),16,' ') || '| ' || rpad(to_char(r_detalle.Val_Prec_Sin_Impu_tota_loca,l_formatoNumerico),16,' ') || '| GRP' ||  to_char(trunc(r_detalle.linea/30)+case when mod(r_detalle.linea,30)=0 then 0 else 1 end) || ' |';

                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                    END LOOP;

                    CLOSE c_detalle;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXFINDETALLES'), 'XXXFINDETALLES');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Totales---------------------------------------------------------------------------------------'), 'Totales---------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('moneda       = MXN'), 'moneda       = MXN');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tipocambio   = 0.00000'), 'tipocambio   = 0.00000');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('subtotal     = ' || trim(to_char(r_facturas.val_prec_cata_sin_impu_tota+r_facturas.imp_flet_impu_tota_loca+r_facturas.val_tota_gast_admi_sin_impu,l_formatoNumerico))), 'subtotal     = ' || trim(to_char(r_facturas.val_prec_cata_sin_impu_tota+r_facturas.imp_flet_impu_tota_loca+r_facturas.val_tota_gast_admi_sin_impu,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('descuentos   = ' || trim(to_char(r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico))), 'descuentos   = ' || trim(to_char(r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('recargos     ='), 'recargos     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('montobase    = ' || trim(to_char((r_facturas.val_prec_cata_sin_impu_tota+r_facturas.imp_flet_impu_tota_loca+r_facturas.val_tota_gast_admi_sin_impu)-r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico))), 'montobase    = ' || trim(to_char((r_facturas.val_prec_cata_sin_impu_tota+r_facturas.imp_flet_impu_tota_loca+r_facturas.val_tota_gast_admi_sin_impu)-r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tipoimp      = IVA'), 'tipoimp      = IVA');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tasaiva      = ' || trim(to_char(r_facturas.val_tasa,l_formatoNumerico))), 'tasaiva      = ' || trim(to_char(r_facturas.val_tasa,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('montoiva     = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico))), 'montoiva     = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('totaltras    = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico))), 'totaltras    = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalpagar   = ' || trim(to_char(r_facturas.val_tota_paga_loca,l_formatoNumerico))), 'totalpagar   = ' || trim(to_char(r_facturas.val_tota_paga_loca,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);


                l_textoActual := UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(r_facturas.val_tota_paga_loca))) || ' ' || TO_CHAR((r_facturas.val_tota_paga_loca - TRUNC(r_facturas.val_tota_paga_loca)) * 100)  || '/100 M.N.';
                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalletra   = SON: ' || l_textoActual), 'totalletra   = SON: ' || l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXXREFERENCIADOS'), 'XXXXREFERENCIADOS');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXFINDOC'), 'XXXFINDOC');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);



    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;
/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Peru Esika con bonificaciones por consolidado.
Fecha Creación      : 26/03/2012
Fecha Modificacion  : 26/03/2012
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_BOLET_MATRI_CLE(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2) IS

CURSOR c_facturas IS
SELECT --DOC.COR_DOCU_CONT_MATR,
       --DOC.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_IMPO_REDO_LOCA,
       --CON.VAL_INDI_IMPU,
       CON.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       ZR.COD_REGI,
       ZZ.COD_ZONA,
       ZS.COD_SECC,
       ZT.COD_TERR,
       --DOC.COD_PERI,
       --DOC.FEC_VENC,
       FTD.COD_TIPO_DOCU,
       1 NUM_PAGI,
       1 NUM_TOTA_PAGI,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 3)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       substr(imp_pkg_proce_laser.imp_fn_obtiene_text_direc(CAB.Cldi_Oid_Clie_Dire,0),0,92) DIR1,
       mcd.des_villa_pobl DIR2,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.VAL_PREC_CONT_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE,
       CAB.VAL_IMPO_RETE_DESC
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_DIREC MCD,
     --MAE_CLIEN_IDENT MCI,
     MAE_CLIEN MC,
     ZON_TERRI_ADMIN ZTA,
     ZON_TERRI ZT,
     ZON_SECCI ZS,
     ZON_ZONA ZZ,
     ZON_REGIO ZR,
     FAC_TIPO_DOCUM FTD
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
AND CON.OID_SOLI_CABE=p_oidsoli
AND CAB.CLDI_OID_CLIE_DIRE=MCD.OID_CLIE_DIRE
AND MCD.CLIE_OID_CLIE=MC.OID_CLIE
--AND MC.OID_CLIE=MCI.CLIE_OID_CLIE
AND CON.ZTAD_OID_TERR_ADMI=ZTA.OID_TERR_ADMI
AND ZTA.TERR_OID_TERR=ZT.OID_TERR
AND ZTA.ZSCC_OID_SECC=ZS.OID_SECC
AND ZTA.IND_BORR=0
AND ZS.ZZON_OID_ZONA=ZZ.OID_ZONA
AND ZZ.ZORG_OID_REGI=ZR.OID_REGI
AND CAB.TIDO_OID_TIPO_DOCU=1
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and cab.val_impo_rete_desc>0
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
and not exists
(select 1 from ped_solic_cabec where soca_oid_soli_cabe=cab.soca_oid_soli_cabe and ind_oc=1)
;

TYPE facturarecord IS RECORD (
    --cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    --cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    MAE_CLIEN.oid_clie%TYPE,
    cod_clie                    MAE_CLIEN.cod_clie%TYPE,
    cod_digi_ctrl               MAE_CLIEN.cod_digi_ctrl%TYPE,
    val_nom1                    MAE_CLIEN.val_nom1%TYPE,
    val_nom2                    MAE_CLIEN.val_nom2%TYPE,
    val_ape1                    MAE_CLIEN.val_ape1%TYPE,
    val_ape2                    MAE_CLIEN.val_ape2%TYPE,
    oid_soli_cabe               PED_SOLIC_CABEC.oid_soli_cabe%TYPE,
    val_nume_soli               PED_SOLIC_CABEC.val_nume_soli%TYPE,
    fec_fact                    PED_SOLIC_CABEC.fec_fact%TYPE,
    val_impo_redo_cons          PED_SOLIC_CABEC.val_impo_redo_LOCA%TYPE,
    --val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               PED_SOLIC_CABEC.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte          fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    cod_regi                    ZON_REGIO.cod_regi%TYPE,
    cod_zona                    ZON_ZONA.cod_zona%TYPE,
    cod_secc                    ZON_SECCI.cod_secc%TYPE,
    cod_terr                    ZON_TERRI.cod_terr%TYPE,
    --cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    --fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               FAC_TIPO_DOCUM.cod_tipo_docu%TYPE,
    num_pagi                    number(3),
    num_tota_pagi               NUMBER(3),
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    dir1                        fac_docum_conta_cabec.val_dire_comp%TYPE,
    dir2                        fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_cabec.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    VAL_IMPO_RETE_DESC          fac_docum_conta_cabec.VAL_IMPO_RETE_DESC%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' =================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalBonificaci           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';


l_CLOB                      CLOB;


lv_indiejec VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codpais,'STO_GASTO_ADMIN'),'N');

lv_loteprod VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codpais,'STO_LOTE_PROD'),'N');


BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                /*SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = 1--r_factura(i).cor_docu_cont_matr
                FOR UPDATE;*/

                INSERT INTO IMP_PAQUE_DOCUM_BOLET_MATRI (
                COR_BOLE,
                COD_CONS,
                VAL_NUME_SOLI,
                VAL_BUFF)
                VALUES(
                r_factura(i).oid_docu_cont_cabe,
                r_factura(i).cod_clie,
                r_factura(i).val_nume_soli,
                EMPTY_CLOB())
                RETURNING VAL_BUFF INTO l_clob;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                --Fecha de emision
                l_textoActual := lpad(TO_CHAR(r_factura(i).fec_fact, 'DD'),53,' ') || lpad(TO_CHAR(r_factura(i).fec_fact, 'MM'),4,' ') ||  lpad(TO_CHAR(r_factura(i).fec_fact, 'YY'),4,' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := lpad(' ',7,' ') || TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := lpad(' ',7,' ') || r_factura(i).dir1;
                l_direccionLinea2 := lpad(' ',7,' ') || rpad(r_factura(i).dir2 || '-' || r_factura(i).val_ubig,38,' ') || substr(r_factura(i).val_nume_iden_fisc,1,length(r_factura(i).val_nume_iden_fisc)-1) || '-' || substr(r_factura(i).val_nume_iden_fisc,length(r_factura(i).val_nume_iden_fisc));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Código de la Cliente
                l_textoActual := lpad(' ',3,' ') || TRIM(r_factura(i).cod_clie);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Descuento
                l_textoActual := lpad(' ',3,' ') || RPAD(r_factura(i).cod_regi || '-' || r_factura(i).cod_zona || '-' || r_factura(i).cod_secc || '-' || r_factura(i).cod_terr, 20, ' ') || LPAD(TRIM(TO_CHAR(r_factura(i).IMP_DESC_TOTA_LOCA, '999G999G999G990')),37,' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Retención
                l_textoActual := lpad(' ',23,' ') || LPAD(TRIM(TO_CHAR(nvl(r_factura(i).VAL_IMPO_RETE_DESC,0), '999G999G999G990')),37,' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Comisión Liquida
                l_textoActual := lpad(' ',23,' ') || LPAD(TRIM(TO_CHAR(r_factura(i).IMP_DESC_TOTA_LOCA-nvl(r_factura(i).VAL_IMPO_RETE_DESC,0), '999G999G999G990')),37,' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);



            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;
/**************************************************************************
Descripcion         : Genera el documento factura Global para MX.
Fecha Creación      : 13/11/2014
Fecha Modificacion  : 13/11/2014
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_BOLET_MATRI_MXL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_facturas IS
SELECT con.fec_fact,
       substr(spc.cod_peri,3,2) || '-' || substr(spc.cod_peri,5) COD_PERI,
       con.val_tasa_impu val_tasa,
       min(cab.fec_emis) fec_emis,
       sum(cab.val_prec_cata_sin_impu_tota) val_prec_cata_sin_impu_tota,
       sum(cab.num_unid_aten_tota) num_unid_aten_tota,
       sum(cab.imp_des1_sin_impu_tota) imp_des1_sin_impu_tota,
       sum(cab.imp_impu_tota_loca) imp_impu_tota_loca,
       sum(cab.val_tota_paga_loca) val_tota_paga_loca,
       sum(cab.imp_flet_impu_tota_loca) imp_flet_tota_loca,
       sum(NVL(cab.Val_Tota_Gast_Admi_Sin_Impu,0)+NVL(cab.Val_Tota_Gast_Admi2_Sin_Impu,0)) VAL_TOTA_GAST_ADMI
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     FAC_TIPO_DOCUM FTD,
     cra_perio cp,
     seg_perio_corpo spc
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
and con.perd_oid_peri=cp.oid_peri
and cp.peri_oid_peri=spc.oid_peri
and spc.cod_peri=p_codigoPeriodo
and cab.fec_fact=to_date(p_fechaFacturacion,'dd/mm/yyyy')
AND CAB.TIDO_OID_TIPO_DOCU=41
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer(+)
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
group by con.fec_fact,
       substr(spc.cod_peri,3,2) || '-' || substr(spc.cod_peri,5),
       con.val_tasa_impu--, cab.fec_emis
;

r_facturas c_facturas%ROWTYPE;



CURSOR c_detalle IS
select 
VAL_CODI_VENT,
DES_PROD,
num_unid_aten,
VAL_PREC_CATA_UNIT_LOCA,
VAL_PREC_CATA_TOTA_LOCA,
Val_Prec_Sin_Impu_Unit,
Val_Prec_Sin_Impu_Tota_Loca,
VAL_PREC_CONT_UNIT_LOCA,
VAL_PREC_CONT_TOTA_LOCA,
IMP_DESC_TOTA_LOCA,
VAL_PREC_FACT_UNIT_LOCA,
VAL_PREC_FACT_TOTA_LOCA,
VAL_PREC_NETO_UNIT_LOCA,
VAL_PREC_NETO_TOTA_LOCA,
rownum linea
from 
(
SELECT --DET.NUM_LINEA,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       gen.val_i18n DES_PROD,
       sum(DET.NUM_UNID_ATEN) num_unid_aten,
       sum(DET.VAL_PREC_CATA_UNIT_LOCA) VAL_PREC_CATA_UNIT_LOCA,
       sum(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       sum(DET.Val_Prec_Sin_Impu_Unit) Val_Prec_Sin_Impu_Unit,
       sum(DET.Val_Prec_Sin_Impu_Tota_Loca) Val_Prec_Sin_Impu_Tota_Loca,
       sum(DET.VAL_PREC_CONT_UNIT_LOCA) VAL_PREC_CONT_UNIT_LOCA,
       sum(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       sum(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       sum(DET.VAL_PREC_FACT_UNIT_LOCA) VAL_PREC_FACT_UNIT_LOCA,
       sum(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       sum(DET.VAL_PREC_NETO_UNIT_LOCA) VAL_PREC_NETO_UNIT_LOCA,
       sum(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA
FROM FAC_DOCUM_CONTA_CABEC CAB,
     cra_perio cp,
     seg_perio_corpo spc,
     FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     gen_i18n_sicc_pais gen
WHERE cab.oid_cabe=det.dcca_oid_cabe
and gen.attr_enti='MAE_PRODU' and gen.val_oid=psp.prod_oid_prod
and cab.perd_oid_peri=cp.oid_peri
and cp.peri_oid_peri=spc.oid_peri
and spc.cod_peri=p_codigoPeriodo
and cab.tido_oid_tipo_docu=41
and cab.fec_fact=to_date(p_fechaFacturacion,'dd/mm/yyyy')
and DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN > 0
--AND NOT EXISTS (
--    SELECT NULL
--    FROM FAC_TIPO_OFERT_EXCLU TOE
--    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
--)
group by        NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) ,
       gen.val_i18n
)       
;

r_detalle c_detalle%ROWTYPE;

l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10);
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_Emisor_rfc                VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','001'),'BME060927I33');
l_Emisor_nombre             VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','002'),'BELCORP MEXICO S.A. DE C.V.');
l_Emisor_calle              VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','003'),'Prolongacion Paseo de la Reforma');
l_Emisor_noexterior         VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','004'),'1015');
l_Emisor_nointerior         VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','005'),'Torre B Piso 7');
l_Emisor_colonia            VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','006'),'Desarrollo Santa Fé');
l_Emisor_localidad          VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','007'),'');
l_Emisor_municipio          VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','008'),'Alvaro Obregon');
l_Emisor_estado             VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','009'),'D.F.');
l_Emisor_pais               VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','010'),'Mexico');
l_Emisor_codigopostal       VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','011'),'01376');
l_Receptor_rfc              VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','012'),'XAXX010101000');
l_Receptor_nombre           VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','013'),'COMPROBANTE GLOBAL DE OPERACIONES CON PUBLICO EN GENERAL');
l_Receptor_numerocliente    VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','014'),'');

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '----------------------------------------------------------------------------------------------';
l_totalUnidades             NUMBER := 0;



l_oid_docu_suba             NUMBER(12) := 0;
l_num_docu_cont_inte        NUMBER(12) := 0;
l_anio                      NUMBER(12) := 0;
l_val_seri_docu_lega        VARCHAR2(15);
l_val_nume_auto             VARCHAR2(15);

l_formatoNumerico           VARCHAR2(100) := nvl(IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'formatoNumerico'),'9999999G990D00');



l_CLOB                      CLOB;


BEGIN


delete from IMP_DOCUM_CONTA_MATRI;

select max(a.oid_docu_suba)
into l_oid_docu_suba
from fac_docum_subac a
where a.tido_oid_tipo_docu=1
;

select a.val_ulti_nume_docu_inte+1, a.val_ulti_ejer_docu_inte, a.val_seri_docu_lega, a.val_nume_auto
into l_num_docu_cont_inte, l_anio, l_val_seri_docu_lega, l_val_nume_auto
from fac_docum_subac a
where a.oid_docu_suba=l_oid_docu_suba;

--update fac_docum_subac set val_ulti_nume_docu_inte=l_num_docu_cont_inte
--where oid_docu_suba=l_oid_docu_suba;

update fac_regis_unico_venta a
set a.num_docu_cont_inte=l_num_docu_cont_inte
, a.val_nume_auto=l_val_nume_auto
, a.val_seri_docu_lega=l_val_seri_docu_lega
, a.val_nume_docu_lega=l_num_docu_cont_inte
, a.tido_oid_tipo_docu=41
where dcca_oid_cabe in
(
SELECT cab.oid_cabe
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_IDENT MCI,
     FAC_TIPO_DOCUM FTD,
     mae_tipo_docum mtd,
     cra_perio cp,
     seg_perio_corpo spc
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
and con.perd_oid_peri=cp.oid_peri
and cp.peri_oid_peri=spc.oid_peri
and spc.cod_peri=p_codigoPeriodo
and cab.fec_fact=to_date(p_fechaFacturacion,'dd/mm/yyyy')
and con.clie_oid_clie=mci.clie_oid_clie
and mci.tdoc_oid_tipo_docu=mtd.oid_tipo_docu
--and mtd.val_sigl<>'RFC'
AND CAB.TIDO_OID_TIPO_DOCU=41
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
);


update fac_docum_conta_cabec a
set a.num_docu_cont_inte=l_num_docu_cont_inte
, a.val_nume_auto=l_val_nume_auto
, a.val_seri_docu_lega=l_val_seri_docu_lega
, a.num_docu_lega=l_num_docu_cont_inte
, a.tido_oid_tipo_docu=41
where oid_cabe in
(
SELECT cab.oid_cabe
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_IDENT MCI,
     FAC_TIPO_DOCUM FTD,
     mae_tipo_docum mtd,
     cra_perio cp,
     seg_perio_corpo spc
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
and con.perd_oid_peri=cp.oid_peri
and cp.peri_oid_peri=spc.oid_peri
and spc.cod_peri=p_codigoPeriodo
and cab.fec_fact=to_date(p_fechaFacturacion,'dd/mm/yyyy')
and con.clie_oid_clie=mci.clie_oid_clie
and mci.tdoc_oid_tipo_docu=mtd.oid_tipo_docu
--and mtd.val_sigl<>'RFC'
AND CAB.TIDO_OID_TIPO_DOCU=41
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
);


    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
    FETCH c_facturas INTO r_facturas;
    EXIT WHEN c_facturas%NOTFOUND;

                update fac_docum_subac set val_ulti_nume_docu_inte=l_num_docu_cont_inte
                where oid_docu_suba=l_oid_docu_suba;


                INSERT INTO IMP_DOCUM_CONTA_MATRI (
                COR_DOCU_CONT_MATR,
                VAL_BUFF, COD_PAIS)
                VALUES(
                1,
                EMPTY_CLOB(), p_codigoPais)
                RETURNING VAL_BUFF INTO l_clob;

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXINICIO    xxxPARSERXXX'), 'XXXINICIO    xxxPARSERXXX');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cliente    : BELCORP'), 'cliente    : BELCORP');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('elaboro    : Federico Enriquez'), 'elaboro    : Federico Enriquez');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('version    : 1.0'), 'version    : 1.0');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fecha      : 2007.04.22'), 'fecha      : 2007.04.22');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('adenda     : Ninguna'), 'adenda     : Ninguna');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Info Documento--------------------------------------------------------------------------------'), 'Info Documento--------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('num. aprob   = ' || l_val_nume_auto), 'num. aprob   = ' || l_val_nume_auto);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fecha ap     = ' || '20' || l_anio), 'fecha ap     = ' || '20' || l_anio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('serie        = ' || l_val_seri_docu_lega), 'serie        = ' || l_val_seri_docu_lega);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('folio        = ' || lpad(l_num_docu_cont_inte,6,'0')), 'folio        = ' || lpad(l_num_docu_cont_inte,6,'0'));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('foliointerno ='), 'foliointerno =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechaemision = ' || to_char(r_facturas.fec_fact,'yyyy/mm/dd') || ' ' || to_char(r_facturas.fec_emis,'hh:mm:ss')), 'fechaemision = ' || to_char(r_facturas.fec_fact,'yyyy/mm/dd') || ' ' || to_char(r_facturas.fec_emis,'hh:mm:ss'));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('formapago    ='), 'formapago    =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('termpagodias ='), 'termpagodias =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('condpago     ='), 'condpago     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('ordencompra  ='), 'ordencompra  =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechaoc      ='), 'fechaoc      =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechavenc.   ='), 'fechavenc.   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisor----------------------------------------------------------------------------------------'), 'Emisor----------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('rfc          = ' || l_Emisor_rfc), 'rfc          = ' || l_Emisor_rfc);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nombre       = ' || l_Emisor_nombre), 'nombre       = ' || l_Emisor_nombre);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisior Domicilio fiscal----------------------------------------------------------------------'), 'Emisior Domicilio fiscal----------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || l_Emisor_calle), 'calle        = ' || l_Emisor_calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   = ' || l_Emisor_noexterior), 'noexterior   = ' || l_Emisor_noexterior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   = ' || l_Emisor_nointerior), 'nointerior   = ' || l_Emisor_nointerior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || l_Emisor_colonia), 'colonia      = ' || l_Emisor_colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = ' || l_Emisor_localidad), 'localidad    = ' || l_Emisor_localidad);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || l_Emisor_municipio), 'municipio    = ' || l_Emisor_municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || l_Emisor_estado), 'estado       = ' || l_Emisor_estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || l_Emisor_codigopostal), 'codigopostal = ' || l_Emisor_codigopostal);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisior Domicilio expedicion------------------------------------------------------------------'), 'Emisior Domicilio expedicion------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('sucursal     ='), 'sucursal     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || l_Emisor_calle), 'calle        = ' || l_Emisor_calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   = ' || l_Emisor_noexterior), 'noexterior   = ' || l_Emisor_noexterior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   = ' || l_Emisor_nointerior), 'nointerior   = ' || l_Emisor_nointerior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || l_Emisor_colonia), 'colonia      = ' || l_Emisor_colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = '), 'localidad    = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || l_Emisor_municipio), 'municipio    = ' || l_Emisor_municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || l_Emisor_estado), 'estado       = ' || l_Emisor_estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || l_Emisor_codigopostal), 'codigopostal = ' || l_Emisor_codigopostal);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor--------------------------------------------------------------------------------------'), 'Receptor--------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('rfc          = ' || l_Receptor_rfc), 'rfc          = ' || l_Receptor_rfc);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nombre       = ' || l_Receptor_nombre), 'nombre       = ' || l_Receptor_nombre);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('numerocliente='), 'numerocliente=');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor domicilio fiscal---------------------------------------------------------------------'), 'Receptor domicilio fiscal---------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || l_Emisor_calle), 'calle        = ' || l_Emisor_calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   ='), 'noexterior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   ='), 'nointerior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = '), 'colonia      = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = '), 'localidad    = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('referencia   ='), 'referencia   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = '), 'municipio    = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = '), 'estado       = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         ='), 'pais         =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = '), 'codigopostal = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor domicilio recepcion------------------------------------------------------------------'), 'Receptor domicilio recepcion------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('sucursal     ='), 'sucursal     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        ='), 'calle        =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   ='), 'noexterior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   ='), 'nointerior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      ='), 'colonia      =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = '), 'localidad    = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('referencia   ='), 'referencia   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    ='), 'municipio    =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       ='), 'estado       =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         ='), 'pais         =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal ='), 'codigopostal =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Person.---------------------------------------------------------------------------------------'), 'Person.---------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('filename     = MFC1094M'), 'filename     = MFC1094M');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('count        = 1'), 'count        = 1');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('total        = 2'), 'total        = 2');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('group        = e4e191'), 'group        = e4e191');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cdgconsultora= '), 'cdgconsultora= ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cdgterritor  = '), 'cdgterritor  = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('numdespacho  = '), 'numdespacho  = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('campaña      = ' || r_facturas.cod_peri), 'campaña      = ' || r_facturas.cod_peri);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                if r_facturas.imp_flet_tota_loca<>0 then
                r_facturas.num_unid_aten_tota:=r_facturas.num_unid_aten_tota+1;
                end if;
                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalunidades= Total Unidades:        ' || r_facturas.num_unid_aten_tota), 'totalunidades= Total Unidades:        ' || r_facturas.num_unid_aten_tota);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pers10       ='), 'pers10       =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXDETALLES'), 'XXXDETALLES');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                    OPEN c_detalle;
                    LOOP
                    FETCH c_detalle INTO r_detalle;
                    EXIT WHEN c_detalle%NOTFOUND;

                      l_textoActual:= rpad(r_detalle.num_unid_aten,6,' ') || '| ' || rpad(r_detalle.val_codi_vent,13,' ') || '| ' || rpad(r_detalle.des_prod,43,' ') || '| ' || rpad(to_char(r_detalle.Val_Prec_Sin_Impu_Unit,l_formatoNumerico),16,' ') || '| ' || rpad(to_char(r_detalle.Val_Prec_Sin_Impu_tota_loca,l_formatoNumerico),16,' ') || '| GRP' ||  to_char(trunc(r_detalle.linea/30)+case when mod(r_detalle.linea,30)=0 then 0 else 1 end) || ' |';

                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                    END LOOP;

                      IF r_facturas.IMP_FLET_TOTA_LOCA>0 THEN
                      l_textoActual:= rpad('1',6,' ') || '| ' || rpad(' ',13,' ') || '| ' || rpad('SERVICIOS',43,' ') || '| ' || rpad(to_char(r_facturas.IMP_FLET_TOTA_LOCA,l_formatoNumerico),16,' ') || '| ' || rpad(to_char(r_facturas.IMP_FLET_TOTA_LOCA,l_formatoNumerico),16,' ') || '| GRP' ||  to_char(trunc((r_detalle.linea+1)/30)+case when mod((r_detalle.linea+1),30)=0 then 0 else 1 end) || ' |';

                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                      END IF;

                      IF r_facturas.VAL_TOTA_GAST_ADMI>0 THEN
                      l_textoActual:= rpad('1',6,' ') || '| ' || rpad(' ',13,' ') || '| ' || rpad('GASTOS ADMINISTRATIVOS',43,' ') || '| ' || rpad(to_char(r_facturas.VAL_TOTA_GAST_ADMI,l_formatoNumerico),16,' ') || '| ' || rpad(to_char(r_facturas.VAL_TOTA_GAST_ADMI,l_formatoNumerico),16,' ') || '| GRP' ||  to_char(trunc((r_detalle.linea+2)/30)+case when mod((r_detalle.linea+2),30)=0 then 0 else 1 end) || ' |';

                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                      END IF;

                    CLOSE c_detalle;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXFINDETALLES'), 'XXXFINDETALLES');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Totales---------------------------------------------------------------------------------------'), 'Totales---------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('moneda       = MXN'), 'moneda       = MXN');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tipocambio   = 0.00000'), 'tipocambio   = 0.00000');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('subtotal     = ' || trim(to_char(r_facturas.val_prec_cata_sin_impu_tota+nvl(r_facturas.imp_flet_tota_loca,0)+r_facturas.VAL_TOTA_GAST_ADMI,l_formatoNumerico))), 'subtotal     = ' || trim(to_char(r_facturas.val_prec_cata_sin_impu_tota+nvl(r_facturas.imp_flet_tota_loca,0)+r_facturas.VAL_TOTA_GAST_ADMI,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('descuentos   = ' || trim(to_char(r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico))), 'descuentos   = ' || trim(to_char(r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('recargos     ='), 'recargos     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('montobase    = ' || trim(to_char((r_facturas.val_prec_cata_sin_impu_tota+nvl(r_facturas.imp_flet_tota_loca,0)+r_facturas.VAL_TOTA_GAST_ADMI)-r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico))), 'montobase    = ' || trim(to_char((r_facturas.val_prec_cata_sin_impu_tota+nvl(r_facturas.imp_flet_tota_loca,0)+r_facturas.VAL_TOTA_GAST_ADMI)-r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tipoimp      = IVA'), 'tipoimp      = IVA');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tasaiva      = ' || trim(to_char(r_facturas.val_tasa,l_formatoNumerico))), 'tasaiva      = ' || trim(to_char(r_facturas.val_tasa,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('montoiva     = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico))), 'montoiva     = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('totaltras    = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico))), 'totaltras    = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalpagar   = ' || trim(to_char(r_facturas.val_tota_paga_loca,l_formatoNumerico))), 'totalpagar   = ' || trim(to_char(r_facturas.val_tota_paga_loca,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);


                l_textoActual := UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(r_facturas.val_tota_paga_loca))) || ' ' || TO_CHAR((r_facturas.val_tota_paga_loca - TRUNC(r_facturas.val_tota_paga_loca)) * 100)  || '/100 M.N.';
                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalletra   = SON: ' || l_textoActual), 'totalletra   = SON: ' || l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXXREFERENCIADOS'), 'XXXXREFERENCIADOS');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXFINDOC'), 'XXXFINDOC');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);



    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;


END;

/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Ecuador Esika.
Fecha Creación      : 24/07/2009
Fecha Modificacion  : 24/07/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_ECE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_factura IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.OID_SOLI_CABE_REFE,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.COD_PERI_REFE,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_IMPO_IVA_ASUM_EMPR,
       case when (select sum (ind_oc) from ped_solic_cabec where soca_oid_soli_cabe=DOC.OID_SOLI_CABE)>0 then 'ORDEN DE COMPRA'
               else 'SERVICIO'
       end as TIPO
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    oid_soli_cabe_refe      imp_docum_conta_matri.oid_soli_cabe_refe%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi           imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    val_impo_iva_asum_empr  fac_docum_conta_cabec.val_impo_iva_asum_empr%TYPE,
    tipo                    fac_docum_conta_cabec.val_obse%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       MP.COD_SAP,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC,
       NVL(DET.IMP_IMPU_TOTA_PROD_NACI, 0) IMP_IMPU_TOTA_PROD_NACI
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
--     PRE_OFERT_DETAL POD, -- (CHR 14/04/2010)
     MAE_PRODU MP
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.PROD_OID_PROD = MP.OID_PROD
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
-- Comentamos la exclusion de tipos de oferta ya que comparando con PRD
-- no lo usa esta condicion en Ecuador (CHR 14/04/2010)
/*
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
)*/
;

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    cod_sap                 mae_produ.cod_sap%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE,
    imp_impu_tota_prod_naci fac_docum_conta_linea.imp_impu_tota_prod_naci%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 31;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalSinDescuentos        NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;
l_totalICE                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);

ls_indicadorImpuesto        VARCHAR2(3);
l_tasaImpuesto              NUMBER(5,3);

l_CLOB                      CLOB;

lstemp VARCHAR2(10):=IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'incluyeGloseEC');

l_textoFlete                VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'textoFlete');


BEGIN

    -- Actualizamos los valores del impuesto
    SELECT PTI.VAL_INDI_IMPU,
           PTI.VAL_TASA_IMPU
    INTO  ls_indicadorImpuesto, l_tasaImpuesto
    FROM   PED_IMPUE_GENER PIG,
           PED_TASA_IMPUE PTI,
           SEG_SUBAC SSA
    WHERE PIG.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
      AND PIG.SBAC_OID_SBAC = SSA.OID_SBAC
      AND SSA.COD_SBAC = '000';

    UPDATE IMP_DOCUM_CONTA_MATRI DCM
    SET DCM.VAL_INDI_IMPU = ls_indicadorImpuesto,
        DCM.VAL_TASA_IMPU = l_tasaImpuesto;

    -- Abrimos el cursor principal
    OPEN c_factura;
    LOOP
        FETCH c_factura BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nro de Pagina
                l_textoActual := LPAD(' ', 62) || 'PAG.' || LPAD(r_factura(i).num_pagi, 2) || ' DE ' || LPAD(r_factura(i).num_tota_pagi, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Fecha
                l_textoActual := LPAD(' ', 59) || RPAD('QUITO', 14);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'MM'), 4);
                l_textoActual := l_textoActual || TO_CHAR(r_factura(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nro de Pedido y Codigo Interno
                l_textoActual := 'N.PEDIDO: ' || r_factura(i).val_nume_soli || ' CODIGO INTERNO:' || LPAD(r_factura(i).num_docu_cont_inte, 14);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Codigo del Cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(r_factura(i).cod_clie, 23);
                l_textoActual := l_textoActual || LPAD(' ', 23) || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 26);
                l_textoActual := l_textoActual || r_factura(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 12) || RPAD(l_nombreCompleto,60) || r_factura(i).cod_peri;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_textoActual := LPAD(' ', 9) || substr(r_factura(i).val_dire_comp, 1, 60);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                l_totalICE := 0;

                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(r_detalle(j).num_unid_aten, 9) || RPAD(' ', 2);
                            l_textoActual := l_textoActual || RPAD(r_detalle(j).cod_sap || ' ' || r_detalle(j).des_prod, 45);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalICE := l_totalICE + r_detalle(j).imp_impu_tota_prod_naci;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                                l_totalICE := l_totalICE + r_detalle(j).imp_impu_tota_prod_naci;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 9);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                IF r_factura(i).tipo IS NOT NULL and nvl(lstemp,'N')='S' THEN
                    l_textoActual := 'NOTA: ' || r_factura(i).tipo;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := 'Tot.' || LPAD(l_totalUnidades, 6);
                l_textoActual := l_textoActual || LPAD(' ', 29) || 'Total Productos             :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 38) || 'Descuentos                  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


if l_textoFlete is null then

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Calculos de montos de impuestos
                l_totalSinDescuentos := l_totalProductos - l_totalDescuentos;
                l_baseImponible := l_totalSinDescuentos / (1 + r_factura(i).val_tasa_impu / 100);
                l_impuesto := l_totalSinDescuentos - l_baseImponible;

                -- ICE
                l_textoActual := LPAD(' ', 38) || 'ICE                         :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalICE, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Base Imponible
                l_textoActual := LPAD(' ', 38) || 'Base Imponible para IVA     :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Impuesto
                l_textoActual := LPAD(' ', 38) || 'IVA Tarifa ' || LPAD(r_factura(i).val_tasa_impu || '%', 3) || '              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Transportes
                l_totalTransportes := ABS(r_factura(i).imp_flet_tota_loca);
                --l_totalTransportes := decode(l_textoFlete, null, ABS(r_factura(i).imp_flet_tota_loca), ABS(r_factura(i).imp_flet_tota_loca)/(1+(r_factura(i).val_tasa_impu/100)));
                l_textoActual := LPAD(' ', 38) || nvl(l_textoFlete,'Fletes y Serv. (0%  IVA)    :');
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 38) || 'Total Factura               :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                else
                -- Calculos de montos de impuestos
                l_totalSinDescuentos := l_totalProductos - l_totalDescuentos;
                l_baseImponible := l_totalSinDescuentos / (1 + r_factura(i).val_tasa_impu / 100);
                l_impuesto := l_totalSinDescuentos - l_baseImponible;

                -- ICE
                l_textoActual := LPAD(' ', 38) || 'ICE                         :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalICE, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Subtotal Factura
                l_textoActual := LPAD(' ', 38) || 'Subtotal Factura            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Transportes
                  l_totalTransportes:=round(ABS(r_factura(i).imp_flet_tota_loca)/(1+(r_factura(i).val_tasa_impu/100)),2);
                --l_totalTransportes := decode(l_textoFlete, null, ABS(r_factura(i).imp_flet_tota_loca), ABS(r_factura(i).imp_flet_tota_loca)/(1+(r_factura(i).val_tasa_impu/100)));
                l_textoActual := LPAD(' ', 38) || nvl(l_textoFlete,'Fletes y Serv. (0%  IVA)    :');
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Base Imponible
                l_textoActual := LPAD(' ', 38) || 'Base Imponible para IVA     :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_baseImponible+l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                l_impuesto:=l_impuesto+r_factura(i).imp_flet_tota_loca-l_totalTransportes;
                -- Impuesto
                l_textoActual := LPAD(' ', 38) || 'IVA Tarifa ' || LPAD(r_factura(i).val_tasa_impu || '%', 3) || '              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + r_factura(i).imp_flet_tota_loca;
                l_textoActual := LPAD(' ', 38) || 'Total Factura               :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

end if;


                -- Total en texto
                IF l_totalFactura <> 0 THEN
                    l_textoActual := LPAD('SON:', 7) || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura)) || ' y ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD('SON:', 7) || 'CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_factura%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_factura;
END;

/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Panama LBEL.
Fecha Creación      : 29/03/2010
Fecha Modificacion  : 29/03/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_PAL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_factura IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.OID_SOLI_CABE_REFE,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.COD_PERI_REFE,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_IMPO_IVA_ASUM_EMPR
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    oid_soli_cabe_refe      imp_docum_conta_matri.oid_soli_cabe_refe%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi           imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    val_impo_iva_asum_empr  fac_docum_conta_cabec.val_impo_iva_asum_empr%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC,
       NVL(DET.IMP_IMPU_TOTA_PROD_NACI, 0) IMP_IMPU_TOTA_PROD_NACI
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE,
    imp_impu_tota_prod_naci fac_docum_conta_linea.imp_impu_tota_prod_naci%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 31;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalSinDescuentos        NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);

ls_indicadorImpuesto        VARCHAR2(3);
l_tasaImpuesto              NUMBER(5,3);

l_CLOB                      CLOB;

BEGIN

    -- Actualizamos los valores del impuesto
    SELECT PTI.VAL_INDI_IMPU,
           PTI.VAL_TASA_IMPU
    INTO  ls_indicadorImpuesto, l_tasaImpuesto
    FROM   PED_IMPUE_GENER PIG,
           PED_TASA_IMPUE PTI,
           SEG_SUBAC SSA
    WHERE PIG.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
      AND PIG.SBAC_OID_SBAC = SSA.OID_SBAC
      AND SSA.COD_SBAC = '000';

    UPDATE IMP_DOCUM_CONTA_MATRI DCM
    SET DCM.VAL_INDI_IMPU = ls_indicadorImpuesto,
        DCM.VAL_TASA_IMPU = l_tasaImpuesto;

    -- Abrimos el cursor principal
    OPEN c_factura;
    LOOP
        FETCH c_factura BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto de la factura
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nro de Pedido, Codigo Interno y Nro de Pagina
                l_textoActual := LPAD(' ', 9) || 'N.PED.: ' || r_factura(i).val_nume_soli ||  ' COD. INT.:' || LPAD(r_factura(i).num_docu_cont_inte, 14);
                l_textoActual := l_textoActual || LPAD(' ', 10) || 'PAG.' || LPAD(r_factura(i).num_pagi, 2) || ' DE ' ||  LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Pais y Fecha
                l_textoActual := LPAD(' ', 59) || 'PANAMA';
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_factura(i).fec_fact, 'DD'), 10);
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_factura(i).fec_fact, 'MM'), 5);
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_factura(i).fec_fact, 'YY'), 4);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 14) || RPAD(r_factura(i).cod_clie, 32);
                l_textoActual := l_textoActual || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 26);
                l_textoActual := l_textoActual || r_factura(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 12) || RPAD(l_nombreCompleto, 60) || r_factura(i).cod_peri;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_textoActual := LPAD(' ', 9) || substr(r_factura(i).val_dire_comp, 1, 60);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;

                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(r_detalle(j).num_unid_aten, 9) ||LPAD(' ', 2)  || RPAD(r_detalle(j).des_prod ,40);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 14);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := 'Tot.' || LPAD(l_totalUnidades, 6);
                l_textoActual := l_textoActual || LPAD(' ', 29) || 'Total Productos             :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 38) || 'Descuentos                  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Calculos de montos de impuestos
                l_totalSinDescuentos := l_totalProductos - l_totalDescuentos;
                l_baseImponible := l_totalSinDescuentos / (1 + r_factura(i).val_tasa_impu / 100);
                l_impuesto := l_totalSinDescuentos - l_baseImponible;

                -- Base Imponible
                l_textoActual := LPAD(' ', 36) || 'Base Imponible para ITBMS     :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Impuesto
                l_textoActual := LPAD(' ', 36) || 'ITBMS Tarifa ' || LPAD(r_factura(i).val_tasa_impu || '%', 3) || '              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Transportes
                l_totalTransportes := ABS(r_factura(i).imp_flet_tota_loca);
                l_textoActual := LPAD(' ', 36) || 'Fletes y Serv. (0%  ITBMS)    :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 36) || 'Total Factura                 :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total en texto
                IF l_totalFactura <> 0 THEN
                    l_textoActual := LPAD('SON:', 7) || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura)) || ' y ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD('SON:', 7) || 'CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_factura%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_factura;
END;

/**************************************************************************
Descripcion         : Genera el documento del factura matricial en el formato
                      de Guatemala LBEL.
Fecha Creación      : 04/11/2009
Fecha Modificacion  : 04/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_GTL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       REG.DES_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       NVL(
           (SELECT TRIM(MCI.NUM_DOCU_IDEN)
            FROM MAE_CLIEN_IDENT MCI,
                 MAE_TIPO_DOCUM MTD
            WHERE MCI.TDOC_OID_TIPO_DOCU = MTD.OID_TIPO_DOCU
              AND MTD.COD_TIPO_DOCU = '02' -- NIT
              AND MCI.CLIE_OID_CLIE = DOC.OID_CLIE
              AND ROWNUM = 1),
           'C.FINAL'
       ) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       TRIM(GEN_PKG_GENER.GEN_FN_CLIEN_TEXTO_COMUN(DOC.OID_CLIE, 'TF') || '/' || GEN_PKG_GENER.GEN_FN_CLIEN_TEXTO_COMUN(DOC.OID_CLIE, 'TM')) VAL_NUME_TELE,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB,
     ZON_REGIO REG
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
AND DOC.OID_REGI = REG.OID_REGI
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    des_regi                zon_regio.des_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_nume_tele           varchar2(500),
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, LPAD('0', 4 - LENGTH(PSP.VAL_CODI_VENT_FICT), '0') || PSP.VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN > 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '      -----                                                                 ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD('SUJETO A PAGOS TRIMESTRALES', 92);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha
                l_textoActual := LPAD(' ', 36) || 'COD. INT.: ' || RPAD(r_factura(i).num_docu_cont_inte, 20) || RPAD('C.GUATEMALA', 14);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'MM'), 5);
                l_textoActual := l_textoActual || TO_CHAR(r_factura(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 17) || RPAD(r_factura(i).cod_clie, 30);
                l_textoActual := l_textoActual || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_secc || '-' || r_factura(i).cod_terr, 25);
                l_textoActual := l_textoActual || r_factura(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Pedido
                l_textoActual := LPAD(' ', 70) || 'Despacho:  ' || r_factura(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del cliente - Periodo
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 15) || RPAD(l_nombreCompleto, 66) || SUBSTR(r_factura(i).cod_peri, 3, 2) || '-' || SUBSTR(r_factura(i).cod_peri, 5, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion
                l_textoActual := LPAD(' ', 13) || nvl(trim(SUBSTR(r_factura(i).val_dire_comp, 1, 73)),'GUATEMALA');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Region y telefonos
                l_textoActual := LPAD(' ', 13) || RPAD(r_factura(i).des_regi, 42) || 'TELEFONO : ' || r_factura(i).val_nume_tele;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(r_detalle(j).num_unid_aten, 11) ||LPAD(' ', 7)  || RPAD(r_detalle(j).des_prod ,40);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 14);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := 'Total' || LPAD(l_totalUnidades, 6);
                l_textoActual := l_textoActual || LPAD(' ', 61) || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 14);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Orden
                l_textoActual := LPAD(' ', 47) || 'Total Orden              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 47) || '(-)Descuentos            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 76) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Sin Descuentos
                l_textoActual := LPAD(' ', 47) || 'Total Productos          :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos - l_totalDescuentos, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                l_textoActual := LPAD(' ', 47) || '(+) Fletes y Serv.       :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 76) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Total Factura            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 15) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura))) || ' ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100 QUETZALES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del factura matricial en el formato
                      de Guatemala Esika.
Fecha Creación      : 09/11/2009
Fecha Modificacion  : 09/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_GTE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       NVL(
           (SELECT TRIM(MCI.NUM_DOCU_IDEN)
            FROM MAE_CLIEN_IDENT MCI,
                 MAE_TIPO_DOCUM MTD
            WHERE MCI.TDOC_OID_TIPO_DOCU = MTD.OID_TIPO_DOCU
              AND MTD.COD_TIPO_DOCU = '02' -- NIT
              AND MCI.CLIE_OID_CLIE = DOC.OID_CLIE
              AND ROWNUM = 1),
           'C/F'
       ) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.Imp_Des3_Total_Loca
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    Imp_Des3_Total_Loca     fac_docum_conta_cabec.Imp_Des3_Total_Loca%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;



CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, LPAD('0', 4 - LENGTH(PSP.VAL_CODI_VENT_FICT), '0') || PSP.VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN > 0
and det.val_prec_cata_unit_loca+det.val_prec_cont_unit_loca>0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '                                                                      -----             ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 36) || 'COD. INT.: ' || RPAD(r_factura(i).num_docu_cont_inte, 18) || 'SUJETO A PAGOS TRIMESTRALES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha - Nro Documento - Cliente
                l_textoActual := LPAD(' ', 13) || RPAD('CIUD.GUATEMALA,', 19);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YY'), 25);
                l_textoActual := l_textoActual || RPAD(r_factura(i).val_nume_iden_fisc, 28);
                l_textoActual := l_textoActual || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del cliente - Zona Territorio
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 10) || RPAD(l_nombreCompleto, 71);
                l_textoActual := l_textoActual || r_factura(i).cod_zona || '-' || r_factura(i).cod_secc || '-' || r_factura(i).cod_terr;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion - Periodo
                l_textoActual := LPAD(' ', 10) || RPAD(nvl(r_factura(i).val_dire_comp,'GUATEMALA'), 71);
                l_textoActual := l_textoActual || SUBSTR(r_factura(i).cod_peri, 3, 2) || '-' || SUBSTR(r_factura(i).cod_peri, 5, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 3)|| RPAD(r_detalle(j).val_codi_vent ,12) || RPAD(r_detalle(j).des_prod ,50);
                            l_textoActual := l_textoActual ||  LPAD(r_detalle(j).num_unid_aten, 10);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 13);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 10);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                l_totalDescuentos:=l_totalDescuentos+nvl(r_factura(i).imp_des3_total_loca,0);

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    --IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                    --    l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                   --END IF;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := LPAD('Total', 60) || LPAD(l_totalUnidades, 15);
                l_textoActual := l_textoActual  || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 23);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Orden
                l_textoActual := LPAD(' ', 47) || 'Total Orden              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 25);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 47) || '(-)Descuentos            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 25);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 88) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Sin Descuentos
                l_textoActual := LPAD(' ', 47) || 'Total Productos          :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos - l_totalDescuentos, '9999999990.00')), 25);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                l_textoActual := LPAD(' ', 47) || '(+) Fletes y Serv.       :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 25);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 88) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Total Factura            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 25);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 15) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura))) || ' ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100 QUETZALES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del factura matricial en el formato
                      de El Salvador.
Fecha Creación      : 09/11/2009
Fecha Modificacion  : 09/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_MATRI_SVL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       NVL(
           (SELECT TRIM(MCI.NUM_DOCU_IDEN)
            FROM MAE_CLIEN_IDENT MCI,
                 MAE_TIPO_DOCUM MTD
            WHERE MCI.TDOC_OID_TIPO_DOCU = MTD.OID_TIPO_DOCU
              AND MTD.COD_TIPO_DOCU = '02' -- NIT
              AND MCI.CLIE_OID_CLIE = DOC.OID_CLIE
              AND ROWNUM = 1),
           'C/F'
       ) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       (
select
--d.num_recl,
case when f.cod_oper like 'D%' then 'Devolución'
when f.cod_oper like 'A%' then 'Anulación'
when f.cod_oper like 'F%' then 'Reclamo'
else  'Cambio'
end || ' :' || d.num_recl Despacho
from ped_solic_cabec a, rec_solic_opera b, rec_opera_recla c, rec_cabec_recla d, rec_tipos_opera e, rec_opera f
where a.soca_oid_soli_cabe=doc.oid_soli_cabe and a.oid_soli_cabe=b.soca_oid_soli_cabe and b.opre_oid_oper_recl=C.oid_oper_recl
and c.care_oid_cabe_recl=d.oid_cabe_recl and c.TIOP_OID_TIPO_OPER=e.OID_TIPO_OPER and e.rope_oid_oper=f.oid_oper
--and f.cod_oper<>'DN'
and rownum=1
) despacho,
cab.imp_des3_total_loca
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
and exists (select 1 from ped_solic_cabec x, int_lar_tipo_solici_pedido_dis y
where x.tspa_oid_tipo_soli_pais=y.tspa_oid_tipo_soli_pais and x.oid_soli_cabe=cab.soca_oid_soli_cabe)
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    despacho                fac_docum_conta_cabec.val_obse%TYPE,
    imp_des3_total_loca     fac_docum_conta_cabec.imp_des3_total_loca%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, LPAD('0', 4 - LENGTH(PSP.VAL_CODI_VENT_FICT), '0') || PSP.VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN > 0
and det.val_prec_cata_unit_loca+det.val_prec_cont_unit_loca>0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '                                                                      -----             ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 68) || 'COD. INT.: ' || r_factura(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 57) || RPAD('EL SALVADOR', 16) || TO_CHAR(r_factura(i).fec_fact, 'DD') || LPAD(' ', 7) || TO_CHAR(r_factura(i).fec_fact, 'MM') || LPAD(' ', 7) || TO_CHAR(r_factura(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha - Nro Documento - Cliente
--                l_textoActual := LPAD(' ', 13) || RPAD('CIUD.GUATEMALA,', 19);
--                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YY'), 25);
                -- Nombre del cliente - Zona Territorio
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 11) || RPAD(l_nombreCompleto, 55);
                l_textoActual := l_textoActual || r_factura(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                -- Direccion - Cliente
                l_textoActual := LPAD(' ', 12) || RPAD(substr(r_factura(i).val_dire_comp,1,46), 65);
                l_textoActual := l_textoActual || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion - despacho
                l_textoActual := LPAD(' ', 12) || RPAD(substr(r_factura(i).val_dire_comp,47), 65);
                l_textoActual := l_textoActual || 'Despacho: ' || r_factura(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Territorio - Periodo
                l_textoActual := LPAD(' ', 13) || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_secc || '-' || r_factura(i).cod_terr,30);
                l_textoActual := l_textoActual || SUBSTR(r_factura(i).cod_peri, 3, 2) || '-' || SUBSTR(r_factura(i).cod_peri, 5, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 8)|| RPAD(r_detalle(j).num_unid_aten ,8) || RPAD(r_detalle(j).des_prod ,34);
                            --l_textoActual := l_textoActual ||  LPAD(r_detalle(j).num_unid_aten, 10);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 13) || LPAD(' ', 20);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 10);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;


                l_totalDescuentos:=l_totalDescuentos+nvl(r_factura(i).imp_des3_total_loca,0);

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                l_textoActual := '   ----------                                                                       ----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
--                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := LPAD('Total', 6) || LPAD(l_totalUnidades, 5);
                l_textoActual := l_textoActual  || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 82);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Orden
                l_textoActual := LPAD(' ', 47) || 'Total Orden              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 47) || '(-)Descuentos            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                l_textoActual := LPAD(' ', 47) || '(+) Fletes y Serv.       :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 85) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Subtotal                 :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Ventas Exentas
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Ventas Exentas           :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Ventas No Sujetas
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Ventas No Sujetas        :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 85) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Total Factura            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);


                -- Total en texto
                l_textoActual := LPAD('SON: ', 15) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura))) || ' ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100 DOLARES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

    delete from IMP_DOCUM_CONTA_MATRI where length(val_buff)=0;

END;


/**************************************************************************
Descripcion         : Obtiene la informacion para la generacion de las notas
                      de credito matriciales.
Fecha Creación      : 27/05/2009
Fecha Modificacion  : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_NOTA_CREDI(p_codigoPais VARCHAR2,
                                  p_codigoTipoDocumento VARCHAR2) IS

CURSOR c_notas(oidCanal NUMBER,
               oidMarca NUMBER,
               oidDocumentoInicial NUMBER) IS
SELECT SP.OID_PAIS,
       SP.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_IMPO_REDO_LOCA VAL_IMPO_REDO_CONS,
       PTI.OID_TASA_IMPU,
       PTI.VAL_INDI_IMPU,
       PTI.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       CAB.NUM_DOCU_LEGA,
       REG.OID_REGI,
       REG.COD_REGI,
       ZON.OID_ZONA,
       ZON.COD_ZONA,
       SEC.OID_SECC,
       SEC.COD_SECC,
       TER.OID_TERR,
       TER.COD_TERR,
       CAB.PERD_OID_PERI,
       SPC.COD_PERI,
       CONREF.OID_SOLI_CABE OID_SOLI_CABE_REFE,
       CONREF.VAL_NUME_SOLI VAL_NUME_SOLI_REFE,
       CPR.OID_PERI OID_PERI_REFE,
       SPCR.COD_PERI COD_PERI_REFE,
       FTD.OID_TIPO_DOCU,
       FTD.COD_TIPO_DOCU
FROM FAC_DOCUM_CONTA_CABEC CAB,
     FAC_TIPO_DOCUM FTD,
     MAE_CLIEN MC,
     PED_SOLIC_CABEC CON,
     PED_SOLIC_CABEC CONREF,
     PED_TASA_IMPUE PTI,
     ZON_REGIO REG,
     ZON_ZONA ZON,
     ZON_SECCI SEC,
     ZON_TERRI TER,
     SEG_PAIS SP,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC,
     CRA_PERIO CPR,
     SEG_PERIO_CORPO SPCR
WHERE SP.OID_PAIS = MC.PAIS_OID_PAIS
AND MC.OID_CLIE = CON.CLIE_OID_CLIE
AND CON.OID_SOLI_CABE = CAB.SOCA_OID_SOLI_CABE
AND CON.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
AND CON.SOCA_OID_DOCU_REFE = CONREF.OID_SOLI_CABE (+)
AND CONREF.PERD_OID_PERI = CPR.OID_PERI (+)
AND CPR.PERI_OID_PERI = SPCR.OID_PERI (+)
AND CAB.TIDO_OID_TIPO_DOCU = FTD.OID_TIPO_DOCU
AND CAB.ZORG_OID_REGI = REG.OID_REGI
AND CAB.ZZON_OID_ZONA = ZON.OID_ZONA
AND CAB.ZSCC_OID_SECC = SEC.OID_SECC
AND CAB.TERR_OID_TERR = TER.OID_TERR
AND CAB.PERD_OID_PERI = CP.OID_PERI
AND CP.PERI_OID_PERI = SPC.OID_PERI
AND CP.CANA_OID_CANA = oidCanal
AND CP.MARC_OID_MARC = oidMarca
AND CPR.CANA_OID_CANA (+) = oidCanal
AND CPR.MARC_OID_MARC (+) = oidMarca
AND SP.COD_PAIS = p_codigoPais
AND FTD.COD_TIPO_DOCU = p_codigoTipoDocumento
AND CAB.OID_CABE > oidDocumentoInicial
AND EXISTS (
    SELECT NULL
    FROM FAC_DOCUM_CONTA_LINEA LIN
    WHERE LIN.DCCA_OID_CABE = CAB.OID_CABE
    AND LIN.NUM_UNID_ATEN != 0
)
ORDER BY TO_NUMBER(CAB.VAL_EJER_DOCU_INTE),
         CAB.NUM_DOCU_CONT_INTE;


TYPE notarecord IS RECORD (
    oid_pais            seg_pais.oid_pais%TYPE,
    cod_pais            seg_pais.cod_pais%TYPE,
    oid_clie            mae_clien.oid_clie%TYPE,
    cod_clie            mae_clien.cod_clie%TYPE,
    cod_digi_ctrl       mae_clien.cod_digi_ctrl%TYPE,
    val_nom1            mae_clien.val_nom1%TYPE,
    val_nom2            mae_clien.val_nom2%TYPE,
    val_ape1            mae_clien.val_ape1%TYPE,
    val_ape2            mae_clien.val_ape2%TYPE,
    oid_soli_cabe       ped_solic_cabec.oid_soli_cabe%TYPE,
    val_nume_soli       ped_solic_cabec.val_nume_soli%TYPE,
    fec_fact            ped_solic_cabec.fec_fact%TYPE,
    val_impo_redo_cons  ped_solic_cabec.val_impo_redo_loca%TYPE,
    oid_tasa_impu       ped_tasa_impue.oid_tasa_impu%TYPE,
    val_indi_impu       ped_tasa_impue.val_indi_impu%TYPE,
    val_tasa_impu       ped_tasa_impue.val_tasa_impu%TYPE,
    oid_cabe            fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte  fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    num_docu_lega       fac_docum_conta_cabec.num_docu_lega%TYPE,
    oid_regi            zon_regio.oid_regi%TYPE,
    cod_regi            zon_regio.cod_regi%TYPE,
    oid_zona            zon_zona.oid_zona%TYPE,
    cod_zona            zon_zona.cod_zona%TYPE,
    oid_secc            zon_secci.oid_secc%TYPE,
    cod_secc            zon_secci.cod_secc%TYPE,
    oid_terr            zon_terri.oid_terr%TYPE,
    cod_terr            zon_terri.cod_terr%TYPE,
    oid_peri            cra_perio.oid_peri%TYPE,
    cod_peri            seg_perio_corpo.cod_peri%TYPE,
    oid_soli_cabe_refe  ped_solic_cabec.oid_soli_cabe%TYPE,
    val_nume_soli_refe  ped_solic_cabec.val_nume_soli%TYPE,
    oid_peri_refe       cra_perio.oid_peri%TYPE,
    cod_peri_refe       seg_perio_corpo.cod_peri%TYPE,
    oid_tipo_docu       fac_tipo_docum.oid_tipo_docu%TYPE,
    cod_tipo_docu       fac_tipo_docum.cod_tipo_docu%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

-- Cursor para determinar el numero de paginas
CURSOR c_paginas IS
SELECT COR_DOCU_CONT_MATR,
       NUM_PAGI,
       NUM_TOTA_PAGI
FROM (
SELECT X.COR_DOCU_CONT_MATR,
       X.VAL_NUME_SOLI,
       ROW_NUMBER() OVER (PARTITION BY X.VAL_NUME_SOLI ORDER BY X.NUM_DOCU_CONT_INTE) NUM_PAGI,
       (SELECT COUNT(*) FROM IMP_DOCUM_CONTA_MATRI Y WHERE Y.VAL_NUME_SOLI = X.VAL_NUME_SOLI) NUM_TOTA_PAGI
FROM IMP_DOCUM_CONTA_MATRI X
ORDER BY X.COR_DOCU_CONT_MATR
)
WHERE NUM_TOTA_PAGI > 1;

TYPE t_cor_docu_cont_matr   IS TABLE OF  imp_docum_conta_matri.cor_docu_cont_matr%TYPE;
TYPE t_num_pagi             IS TABLE OF  imp_docum_conta_matri.num_pagi%TYPE;
TYPE t_num_tota_pagi        IS TABLE OF  imp_docum_conta_matri.num_tota_pagi%TYPE;

r_cor_docu_cont_matr    t_cor_docu_cont_matr;
r_num_pagi              t_num_pagi;
r_num_tota_pagi         t_num_tota_pagi;

-- Variables locales
l_oidPais               NUMBER;
l_oidPeriodo            NUMBER;
l_oidCanal              NUMBER;
l_oidMarca              NUMBER;
l_oidDocumentoInicial   NUMBER := 0;
l_correlativo           NUMBER := 1;
   l_indicadorResecuenciacion     NUMBER := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'indicadorResecuenciacion') ;

BEGIN

    -- Obtenemos el OID del periodo
    l_oidPais    := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_codigoPais);
    l_oidCanal   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CANAL(CODIGO_CANAL);
    l_oidMarca   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(CODIGO_MARCA);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE IMP_DOCUM_CONTA_MATRI';

    -- Obtenemos el oid inicial a partir del cual se generaran las notas
    SELECT VAL_ULTI_OID_CABE
    INTO l_oidDocumentoInicial
    FROM IMP_CONTR_DOCUM_CONTA
    WHERE COD_TIPO_DOCU_CONT = p_codigoTipoDocumento;

    -- Verificamos si hay notas de credito con numeros de documento interno en null
    --IMP_PR_VALID_DOCUM_INTER_NULOS(l_oidPais, p_codigoTipoDocumento, l_oidDocumentoInicial);
    IF l_indicadorResecuenciacion = 1 THEN
       IMP_PR_REGEN_SECUE_DOCUM_INTER(l_oidPais,p_codigoTipoDocumento,l_oidDocumentoInicial);
    END IF;

    -- Abrimos el cursor principal
    OPEN c_notas(l_oidCanal, l_oidMarca, l_oidDocumentoInicial);
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP

                INSERT INTO IMP_DOCUM_CONTA_MATRI(
                cor_docu_cont_matr,
                oid_pais,
                cod_pais,
                oid_clie,
                cod_clie,
                cod_digi_ctrl,
                val_nom1,
                val_nom2,
                val_ape1,
                val_ape2,
                oid_soli_cabe,
                val_nume_soli,
                fec_fact,
                val_impo_redo_cons,
                oid_tasa_impu,
                val_indi_impu,
                val_tasa_impu,
                oid_docu_cont_cabe,
                num_docu_cont_inte,
                num_docu_lega,
                oid_regi,
                cod_regi,
                oid_zona,
                cod_zona,
                oid_secc,
                cod_secc,
                oid_terr,
                cod_terr,
                oid_peri,
                cod_peri,
                oid_soli_cabe_refe,
                val_nume_soli_refe,
                oid_peri_refe,
                cod_peri_refe,
                oid_tipo_docu,
                cod_tipo_docu,
                val_buff
                )
                VALUES(
                l_correlativo,
                r_nota(i).oid_pais,
                r_nota(i).cod_pais,
                r_nota(i).oid_clie,
                r_nota(i).cod_clie,
                r_nota(i).cod_digi_ctrl,
                r_nota(i).val_nom1,
                r_nota(i).val_nom2,
                r_nota(i).val_ape1,
                r_nota(i).val_ape2,
                r_nota(i).oid_soli_cabe,
                r_nota(i).val_nume_soli,
                r_nota(i).fec_fact,
                r_nota(i).val_impo_redo_cons,
                r_nota(i).oid_tasa_impu,
                r_nota(i).val_indi_impu,
                r_nota(i).val_tasa_impu,
                r_nota(i).oid_cabe,
                r_nota(i).num_docu_cont_inte,
                r_nota(i).num_docu_lega,
                r_nota(i).oid_regi,
                r_nota(i).cod_regi,
                r_nota(i).oid_zona,
                r_nota(i).cod_zona,
                r_nota(i).oid_secc,
                r_nota(i).cod_secc,
                r_nota(i).oid_terr,
                r_nota(i).cod_terr,
                r_nota(i).oid_peri,
                r_nota(i).cod_peri,
                r_nota(i).oid_soli_cabe_refe,
                r_nota(i).val_nume_soli_refe,
                r_nota(i).oid_peri_refe,
                r_nota(i).cod_peri_refe,
                r_nota(i).oid_tipo_docu,
                r_nota(i).cod_tipo_docu,
                EMPTY_CLOB
                );

                l_correlativo := l_correlativo + 1;

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

    -- Abrimos el cursor de actualizacion de numeros de pagina
    OPEN c_paginas;
    LOOP
        FETCH c_paginas BULK COLLECT
        INTO r_cor_docu_cont_matr,
             r_num_pagi,
             r_num_tota_pagi LIMIT w_filas;

        FORALL j IN 1..r_cor_docu_cont_matr.COUNT
        UPDATE imp_docum_conta_matri
        SET num_pagi = r_num_pagi(j),
            num_tota_pagi = r_num_tota_pagi(j)
        WHERE cor_docu_cont_matr = r_cor_docu_cont_matr(j);

        EXIT WHEN c_paginas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_paginas;

END;

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales.
Fecha Creación      : 27/05/2009
Fecha Modificacion  : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

lstemp VARCHAR2(10):=IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'indicadorNotaCredi2');

BEGIN

    -- Procesamos la informacion generando las facturas en el formato correspondiente
    IF p_codigoPais = 'VEE' THEN
        IMP_PR_GENER_NOCRE_MATRI_VEE(p_codigoPais);
    ELSIF p_codigoPais = 'VEL' THEN
        IMP_PR_GENER_NOCRE_MATRI_VEL(p_codigoPais);
    ELSIF (p_codigoPais = 'ECE' OR p_codigoPais = 'ECL') THEN
        -- Tanto Ecuador LBEL como Esika comparten el mismo diseño de nota de credito
        IMP_PR_GENER_NOCRE_MATRI_ECE(p_codigoPais);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL') THEN
        -- Tanto Peru LBEL como Esika comparten el mismo diseño de nota de credito
        IF nvl(lstemp,'N')='S' then
                IMP_PR_GENER_NOCRE_MATRI_PEE_2(p_codigoPais);
        else
        IMP_PR_GENER_NOCRE_MATRI_PEE(p_codigoPais);
        end if;
    ELSIF p_codigoPais = 'GTL' THEN
        IMP_PR_GENER_NOCRE_MATRI_GTL(p_codigoPais);
    ELSIF p_codigoPais = 'GTE' THEN
        IMP_PR_GENER_NOCRE_MATRI_GTE(p_codigoPais);
    ELSIF p_codigoPais = 'PAL' THEN
        IMP_PR_GENER_NOCRE_MATRI_PAL(p_codigoPais);
    ELSIF p_codigoPais = 'SVE' THEN
        IMP_PR_GENER_NOCRE_MATRI_SVL(p_codigoPais);
    ELSIF p_codigoPais = 'MXL' THEN
        IMP_PR_GENER_NOCRE_MATRI_MXL(p_codigoPais);
    ELSE
        IMP_PR_GENER_NOCRE_MATRI_VEE(p_codigoPais);
    END IF;

    -- Generamos el archivo matricial
    IMP_PR_GENER_ARCHI_NOCRE(p_codigoPais, p_nombreArchivo, p_directorio);

END;

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales.
Fecha Creación      : 27/05/2009
Fecha Modificacion  : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_Z(p_oidzona NUMBER) IS

lstemp VARCHAR2(10):=IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'indicadorNotaCredi2');

BEGIN

    -- Procesamos la informacion generando las facturas en el formato correspondiente
    --IF p_codigoPais = 'MXL' THEN
    ---    IMP_PR_GENER_NOCRE_MATRI_VEE(p_codigoPais);
    --ELSE
    --    return;
    --END IF;

    -- Generamos el archivo matricial
    --IMP_PR_GENER_ARCHI_NOCRE(p_codigoPais, p_nombreArchivo, p_directorio);

    return;

END;

/**************************************************************************
Descripcion         : Genera el archivo matricial de notas de credito.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_NOCRE(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100);
l_finArchivo    VARCHAR2(100);

l_saltopagina    VARCHAR2(100);

l_contador      NUMBER := 0;

CURSOR c_documentos IS
SELECT VAL_BUFF
FROM IMP_DOCUM_CONTA_MATRI
WHERE COD_PAIS = p_codigoPais
ORDER BY COR_DOCU_CONT_MATR;

BEGIN

    l_inicioArchivo := IMP_FN_INICI_ARCHI_NOCRE(p_codigoPais);
    l_finArchivo := IMP_FN_FIN_ARCHI_NOCRE(p_codigoPais);

    l_saltopagina := nvl(IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'saltoPagina'),'S');


    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    -- Iteramos sobre el cursor
    OPEN c_documentos;
    LOOP
        FETCH c_documentos INTO t_clob;
        EXIT WHEN c_documentos%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        if l_saltopagina='S' then
        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12)), TRUE);
        end if;

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_documentos;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_NOCRE: '||substr(SQLERRM,1,250));

END;
/**************************************************************************
Descripcion         : Genera el archivo matricial de notas de credito.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_NOCRE2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100);
l_finArchivo    VARCHAR2(100);
l_contador      NUMBER := 0;

CURSOR c_documentos IS
SELECT VAL_BUFF
FROM Imp_Paque_Docum_Nocre_Matri
--WHERE COD_PAIS = p_codigoPais
ORDER BY COR_nocr;

BEGIN

    l_inicioArchivo := IMP_FN_INICI_ARCHI_NOCRE(p_codigoPais);
    l_finArchivo := IMP_FN_FIN_ARCHI_NOCRE(p_codigoPais);

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    -- Iteramos sobre el cursor
    OPEN c_documentos;
    LOOP
        FETCH c_documentos INTO t_clob;
        EXIT WHEN c_documentos%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12)), TRUE);

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_documentos;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_NOCRE: '||substr(SQLERRM,1,250));

END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_INICI_ARCHI_NOCRE(p_codigoPais VARCHAR2) RETURN VARCHAR2 IS

l_inicioArchivo VARCHAR2(100);

BEGIN
    IF (p_codigoPais = 'VEE' OR p_codigoPais = 'VEL') THEN
        l_inicioArchivo := CHR(27) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77)|| CHR(13) || CHR(10);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL') THEN
        l_inicioArchivo := CHR(27) || CHR(48) || CHR(27) || CHR(80) || CHR(12);
    ELSIF (p_codigoPais = 'ECE' OR p_codigoPais = 'ECL' OR p_codigoPais = 'PAL') THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSIF (p_codigoPais = 'GTE' OR p_codigoPais = 'GTL') THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSIF (p_codigoPais = 'SVL' OR p_codigoPais = 'SVE') THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSE
        l_inicioArchivo := '';
    END IF;

    RETURN l_inicioArchivo;
END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_FIN_ARCHI_NOCRE(p_codigoPais VARCHAR2) RETURN VARCHAR2 IS

l_finArchivo VARCHAR2(100);

BEGIN
    IF (p_codigoPais = 'VEE' OR p_codigoPais = 'VEL') THEN
        l_finArchivo := CHR(12) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL') THEN
        l_finArchivo := CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'ECE' OR p_codigoPais = 'ECL' OR p_codigoPais = 'PAL') THEN
        l_finArchivo := CHR(12) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'GTE' OR p_codigoPais = 'GTL') THEN
        l_finArchivo := CHR(13) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'SVL' OR p_codigoPais = 'SVE') THEN
        l_finArchivo := CHR(13) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSE
        l_finArchivo := '';
    END IF;

    RETURN l_finArchivo;
END;

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales en el formato
                      de Venezuela Esika.
Fecha Creación      : 27/05/2009
Fecha Modificacion  : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_VEE(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       TRIM(CAB.VAL_NUME_IDEN_FISC) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' ====================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_serieLegalFactura         VARCHAR2(10);
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);
l_oidTipoDocumentoFactura   NUMBER(12);
l_tipoDocumentoFactura      VARCHAR2(3);

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Inicializamos las variables
                l_numeroReclamo := 0;
                l_descripcionOperacion := NULL;
                l_serieLegalFactura := NULL;
                l_numeroLegalFactura := 0;
                l_codigoInternoFactura := 0;
                l_fechaFactura := NULL;
                l_montoFactura := 0;
                l_oidTipoDocumentoFactura := 0;
                l_tipoDocumentoFactura := NULL;

                -- Obtenemos los datos del reclamo
                IMP_PR_OBTIE_INFOR_RECLA(r_nota(i).oid_docu_cont_cabe ,
                                         l_numeroReclamo,
                                         l_descripcionOperacion);

                -- Obtenemos los datos de la factura del documento de origen
                IMP_PR_OBTIE_INFOR_DOCLE_REFER(r_nota(i).oid_docu_cont_cabe,
                                               l_serieLegalFactura,
                                               l_numeroLegalFactura,
                                               l_codigoInternoFactura,
                                               l_fechaFactura,
                                               l_montoFactura,
                                               l_oidTipoDocumentoFactura,
                                               l_tipoDocumentoFactura);

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo Interno
                l_textoActual := LPAD(' ', 60) || 'COD. INT.: ' || r_nota(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha
                l_textoActual := LPAD(' ', 6) || RPAD('GUATIRE', 14);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'MM'), 4);
                l_textoActual := l_textoActual || TO_CHAR(r_nota(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de reclamo
                IF l_numeroReclamo != 0 THEN
                    l_textoActual := LPAD(' ', 40) || l_descripcionOperacion || ' ' || l_numeroReclamo;
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 18) || RPAD(r_nota(i).cod_clie || '-' || r_nota(i).cod_digi_ctrl, 32);
                l_textoActual := l_textoActual || RPAD(r_nota(i).cod_zona || '-' || r_nota(i).cod_secc || '-' || r_nota(i).cod_terr, 15);
                l_textoActual := l_textoActual || LPAD(r_nota(i).val_nume_iden_fisc, 22);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 18) || RPAD(l_nombreCompleto,60) || r_nota(i).cod_peri;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion
                l_textoActual := LPAD(' ', 11) || RPAD(r_nota(i).val_dire_comp, 69);
                l_textoActual := l_textoActual || ' N.PED.: ' || r_nota(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 4)  || RPAD(NVL(r_detalle(j).val_codi_vent, ' '), 11);
                            l_textoActual := l_textoActual || RPAD(r_detalle(j).des_prod ,41);
                            l_textoActual := l_textoActual || LPAD(r_detalle(j).num_unid_aten ,5);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 12);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12);

                            IF r_detalle(j).val_porc_desc > 0 THEN
                                    l_textoActual := l_textoActual || '   (D-' || r_detalle(j).val_porc_desc || '%)';
                            END IF;

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie OR l_numSolicitudAnterior != r_nota(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_numSolicitudAnterior := r_nota(i).val_nume_soli;
                    -- A diferencia de la factura en este caso sumamos el valor del redondeo
                    l_totalDescuentos := l_totalDescuentos + r_nota(i).val_impo_redo_cons;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := LPAD(' ', 40) || 'Total Productos ' || LPAD(l_totalUnidades, 5) || '           :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 40) || '(-) Descuentos                  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := ABS(r_nota(i).imp_flet_tota_loca);
                l_textoActual := LPAD(' ', 40) || '(+) Gastos de Transportes       :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 40) || 'Total Factura                   :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Espaciado
                FOR k IN 1..(l_totalEspaciado - (l_contadorDetalles + l_numLineasPieDetalle)) LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                END LOOP;

                -- Calculos de montos finales (impuestos)
                l_baseImponible := l_totalFactura / (1 + r_nota(i).val_tasa_impu / 100);
                l_impuesto := l_totalFactura - l_baseImponible;
                l_totalConImpuesto := l_totalFactura;

                -- Base Imponible
                l_textoActual := LPAD(' ', 54) || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 31);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Impuesto
                l_textoActual := LPAD(r_nota(i).val_tasa_impu || '%', 54) || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 31);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total con Impuesto
                l_textoActual := LPAD(' ', 54) || LPAD(TRIM(TO_CHAR(l_totalConImpuesto, '9999999990.00')), 31);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 7) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalConImpuesto))) || ' CON ' || TO_CHAR((l_totalConImpuesto - TRUNC(l_totalConImpuesto)) * 100)  || '/100';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Texto pie de nota
                IF l_codigoInternoFactura <> 0 THEN
                    l_textoActual := '  Documento que lo soporta: Nro.Factura ';
                    IF l_numeroLegalFactura <> 0 THEN
                        l_textoActual := l_textoActual || l_numeroLegalFactura;
                    ELSE
                        l_textoActual := l_textoActual || 'POR ASIGNAR';
                    END IF;
                    l_textoActual := l_textoActual
                                     || ' de fecha '  || TO_CHAR(l_fechaFactura, 'DD/MM/YYYY')
                                     || ' por Bs.F. ' || TRIM(TO_CHAR(l_montoFactura, '9999999990.00'));
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;

/**************************************************************************
Descripcion         : Genera notas de credito matriciales en el formato
                      de Venezuela LBEL.
Fecha Creación      : 27/05/2009
Fecha Modificacion  : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_VEL(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 31;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '          -----                                                     ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_serieLegalFactura         VARCHAR2(10);
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);
l_oidTipoDocumentoFactura   NUMBER(12);
l_tipoDocumentoFactura      VARCHAR2(3);

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Inicializamos las variables
                l_numeroReclamo := 0;
                l_descripcionOperacion := NULL;
                l_serieLegalFactura := NULL;
                l_numeroLegalFactura := 0;
                l_codigoInternoFactura := 0;
                l_fechaFactura := NULL;
                l_montoFactura := 0;
                l_oidTipoDocumentoFactura := 0;
                l_tipoDocumentoFactura := NULL;

                -- Obtenemos los datos del reclamo
                IMP_PR_OBTIE_INFOR_RECLA(r_nota(i).oid_docu_cont_cabe ,
                                         l_numeroReclamo,
                                         l_descripcionOperacion);

                -- Obtenemos los datos de la factura del documento de origen
                IMP_PR_OBTIE_INFOR_DOCLE_REFER(r_nota(i).oid_docu_cont_cabe,
                                               l_serieLegalFactura,
                                               l_numeroLegalFactura,
                                               l_codigoInternoFactura,
                                               l_fechaFactura,
                                               l_montoFactura,
                                               l_oidTipoDocumentoFactura,
                                               l_tipoDocumentoFactura);

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Pedido y Codigo Interno
                l_textoActual := LPAD(' ', 80) || r_nota(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha
                l_textoActual := LPAD(' ', 70) || RPAD('GUATIRE', 10);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'MM'), 5);
                l_textoActual := l_textoActual || TO_CHAR(r_nota(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de reclamo
                IF l_numeroReclamo != 0 THEN
                    l_textoActual := LPAD(' ', 69) || l_descripcionOperacion || ' ' || l_numeroReclamo;
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 20) || RPAD(r_nota(i).cod_clie || '-' || r_nota(i).cod_digi_ctrl, 32);
                l_textoActual := l_textoActual || RPAD(r_nota(i).cod_zona || '-' || r_nota(i).cod_secc ||  '-' || r_nota(i).cod_terr, 18);
                l_textoActual := l_textoActual || LPAD(r_nota(i).val_nume_iden_fisc, 21);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Abono
                l_textoActual := LPAD(' ', 52) || 'Nº Abono ' || r_nota(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 15) || RPAD(l_nombreCompleto,63) || r_nota(i).cod_peri || ' ' || r_nota(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion
                l_textoActual := LPAD(' ', 15) || r_nota(i).val_dire_comp;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 4)  || RPAD(NVL(r_detalle(j).val_codi_vent, ' '), 7);
                            l_textoActual := l_textoActual || LPAD(r_detalle(j).num_unid_aten ,4);
                            l_textoActual := l_textoActual || LPAD(' ', 3) || RPAD(r_detalle(j).des_prod ,38);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 11);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 11);

                            IF r_detalle(j).val_porc_desc > 0 THEN
                                    l_textoActual := l_textoActual || '   (D-' || r_detalle(j).val_porc_desc || '%)';
                            END IF;

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie OR l_numSolicitudAnterior != r_nota(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_numSolicitudAnterior := r_nota(i).val_nume_soli;
                    -- A diferencia de la factura en este caso sumamos el valor del redondeo
                    l_totalDescuentos := l_totalDescuentos + r_nota(i).val_impo_redo_cons;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades
                l_textoActual := LPAD('Total', 9) || LPAD(l_totalUnidades, 6);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Productos
                l_textoActual := LPAD('Total Productos', 51) || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD('(-) Descuento Comercial', 51) || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := ABS(r_nota(i).imp_flet_tota_loca);
                l_textoActual := LPAD('(+) Gastos de Transportes', 51) || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD('Total Factura', 51) || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Espaciado
                FOR k IN 1..(l_totalEspaciado - (l_contadorDetalles + l_numLineasPieDetalle)) LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                END LOOP;

                -- Calculos de montos finales (impuestos)
                l_baseImponible := l_totalFactura / (1 + r_nota(i).val_tasa_impu / 100);
                l_impuesto := l_totalFactura - l_baseImponible;
                l_totalConImpuesto := l_totalFactura;

                -- Base Imponible
                l_textoActual := LPAD(' ', 50) || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Impuesto
                l_textoActual := LPAD(r_nota(i).val_tasa_impu || '%', 50) || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total con Impuesto
                l_textoActual := LPAD(' ', 50) || LPAD(TRIM(TO_CHAR(l_totalConImpuesto, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 10) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalConImpuesto))) || ' CON ' || TO_CHAR((l_totalConImpuesto - TRUNC(l_totalConImpuesto)) * 100)  || '/100';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Texto pie de nota
                IF l_codigoInternoFactura <> 0 THEN
                    l_textoActual := LPAD(' ', 5) || 'Documento que lo soporta: Nro.Factura ';
                    IF l_numeroLegalFactura <> 0 THEN
                        l_textoActual := l_textoActual || l_numeroLegalFactura;
                    ELSE
                        l_textoActual := l_textoActual || 'POR ASIGNAR';
                    END IF;
                    l_textoActual := l_textoActual
                                     || ' de fecha '  || TO_CHAR(l_fechaFactura, 'DD/MM/YYYY')
                                     || ' por Bs.F. ' || TRIM(TO_CHAR(l_montoFactura, '9999999990.00'));
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales en el formato
                      de Ecuador Esika.
Fecha Creación      : 03/05/2009
Fecha Modificacion  : 03/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_ECE(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.OID_SOLI_CABE_REFE,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.COD_PERI_REFE,
       DOC.FEC_VENC,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    oid_soli_cabe_refe      imp_docum_conta_matri.oid_soli_cabe_refe%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    num_pagi                imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi           imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       MP.COD_SAP,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC,
       ABS(NVL(DET.IMP_IMPU_TOTA_PROD_NACI, 0)) IMP_IMPU_TOTA_PROD_NACI
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     MAE_PRODU MP
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.PROD_OID_PROD = MP.OID_PROD
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    cod_sap                 mae_produ.cod_sap%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE,
    imp_impu_tota_prod_naci fac_docum_conta_linea.imp_impu_tota_prod_naci%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 31;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalSinDescuentos        NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;
l_totalICE                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

ls_indicadorImpuesto        VARCHAR2(3);
l_tasaImpuesto              NUMBER(5,3);

l_textoFlete                VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'textoFlete');

l_CLOB                      CLOB;

BEGIN

    -- Actualizamos los valores del impuesto
    SELECT PTI.VAL_INDI_IMPU,
           PTI.VAL_TASA_IMPU
    INTO  ls_indicadorImpuesto, l_tasaImpuesto
    FROM   PED_IMPUE_GENER PIG,
           PED_TASA_IMPUE PTI,
           SEG_SUBAC SSA
    WHERE PIG.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
      AND PIG.SBAC_OID_SBAC = SSA.OID_SBAC
      AND SSA.COD_SBAC = '000';

    UPDATE IMP_DOCUM_CONTA_MATRI DCM
    SET DCM.VAL_INDI_IMPU = ls_indicadorImpuesto,
        DCM.VAL_TASA_IMPU = l_tasaImpuesto;

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nro de Pagina
                l_textoActual := LPAD(' ', 62) || 'PAG.' || LPAD(r_nota(i).num_pagi, 2) || ' DE ' ||  LPAD(r_nota(i).num_tota_pagi, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Fecha
                l_textoActual := LPAD(' ', 59) || RPAD('QUITO', 14);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'MM'), 4);
                l_textoActual := l_textoActual || TO_CHAR(r_nota(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nro de Pedido y Codigo Interno
                l_textoActual := 'N.PEDIDO: ' || r_nota(i).val_nume_soli || ' CODIGO INTERNO:' || LPAD(r_nota(i).num_docu_cont_inte, 14);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Documento de referencia
                IF r_nota(i).val_nume_soli_refe IS NOT NULL THEN
                    l_textoActual := LPAD(' ', 34) || 'Bol Despacho Ref : ' || r_nota(i).val_nume_soli_refe;
                    l_textoActual := l_textoActual || ' CMP Ref.: '|| r_nota(i).cod_peri_refe;
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 13) || RPAD(r_nota(i).cod_clie, 33);
                l_textoActual := l_textoActual || RPAD(r_nota(i).cod_zona || '-' || r_nota(i).cod_terr, 26);
                l_textoActual := l_textoActual || r_nota(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 12) || RPAD(l_nombreCompleto, 60) || r_nota(i).cod_peri;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_textoActual := LPAD(' ', 9) || substr(r_nota(i).val_dire_comp, 1, 60);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE NOTA DE CREDITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                l_totalICE := 0;

                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD('(' || r_detalle(j).num_unid_aten || ')', 9) || RPAD(' ', 2);
                            l_textoActual := l_textoActual || RPAD(r_detalle(j).cod_sap || ' ' || r_detalle(j).des_prod, 45);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalICE := l_totalICE + r_detalle(j).imp_impu_tota_prod_naci;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                                l_totalICE := l_totalICE + r_detalle(j).imp_impu_tota_prod_naci;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 9);
                            IF l_precioTotal != 0 THEN
                                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_precioTotal, '9999999990.00')) || ')', 14);
                            ELSE
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 14);
                            END IF;

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos

                -- Incluimos el redondeo
                IF l_oidClienteAnterior != r_nota(i).oid_clie OR l_numSolicitudAnterior != r_nota(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_numSolicitudAnterior := r_nota(i).val_nume_soli;
                    l_totalProductos := l_totalProductos - r_nota(i).val_impo_redo_cons;
                END IF;

                l_textoActual := 'Tot.' || LPAD(l_totalUnidades*-1, 6);
                l_textoActual := l_textoActual || LPAD(' ', 29) || 'Total Productos             :';
                IF l_totalProductos != 0 THEN
                    l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalProductos, '9999999990.00')) || ')', 12);
                ELSE
                    l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 12);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 38) || 'Descuentos                  :';
                IF l_totalDescuentos != 0 THEN
                    l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')) || ')', 12);
                ELSE
                    l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 12);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

if l_textoFlete is null then

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Calculos de montos de impuestos
                l_totalSinDescuentos := l_totalProductos - l_totalDescuentos;
                l_baseImponible := l_totalSinDescuentos / (1 + r_nota(i).val_tasa_impu / 100);
                l_impuesto := l_totalSinDescuentos - l_baseImponible;

                -- ICE
                l_textoActual := LPAD(' ', 38) || 'ICE                         :';
                IF l_totalICE != 0 THEN
                    l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalICE, '9999999990.00')) || ')', 12);
                ELSE
                    l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 12);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Base Imponible
                l_textoActual := LPAD(' ', 38) || 'Base Imponible para IVA     :';
                IF l_baseImponible != 0 THEN
                    l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_baseImponible, '9999999990.00')) || ')', 12);
                ELSE
                    l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 12);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Impuesto
                l_textoActual := LPAD(' ', 38) || 'IVA Tarifa ' || LPAD(r_nota(i).val_tasa_impu || '%', 3) || '              :';
                IF l_impuesto != 0 THEN
                    l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_impuesto, '9999999990.00')) || ')', 12);
                ELSE
                    l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 12);

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Transportes
                l_totalTransportes := ABS(r_nota(i).imp_flet_tota_loca);
                l_textoActual := LPAD(' ', 38) || nvl(l_textoFlete,'Fletes y Serv. (0%  IVA)    :');
                IF l_totalTransportes != 0 THEN
                    l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')) || ')', 12);
                ELSE
                    l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 12);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 38) || 'Total Factura               :';
                IF l_totalFactura != 0 THEN
                    l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalFactura, '9999999990.00')) || ')', 12);
                ELSE
                    l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 12);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

else
                -- Calculos de montos de impuestos
                l_totalSinDescuentos := l_totalProductos - l_totalDescuentos;
                l_baseImponible := l_totalSinDescuentos / (1 + r_nota(i).val_tasa_impu / 100);
                l_impuesto := l_totalSinDescuentos - l_baseImponible;

                -- ICE
                l_textoActual := LPAD(' ', 38) || 'ICE                         :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalICE, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Subtotal Factura
                l_textoActual := LPAD(' ', 38) || 'Subtotal Factura            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Transportes
                  l_totalTransportes:=round(ABS(r_nota(i).imp_flet_tota_loca)/(1+(r_nota(i).val_tasa_impu/100)),2);
                --l_totalTransportes := decode(l_textoFlete, null, ABS(r_factura(i).imp_flet_tota_loca), ABS(r_factura(i).imp_flet_tota_loca)/(1+(r_factura(i).val_tasa_impu/100)));
                l_textoActual := LPAD(' ', 38) || nvl(l_textoFlete,'Fletes y Serv. (0%  IVA)    :');
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Base Imponible
                l_textoActual := LPAD(' ', 38) || 'Base Imponible para IVA     :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_baseImponible+l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                l_impuesto:=l_impuesto+abs(r_nota(i).imp_flet_tota_loca)-l_totalTransportes;
                -- Impuesto
                l_textoActual := LPAD(' ', 38) || 'IVA Tarifa ' || LPAD(r_nota(i).val_tasa_impu || '%', 3) || '              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + abs(r_nota(i).imp_flet_tota_loca);
                l_textoActual := LPAD(' ', 38) || 'Total Factura               :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

end if;


                -- Total en texto
                IF l_totalFactura != 0 THEN
                    l_textoActual := LPAD('SON:', 7) || ' menos ' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura)) || ' y ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD('SON:', 7) || 'CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales en el formato
                      de Guatenala LBEL.
Fecha Creación      : 09/11/2009
Fecha Modificacion  : 09/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_GTL(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.COD_PERI_REFE,
       NVL(
           (SELECT TRIM(MCI.NUM_DOCU_IDEN)
            FROM MAE_CLIEN_IDENT MCI,
                 MAE_TIPO_DOCUM MTD
            WHERE MCI.TDOC_OID_TIPO_DOCU = MTD.OID_TIPO_DOCU
              AND MTD.COD_TIPO_DOCU = '02' -- NIT
              AND MCI.CLIE_OID_CLIE = DOC.OID_CLIE
              AND ROWNUM = 1),
           'C.FINAL'
       ) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       ABS(CAB.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       ABS(CAB.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       ABS(CAB.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       ABS(CAB.IMP_FLET_TOTA_LOCA) IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '      -----                                                                 ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Inicializamos las variables
                l_numeroReclamo := 0;
                l_descripcionOperacion := NULL;
                l_numeroLegalFactura := 0;
                l_codigoInternoFactura := 0;
                l_fechaFactura := NULL;
                l_montoFactura := 0;

                -- Obtenemos los datos del reclamo
                IMP_PR_OBTIE_INFOR_RECLA(r_nota(i).oid_docu_cont_cabe ,
                                         l_numeroReclamo,
                                         l_descripcionOperacion);

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha
                l_textoActual := LPAD(' ', 36) || 'COD. INT.: ' || RPAD(r_nota(i).num_docu_cont_inte, 20) || RPAD('C.GUATEMALA', 14);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'MM'), 5);
                l_textoActual := l_textoActual || TO_CHAR(r_nota(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 17) || RPAD(r_nota(i).cod_clie, 30);
                l_textoActual := l_textoActual || RPAD(r_nota(i).cod_zona || '-' || r_nota(i).cod_secc || '-' || r_nota(i).cod_terr, 25);
                l_textoActual := l_textoActual || r_nota(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Pedido y Codigo Interno
                l_textoActual := LPAD(' ', 70) || 'Despacho:  ' || r_nota(i).val_nume_soli_refe;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del cliente - Periodo
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 15) || RPAD(l_nombreCompleto, 66) || SUBSTR(r_nota(i).cod_peri, 3, 2) || '-' || SUBSTR(r_nota(i).cod_peri, 5, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Datos del reclamo
                IF l_numeroReclamo != 0 THEN
                    l_textoActual := LPAD(' ', 40) || l_descripcionOperacion || ' ' || l_numeroReclamo || ' Nº Abono ' || r_nota(i).val_nume_soli;
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion
                l_textoActual := LPAD(' ', 13) || SUBSTR(r_nota(i).val_dire_comp, 1, 73);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 13) || 'REFER.';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE NOTA DE CREDITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(r_detalle(j).num_unid_aten, 11) ||LPAD(' ', 7)  || RPAD(r_detalle(j).des_prod ,40);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 14);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie OR l_numSolicitudAnterior != r_nota(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_numSolicitudAnterior := r_nota(i).val_nume_soli;
                    -- A diferencia de la factura en este caso sumamos el valor del redondeo
                    l_totalDescuentos := l_totalDescuentos + r_nota(i).val_impo_redo_cons;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := 'Total' || LPAD(l_totalUnidades, 6);
                l_textoActual := l_textoActual || LPAD(' ', 61) || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 14);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Orden
                l_textoActual := LPAD(' ', 47) || 'Total Catalogo (Inc.IVA) :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 47) || '(-)Descuentos            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 76) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Sin Descuentos
                l_textoActual := LPAD(' ', 47) || 'Total Productos          :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos - l_totalDescuentos, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := r_nota(i).imp_flet_tota_loca;
                l_textoActual := LPAD(' ', 47) || '(+) Fletes               :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 76) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := ABS(l_totalProductos - l_totalDescuentos + l_totalTransportes);
                l_textoActual := LPAD(' ', 47) || 'Abonado En Su Cta. Cte.  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 15) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura))) || ' ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100 QUETZALES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales en el formato
                      de Guatenala Esika.
Fecha Creación      : 09/11/2009
Fecha Modificacion  : 09/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_GTE(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.COD_PERI_REFE,
       NVL(
           (SELECT TRIM(MCI.NUM_DOCU_IDEN)
            FROM MAE_CLIEN_IDENT MCI,
                 MAE_TIPO_DOCUM MTD
            WHERE MCI.TDOC_OID_TIPO_DOCU = MTD.OID_TIPO_DOCU
              AND MTD.COD_TIPO_DOCU = '02' -- NIT
              AND MCI.CLIE_OID_CLIE = DOC.OID_CLIE
              AND ROWNUM = 1),
           'C.FINAL'
       ) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       ABS(CAB.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       ABS(CAB.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       ABS(CAB.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       ABS(CAB.IMP_FLET_TOTA_LOCA) IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '                                                                      -----             ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
--l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);

l_CLOB                      CLOB;

-- Variables para obtener los datos del documento legal de origen
l_fechaReferencia               DATE;
l_serieLegalReferencia          VARCHAR2(10);
l_numeroLegalReferencia         NUMBER(9);
l_codigoInternoReferencia       NUMBER(9);
l_montoReferencia               NUMBER(12, 2);
l_oidTipoDocumentoReferencia    NUMBER(12);
l_tipoDocumentoReferencia       VARCHAR2(3);


l_actualiza   VARCHAR2(100) := nvl(IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'actualizaInternoNC'),'N');
l_docinte            NUMBER;






BEGIN

    select VAL_ULTI_NUME_DOCU_INTE
    into l_docinte
    from fac_docum_subac a where a.tido_oid_tipo_docu=32 and SBAC_OID_SBAC=888;

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP


                l_docinte:=l_docinte+1;
                if l_actualiza='S' then
                   r_nota(i).NUM_DOCU_CONT_INTE:=l_docinte;
                end if;

                -- Documento Legal de referencia
                l_serieLegalReferencia := NULL;
                l_numeroLegalReferencia := 0;
                l_codigoInternoReferencia := 0;
                l_fechaReferencia := NULL;
                l_montoReferencia := 0;
                l_oidTipoDocumentoReferencia := 0;
                l_tipoDocumentoReferencia := NULL;

                -- Obtenemos los datos de la factura del documento de origen
                IMP_PR_OBTIE_INFOR_DOCLE_REFER(r_nota(i).oid_docu_cont_cabe,
                                               l_serieLegalReferencia,
                                               l_numeroLegalReferencia,
                                               l_codigoInternoReferencia,
                                               l_fechaReferencia,
                                               l_montoReferencia,
                                               l_oidTipoDocumentoReferencia,
                                               l_tipoDocumentoReferencia);


                -- Inicializamos las variables
                l_numeroReclamo := 0;
                l_descripcionOperacion := NULL;
                l_numeroLegalFactura := 0;
                l_codigoInternoFactura := 0;
                l_fechaFactura := NULL;
                l_montoFactura := 0;

                -- Obtenemos los datos del reclamo
                IMP_PR_OBTIE_INFOR_RECLA(r_nota(i).oid_docu_cont_cabe ,
                                         l_numeroReclamo,
                                         l_descripcionOperacion);

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 36) || 'COD. INT.: ' || r_nota(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha - Nro Documento - Cliente
                l_textoActual := LPAD(' ', 13) || RPAD('CIUD.GUATEMALA,', 19);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'DD/MM/YY'), 25);
                l_textoActual := l_textoActual || RPAD(r_nota(i).val_nume_iden_fisc, 28);
                l_textoActual := l_textoActual || r_nota(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del cliente - Zona Territorio
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 10) || RPAD(l_nombreCompleto, 71);
                l_textoActual := l_textoActual || r_nota(i).cod_zona || '-' || r_nota(i).cod_secc || '-' || r_nota(i).cod_terr;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion - Periodo
                l_textoActual := LPAD(' ', 10) || RPAD(r_nota(i).val_dire_comp, 71);
                l_textoActual := l_textoActual || SUBSTR(r_nota(i).cod_peri, 3, 2) || '-' || SUBSTR(r_nota(i).cod_peri, 5, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE NOTA DE CREDITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 3)|| RPAD(r_detalle(j).val_codi_vent ,12) || RPAD(r_detalle(j).des_prod ,50);
                            l_textoActual := l_textoActual ||  LPAD(r_detalle(j).num_unid_aten, 10);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 13);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 10);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie OR l_numSolicitudAnterior != r_nota(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_numSolicitudAnterior := r_nota(i).val_nume_soli;
                    -- A diferencia de la factura en este caso sumamos el valor del redondeo
                    --l_totalDescuentos := l_totalDescuentos + r_nota(i).val_impo_redo_cons;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := LPAD('Total', 60) || LPAD(l_totalUnidades, 15);
                l_textoActual := l_textoActual  || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 23);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Orden
                l_textoActual := LPAD(' ', 47) || 'Total Catalogo (Inc.IVA) :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 25);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 47) || '(-)Descuentos            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 25);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 88) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Sin Descuentos
                l_textoActual := LPAD(' ', 47) || 'Total Productos          :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos - l_totalDescuentos, '9999999990.00')), 25);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := r_nota(i).imp_flet_tota_loca;
                l_textoActual := LPAD(' ', 47) || '(+) Fletes               :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 25);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 88) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := ABS(l_totalProductos - l_totalDescuentos + l_totalTransportes);
                l_textoActual := LPAD(' ', 47) || 'Abonado En Su Cta. Cte.  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 25);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 15) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura))) || ' ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100 QUETZALES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- NOMBRE CONSULTORA
                l_textoActual := RPAD('NOMBRE COMPLETO DE LA CONSULTORA', 40) || ':' || l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);


                -- DOCUMENTO DE IDENTIDAD
                l_textoActual := RPAD('DOCUMENTO DE IDENTIDAD', 40) || ':' || r_nota(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- FACTURA REFERENCIA
                l_textoActual := RPAD('NUMERO DE FACTURA AFECTADA POR ESTA NC', 40) || ':' || l_codigoInternoReferencia || ' DE FECHA: ' || l_fechaReferencia;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);


                if l_actualiza='S' then
                   update fac_docum_conta_cabec set num_docu_cont_inte=l_docinte, num_docu_lega=l_docinte where oid_cabe=r_nota(i).OID_DOCU_CONT_CABE;
                   update fac_regis_unico_venta set num_docu_cont_inte=l_docinte, val_nume_docu_lega=l_docinte where dcca_oid_cabe=r_nota(i).OID_DOCU_CONT_CABE;
                end if;


            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;


    if l_actualiza='S' then
       update fac_docum_subac a set a.val_ulti_nume_docu_inte=l_docinte where tido_oid_tipo_docu=32;
    end if ;

END;

/**************************************************************************
Descripcion         : Genera las notas de credito matriciales en el formato
                      de El Salvador.
Fecha Creación      : 09/11/2009
Fecha Modificacion  : 09/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_SVL(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.COD_PERI_REFE,
       NVL(
           (SELECT TRIM(MCI.NUM_DOCU_IDEN)
            FROM MAE_CLIEN_IDENT MCI,
                 MAE_TIPO_DOCUM MTD
            WHERE MCI.TDOC_OID_TIPO_DOCU = MTD.OID_TIPO_DOCU
              AND MCI.VAL_IDEN_DOCU_PRIN=1
              AND MCI.CLIE_OID_CLIE = DOC.OID_CLIE
              AND ROWNUM = 1),
           'C.FINAL'
       ) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       ABS(CAB.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       ABS(CAB.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       ABS(CAB.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       ABS(CAB.IMP_FLET_TOTA_LOCA) IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       (
select
case when f.cod_oper like 'D%' then 'Devolución'
when f.cod_oper like 'A%' then 'Anulación'
when f.cod_oper like 'F%' then 'Reclamo'
else  'Cambio'
end || ' :' || d.num_recl Despacho
from ped_solic_cabec a, rec_solic_opera b, rec_opera_recla c, rec_cabec_recla d, rec_tipos_opera e, rec_opera f
where a.soca_oid_soli_cabe=doc.oid_soli_cabe and a.oid_soli_cabe=b.soca_oid_soli_cabe and b.opre_oid_oper_recl=C.oid_oper_recl
and c.care_oid_cabe_recl=d.oid_cabe_recl and c.TIOP_OID_TIPO_OPER=e.OID_TIPO_OPER and e.rope_oid_oper=f.oid_oper
and rownum=1
) despacho,
cab.imp_flet_sin_impu_tota_docu,
cab.imp_impu_tota_loca,
cab.val_tota_paga_loca
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY doc.cor_docu_cont_matr;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    despacho                             fac_docum_conta_cabec.val_obse%TYPE,
    imp_flet_sin_impu_tota_docu          fac_docum_conta_cabec.imp_flet_sin_impu_tota_docu%TYPE,
    imp_impu_tota_loca                   fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_tota_paga_loca                   fac_docum_conta_cabec.val_tota_paga_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC,
       det.val_prec_sin_impu_unit VAL_PREC_SIN_IMPU,
       det.val_prec_sin_impu_tota_loca VAL_PREC_SIN_IMPU_TOTA
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE,
    val_prec_sin_impu_unit  fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '                                                                      -----             ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
--l_numeroReclamo             NUMBER := 0;
--l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaReferencia               DATE;
l_serieLegalReferencia          VARCHAR2(10);
l_numeroLegalReferencia         NUMBER(9);
l_codigoInternoReferencia       NUMBER(9);
l_montoReferencia               NUMBER(12, 2);
l_oidTipoDocumentoReferencia    NUMBER(12);
l_tipoDocumentoReferencia       VARCHAR2(3);

l_CLOB                      CLOB;


l_actualiza   VARCHAR2(100) := nvl(IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'actualizaInternoNC'),'N');
l_docinte            NUMBER;


BEGIN


    select VAL_ULTI_NUME_DOCU_INTE
    into l_docinte
    from fac_docum_subac a where a.tido_oid_tipo_docu=32;


    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP

                l_docinte:=l_docinte+1;
                if l_actualiza='S' then
                   r_nota(i).NUM_DOCU_CONT_INTE:=l_docinte;
                end if;


                -- Documento Legal de referencia
                l_serieLegalReferencia := NULL;
                l_numeroLegalReferencia := 0;
                l_codigoInternoReferencia := 0;
                l_fechaReferencia := NULL;
                l_montoReferencia := 0;
                l_oidTipoDocumentoReferencia := 0;
                l_tipoDocumentoReferencia := NULL;

                -- Obtenemos los datos de la factura del documento de origen
                IMP_PR_OBTIE_INFOR_DOCLE_REFER(r_nota(i).oid_docu_cont_cabe,
                                               l_serieLegalReferencia,
                                               l_numeroLegalReferencia,
                                               l_codigoInternoReferencia,
                                               l_fechaReferencia,
                                               l_montoReferencia,
                                               l_oidTipoDocumentoReferencia,
                                               l_tipoDocumentoReferencia);


                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 68) || 'COD. INT.: ' || r_nota(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 57) || RPAD('EL SALVADOR', 16) || TO_CHAR(r_nota(i).fec_fact, 'DD') || LPAD(' ', 7) || TO_CHAR(r_nota(i).fec_fact, 'MM') || LPAD(' ', 7) || TO_CHAR(r_nota(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha - Nro Documento - Cliente
--                l_textoActual := LPAD(' ', 13) || RPAD('CIUD.GUATEMALA,', 19);
--                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YY'), 25);
                -- Nombre del cliente - Zona Territorio
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 11) || RPAD(l_nombreCompleto, 55);
                l_textoActual := l_textoActual || r_nota(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                -- Direccion - Cliente
                l_textoActual := LPAD(' ', 12) || RPAD(substr(r_nota(i).val_dire_comp,1,46), 65);
                l_textoActual := l_textoActual || r_nota(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion - despacho
                l_textoActual := LPAD(' ', 12) || RPAD(substr(r_nota(i).val_dire_comp,47), 65);
                l_textoActual := l_textoActual || r_nota(i).despacho;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Territorio - Periodo
                l_textoActual := LPAD(' ', 13) || RPAD(r_nota(i).cod_zona || '-' || r_nota(i).cod_secc || '-' || r_nota(i).cod_terr,30);
                l_textoActual := l_textoActual || SUBSTR(r_nota(i).cod_peri, 3, 2) || '-' || SUBSTR(r_nota(i).cod_peri, 5, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Referencia
                l_textoActual := LPAD(' ', 13) || RPAD(l_codigoInternoReferencia,40);
                l_textoActual := l_textoActual || RPAD(l_fechaReferencia, 30);
                l_textoActual := l_textoActual || 'N. Abono:' || r_nota(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 8)|| RPAD(r_detalle(j).num_unid_aten ,8) || RPAD(r_detalle(j).des_prod ,46);
                            --l_textoActual := l_textoActual ||  LPAD(r_detalle(j).num_unid_aten, 10);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := abs(r_detalle(j).val_prec_sin_impu_unit);
                                l_precioTotal := abs(r_detalle(j).val_prec_sin_impu_tota_loca);
                            ELSE
                                l_precioUnitario := abs(r_detalle(j).val_prec_sin_impu_unit);
                                l_precioTotal := abs(r_detalle(j).val_prec_sin_impu_tota_loca);
                            END IF;
                            l_totalProductos:=l_totalProductos+l_precioTotal;
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 13) || LPAD(' ', 8);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 10);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                l_textoActual := '   ----------                                                                       ----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
--                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := LPAD('Total', 6) || LPAD(l_totalUnidades, 5);
                l_textoActual := l_textoActual  || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 82);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                l_totalTransportes := nvl(abs(r_nota(i).imp_flet_tota_loca),0);
                l_totalFactura := abs(r_nota(i).val_tota_paga_loca);
                l_totalDescuentos:=l_totalProductos-l_totalFactura+nvl(abs(r_nota(i).imp_impu_tota_loca),0)+l_totalTransportes;
                -- Total Orden
                l_textoActual := LPAD(' ', 47) || 'Total Catálogo           :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 47) || '(-)Descuentos            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_textoActual := LPAD(' ', 47) || '(+) Fletes y Serv.       :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 85) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Sin Descuentos
                l_textoActual := LPAD(' ', 47) || 'Subtotal                 :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos - l_totalDescuentos+l_totalTransportes, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- IVA
                l_textoActual := LPAD(' ', 47) || 'IVA 13%                  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(nvl(abs(r_nota(i).imp_impu_tota_loca),0), '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);


                -- Separador
                l_textoActual := LPAD(' ', 85) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Subtotal
                l_textoActual := LPAD(' ', 47) || 'Subtotal                 :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Ventas Excentas
                l_textoActual := LPAD(' ', 47) || 'Ventas Exentas           :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total
                l_textoActual := LPAD(' ', 47) || 'Abonado en su Cta Cte    :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 15) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura))) || ' ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100 DOLARES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);



                if l_actualiza='S' then
                   update fac_docum_conta_cabec set num_docu_cont_inte=l_docinte, num_docu_lega=l_docinte where oid_cabe=r_nota(i).OID_DOCU_CONT_CABE;
                   update fac_regis_unico_venta set num_docu_cont_inte=l_docinte, val_nume_docu_lega=l_docinte where dcca_oid_cabe=r_nota(i).OID_DOCU_CONT_CABE;
                end if;

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

    if l_actualiza='S' then
       update fac_docum_subac a set a.val_ulti_nume_docu_inte=l_docinte where tido_oid_tipo_docu=32;
    end if ;


END;
/**************************************************************************
Descripcion         : Genera el documento del NC individual para MX.
Fecha Creación      : 13/11/2014
Fecha Modificacion  : 13/11/2014
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_MXL(p_codpais varchar2) IS

CURSOR c_facturas(p_codperi VARCHAR2, p_fecfact DATE) IS
SELECT --DOC.COR_DOCU_CONT_MATR,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.VAL_NOM1 || ' ' || MC.VAL_NOM2 || ' ' || MC.VAL_APE1 || ' ' || MC.VAL_APE2 NOMBRE,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       ZR.COD_REGI || '-' || ZZ.COD_ZONA || '-' || ZS.COD_SECC || '-' || LPAD(ZT.COD_TERR,6,'0') uni_admi,
       FTD.COD_TIPO_DOCU,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 4) COLONIA,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 3) LOCALIDAD,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 2) MUNICIPIO,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 1) ESTADO,
       mcd.val_cod_post,
       mcd.val_nomb_via calle,
       CAB.VAL_NUME_IDEN_FISC,
       abs(CAB.VAL_TOTA_PAGA_LOCA) VAL_TOTA_PAGA_LOCA,
       abs(cab.val_prec_cata_sin_impu_tota) val_prec_cata_sin_impu_tota,
       abs(CAB.IMP_IMPU_TOTA_LOCA) IMP_IMPU_TOTA_LOCA,
       abs(CAB.VAL_PREC_CONT_SIN_IMPU_TOTA) VAL_PREC_CONT_SIN_IMPU_TOTA,
       abs(CAB.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       abs(CAB.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       abs(CAB.IMP_DES1_SIN_IMPU_TOTA) IMP_DES1_SIN_IMPU_TOTA,
       abs(CAB.IMP_DES3_SIN_IMPU_TOTA) IMP_DES3_SIN_IMPU_TOTA,
       abs(CAB.IMP_FLET_TOTA_LOCA) IMP_FLET_TOTA_LOCA,
       abs(nvl(CAB.IMP_FLET_IMPU_TOTA_LOCA,0)) IMP_FLET_IMPU_TOTA_LOCA,
       abs(CAB.IMP_REDO_LOCA) IMP_REDO_LOCA,
       cab.val_nume_auto,
       NULL fec_apro,
       cab.val_seri_docu_lega,
       cab.val_nume_iden_fisc num_docu_iden,
       substr(spc.cod_peri,3,2) || '-' || substr(spc.cod_peri,5) COD_PERI,
       con.val_tasa_impu val_tasa,
       abs(cab.num_unid_aten_tota)+decode(con.val_impo_flet_loca,0,0,1) num_unid_aten_tota,
       cab.fec_emis,
       abs(nvl(cab.val_tota_gast_admi_sin_impu,0)+nvl(cab.val_tota_gast_admi2_sin_impu,0)) val_tota_gast_admi_sin_impu
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_DIREC MCD,
     MAE_CLIEN MC,
     ZON_TERRI_ADMIN ZTA,
     ZON_TERRI ZT,
     ZON_SECCI ZS,
     ZON_ZONA ZZ,
     ZON_REGIO ZR,
     FAC_TIPO_DOCUM FTD,
     cra_perio cp,
     seg_perio_corpo spc
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
--AND spc.cod_peri=p_codPeri
and to_char(cab.fec_fact,'dd/mm/yyyy')=to_char(p_fecFact,'dd/mm/yyyy')
and con.perd_oid_peri=cp.oid_peri
and cp.peri_oid_peri=spc.oid_peri
AND CAB.CLDI_OID_CLIE_DIRE=MCD.OID_CLIE_DIRE
AND MCD.CLIE_OID_CLIE=MC.OID_CLIE
AND CON.ZTAD_OID_TERR_ADMI=ZTA.OID_TERR_ADMI
AND ZTA.TERR_OID_TERR=ZT.OID_TERR
AND ZTA.ZSCC_OID_SECC=ZS.OID_SECC
AND ZTA.IND_BORR=0
AND ZS.ZZON_OID_ZONA=ZZ.OID_ZONA
AND ZZ.ZORG_OID_REGI=ZR.OID_REGI
AND CAB.TIDO_OID_TIPO_DOCU=32
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten<>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer(+)
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
order by cab.oid_cabe
;

r_facturas c_facturas%ROWTYPE;



CURSOR c_detalle(oidCabecera NUMBER) IS
select NUM_LINEA,
NUM_UNID_ATEN,
VAL_CODI_VENT,
DES_PROD,
VAL_PREC_CATA_UNIT_LOCA,
VAL_PREC_CATA_TOTA_LOCA,
Val_Prec_Sin_Impu_Unit,
Val_Prec_Sin_Impu_Tota_Loca,
VAL_PREC_CONT_UNIT_LOCA,
VAL_PREC_CONT_TOTA_LOCA,
IMP_DESC_TOTA_LOCA,
VAL_PREC_FACT_UNIT_LOCA,
VAL_PREC_FACT_TOTA_LOCA,
VAL_PREC_NETO_UNIT_LOCA,
VAL_PREC_NETO_TOTA_LOCA,
rownum linea
from
(
select *
from
(
SELECT DET.NUM_LINEA,
       abs(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       abs(DET.VAL_PREC_CATA_UNIT_LOCA) VAL_PREC_CATA_UNIT_LOCA,
       abs(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       abs(DET.Val_Prec_Sin_Impu_Unit) Val_Prec_Sin_Impu_Unit,
       abs(DET.Val_Prec_Sin_Impu_Tota_Loca) Val_Prec_Sin_Impu_Tota_Loca,
       abs(DET.VAL_PREC_CONT_UNIT_LOCA) VAL_PREC_CONT_UNIT_LOCA,
       abs(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       abs(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       abs(DET.VAL_PREC_FACT_UNIT_LOCA) VAL_PREC_FACT_UNIT_LOCA,
       abs(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       abs(DET.VAL_PREC_NETO_UNIT_LOCA) VAL_PREC_NETO_UNIT_LOCA,
       abs(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA--,
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
--AND NOT EXISTS (
--    SELECT NULL
--    FROM FAC_TIPO_OFERT_EXCLU TOE
--    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
--)
UNION
SELECT 98 NUM_LINEA,
        1 NUM_UNID_ATEN,
       ' ' VAL_CODI_VENT,
       'SERVICIOS' DES_PROD,
       CAB.IMP_FLET_TOTA_LOCA VAL_PREC_CATA_UNIT_LOCA,
       CAB.IMP_FLET_TOTA_LOCA VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA Val_Prec_Sin_Impu_Unit,
       CAB.IMP_FLET_IMPU_TOTA_LOCA Val_Prec_Sin_Impu_Tota_Loca,
       0 AL_PREC_CONT_UNIT_LOCA,
       0 VAL_PREC_CONT_TOTA_LOCA,
       0 IMP_DESC_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA VAL_PREC_FACT_UNIT_LOCA,
       CAB.IMP_FLET_TOTA_LOCA VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA VAL_PREC_NETO_UNIT_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA VAL_PREC_NETO_TOTA_LOCA
       from fac_docum_conta_cabec cab
       where cab.oid_cabe=oidCabecera
       and CAB.IMP_FLET_TOTA_LOCA<>0
UNION
SELECT 99 NUM_LINEA,
        1 NUM_UNID_ATEN,
       '' VAL_CODI_VENT,
       'GASTOS ADMINISTRATIVOS' DES_PROD,
       nvl(CAB.VAL_TOTA_GAST_ADMI,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2,0) VAL_PREC_CATA_UNIT_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2,0) VAL_PREC_CATA_TOTA_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI_SIN_IMPU,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2_SIN_IMPU,0) Val_Prec_Sin_Impu_Unit,
       nvl(CAB.VAL_TOTA_GAST_ADMI_SIN_IMPU,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2_SIN_IMPU,0) Val_Prec_Sin_Impu_Tota_Loca,
       0 AL_PREC_CONT_UNIT_LOCA,
       0 VAL_PREC_CONT_TOTA_LOCA,
       0 IMP_DESC_TOTA_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2,0) VAL_PREC_FACT_UNIT_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2,0) VAL_PREC_FACT_TOTA_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI_SIN_IMPU,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2_SIN_IMPU,0) VAL_PREC_NETO_UNIT_LOCA,
       nvl(CAB.VAL_TOTA_GAST_ADMI_SIN_IMPU,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2_SIN_IMPU,0) VAL_PREC_NETO_TOTA_LOCA
       from fac_docum_conta_cabec cab
       where cab.oid_cabe=oidCabecera
       and nvl(CAB.VAL_TOTA_GAST_ADMI,0)+nvl(CAB.VAL_TOTA_GAST_ADMI2,0)<>0
) order by num_linea
);


r_detalle c_detalle%ROWTYPE;

l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10);
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_Emisor_rfc                VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','001'),'BME060927I33');
l_Emisor_nombre             VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','002'),'BELCORP MEXICO S.A. DE C.V.');
l_Emisor_calle              VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','003'),'Prolongacion Paseo de la Reforma');
l_Emisor_noexterior         VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','004'),'1015');
l_Emisor_nointerior         VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','005'),'Torre B Piso 7');
l_Emisor_colonia            VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','006'),'Desarrollo Santa Fé');
l_Emisor_localidad          VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','007'),'');
l_Emisor_municipio          VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','008'),'Alvaro Obregon');
l_Emisor_estado             VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','009'),'D.F.');
l_Emisor_pais               VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','010'),'Mexico');
l_Emisor_codigopostal       VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','011'),'01376');
l_Receptor_rfc              VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','012'),'XAXX010101000');
l_Receptor_nombre           VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','013'),'COMPROBANTE GLOBAL DE OPERACIONES CON PUBLICO EN GENERAL');
l_Receptor_numerocliente    VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codpais,'FEC','014'),'');

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '----------------------------------------------------------------------------------------------';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalBonificaci           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_formatoNumerico           VARCHAR2(100) := nvl(IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'formatoNumerico'),'9999999G990D00');

l_oid_docu_suba             NUMBER(12) := 0;
l_num_docu_cont_inte        NUMBER(12) := 0;
l_anio                      NUMBER(12) := 0;
l_val_seri_docu_lega        VARCHAR2(15);
l_val_nume_auto             VARCHAR2(15);


l_CLOB                      CLOB;

l_codperi                   VARCHAR2(15);
l_fecfact                   DATE;

BEGIN

select cod_peri, fec_proc
into l_codperi, l_fecfact
from bas_ctrl_fact x
where x.sta_camp='0'
and x.ind_camp_act='1';


delete from IMP_DOCUM_CONTA_MATRI;



    -- Abrimos el cursor principal
    OPEN c_facturas(l_codperi, l_fecfact);
    LOOP
    FETCH c_facturas INTO r_facturas;
    EXIT WHEN c_facturas%NOTFOUND;

              select max(a.oid_docu_suba)
              into l_oid_docu_suba
              from fac_docum_subac a
              where a.tido_oid_tipo_docu=32
              ;

              select a.val_ulti_nume_docu_inte+1, a.val_ulti_ejer_docu_inte, a.val_seri_docu_lega, a.val_nume_auto
              into l_num_docu_cont_inte, l_anio, l_val_seri_docu_lega, l_val_nume_auto
              from fac_docum_subac a
              where a.oid_docu_suba=l_oid_docu_suba;

              update fac_docum_subac set val_ulti_nume_docu_inte=l_num_docu_cont_inte
              where oid_docu_suba=l_oid_docu_suba;

              update fac_regis_unico_venta a
              set a.num_docu_cont_inte=l_num_docu_cont_inte
              , a.val_nume_auto=l_val_nume_auto
              , a.val_seri_docu_lega=l_val_seri_docu_lega
              , a.val_nume_docu_lega=l_num_docu_cont_inte
              where dcca_oid_cabe=r_facturas.oid_cabe
              ;


              update fac_docum_conta_cabec a
              set a.num_docu_cont_inte=l_num_docu_cont_inte
              , a.val_nume_auto=l_val_nume_auto
              , a.val_seri_docu_lega=l_val_seri_docu_lega
              , a.num_docu_lega=l_num_docu_cont_inte
              where oid_cabe=r_facturas.oid_cabe
              ;



                INSERT INTO IMP_DOCUM_CONTA_MATRI (
                COR_DOCU_CONT_MATR,
                VAL_BUFF, COD_PAIS)
                VALUES(
                r_facturas.oid_cabe,
                EMPTY_CLOB(), p_codpais)
                RETURNING VAL_BUFF INTO l_clob;

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXINICIO    xxxPARSERXXX'), 'XXXINICIO    xxxPARSERXXX');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cliente    : BELCORP'), 'cliente    : BELCORP');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('elaboro    : Federico Enriquez'), 'elaboro    : Federico Enriquez');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('version    : 1.0'), 'version    : 1.0');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fecha      : 2007.04.22'), 'fecha      : 2007.04.22');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('adenda     : Ninguna'), 'adenda     : Ninguna');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Info Documento--------------------------------------------------------------------------------'), 'Info Documento--------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('num. aprob   = ' || l_val_nume_auto), 'num. aprob   = ' || l_val_nume_auto);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fecha ap     = ' || '20' || lpad(l_anio,2,'0')), 'fecha ap     = ' || '20' || lpad(l_anio,2,'0'));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('serie        = ' || l_val_seri_docu_lega), 'serie        = ' || l_val_seri_docu_lega);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('folio        = ' || lpad(l_num_docu_cont_inte,6,'0')), 'folio        = ' || lpad(l_num_docu_cont_inte,6,'0'));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('foliointerno ='), 'foliointerno =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechaemision = ' || to_char(r_facturas.fec_fact,'yyyy/mm/dd') || ' ' || to_char(r_facturas.fec_emis,'hh:mm:ss')), 'fechaemision = ' || to_char(r_facturas.fec_fact,'yyyy/mm/dd') || ' ' || to_char(r_facturas.fec_emis,'hh:mm:ss'));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('formapago    ='), 'formapago    =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('termpagodias ='), 'termpagodias =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('condpago     ='), 'condpago     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('ordencompra  ='), 'ordencompra  =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechaoc      ='), 'fechaoc      =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechavenc.   ='), 'fechavenc.   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisor----------------------------------------------------------------------------------------'), 'Emisor----------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('rfc          = ' || l_Emisor_rfc), 'rfc          = ' || l_Emisor_rfc);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nombre       = ' || l_Emisor_nombre), 'nombre       = ' || l_Emisor_nombre);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisior Domicilio fiscal----------------------------------------------------------------------'), 'Emisior Domicilio fiscal----------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || l_Emisor_calle), 'calle        = ' || l_Emisor_calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   = ' || l_Emisor_noexterior), 'noexterior   = ' || l_Emisor_noexterior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   = ' || l_Emisor_nointerior), 'nointerior   = ' || l_Emisor_nointerior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || l_Emisor_colonia), 'colonia      = ' || l_Emisor_colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = ' || l_Emisor_localidad), 'localidad    = ' || l_Emisor_localidad);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || l_Emisor_municipio), 'municipio    = ' || l_Emisor_municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || l_Emisor_estado), 'estado       = ' || l_Emisor_estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || l_Emisor_codigopostal), 'codigopostal = ' || l_Emisor_codigopostal);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisior Domicilio expedicion------------------------------------------------------------------'), 'Emisior Domicilio expedicion------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('sucursal     ='), 'sucursal     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || l_Emisor_calle), 'calle        = ' || l_Emisor_calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   = ' || l_Emisor_noexterior), 'noexterior   = ' || l_Emisor_noexterior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   = ' || l_Emisor_nointerior), 'nointerior   = ' || l_Emisor_nointerior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || l_Emisor_colonia), 'colonia      = ' || l_Emisor_colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = '), 'localidad    = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || l_Emisor_municipio), 'municipio    = ' || l_Emisor_municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || l_Emisor_estado), 'estado       = ' || l_Emisor_estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || l_Emisor_codigopostal), 'codigopostal = ' || l_Emisor_codigopostal);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor--------------------------------------------------------------------------------------'), 'Receptor--------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('rfc          = ' || r_facturas.VAL_NUME_IDEN_FISC), 'rfc          = ' || r_facturas.VAL_NUME_IDEN_FISC);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nombre       = ' || r_facturas.nombre), 'nombre       = ' || r_facturas.nombre);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('numerocliente='), 'numerocliente=');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor domicilio fiscal---------------------------------------------------------------------'), 'Receptor domicilio fiscal---------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || r_facturas.calle), 'calle        = ' || r_facturas.calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   ='), 'noexterior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   ='), 'nointerior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || r_facturas.colonia), 'colonia      = ' || r_facturas.colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = ' || r_facturas.localidad), 'localidad    = ' || r_facturas.localidad);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('referencia   ='), 'referencia   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || r_facturas.municipio), 'municipio    = ' || r_facturas.municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || r_facturas.estado), 'estado       = ' || r_facturas.estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || r_facturas.val_cod_post), 'codigopostal = ' || r_facturas.val_cod_post);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor domicilio recepcion------------------------------------------------------------------'), 'Receptor domicilio recepcion------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('sucursal     ='), 'sucursal     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || r_facturas.calle), 'calle        = ' || r_facturas.calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   ='), 'noexterior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   ='), 'nointerior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || r_facturas.colonia), 'colonia      = ' || r_facturas.colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = ' || r_facturas.localidad), 'localidad    = ' || r_facturas.localidad);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('referencia   ='), 'referencia   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || r_facturas.municipio), 'municipio    = ' || r_facturas.municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || r_facturas.estado), 'estado       = ' || r_facturas.estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || r_facturas.val_cod_post), 'codigopostal = ' || r_facturas.val_cod_post);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Person.---------------------------------------------------------------------------------------'), 'Person.---------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('filename     = MFC1094M'), 'filename     = MFC1094M');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('count        = 1'), 'count        = 1');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('total        = 2'), 'total        = 2');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('group        = e4e191'), 'group        = e4e191');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cdgconsultora= ' || r_facturas.cod_clie), 'cdgconsultora= ' || r_facturas.cod_clie);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cdgterritor  = ' || r_facturas.uni_admi), 'cdgterritor  = ' || r_facturas.uni_admi);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('numdespacho  = ' || r_facturas.val_nume_soli), 'numdespacho  = ' || r_facturas.val_nume_soli);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('campaña      = ' || r_facturas.cod_peri), 'campaña      = ' || r_facturas.cod_peri);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalunidades= Total Unidades:        ' || r_facturas.num_unid_aten_tota), 'totalunidades= Total Unidades:        ' || r_facturas.num_unid_aten_tota);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pers10       ='), 'pers10       =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXDETALLES'), 'XXXDETALLES');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                    OPEN c_detalle(r_facturas.oid_cabe);
                    LOOP
                    FETCH c_detalle INTO r_detalle;
                    EXIT WHEN c_detalle%NOTFOUND;

                      l_textoActual:= rpad(r_detalle.num_unid_aten,6,' ') || '| ' || rpad(r_detalle.val_codi_vent,13,' ') || '| ' || rpad(r_detalle.des_prod,43,' ') || '| ' || rpad(to_char(r_detalle.Val_Prec_Sin_Impu_Unit,l_formatoNumerico),16,' ') || '| ' || rpad(to_char(r_detalle.Val_Prec_Sin_Impu_tota_loca,l_formatoNumerico),16,' ') || '| GRP' ||  to_char(trunc(r_detalle.linea/30)+case when mod(r_detalle.linea,30)=0 then 0 else 1 end) || ' |';

                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                    END LOOP;

                    CLOSE c_detalle;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXFINDETALLES'), 'XXXFINDETALLES');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Totales---------------------------------------------------------------------------------------'), 'Totales---------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('moneda       = MXN'), 'moneda       = MXN');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tipocambio   = 0.00000'), 'tipocambio   = 0.00000');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('subtotal     = ' || trim(to_char(r_facturas.val_prec_cata_sin_impu_tota+r_facturas.imp_flet_impu_tota_loca+r_facturas.val_tota_gast_admi_sin_impu,l_formatoNumerico))), 'subtotal     = ' || trim(to_char(r_facturas.val_prec_cata_sin_impu_tota+r_facturas.imp_flet_impu_tota_loca+r_facturas.val_tota_gast_admi_sin_impu,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('descuentos   = ' || trim(to_char(r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico))), 'descuentos   = ' || trim(to_char(r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('recargos     ='), 'recargos     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('montobase    = ' || trim(to_char((r_facturas.val_prec_cata_sin_impu_tota+r_facturas.imp_flet_impu_tota_loca+r_facturas.val_tota_gast_admi_sin_impu)-r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico))), 'montobase    = ' || trim(to_char((r_facturas.val_prec_cata_sin_impu_tota+r_facturas.imp_flet_impu_tota_loca+r_facturas.val_tota_gast_admi_sin_impu)-r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tipoimp      = IVA'), 'tipoimp      = IVA');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tasaiva      = ' || trim(to_char(r_facturas.val_tasa,l_formatoNumerico))), 'tasaiva      = ' || trim(to_char(r_facturas.val_tasa,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('montoiva     = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico))), 'montoiva     = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('totaltras    = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico))), 'totaltras    = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalpagar   = ' || trim(to_char(r_facturas.val_tota_paga_loca,l_formatoNumerico))), 'totalpagar   = ' || trim(to_char(r_facturas.val_tota_paga_loca,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);


                l_textoActual := UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(r_facturas.val_tota_paga_loca))) || ' ' || TO_CHAR((r_facturas.val_tota_paga_loca - TRUNC(r_facturas.val_tota_paga_loca)) * 100)  || '/100 M.N.';
                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalletra   = SON: ' || l_textoActual), 'totalletra   = SON: ' || l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXXREFERENCIADOS'), 'XXXXREFERENCIADOS');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXFINDOC'), 'XXXFINDOC');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);



    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento NC Global para MX.
Fecha Creación      : 13/11/2014
Fecha Modificacion  : 13/11/2014
Autor               : Jorge Yepez Reyes - jyepez@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_MXL2(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_facturas IS
SELECT con.fec_fact,
       substr(p_codigoPeriodo,3,2) || '-' || substr(p_codigoPeriodo,5) COD_PERI,
       con.val_tasa_impu val_tasa,
       min(cab.fec_emis) fec_emis,
       sum(abs(cab.val_prec_cata_sin_impu_tota)) val_prec_cata_sin_impu_tota,
       sum(abs(cab.num_unid_aten_tota)) num_unid_aten_tota,
       sum(abs(cab.imp_des1_sin_impu_tota)) imp_des1_sin_impu_tota,
       sum(abs(cab.imp_impu_tota_loca)+nvl(cab.imp_redo_loca,0)) imp_impu_tota_loca,
       sum(abs(cab.val_tota_paga_loca)) val_tota_paga_loca,
       sum(abs(cab.imp_flet_impu_tota_loca)) imp_flet_tota_loca,
       sum(NVL(abs(cab.Val_Tota_Gast_Admi_Sin_Impu),0)+NVL(abs(cab.Val_Tota_Gast_Admi2_Sin_Impu),0)) VAL_TOTA_GAST_ADMI
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     FAC_TIPO_DOCUM FTD,
     cra_perio cp,
     seg_perio_corpo spc
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
and con.perd_oid_peri=cp.oid_peri
and cp.peri_oid_peri=spc.oid_peri
--and spc.cod_peri=p_codigoPeriodo
and cab.fec_fact=to_date(p_fechaFacturacion,'dd/mm/yyyy')
AND CAB.TIDO_OID_TIPO_DOCU=42
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten<>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer(+)
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
group by con.fec_fact,
       substr(p_codigoPeriodo,3,2) || '-' || substr(p_codigoPeriodo,5),
       con.val_tasa_impu--, cab.fec_emis
;

r_facturas c_facturas%ROWTYPE;



CURSOR c_detalle IS
select 
VAL_CODI_VENT,
DES_PROD,
num_unid_aten,
VAL_PREC_CATA_UNIT_LOCA,
VAL_PREC_CATA_TOTA_LOCA,
Val_Prec_Sin_Impu_Unit,
Val_Prec_Sin_Impu_Tota_Loca,
VAL_PREC_CONT_UNIT_LOCA,
VAL_PREC_CONT_TOTA_LOCA,
IMP_DESC_TOTA_LOCA,
VAL_PREC_FACT_UNIT_LOCA,
VAL_PREC_FACT_TOTA_LOCA,
VAL_PREC_NETO_UNIT_LOCA,
VAL_PREC_NETO_TOTA_LOCA,
rownum linea
from 
(
SELECT --DET.NUM_LINEA,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       gen.val_i18n DES_PROD,
       sum(abs(DET.NUM_UNID_ATEN)) num_unid_aten,
       sum(abs(DET.VAL_PREC_CATA_UNIT_LOCA)) VAL_PREC_CATA_UNIT_LOCA,
       sum(abs(DET.VAL_PREC_CATA_TOTA_LOCA)) VAL_PREC_CATA_TOTA_LOCA,
       sum(abs(DET.Val_Prec_Sin_Impu_Unit)) Val_Prec_Sin_Impu_Unit,
       sum(abs(DET.Val_Prec_Sin_Impu_Tota_Loca)) Val_Prec_Sin_Impu_Tota_Loca,
       sum(abs(DET.VAL_PREC_CONT_UNIT_LOCA)) VAL_PREC_CONT_UNIT_LOCA,
       sum(abs(DET.VAL_PREC_CONT_TOTA_LOCA)) VAL_PREC_CONT_TOTA_LOCA,
       sum(abs(DET.IMP_DESC_TOTA_LOCA)) IMP_DESC_TOTA_LOCA,
       sum(abs(DET.VAL_PREC_FACT_UNIT_LOCA)) VAL_PREC_FACT_UNIT_LOCA,
       sum(abs(DET.VAL_PREC_FACT_TOTA_LOCA)) VAL_PREC_FACT_TOTA_LOCA,
       sum(abs(DET.VAL_PREC_NETO_UNIT_LOCA)) VAL_PREC_NETO_UNIT_LOCA,
       sum(abs(DET.VAL_PREC_NETO_TOTA_LOCA)) VAL_PREC_NETO_TOTA_LOCA
FROM FAC_DOCUM_CONTA_CABEC CAB,
     cra_perio cp,
     seg_perio_corpo spc,
     FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     gen_i18n_sicc_pais gen
WHERE cab.oid_cabe=det.dcca_oid_cabe
and gen.attr_enti='MAE_PRODU' and gen.val_oid=psp.prod_oid_prod
and cab.perd_oid_peri=cp.oid_peri
and cp.peri_oid_peri=spc.oid_peri
--and spc.cod_peri=p_codigoPeriodo
and cab.tido_oid_tipo_docu=42
and cab.fec_fact=to_date(p_fechaFacturacion,'dd/mm/yyyy')
and DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
--AND NOT EXISTS (
--    SELECT NULL
--    FROM FAC_TIPO_OFERT_EXCLU TOE
--    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
--)
group by        NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) ,
       gen.val_i18n
)       
;

r_detalle c_detalle%ROWTYPE;

l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10);
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_Emisor_rfc                VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','001'),'BME060927I33');
l_Emisor_nombre             VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','002'),'BELCORP MEXICO S.A. DE C.V.');
l_Emisor_calle              VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','003'),'Prolongacion Paseo de la Reforma');
l_Emisor_noexterior         VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','004'),'1015');
l_Emisor_nointerior         VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','005'),'Torre B Piso 7');
l_Emisor_colonia            VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','006'),'Desarrollo Santa Fé');
l_Emisor_localidad          VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','007'),'');
l_Emisor_municipio          VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','008'),'Alvaro Obregon');
l_Emisor_estado             VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','009'),'D.F.');
l_Emisor_pais               VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','010'),'Mexico');
l_Emisor_codigopostal       VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','011'),'01376');
l_Receptor_rfc              VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','012'),'XAXX010101000');
l_Receptor_nombre           VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','013'),'COMPROBANTE GLOBAL DE OPERACIONES CON PUBLICO EN GENERAL');
l_Receptor_numerocliente    VARCHAR2(100) := nvl(gen_pkg_gener.gen_fn_param_pais(p_codigoPais,'FEC','014'),'');

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '----------------------------------------------------------------------------------------------';
l_totalUnidades             NUMBER := 0;



l_oid_docu_suba             NUMBER(12) := 0;
l_num_docu_cont_inte        NUMBER(12) := 0;
l_anio                      NUMBER(12) := 0;
l_val_seri_docu_lega        VARCHAR2(15);
l_val_nume_auto             VARCHAR2(15);

l_formatoNumerico           VARCHAR2(100) := nvl(IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'formatoNumerico'),'9999999G990D00');



l_CLOB                      CLOB;


BEGIN


delete from IMP_DOCUM_CONTA_MATRI;

select max(a.oid_docu_suba)
into l_oid_docu_suba
from fac_docum_subac a
where a.tido_oid_tipo_docu=32
;

select a.val_ulti_nume_docu_inte+1, a.val_ulti_ejer_docu_inte, a.val_seri_docu_lega, a.val_nume_auto
into l_num_docu_cont_inte, l_anio, l_val_seri_docu_lega, l_val_nume_auto
from fac_docum_subac a
where a.oid_docu_suba=l_oid_docu_suba;

--update fac_docum_subac set val_ulti_nume_docu_inte=l_num_docu_cont_inte
--where oid_docu_suba=l_oid_docu_suba;

update fac_regis_unico_venta a
set a.num_docu_cont_inte=l_num_docu_cont_inte
, a.val_nume_auto=l_val_nume_auto
, a.val_seri_docu_lega=l_val_seri_docu_lega
, a.val_nume_docu_lega=l_num_docu_cont_inte
, a.tido_oid_tipo_docu=42
where dcca_oid_cabe in
(
SELECT cab.oid_cabe
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_IDENT MCI,
     FAC_TIPO_DOCUM FTD,
     mae_tipo_docum mtd,
     cra_perio cp,
     seg_perio_corpo spc
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
and con.perd_oid_peri=cp.oid_peri
and cp.peri_oid_peri=spc.oid_peri
--and spc.cod_peri=p_codigoPeriodo
and cab.fec_fact=to_date(p_fechaFacturacion,'dd/mm/yyyy')
and con.clie_oid_clie=mci.clie_oid_clie
and mci.tdoc_oid_tipo_docu=mtd.oid_tipo_docu
--and mtd.val_sigl<>'RFC'
AND CAB.TIDO_OID_TIPO_DOCU=42
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten<>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
);


update fac_docum_conta_cabec a
set a.num_docu_cont_inte=l_num_docu_cont_inte
, a.val_nume_auto=l_val_nume_auto
, a.val_seri_docu_lega=l_val_seri_docu_lega
, a.num_docu_lega=l_num_docu_cont_inte
, a.tido_oid_tipo_docu=42
where oid_cabe in
(
SELECT cab.oid_cabe
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_IDENT MCI,
     FAC_TIPO_DOCUM FTD,
     mae_tipo_docum mtd,
     cra_perio cp,
     seg_perio_corpo spc
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
and con.perd_oid_peri=cp.oid_peri
and cp.peri_oid_peri=spc.oid_peri
--and spc.cod_peri=p_codigoPeriodo
and cab.fec_fact=to_date(p_fechaFacturacion,'dd/mm/yyyy')
and con.clie_oid_clie=mci.clie_oid_clie
and mci.tdoc_oid_tipo_docu=mtd.oid_tipo_docu
--and mtd.val_sigl<>'RFC'
AND CAB.TIDO_OID_TIPO_DOCU=42
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
and exists
(
select 1 from fac_docum_conta_linea xx, ped_solic_posic yy, pre_ofert_detal zz
where xx.dcca_oid_cabe=cab.oid_cabe and xx.num_unid_aten<>0
and xx.sopo_oid_soli_posi=yy.oid_soli_posi
and yy.ofde_oid_deta_ofer=zz.oid_deta_ofer
and zz.tofe_oid_tipo_ofer not in (select tofe_oid_tipo_ofer from fac_tipo_ofert_exclu)
)
);


    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
    FETCH c_facturas INTO r_facturas;
    EXIT WHEN c_facturas%NOTFOUND;


                update fac_docum_subac set val_ulti_nume_docu_inte=l_num_docu_cont_inte
                where oid_docu_suba=l_oid_docu_suba;

                INSERT INTO IMP_DOCUM_CONTA_MATRI (
                COR_DOCU_CONT_MATR,
                VAL_BUFF, COD_PAIS)
                VALUES(
                1,
                EMPTY_CLOB(), p_codigoPais)
                RETURNING VAL_BUFF INTO l_clob;

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXINICIO    xxxPARSERXXX'), 'XXXINICIO    xxxPARSERXXX');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cliente    : BELCORP'), 'cliente    : BELCORP');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('elaboro    : Federico Enriquez'), 'elaboro    : Federico Enriquez');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('version    : 1.0'), 'version    : 1.0');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fecha      : 2007.04.22'), 'fecha      : 2007.04.22');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('adenda     : Ninguna'), 'adenda     : Ninguna');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Info Documento--------------------------------------------------------------------------------'), 'Info Documento--------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('num. aprob   = ' || l_val_nume_auto), 'num. aprob   = ' || l_val_nume_auto);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fecha ap     = ' || '20' || lpad(l_anio,2,'0')), 'fecha ap     = ' || '20' || lpad(l_anio,2,'0'));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('serie        = ' || l_val_seri_docu_lega), 'serie        = ' || l_val_seri_docu_lega);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('folio        = ' || lpad(l_num_docu_cont_inte,6,'0')), 'folio        = ' || lpad(l_num_docu_cont_inte,6,'0'));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('foliointerno ='), 'foliointerno =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechaemision = ' || to_char(r_facturas.fec_fact,'yyyy/mm/dd') || ' ' || to_char(r_facturas.fec_emis,'hh:mm:ss')), 'fechaemision = ' || to_char(r_facturas.fec_fact,'yyyy/mm/dd') || ' ' || to_char(r_facturas.fec_emis,'hh:mm:ss'));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('formapago    ='), 'formapago    =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('termpagodias ='), 'termpagodias =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('condpago     ='), 'condpago     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('ordencompra  ='), 'ordencompra  =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechaoc      ='), 'fechaoc      =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('fechavenc.   ='), 'fechavenc.   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisor----------------------------------------------------------------------------------------'), 'Emisor----------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('rfc          = ' || l_Emisor_rfc), 'rfc          = ' || l_Emisor_rfc);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nombre       = ' || l_Emisor_nombre), 'nombre       = ' || l_Emisor_nombre);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisior Domicilio fiscal----------------------------------------------------------------------'), 'Emisior Domicilio fiscal----------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || l_Emisor_calle), 'calle        = ' || l_Emisor_calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   = ' || l_Emisor_noexterior), 'noexterior   = ' || l_Emisor_noexterior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   = ' || l_Emisor_nointerior), 'nointerior   = ' || l_Emisor_nointerior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || l_Emisor_colonia), 'colonia      = ' || l_Emisor_colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = ' || l_Emisor_localidad), 'localidad    = ' || l_Emisor_localidad);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || l_Emisor_municipio), 'municipio    = ' || l_Emisor_municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || l_Emisor_estado), 'estado       = ' || l_Emisor_estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || l_Emisor_codigopostal), 'codigopostal = ' || l_Emisor_codigopostal);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Emisior Domicilio expedicion------------------------------------------------------------------'), 'Emisior Domicilio expedicion------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('sucursal     ='), 'sucursal     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || l_Emisor_calle), 'calle        = ' || l_Emisor_calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   = ' || l_Emisor_noexterior), 'noexterior   = ' || l_Emisor_noexterior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   = ' || l_Emisor_nointerior), 'nointerior   = ' || l_Emisor_nointerior);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = ' || l_Emisor_colonia), 'colonia      = ' || l_Emisor_colonia);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = '), 'localidad    = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = ' || l_Emisor_municipio), 'municipio    = ' || l_Emisor_municipio);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = ' || l_Emisor_estado), 'estado       = ' || l_Emisor_estado);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         = ' || l_Emisor_pais), 'pais         = ' || l_Emisor_pais);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = ' || l_Emisor_codigopostal), 'codigopostal = ' || l_Emisor_codigopostal);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor--------------------------------------------------------------------------------------'), 'Receptor--------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('rfc          = ' || l_Receptor_rfc), 'rfc          = ' || l_Receptor_rfc);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nombre       = ' || l_Receptor_nombre), 'nombre       = ' || l_Receptor_nombre);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('numerocliente='), 'numerocliente=');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor domicilio fiscal---------------------------------------------------------------------'), 'Receptor domicilio fiscal---------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        = ' || l_Emisor_calle), 'calle        = ' || l_Emisor_calle);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   ='), 'noexterior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   ='), 'nointerior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      = '), 'colonia      = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = '), 'localidad    = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('referencia   ='), 'referencia   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    = '), 'municipio    = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       = '), 'estado       = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         ='), 'pais         =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal = '), 'codigopostal = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Receptor domicilio recepcion------------------------------------------------------------------'), 'Receptor domicilio recepcion------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('sucursal     ='), 'sucursal     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('calle        ='), 'calle        =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('noexterior   ='), 'noexterior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('nointerior   ='), 'nointerior   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('colonia      ='), 'colonia      =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('localidad    = '), 'localidad    = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('referencia   ='), 'referencia   =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('municipio    ='), 'municipio    =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('estado       ='), 'estado       =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pais         ='), 'pais         =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('codigopostal ='), 'codigopostal =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Person.---------------------------------------------------------------------------------------'), 'Person.---------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('filename     = MFC1094M'), 'filename     = MFC1094M');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('count        = 1'), 'count        = 1');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('total        = 2'), 'total        = 2');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('group        = e4e191'), 'group        = e4e191');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cdgconsultora= '), 'cdgconsultora= ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('cdgterritor  = '), 'cdgterritor  = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('numdespacho  = '), 'numdespacho  = ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('campaña      = ' || r_facturas.cod_peri), 'campaña      = ' || r_facturas.cod_peri);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                if r_facturas.imp_flet_tota_loca<>0 then
                r_facturas.num_unid_aten_tota:=r_facturas.num_unid_aten_tota+1;
                end if;
                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalunidades= Total Unidades:        ' || r_facturas.num_unid_aten_tota), 'totalunidades= Total Unidades:        ' || r_facturas.num_unid_aten_tota);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('pers10       ='), 'pers10       =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXDETALLES'), 'XXXDETALLES');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                    OPEN c_detalle;
                    LOOP
                    FETCH c_detalle INTO r_detalle;
                    EXIT WHEN c_detalle%NOTFOUND;

                      l_textoActual:= rpad(r_detalle.num_unid_aten,6,' ') || '| ' || rpad(r_detalle.val_codi_vent,13,' ') || '| ' || rpad(r_detalle.des_prod,43,' ') || '| ' || rpad(to_char(r_detalle.Val_Prec_Sin_Impu_Unit,l_formatoNumerico),16,' ') || '| ' || rpad(to_char(r_detalle.Val_Prec_Sin_Impu_tota_loca,l_formatoNumerico),16,' ') || '| GRP' ||  to_char(trunc(r_detalle.linea/30)+case when mod(r_detalle.linea,30)=0 then 0 else 1 end) || ' |';

                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                    END LOOP;

                      IF r_facturas.IMP_FLET_TOTA_LOCA<>0 THEN
                      l_textoActual:= rpad('1',6,' ') || '| ' || rpad(' ',13,' ') || '| ' || rpad('SERVICIOS',43,' ') || '| ' || rpad(to_char(r_facturas.IMP_FLET_TOTA_LOCA,l_formatoNumerico),16,' ') || '| ' || rpad(to_char(r_facturas.IMP_FLET_TOTA_LOCA,l_formatoNumerico),16,' ') || '| GRP' ||  to_char(trunc((r_detalle.linea+1)/30)+case when mod((r_detalle.linea+1),30)=0 then 0 else 1 end) || ' |';

                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                      END IF;

                      IF r_facturas.VAL_TOTA_GAST_ADMI<>0 THEN
                      l_textoActual:= rpad('1',6,' ') || '| ' || rpad(' ',13,' ') || '| ' || rpad('GASTOS ADMINISTRATIVOS',43,' ') || '| ' || rpad(to_char(r_facturas.VAL_TOTA_GAST_ADMI,l_formatoNumerico),16,' ') || '| ' || rpad(to_char(r_facturas.VAL_TOTA_GAST_ADMI,l_formatoNumerico),16,' ') || '| GRP' ||  to_char(trunc((r_detalle.linea+2)/30)+case when mod((r_detalle.linea+2),30)=0 then 0 else 1 end) || ' |';

                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                      DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                      END IF;


                    CLOSE c_detalle;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXFINDETALLES'), 'XXXFINDETALLES');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('Totales---------------------------------------------------------------------------------------'), 'Totales---------------------------------------------------------------------------------------');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('moneda       = MXN'), 'moneda       = MXN');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tipocambio   = 0.00000'), 'tipocambio   = 0.00000');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('subtotal     = ' || trim(to_char(r_facturas.val_prec_cata_sin_impu_tota+nvl(r_facturas.imp_flet_tota_loca,0)+r_facturas.VAL_TOTA_GAST_ADMI,l_formatoNumerico))), 'subtotal     = ' || trim(to_char(r_facturas.val_prec_cata_sin_impu_tota+nvl(r_facturas.imp_flet_tota_loca,0)+r_facturas.VAL_TOTA_GAST_ADMI,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('descuentos   = ' || trim(to_char(r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico))), 'descuentos   = ' || trim(to_char(r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('recargos     ='), 'recargos     =');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('montobase    = ' || trim(to_char((r_facturas.val_prec_cata_sin_impu_tota+nvl(r_facturas.imp_flet_tota_loca,0)+r_facturas.VAL_TOTA_GAST_ADMI)-r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico))), 'montobase    = ' || trim(to_char((r_facturas.val_prec_cata_sin_impu_tota+nvl(r_facturas.imp_flet_tota_loca,0)+r_facturas.VAL_TOTA_GAST_ADMI)-r_facturas.IMP_DES1_SIN_IMPU_TOTA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tipoimp      = IVA'), 'tipoimp      = IVA');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('tasaiva      = ' || trim(to_char(r_facturas.val_tasa,l_formatoNumerico))), 'tasaiva      = ' || trim(to_char(r_facturas.val_tasa,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('montoiva     = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico))), 'montoiva     = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('totaltras    = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico))), 'totaltras    = ' || trim(to_char(r_facturas.IMP_IMPU_TOTA_LOCA,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalpagar   = ' || trim(to_char(r_facturas.val_tota_paga_loca,l_formatoNumerico))), 'totalpagar   = ' || trim(to_char(r_facturas.val_tota_paga_loca,l_formatoNumerico)));
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);


                l_textoActual := UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(r_facturas.val_tota_paga_loca))) || ' ' || TO_CHAR((r_facturas.val_tota_paga_loca - TRUNC(r_facturas.val_tota_paga_loca)) * 100)  || '/100 M.N.';
                DBMS_LOB.writeappend(l_CLOB, LENGTH('totalletra   = SON: ' || l_textoActual), 'totalletra   = SON: ' || l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXXREFERENCIADOS'), 'XXXXREFERENCIADOS');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH('XXXFINDOC'), 'XXXFINDOC');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);



    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;


END;
/**************************************************************************
Descripcion         : Genera notas de credito matriciales en el formato
                      de Perú Esika.
Fecha Creación      : 17/11/2009
Fecha Modificacion  : 17/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_PEE(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.COD_PERI_REFE,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 4) VAL_CALL,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 3) VAL_DIST,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 2) VAL_PROV,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 1) VAL_DEPA,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       ABS(CAB.VAL_TOTA_PAGA_LOCA) VAL_TOTA_PAGA_LOCA,
       ABS(CAB.IMP_IMPU_TOTA_LOCA) IMP_IMPU_TOTA_LOCA,
       ABS(CAB.VAL_PREC_CONT_SIN_IMPU_TOTA) VAL_PREC_CONT_SIN_IMPU_TOTA,
       ABS(CAB.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       ABS(CAB.IMP_DES1_SIN_IMPU_TOTA) IMP_DES1_SIN_IMPU_TOTA,
       ABS(CAB.IMP_DES3_SIN_IMPU_TOTA) IMP_DES3_SIN_IMPU_TOTA,
       ABS(CAB.IMP_FLET_TOTA_LOCA) IMP_FLET_TOTA_LOCA,
       ABS(CAB.IMP_FLET_IMPU_TOTA_LOCA) IMP_FLET_IMPU_TOTA_LOCA,
       ABS(CAB.IMP_REDO_LOCA) IMP_REDO_LOCA,
       CAB.VAL_OBSE,
       CON.TDOC_OID_TIPO_DOCU
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
AND CAB.SOCA_OID_SOLI_CABE = CON.OID_SOLI_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                    imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl               imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                    imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                    imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                    imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                    imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe               imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli               imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                    imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons          imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte          imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                    imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                    imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                    imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                    imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               imp_docum_conta_matri.cod_tipo_docu%TYPE,
    val_nume_soli_refe          imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    cod_peri_refe               imp_docum_conta_matri.cod_peri_refe%TYPE,
    num_pagi                    imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi               imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_call                    varchar2(100),
    val_dist                    varchar2(100),
    val_prov                    varchar2(100),
    val_depa                    varchar2(100),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    tdoc_oid_tipo_docu          ped_solic_cabec.tdoc_oid_tipo_docu%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       PSP.VAL_CODI_VENT,
       SUBSTR(SPC.COD_PERI, -2, 2) || SUBSTR(MP.COD_SAP, 1, 5) || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8') COD_SAP_FORM,
       SUBSTR(SPC.COD_PERI, -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8') VAL_CODI_VENT_FORM,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       ABS(DET.VAL_PREC_CATA_UNIT_LOCA) VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       ABS(DET.VAL_PREC_CONT_UNIT_LOCA) VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       ABS(DET.IMP_DESC_SIN_IMPU_TOTA_LOCA) IMP_DESC_SIN_IMPU_TOTA_LOCA,
       ABS(DET.VAL_PREC_FACT_UNIT_LOCA) VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       ABS(DET.VAL_PREC_NETO_UNIT_LOCA) VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       ABS(DET.VAL_PREC_SIN_IMPU_UNIT) VAL_PREC_SIN_IMPU_UNIT,
       ABS(DET.VAL_PREC_SIN_IMPU_TOTA_LOCA) VAL_PREC_SIN_IMPU_TOTA_LOCA,
       ABS(DET.IMP_IMPU_TOTA_LOCA) IMP_IMPU_TOTA_LOCA
FROM FAC_DOCUM_CONTA_LINEA DET,
     FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     MAE_PRODU MP,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.DCCA_OID_CABE = CAB.OID_CABE
AND DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND DET.PROD_OID_PROD = MP.OID_PROD
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND CAB.PERD_OID_PERI = CP.OID_PERI
AND CP.PERI_OID_PERI = SPC.OID_PERI
AND DET.NUM_UNID_ATEN <> 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND CAB.OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
)
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               ped_solic_posic.val_codi_vent%TYPE,
    cod_sap_form                varchar2(15),
    val_codi_vent_form          varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' =================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionGeografica VARCHAR2(100) := ' ';
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

-- Variables para obtener los datos del documento legal de origen
l_fechaReferencia               DATE;
l_serieLegalReferencia          VARCHAR2(10);
l_numeroLegalReferencia         NUMBER(9);
l_codigoInternoReferencia       NUMBER(9);
l_montoReferencia               NUMBER(12, 2);
l_oidTipoDocumentoReferencia    NUMBER(12);
l_tipoDocumentoReferencia       VARCHAR2(3);

l_CLOB                      CLOB;

-- Parametro para actualizar las referencias al documento
-- legal de origen en el registro unico de ventas
l_indicadorDocumentoRefRuv      VARCHAR2(15) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'indicadorActualizarDocRefRuv') ;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG ' || LPAD(r_nota(i).num_pagi, 3) || ' DE ' || LPAD(r_nota(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y fecha de emision
                l_textoActual := 'CAMPAÑA:' || RPAD(r_nota(i).cod_peri, 9, ' ') || 'EMISION:' || TO_CHAR(r_nota(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Boleta y fecha de referencia
                l_textoActual := 'BOL. DESPACHO REF:' || RPAD(r_nota(i).val_nume_soli_refe, 14, ' ') || 'CMP. REF:' || r_nota(i).cod_peri_refe;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Documento Legal de referencia
                l_serieLegalReferencia := NULL;
                l_numeroLegalReferencia := 0;
                l_codigoInternoReferencia := 0;
                l_fechaReferencia := NULL;
                l_montoReferencia := 0;
                l_oidTipoDocumentoReferencia := 0;
                l_tipoDocumentoReferencia := NULL;

                -- Obtenemos los datos de la factura del documento de origen
                IMP_PR_OBTIE_INFOR_DOCLE_REFER(r_nota(i).oid_docu_cont_cabe,
                                               l_serieLegalReferencia,
                                               l_numeroLegalReferencia,
                                               l_codigoInternoReferencia,
                                               l_fechaReferencia,
                                               l_montoReferencia,
                                               l_oidTipoDocumentoReferencia,
                                               l_tipoDocumentoReferencia);

                -- Si el indicador de actualizacion esta activo, pasamos los datos al RUV
                IF (l_indicadorDocumentoRefRuv = 'S' OR l_indicadorDocumentoRefRuv = '1') THEN

                    -- Actualizamos el tipo de documento
                    UPDATE fac_regis_unico_venta ruv
                    set ruv.tdoc_oid_tipo_docu = r_nota(i).tdoc_oid_tipo_docu
                    WHERE dcca_oid_cabe = r_nota(i).oid_docu_cont_cabe;

                    IF l_numeroLegalReferencia <> 0 THEN

                    -- Actualizamos los valores de la referencia
                        UPDATE fac_regis_unico_venta ruv
                    set ruv.fec_emis_refe = l_fechaReferencia,
                        ruv.tido_tipo_docu_refe = l_oidTipoDocumentoReferencia,
                        ruv.val_seri_docu_refe = l_serieLegalReferencia,
                        ruv.val_nume_docu_refe = l_numeroLegalReferencia
                        WHERE dcca_oid_cabe = r_nota(i).oid_docu_cont_cabe;

                    END IF;

                END IF;

                IF l_numeroLegalReferencia <> 0 THEN
                    l_textoActual := 'DOC. LEGAL REF: ';
                    IF l_tipoDocumentoReferencia = COD_TIPO_DOCUM_FACTU THEN
                        l_textoActual := l_textoActual || 'FACTURA ' || l_serieLegalReferencia || '-' || l_numeroLegalReferencia;
                    ELSE
                        l_textoActual := l_textoActual || 'BOLETA  ' || l_serieLegalReferencia || '-' || l_numeroLegalReferencia;
                    END IF;
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Codigo de Cliente
                l_textoActual := 'ZONA:' || r_nota(i).cod_zona || '-' || r_nota(i).cod_terr || '   CUENTA:' || r_nota(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DNI/RUC
                IF r_nota(i).cod_tipo_docu = COD_NOTA_CREDI_FACTU THEN
                    l_textoActual := 'RUC:' || r_nota(i).val_nume_iden_fisc;
                ELSE
                    l_textoActual := 'DNI:' || r_nota(i).val_nume_iden_fisc;
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_nota(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_nota(i).val_dire_comp, 1, 47);
                    IF LENGTH(r_nota(i).val_dire_comp) > 47 THEN
                        l_direccionLinea2 := SUBSTR(r_nota(i).val_dire_comp, 48, 47);
                    END IF;

                    IF LENGTH(r_nota(i).val_dire_comp) > 94 THEN
                        l_direccionLinea3 := SUBSTR(r_nota(i).val_dire_comp, 95, 47);
                    END IF;

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionGeografica := r_nota(i).val_dist || '/' || r_nota(i).val_prov || '/' || r_nota(i).val_depa;
                IF r_nota(i).val_call IS NOT NULL THEN
                    l_ubicacionGeografica := r_nota(i).val_call || '/' || l_ubicacionGeografica;
                END IF;
                l_ubicacionLinea1 := SUBSTR(l_ubicacionGeografica, 1, 47);
                IF LENGTH(l_ubicacionGeografica) > 47 THEN
                    l_ubicacionLinea2 := SUBSTR(l_ubicacionGeografica, 48, 47);
                END IF;

                -- Ubicacion Geografica y Codigo Interno
                l_textoActual := RPAD(l_ubicacionLinea1, 52, ' ') || 'CODIGO INTERNO:' || LPAD(r_nota(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica y Boleta de Despacho
                l_textoActual := RPAD(l_ubicacionLinea2, 52, ' ') || 'BOLETA DESPACHO:' || LPAD(r_nota(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
--                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
--                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE NOTA DE CREDITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_nota(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN
                            -- Se imprime el separador a partir del segundo grupo de detalles
                            IF k > 0 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP
                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten , 4) || ' ' || RPAD(r_detalle(j).des_prod, 36);

                                IF r_detalle(j).val_codi_vent IS NOT NULL THEN
                                    l_textoActual := l_textoActual || r_detalle(j).val_codi_vent_form;
                                ELSE
                                    l_textoActual := l_textoActual || r_detalle(j).cod_sap_form;
                                END IF;

                                IF r_nota(i).cod_tipo_docu = COD_NOTA_CREDI_FACTU THEN
                                    l_precioUnitario := r_detalle(j).val_prec_sin_impu_unit;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_neto_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_neto_tota_loca;
                                ELSE
                                    l_precioUnitario :=  r_detalle(j).val_prec_cata_unit_loca + r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_fact_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_fact_tota_loca;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 10, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitarioFacturado, '9999999990.00')), 9, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12, ' ');
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                            END LOOP;

                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                IF r_nota(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_nota(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                IF l_contadorSeparadores = 0 THEN
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                    l_contadorSeparadores := l_contadorSeparadores + 1;
                END IF;

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_totalDescuentos := l_totalDescuentos - r_nota(i).val_impo_redo_cons;
                END IF;

                -- Imprimos tantos cambios de linea como sean necesarios
                l_numeroCambiosLinea := 54 - l_contadorDetalles - l_contadorSeparadores;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE
                -- Total de unidades
                l_textoActual := LPAD(l_totalUnidades, 6, ' ') || ' UNIDADES';

                IF r_nota(i).cod_tipo_docu = COD_NOTA_CREDI_FACTU THEN
                    l_totalVentaCatalogo := r_nota(i).val_tota_paga_loca - r_nota(i).imp_impu_tota_loca - r_nota(i).imp_flet_impu_tota_loca;
                    l_totalVentaCatalogo := l_totalVentaCatalogo + r_nota(i).val_prec_cont_sin_impu_tota + r_nota(i).imp_des1_sin_impu_tota + r_nota(i).imp_des3_sin_impu_tota;
                    l_totalDescuentos := r_nota(i).val_prec_cont_sin_impu_tota + r_nota(i).imp_des1_sin_impu_tota + r_nota(i).imp_des3_sin_impu_tota;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_nota(i).imp_flet_impu_tota_loca;
                ELSE
                    l_totalVentaCatalogo := r_nota(i).val_tota_paga_loca - r_nota(i).imp_flet_tota_loca + r_nota(i).imp_desc_tota_loca;
                    l_totalDescuentos := r_nota(i).imp_desc_tota_loca;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_nota(i).imp_flet_tota_loca;
                END IF;
                -- Total Precio Catalogo
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 17, ' ');
                -- Total Descuento
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')) || ')', 14, ' ');
                -- Total Precio Facturado
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFacturado, '9999999990.00')), 22, ' ');
                -- Flete
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13, ' ');

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Agregamos los valores faltantes al total
                l_totalAPagar := ABS(r_nota(i).val_tota_paga_loca);

                -- Total en texto
                l_textoActual := 'SON:' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Monto Final en Numeros
                IF r_nota(i).cod_tipo_docu = COD_NOTA_CREDI_FACTU THEN
                    l_textoActual := LPAD(' ', 42, ' ') ||  LPAD(TRIM(TO_CHAR(r_nota(i).imp_impu_tota_loca, '9999999990.00')), 15, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                ELSE
                    l_textoActual := LPAD(' ', 57, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;


/**************************************************************************
Descripcion         : Genera notas de credito matriciales en el formato
                      de Perú Esika.
Fecha Creación      : 17/11/2009
Fecha Modificacion  : 17/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_PEE_2(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.COD_PERI_REFE,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 4) VAL_CALL,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 3) VAL_DIST,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 2) VAL_PROV,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 1) VAL_DEPA,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       ABS(CAB.VAL_TOTA_PAGA_LOCA) VAL_TOTA_PAGA_LOCA,
       ABS(CAB.IMP_IMPU_TOTA_LOCA) IMP_IMPU_TOTA_LOCA,
       ABS(CAB.VAL_PREC_CONT_SIN_IMPU_TOTA) VAL_PREC_CONT_SIN_IMPU_TOTA,
       ABS(CAB.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       ABS(CAB.IMP_DES1_SIN_IMPU_TOTA) IMP_DES1_SIN_IMPU_TOTA,
       ABS(CAB.IMP_DES3_SIN_IMPU_TOTA) IMP_DES3_SIN_IMPU_TOTA,
       ABS(CAB.IMP_FLET_TOTA_LOCA) IMP_FLET_TOTA_LOCA,
       ABS(CAB.IMP_FLET_IMPU_TOTA_LOCA) IMP_FLET_IMPU_TOTA_LOCA,
       ABS(CAB.IMP_REDO_LOCA) IMP_REDO_LOCA,
       CAB.VAL_OBSE,
       CON.TDOC_OID_TIPO_DOCU
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
AND CAB.SOCA_OID_SOLI_CABE = CON.OID_SOLI_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                    imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl               imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                    imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                    imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                    imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                    imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe               imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli               imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                    imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons          imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte          imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                    imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                    imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                    imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                    imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               imp_docum_conta_matri.cod_tipo_docu%TYPE,
    val_nume_soli_refe          imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    cod_peri_refe               imp_docum_conta_matri.cod_peri_refe%TYPE,
    num_pagi                    imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi               imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_call                    varchar2(100),
    val_dist                    varchar2(100),
    val_prov                    varchar2(100),
    val_depa                    varchar2(100),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    tdoc_oid_tipo_docu          ped_solic_cabec.tdoc_oid_tipo_docu%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       PSP.VAL_CODI_VENT,
       SUBSTR(SPC.COD_PERI, -2, 2) || SUBSTR(MP.COD_SAP, 1, 5) || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8') COD_SAP_FORM,
       SUBSTR(SPC.COD_PERI, -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8') VAL_CODI_VENT_FORM,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       ABS(DET.VAL_PREC_CATA_UNIT_LOCA) VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       ABS(DET.VAL_PREC_CONT_UNIT_LOCA) VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       ABS(DET.IMP_DESC_SIN_IMPU_TOTA_LOCA) IMP_DESC_SIN_IMPU_TOTA_LOCA,
       ABS(DET.VAL_PREC_FACT_UNIT_LOCA) VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       ABS(DET.VAL_PREC_NETO_UNIT_LOCA) VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       ABS(DET.VAL_PREC_SIN_IMPU_UNIT) VAL_PREC_SIN_IMPU_UNIT,
       ABS(DET.VAL_PREC_SIN_IMPU_TOTA_LOCA) VAL_PREC_SIN_IMPU_TOTA_LOCA,
       ABS(DET.IMP_IMPU_TOTA_LOCA) IMP_IMPU_TOTA_LOCA
FROM FAC_DOCUM_CONTA_LINEA DET,
     FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     MAE_PRODU MP,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.DCCA_OID_CABE = CAB.OID_CABE
AND DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND DET.PROD_OID_PROD = MP.OID_PROD
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND CAB.PERD_OID_PERI = CP.OID_PERI
AND CP.PERI_OID_PERI = SPC.OID_PERI
AND DET.NUM_UNID_ATEN <> 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND CAB.OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
)
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               ped_solic_posic.val_codi_vent%TYPE,
    cod_sap_form                varchar2(15),
    val_codi_vent_form          varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' =================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionGeografica VARCHAR2(100) := ' ';
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

-- Variables para obtener los datos del documento legal de origen
l_fechaReferencia               DATE;
l_serieLegalReferencia          VARCHAR2(10);
l_numeroLegalReferencia         NUMBER(9);
l_codigoInternoReferencia       NUMBER(9);
l_montoReferencia               NUMBER(12, 2);
l_oidTipoDocumentoReferencia    NUMBER(12);
l_tipoDocumentoReferencia       VARCHAR2(3);

l_CLOB                      CLOB;

-- Parametro para actualizar las referencias al documento
-- legal de origen en el registro unico de ventas
l_indicadorDocumentoRefRuv      VARCHAR2(15) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'indicadorActualizarDocRefRuv') ;
l_lineasDetalle      NUMBER := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'lineasDetalleNCPeru') ;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG ' || LPAD(r_nota(i).num_pagi, 3) || ' DE ' || LPAD(r_nota(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                */
                -- Campaña y fecha de emision
                l_textoActual := 'CAMPAÑA:' || RPAD(r_nota(i).cod_peri, 9, ' ') || 'EMISION:' || TO_CHAR(r_nota(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Boleta y fecha de referencia
                l_textoActual := 'BOL. DESPACHO REF:' || RPAD(r_nota(i).val_nume_soli_refe, 14, ' ') || 'CMP. REF:' || r_nota(i).cod_peri_refe;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Documento Legal de referencia
                l_serieLegalReferencia := NULL;
                l_numeroLegalReferencia := 0;
                l_codigoInternoReferencia := 0;
                l_fechaReferencia := NULL;
                l_montoReferencia := 0;
                l_oidTipoDocumentoReferencia := 0;
                l_tipoDocumentoReferencia := NULL;

                -- Obtenemos los datos de la factura del documento de origen
                IMP_PR_OBTIE_INFOR_DOCLE_REFER(r_nota(i).oid_docu_cont_cabe,
                                               l_serieLegalReferencia,
                                               l_numeroLegalReferencia,
                                               l_codigoInternoReferencia,
                                               l_fechaReferencia,
                                               l_montoReferencia,
                                               l_oidTipoDocumentoReferencia,
                                               l_tipoDocumentoReferencia);

                -- Si el indicador de actualizacion esta activo, pasamos los datos al RUV
                IF (l_indicadorDocumentoRefRuv = 'S' OR l_indicadorDocumentoRefRuv = '1') THEN

                    -- Actualizamos el tipo de documento
                    UPDATE fac_regis_unico_venta ruv
                    set ruv.tdoc_oid_tipo_docu = r_nota(i).tdoc_oid_tipo_docu
                    WHERE dcca_oid_cabe = r_nota(i).oid_docu_cont_cabe;

                    IF l_numeroLegalReferencia <> 0 THEN

                        -- Actualizamos los valores de la referencia
                        UPDATE fac_regis_unico_venta ruv
                        set ruv.fec_emis_refe = l_fechaReferencia,
                            ruv.tido_tipo_docu_refe = l_oidTipoDocumentoReferencia,
                            ruv.val_seri_docu_refe = l_serieLegalReferencia,
                            ruv.val_nume_docu_refe = l_numeroLegalReferencia
                        WHERE dcca_oid_cabe = r_nota(i).oid_docu_cont_cabe;

                    END IF;

                END IF;

                IF l_numeroLegalReferencia <> 0 THEN
                    l_textoActual := 'DOC. LEGAL REF: ';
                    IF l_tipoDocumentoReferencia = COD_TIPO_DOCUM_FACTU THEN
                        l_textoActual := l_textoActual || 'FACTURA ' || l_serieLegalReferencia || '-' || l_numeroLegalReferencia;
                    ELSE
                        l_textoActual := l_textoActual || 'BOLETA  ' || l_serieLegalReferencia || '-' || l_numeroLegalReferencia;
                    END IF;
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Codigo de Cliente
                l_textoActual := 'ZONA:' || r_nota(i).cod_zona || '-' || r_nota(i).cod_terr || '   CUENTA:' || r_nota(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DNI/RUC
                IF r_nota(i).cod_tipo_docu = COD_NOTA_CREDI_FACTU THEN
                    l_textoActual := 'RUC:' || r_nota(i).val_nume_iden_fisc;
                ELSE
                    l_textoActual := 'DNI:' || r_nota(i).val_nume_iden_fisc;
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_nota(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_nota(i).val_dire_comp, 1, 47);
                    IF LENGTH(r_nota(i).val_dire_comp) > 47 THEN
                        l_direccionLinea2 := SUBSTR(r_nota(i).val_dire_comp, 48, 47);
                    END IF;

                    IF LENGTH(r_nota(i).val_dire_comp) > 94 THEN
                        l_direccionLinea3 := SUBSTR(r_nota(i).val_dire_comp, 95, 47);
                    END IF;

                END IF;
                l_textoActual := RPAD(l_direccionLinea1, 52, ' ') || 'CODIGO INTERNO:' || LPAD(r_nota(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_textoActual := RPAD(l_direccionLinea2, 52, ' ') || 'BOLETA DESPACHO:' || LPAD(r_nota(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                */
                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionGeografica := r_nota(i).val_dist || '/' || r_nota(i).val_prov || '/' || r_nota(i).val_depa;
                IF r_nota(i).val_call IS NOT NULL THEN
                    l_ubicacionGeografica := r_nota(i).val_call || '/' || l_ubicacionGeografica;
                END IF;
                l_ubicacionLinea1 := SUBSTR(l_ubicacionGeografica, 1, 47);
                IF LENGTH(l_ubicacionGeografica) > 47 THEN
                    l_ubicacionLinea2 := SUBSTR(l_ubicacionGeografica, 48, 47);
                END IF;

                -- Ubicacion Geografica y Codigo Interno
                --l_textoActual := RPAD(l_ubicacionLinea1, 52, ' ') || 'CODIGO INTERNO:' || LPAD(r_nota(i).num_docu_cont_inte, 14, ' ');
                --DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea1), l_ubicacionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica y Boleta de Despacho
                --l_textoActual := RPAD(l_ubicacionLinea2, 52, ' ') || 'BOLETA DESPACHO:' || LPAD(r_nota(i).val_nume_soli, 13, ' ');
                --DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea2), l_ubicacionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
*/                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
--                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
--                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE NOTA DE CREDITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_nota(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN
                            -- Se imprime el separador a partir del segundo grupo de detalles
                            IF k > 0 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP
                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten , 4) || ' ' || RPAD(r_detalle(j).des_prod, 36);

                                IF r_detalle(j).val_codi_vent IS NOT NULL THEN
                                    l_textoActual := l_textoActual || r_detalle(j).val_codi_vent_form;
                                ELSE
                                    l_textoActual := l_textoActual || r_detalle(j).cod_sap_form;
                                END IF;

                                IF r_nota(i).cod_tipo_docu = COD_NOTA_CREDI_FACTU THEN
                                    l_precioUnitario := r_detalle(j).val_prec_sin_impu_unit;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_neto_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_neto_tota_loca;
                                ELSE
                                    l_precioUnitario :=  r_detalle(j).val_prec_cata_unit_loca + r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_fact_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_fact_tota_loca;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 10, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitarioFacturado, '9999999990.00')), 9, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12, ' ');
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                            END LOOP;

                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
*/
                IF r_nota(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_nota(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

/*                IF l_contadorSeparadores = 0 THEN
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                    l_contadorSeparadores := l_contadorSeparadores + 1;
                END IF;*/

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_totalDescuentos := l_totalDescuentos - r_nota(i).val_impo_redo_cons;
                END IF;

                -- Imprimos tantos cambios de linea como sean necesarios
                select decode(l_lineasDetalle,null,54,l_lineasDetalle) into l_lineasDetalle from dual;
                l_numeroCambiosLinea := l_lineasDetalle - l_contadorDetalles - l_contadorSeparadores;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE
                -- Total de unidades
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_textoActual := LPAD(l_totalUnidades, 6, ' ') || ' UNIDADES';

                IF r_nota(i).cod_tipo_docu = COD_NOTA_CREDI_FACTU THEN
                    l_totalVentaCatalogo := r_nota(i).val_tota_paga_loca - r_nota(i).imp_impu_tota_loca - r_nota(i).imp_flet_impu_tota_loca;
                    l_totalVentaCatalogo := l_totalVentaCatalogo + r_nota(i).val_prec_cont_sin_impu_tota + r_nota(i).imp_des1_sin_impu_tota + r_nota(i).imp_des3_sin_impu_tota;
                    l_totalDescuentos := r_nota(i).val_prec_cont_sin_impu_tota + r_nota(i).imp_des1_sin_impu_tota + r_nota(i).imp_des3_sin_impu_tota;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_nota(i).imp_flet_impu_tota_loca;
                ELSE
                    l_totalVentaCatalogo := r_nota(i).val_tota_paga_loca - r_nota(i).imp_flet_tota_loca + r_nota(i).imp_desc_tota_loca;
                    l_totalDescuentos := r_nota(i).imp_desc_tota_loca;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_nota(i).imp_flet_tota_loca;
                END IF;
                -- Total Precio Catalogo
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 17, ' ');
                -- Total Descuento
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')) || ')', 14, ' ');
                -- Total Precio Facturado
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFacturado, '9999999990.00')), 22, ' ');
                -- Flete
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13, ' ');

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Agregamos los valores faltantes al total
                l_totalAPagar := ABS(r_nota(i).val_tota_paga_loca);

                -- Total en texto
                l_textoActual := 'SON:' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Monto Final en Numeros
                IF r_nota(i).cod_tipo_docu = COD_NOTA_CREDI_FACTU THEN
                    l_textoActual := LPAD(' ', 42, ' ') ||  LPAD(TRIM(TO_CHAR(r_nota(i).imp_impu_tota_loca, '9999999990.00')), 15, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                ELSE
                    l_textoActual := LPAD(' ', 57, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;

/**************************************************************************
Descripcion         : Genera notas de credito matriciales en el formato
                      de Panama LBEL.
Fecha Creación      : 15/01/2010
Fecha Modificacion  : 15/01/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NOCRE_MATRI_PAL(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.OID_SOLI_CABE_REFE,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.COD_PERI_REFE,
       DOC.FEC_VENC,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    oid_soli_cabe_refe      imp_docum_conta_matri.oid_soli_cabe_refe%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    num_pagi                imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi           imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC,
       NVL(DET.IMP_IMPU_TOTA_PROD_NACI, 0) IMP_IMPU_TOTA_PROD_NACI
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE,
    imp_impu_tota_prod_naci fac_docum_conta_linea.imp_impu_tota_prod_naci%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 31;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalSinDescuentos        NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;
l_totalICE                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

ls_indicadorImpuesto        VARCHAR2(3);
l_tasaImpuesto              NUMBER(5,3);

l_CLOB                      CLOB;

BEGIN

    -- Actualizamos los valores del impuesto
    SELECT PTI.VAL_INDI_IMPU,
           PTI.VAL_TASA_IMPU
    INTO  ls_indicadorImpuesto, l_tasaImpuesto
    FROM   PED_IMPUE_GENER PIG,
           PED_TASA_IMPUE PTI,
           SEG_SUBAC SSA
    WHERE PIG.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
      AND PIG.SBAC_OID_SBAC = SSA.OID_SBAC
      AND SSA.COD_SBAC = '000';

    UPDATE IMP_DOCUM_CONTA_MATRI DCM
    SET DCM.VAL_INDI_IMPU = ls_indicadorImpuesto,
        DCM.VAL_TASA_IMPU = l_tasaImpuesto;

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nro de Pedido, Codigo Interno y Nro de Pagina
                l_textoActual := LPAD(' ', 9) || 'N.PED.: ' || r_nota(i).val_nume_soli ||  ' COD. INT.:' || LPAD(r_nota(i).num_docu_cont_inte, 14);
                l_textoActual := l_textoActual || LPAD(' ', 10) || 'PAG.' || LPAD(r_nota(i).num_pagi, 2) || ' DE ' ||  LPAD(r_nota(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Pais y Fecha
                l_textoActual := LPAD(' ', 59) || 'PANAMA';
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_nota(i).fec_fact, 'DD'), 10);
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_nota(i).fec_fact, 'MM'), 5);
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_nota(i).fec_fact, 'YY'), 4);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 14) || RPAD(r_nota(i).cod_clie, 32);
                l_textoActual := l_textoActual || RPAD(r_nota(i).cod_zona || '-' || r_nota(i).cod_terr, 26);
                l_textoActual := l_textoActual || r_nota(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 12) || RPAD(l_nombreCompleto, 60) || r_nota(i).cod_peri;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_textoActual := LPAD(' ', 9) || substr(r_nota(i).val_dire_comp, 1, 60);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE NOTA DE CREDITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(r_detalle(j).num_unid_aten, 9) ||LPAD(' ', 2)  || RPAD(r_detalle(j).des_prod ,40);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 14);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie OR l_numSolicitudAnterior != r_nota(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_numSolicitudAnterior := r_nota(i).val_nume_soli;
                    -- A diferencia de la factura en este caso sumamos el valor del redondeo
                    l_totalDescuentos := l_totalDescuentos + r_nota(i).val_impo_redo_cons;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := 'Tot.' || LPAD(l_totalUnidades*-1, 6);
                l_textoActual := l_textoActual || LPAD(' ', 29) || 'Total Productos             :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 38) || 'Descuentos                  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Calculos de montos de impuestos
                l_totalSinDescuentos := l_totalProductos - l_totalDescuentos;
                l_baseImponible := l_totalSinDescuentos / (1 + r_nota(i).val_tasa_impu / 100);
                l_impuesto := l_totalSinDescuentos - l_baseImponible;

                -- Base Imponible
                l_textoActual := LPAD(' ', 36) || 'Base Imponible para ITBMS     :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Impuesto
                l_textoActual := LPAD(' ', 36) || 'ITBMS Tarifa ' || LPAD(r_nota(i).val_tasa_impu || '%', 3) || '              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Transportes
                l_totalTransportes := ABS(r_nota(i).imp_flet_tota_loca);
                l_textoActual := LPAD(' ', 36) || 'Fletes y Serv. (0%  ITBMS)    :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 36) || 'Total Factura                 :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total en texto
                IF l_totalFactura != 0 THEN
                    l_textoActual := LPAD('SON:', 7) || ' menos ' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura)) || ' y ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD('SON:', 7) || 'CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;

/**************************************************************************
Descripcion         : Obtiene los datos de un reclamo en base al OID documento
                      contable (nota de credito).
Fecha Creación      : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_OBTIE_INFOR_RECLA(p_oidDocumento IN NUMBER,
                                   p_numeroReclamo OUT NUMBER,
                                   p_descripcionOperacion OUT VARCHAR2) IS

CURSOR c_reclamo IS
SELECT RO.VAL_DESC_LARG,
       RCR.NUM_RECL
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC PSC,
     REC_SOLIC_OPERA RSO,
     REC_OPERA_RECLA ROR,
     REC_CABEC_RECLA RCR,
     REC_TIPOS_OPERA RTO,
     REC_OPERA RO
WHERE CAB.SOCA_OID_SOLI_CABE = PSC.SOCA_OID_SOLI_CABE
AND PSC.OID_SOLI_CABE = RSO.SOCA_OID_SOLI_CABE
AND PSC.TSPA_OID_TIPO_SOLI_PAIS = RSO.TSPA_OID_TIPO_SOLI_PAIS
AND ROR.OID_OPER_RECL = RSO.OPRE_OID_OPER_RECL
AND ROR.TIOP_OID_TIPO_OPER = RTO.OID_TIPO_OPER
AND RTO.ROPE_OID_OPER = RO.OID_OPER
AND RCR.OID_CABE_RECL = ROR.CARE_OID_CABE_RECL
AND CAB.OID_CABE = p_oidDocumento;

BEGIN

    -- Abrimos el cursor y obtenemos los datos
    FOR r_reclamo IN c_reclamo LOOP
        p_numeroReclamo := r_reclamo.NUM_RECL;
        p_descripcionOperacion := r_reclamo.VAL_DESC_LARG;
    END LOOP;

END;


/**************************************************************************
Descripcion         : Obtiene los datos de la factura de referencia  en
                      base al OID documento contable (nota de credito).
Fecha Creación      : 27/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_OBTIE_INFOR_DOCLE_REFER(p_oidDocumento IN NUMBER,
                                         p_serieDocumentoReferencia OUT VARCHAR2,
                                         p_numeroDocumentoReferencia OUT NUMBER,
                                         p_codigoInternoReferencia OUT NUMBER,
                                         p_fechaReferencia OUT DATE,
                                         p_montoReferencia OUT NUMBER,
                                         p_oidTipoDocumentoReferencia OUT NUMBER,
                                         p_tipoDocumentoReferencia OUT VARCHAR2) IS
CURSOR c_referencia IS
SELECT CAB.OID_CABE,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       FAC.NUM_DOCU_CONT_INTE,
       FAC.NUM_DOCU_LEGA,
       FAC.VAL_SERI_DOCU_LEGA,
       FAC.FEC_FACT FEC_FACT_REFE,
       FAC.VAL_TOTA_PAGA_LOCA,
       FTD.OID_TIPO_DOCU,
       FTD.COD_TIPO_DOCU
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     FAC_DOCUM_CONTA_CABEC FAC,
     FAC_TIPO_DOCUM FTD
WHERE CAB.SOCA_OID_SOLI_CABE = CON.OID_SOLI_CABE
AND CON.SOCA_OID_DOCU_REFE = FAC.SOCA_OID_SOLI_CABE
AND FAC.TIDO_OID_TIPO_DOCU = FTD.OID_TIPO_DOCU
AND CAB.OID_CABE = p_oidDocumento
AND EXISTS (
    SELECT NULL
    FROM FAC_DOCUM_CONTA_LINEA DET,
         FAC_DOCUM_CONTA_LINEA DET_REFE,
         PED_SOLIC_POSIC POS,
         PED_SOLIC_POSIC POS_REFE
    WHERE CAB.OID_CABE = DET.DCCA_OID_CABE
      AND DET.SOPO_OID_SOLI_POSI = POS.OID_SOLI_POSI
      AND FAC.OID_CABE = DET_REFE.DCCA_OID_CABE
      AND DET_REFE.SOPO_OID_SOLI_POSI = POS_REFE.OID_SOLI_POSI
      AND POS.PROD_OID_PROD = POS_REFE.PROD_OID_PROD
      AND POS.OFDE_OID_DETA_OFER = POS_REFE.OFDE_OID_DETA_OFER
);


CURSOR c_referencia1 IS
SELECT CAB.OID_CABE,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       FAC.NUM_DOCU_CONT_INTE,
       FAC.NUM_DOCU_LEGA,
       FAC.VAL_SERI_DOCU_LEGA,
       FAC.FEC_FACT FEC_FACT_REFE,
       FAC.VAL_TOTA_PAGA_LOCA,
       FTD.OID_TIPO_DOCU,
       FTD.COD_TIPO_DOCU
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     FAC_DOCUM_CONTA_CABEC FAC,
     FAC_TIPO_DOCUM FTD
WHERE CAB.SOCA_OID_SOLI_CABE = CON.OID_SOLI_CABE
AND CON.SOCA_OID_DOCU_REFE = FAC.SOCA_OID_SOLI_CABE
AND FAC.TIDO_OID_TIPO_DOCU = FTD.OID_TIPO_DOCU
AND CAB.OID_CABE = p_oidDocumento
AND EXISTS (
    SELECT NULL
    FROM FAC_DOCUM_CONTA_LINEA DET,
         FAC_DOCUM_CONTA_LINEA DET_REFE,
         PED_SOLIC_POSIC POS,
         PED_SOLIC_POSIC POS_REFE
    WHERE CAB.OID_CABE = DET.DCCA_OID_CABE
      AND DET.SOPO_OID_SOLI_POSI = POS.OID_SOLI_POSI
      AND FAC.OID_CABE = DET_REFE.DCCA_OID_CABE
      AND DET_REFE.SOPO_OID_SOLI_POSI = POS_REFE.OID_SOLI_POSI
      AND POS.PROD_OID_PROD = POS_REFE.PROD_OID_PROD
      --AND POS.OFDE_OID_DETA_OFER = POS_REFE.OFDE_OID_DETA_OFER
);

CURSOR c_referencia2 IS
SELECT CAB.OID_CABE,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       FAC.NUM_DOCU_CONT_INTE,
       FAC.NUM_DOCU_LEGA,
       FAC.VAL_SERI_DOCU_LEGA,
       FAC.FEC_FACT FEC_FACT_REFE,
       FAC.VAL_TOTA_PAGA_LOCA,
       FTD.OID_TIPO_DOCU,
       FTD.COD_TIPO_DOCU
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     FAC_DOCUM_CONTA_CABEC FAC,
     FAC_TIPO_DOCUM FTD
WHERE CAB.SOCA_OID_SOLI_CABE = CON.OID_SOLI_CABE
AND CON.SOCA_OID_DOCU_REFE = FAC.SOCA_OID_SOLI_CABE
AND FAC.TIDO_OID_TIPO_DOCU = FTD.OID_TIPO_DOCU
AND CAB.OID_CABE = p_oidDocumento
and rownum=1
;

BEGIN

    -- Abrimos el cursor y obtenemos los datos
    FOR r_referencia IN c_referencia LOOP
        p_serieDocumentoReferencia := r_referencia.VAL_SERI_DOCU_LEGA;
        p_numeroDocumentoReferencia := r_referencia.NUM_DOCU_LEGA;
        p_codigoInternoReferencia := r_referencia.NUM_DOCU_CONT_INTE;
        p_fechaReferencia := r_referencia.FEC_FACT_REFE;
        p_montoReferencia := r_referencia.VAL_TOTA_PAGA_LOCA;
        p_oidTipoDocumentoReferencia := r_referencia.OID_TIPO_DOCU;
        p_tipoDocumentoReferencia := r_referencia.COD_TIPO_DOCU;
    END LOOP;

    if p_serieDocumentoReferencia is null and p_fechaReferencia is null then

    FOR r_referencia1 IN c_referencia1 LOOP
        p_serieDocumentoReferencia := r_referencia1.VAL_SERI_DOCU_LEGA;
        p_numeroDocumentoReferencia := r_referencia1.NUM_DOCU_LEGA;
        p_codigoInternoReferencia := r_referencia1.NUM_DOCU_CONT_INTE;
        p_fechaReferencia := r_referencia1.FEC_FACT_REFE;
        p_montoReferencia := r_referencia1.VAL_TOTA_PAGA_LOCA;
        p_oidTipoDocumentoReferencia := r_referencia1.OID_TIPO_DOCU;
        p_tipoDocumentoReferencia := r_referencia1.COD_TIPO_DOCU;
    END LOOP;


    end if;

    if p_serieDocumentoReferencia is null and p_fechaReferencia is null then

    FOR r_referencia2 IN c_referencia2 LOOP
        p_serieDocumentoReferencia := r_referencia2.VAL_SERI_DOCU_LEGA;
        p_numeroDocumentoReferencia := r_referencia2.NUM_DOCU_LEGA;
        p_codigoInternoReferencia := r_referencia2.NUM_DOCU_CONT_INTE;
        p_fechaReferencia := r_referencia2.FEC_FACT_REFE;
        p_montoReferencia := r_referencia2.VAL_TOTA_PAGA_LOCA;
        p_oidTipoDocumentoReferencia := r_referencia2.OID_TIPO_DOCU;
        p_tipoDocumentoReferencia := r_referencia2.COD_TIPO_DOCU;
    END LOOP;


    end if;

END;

/**************************************************************************
Descripcion         : Actualiza el valor del correlativo de control usado
                      para la impresion de algunos documentos matriciales
                      (notas de credito y debito) cuyo OID inicial esta en
                      la tabla IMP_CONTR_DOCUM_CONTA.
Fecha Creación      : 29/05/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_ACTUA_CONTR_DOCUM_CONTA(p_codigoPais VARCHAR2,
                                         p_codigoTipoDocumento VARCHAR2) IS

l_ultimoCorrelativo     NUMBER;
l_contador              NUMBER;

BEGIN

    SELECT COUNT(*)
    INTO l_contador
    FROM IMP_DOCUM_CONTA_MATRI
    WHERE COD_PAIS = p_codigoPais;

    IF l_contador > 0 THEN

        SELECT MAX(X.OID_DOCU_CONT_CABE)
        INTO l_ultimoCorrelativo
        FROM IMP_DOCUM_CONTA_MATRI X
        WHERE X.COD_PAIS = p_codigoPais;

        UPDATE IMP_CONTR_DOCUM_CONTA Y
        SET Y.VAL_ANTE_OID_CABE = Y.VAL_ULTI_OID_CABE,
            Y.VAL_ULTI_OID_CABE = l_ultimoCorrelativo
        WHERE Y.COD_PAIS = p_codigoPais
        AND Y.COD_TIPO_DOCU_CONT = p_codigoTipoDocumento;

    END IF;

END;

/**************************************************************************
Descripcion         : Obtiene la informacion para la generacion de las notas
                      de debito matriciales.
Fecha Creación      : 01/06/2009
Fecha Modificacion  : 01/06/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_NOTA_DEBIT(p_codigoPais VARCHAR2,
                                  p_codigoTipoDocumento VARCHAR2) IS

CURSOR c_notas(oidCanal NUMBER,
               oidMarca NUMBER,
               oidDocumentoInicial NUMBER) IS
SELECT SP.OID_PAIS,
       SP.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_IMPO_REDO_LOCA VAL_IMPO_REDO_CONS,
       PTI.OID_TASA_IMPU,
       PTI.VAL_INDI_IMPU,
       PTI.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       CAB.NUM_DOCU_LEGA,
       REG.OID_REGI,
       REG.COD_REGI,
       ZON.OID_ZONA,
       ZON.COD_ZONA,
       SEC.OID_SECC,
       SEC.COD_SECC,
       TER.OID_TERR,
       TER.COD_TERR,
       CAB.PERD_OID_PERI,
       SPC.COD_PERI,
       FTD.OID_TIPO_DOCU,
       FTD.COD_TIPO_DOCU
FROM FAC_DOCUM_CONTA_CABEC CAB,
     FAC_TIPO_DOCUM FTD,
     MAE_CLIEN MC,
     PED_SOLIC_CABEC CON,
     PED_TASA_IMPUE PTI,
     ZON_REGIO REG,
     ZON_ZONA ZON,
     ZON_SECCI SEC,
     ZON_TERRI TER,
     SEG_PAIS SP,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE SP.OID_PAIS = MC.PAIS_OID_PAIS
AND MC.OID_CLIE = CON.CLIE_OID_CLIE
AND CON.OID_SOLI_CABE = CAB.SOCA_OID_SOLI_CABE
AND CON.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
AND CAB.TIDO_OID_TIPO_DOCU = FTD.OID_TIPO_DOCU
AND CAB.ZORG_OID_REGI = REG.OID_REGI
AND CAB.ZZON_OID_ZONA = ZON.OID_ZONA
AND CAB.ZSCC_OID_SECC = SEC.OID_SECC
AND CAB.TERR_OID_TERR = TER.OID_TERR
AND CAB.PERD_OID_PERI = CP.OID_PERI
AND CP.PERI_OID_PERI = SPC.OID_PERI
AND CP.CANA_OID_CANA = oidCanal
AND CP.MARC_OID_MARC = oidMarca
AND SP.COD_PAIS = p_codigoPais
AND FTD.COD_TIPO_DOCU = p_codigoTipoDocumento
AND CAB.OID_CABE > oidDocumentoInicial
AND EXISTS (
    SELECT NULL
    FROM FAC_DOCUM_CONTA_LINEA LIN
    WHERE LIN.DCCA_OID_CABE = CAB.OID_CABE
    AND LIN.NUM_UNID_ATEN != 0
)
ORDER BY TO_NUMBER(CAB.VAL_EJER_DOCU_INTE),
         CAB.NUM_DOCU_CONT_INTE;


TYPE notarecord IS RECORD (
    oid_pais            seg_pais.oid_pais%TYPE,
    cod_pais            seg_pais.cod_pais%TYPE,
    oid_clie            mae_clien.oid_clie%TYPE,
    cod_clie            mae_clien.cod_clie%TYPE,
    cod_digi_ctrl       mae_clien.cod_digi_ctrl%TYPE,
    val_nom1            mae_clien.val_nom1%TYPE,
    val_nom2            mae_clien.val_nom2%TYPE,
    val_ape1            mae_clien.val_ape1%TYPE,
    val_ape2            mae_clien.val_ape2%TYPE,
    oid_soli_cabe       ped_solic_cabec.oid_soli_cabe%TYPE,
    val_nume_soli       ped_solic_cabec.val_nume_soli%TYPE,
    fec_fact            ped_solic_cabec.fec_fact%TYPE,
    val_impo_redo_cons  ped_solic_cabec.val_impo_redo_loca%TYPE,
    oid_tasa_impu       ped_tasa_impue.oid_tasa_impu%TYPE,
    val_indi_impu       ped_tasa_impue.val_indi_impu%TYPE,
    val_tasa_impu       ped_tasa_impue.val_tasa_impu%TYPE,
    oid_cabe            fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte  fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    num_docu_lega       fac_docum_conta_cabec.num_docu_lega%TYPE,
    oid_regi            zon_regio.oid_regi%TYPE,
    cod_regi            zon_regio.cod_regi%TYPE,
    oid_zona            zon_zona.oid_zona%TYPE,
    cod_zona            zon_zona.cod_zona%TYPE,
    oid_secc            zon_secci.oid_secc%TYPE,
    cod_secc            zon_secci.cod_secc%TYPE,
    oid_terr            zon_terri.oid_terr%TYPE,
    cod_terr            zon_terri.cod_terr%TYPE,
    oid_peri            cra_perio.oid_peri%TYPE,
    cod_peri            seg_perio_corpo.cod_peri%TYPE,
    oid_tipo_docu       fac_tipo_docum.oid_tipo_docu%TYPE,
    cod_tipo_docu       fac_tipo_docum.cod_tipo_docu%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

-- Cursor para determinar el numero de paginas
CURSOR c_paginas IS
SELECT COR_DOCU_CONT_MATR,
       NUM_PAGI,
       NUM_TOTA_PAGI
FROM (
SELECT X.COR_DOCU_CONT_MATR,
       X.VAL_NUME_SOLI,
       ROW_NUMBER() OVER (PARTITION BY X.VAL_NUME_SOLI ORDER BY X.NUM_DOCU_CONT_INTE) NUM_PAGI,
       (SELECT COUNT(*) FROM IMP_DOCUM_CONTA_MATRI Y WHERE Y.VAL_NUME_SOLI = X.VAL_NUME_SOLI) NUM_TOTA_PAGI
FROM IMP_DOCUM_CONTA_MATRI X
ORDER BY X.COR_DOCU_CONT_MATR
)
WHERE NUM_TOTA_PAGI > 1;

TYPE t_cor_docu_cont_matr   IS TABLE OF  imp_docum_conta_matri.cor_docu_cont_matr%TYPE;
TYPE t_num_pagi             IS TABLE OF  imp_docum_conta_matri.num_pagi%TYPE;
TYPE t_num_tota_pagi        IS TABLE OF  imp_docum_conta_matri.num_tota_pagi%TYPE;

r_cor_docu_cont_matr    t_cor_docu_cont_matr;
r_num_pagi              t_num_pagi;
r_num_tota_pagi         t_num_tota_pagi;

-- Variables locales
l_oidPais               NUMBER;
l_oidPeriodo            NUMBER;
l_oidCanal              NUMBER;
l_oidMarca              NUMBER;
l_oidDocumentoInicial   NUMBER := 0;
l_correlativo           NUMBER := 1;

BEGIN

    -- Obtenemos el OID del periodo
    l_oidPais    := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_codigoPais);
    l_oidCanal   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CANAL(CODIGO_CANAL);
    l_oidMarca   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(CODIGO_MARCA);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE IMP_DOCUM_CONTA_MATRI';

    -- Obtenemos el oid inicial a partir del cual se generaran las notas
    SELECT VAL_ULTI_OID_CABE
    INTO l_oidDocumentoInicial
    FROM IMP_CONTR_DOCUM_CONTA
    WHERE COD_TIPO_DOCU_CONT = p_codigoTipoDocumento;

    -- Abrimos el cursor principal
    OPEN c_notas(l_oidCanal, l_oidMarca, l_oidDocumentoInicial);
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP

                INSERT INTO IMP_DOCUM_CONTA_MATRI(
                cor_docu_cont_matr,
                oid_pais,
                cod_pais,
                oid_clie,
                cod_clie,
                cod_digi_ctrl,
                val_nom1,
                val_nom2,
                val_ape1,
                val_ape2,
                oid_soli_cabe,
                val_nume_soli,
                fec_fact,
                val_impo_redo_cons,
                oid_tasa_impu,
                val_indi_impu,
                val_tasa_impu,
                oid_docu_cont_cabe,
                num_docu_cont_inte,
                num_docu_lega,
                oid_regi,
                cod_regi,
                oid_zona,
                cod_zona,
                oid_secc,
                cod_secc,
                oid_terr,
                cod_terr,
                oid_peri,
                cod_peri,
                oid_tipo_docu,
                cod_tipo_docu,
                val_buff
                )
                VALUES(
                l_correlativo,
                r_nota(i).oid_pais,
                r_nota(i).cod_pais,
                r_nota(i).oid_clie,
                r_nota(i).cod_clie,
                r_nota(i).cod_digi_ctrl,
                r_nota(i).val_nom1,
                r_nota(i).val_nom2,
                r_nota(i).val_ape1,
                r_nota(i).val_ape2,
                r_nota(i).oid_soli_cabe,
                r_nota(i).val_nume_soli,
                r_nota(i).fec_fact,
                r_nota(i).val_impo_redo_cons,
                r_nota(i).oid_tasa_impu,
                r_nota(i).val_indi_impu,
                r_nota(i).val_tasa_impu,
                r_nota(i).oid_cabe,
                r_nota(i).num_docu_cont_inte,
                r_nota(i).num_docu_lega,
                r_nota(i).oid_regi,
                r_nota(i).cod_regi,
                r_nota(i).oid_zona,
                r_nota(i).cod_zona,
                r_nota(i).oid_secc,
                r_nota(i).cod_secc,
                r_nota(i).oid_terr,
                r_nota(i).cod_terr,
                r_nota(i).oid_peri,
                r_nota(i).cod_peri,
                r_nota(i).oid_tipo_docu,
                r_nota(i).cod_tipo_docu,
                EMPTY_CLOB
                );

                l_correlativo := l_correlativo + 1;

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

    -- Abrimos el cursor de actualizacion de numeros de pagina
    OPEN c_paginas;
    LOOP
        FETCH c_paginas BULK COLLECT
        INTO r_cor_docu_cont_matr,
             r_num_pagi,
             r_num_tota_pagi LIMIT w_filas;

        FORALL j IN 1..r_cor_docu_cont_matr.COUNT
        UPDATE imp_docum_conta_matri
        SET num_pagi = r_num_pagi(j),
            num_tota_pagi = r_num_tota_pagi(j)
        WHERE cor_docu_cont_matr = r_cor_docu_cont_matr(j);

        EXIT WHEN c_paginas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_paginas;

END;

/**************************************************************************
Descripcion         : Genera las notas de debito matriciales.
Fecha Creación      : 01/06/2009
Fecha Modificacion  : 01/06/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS




BEGIN



    -- Procesamos la informacion generando las facturas en el formato correspondiente
    IF p_codigoPais = 'VEE' THEN
        IMP_PR_GENER_NODEB_MATRI_VEE(p_codigoPais);
    ELSIF p_codigoPais = 'VEL' THEN
        IMP_PR_GENER_NODEB_MATRI_VEL(p_codigoPais);
    ELSIF p_codigoPais = 'GTL' THEN
        IMP_PR_GENER_NODEB_MATRI_GTL(p_codigoPais);
    ELSIF p_codigoPais = 'GTE' THEN
        IMP_PR_GENER_FACTU_MATRI_GTE(p_codigoPais,'', '');
    ELSIF p_codigoPais = 'SVL' THEN
        IMP_PR_GENER_NODEB_MATRI_SVL(p_codigoPais);
    ELSIF p_codigoPais = 'PAL' THEN
        IMP_PR_GENER_NODEB_MATRI_PAL(p_codigoPais);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL')THEN
        IMP_PR_GENER_NODEB_MATRI_PEE(p_codigoPais);
    ELSE
        IMP_PR_GENER_NODEB_MATRI_VEE(p_codigoPais);
    END IF;

    -- Generamos el archivo matricial
    IMP_PR_GENER_ARCHI_NODEB(p_codigoPais, p_nombreArchivo, p_directorio);

END;

/**************************************************************************
Descripcion         : Genera las notas de debito matriciales.
Fecha Creación      : 01/06/2009
Fecha Modificacion  : 01/06/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_Z(p_oidzona NUMBER) IS

BEGIN
    return;
    /*
    -- Procesamos la informacion generando las facturas en el formato correspondiente
    IF p_codigoPais = 'VEE' THEN
        IMP_PR_GENER_NODEB_MATRI_VEE(p_codigoPais);
    ELSIF p_codigoPais = 'VEL' THEN
        IMP_PR_GENER_NODEB_MATRI_VEL(p_codigoPais);
    ELSIF p_codigoPais = 'GTL' THEN
        IMP_PR_GENER_NODEB_MATRI_GTL(p_codigoPais);
    ELSIF p_codigoPais = 'GTE' THEN
        IMP_PR_GENER_NODEB_MATRI_GTE(p_codigoPais);
    ELSIF p_codigoPais = 'SVL' THEN
        IMP_PR_GENER_NODEB_MATRI_SVL(p_codigoPais);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL')THEN
        IMP_PR_GENER_NODEB_MATRI_PEE(p_codigoPais);
    ELSE
        IMP_PR_GENER_NODEB_MATRI_VEE(p_codigoPais);
    END IF;

    -- Generamos el archivo matricial
    IMP_PR_GENER_ARCHI_NODEB(p_codigoPais, p_nombreArchivo, p_directorio);
    */

END;


/**************************************************************************
Descripcion         : Genera el archivo matricial de notas de debito.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_NODEB(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100);
l_finArchivo    VARCHAR2(100);
l_contador      NUMBER := 0;

CURSOR c_documentos IS
SELECT VAL_BUFF
FROM IMP_DOCUM_CONTA_MATRI
WHERE COD_PAIS = p_codigoPais
ORDER BY COR_DOCU_CONT_MATR;

BEGIN

    l_inicioArchivo := IMP_FN_INICI_ARCHI_NODEB(p_codigoPais);
    l_finArchivo := IMP_FN_FIN_ARCHI_NODEB(p_codigoPais);

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    -- Iteramos sobre el cursor
    OPEN c_documentos;
    LOOP
        FETCH c_documentos INTO t_clob;
        EXIT WHEN c_documentos%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12)), TRUE);

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_documentos;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_NODEB: '||substr(SQLERRM,1,250));

END;

/**************************************************************************
Descripcion         : Genera el archivo matricial de notas de debito.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_NODEB2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100);
l_finArchivo    VARCHAR2(100);
l_contador      NUMBER := 0;

CURSOR c_documentos IS
SELECT VAL_BUFF
FROM Imp_Paque_Docum_Nodeb_Matri
--WHERE COD_PAIS = p_codigoPais
ORDER BY COR_node;

BEGIN

    l_inicioArchivo := IMP_FN_INICI_ARCHI_NODEB(p_codigoPais);
    l_finArchivo := IMP_FN_FIN_ARCHI_NODEB(p_codigoPais);

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    -- Iteramos sobre el cursor
    OPEN c_documentos;
    LOOP
        FETCH c_documentos INTO t_clob;
        EXIT WHEN c_documentos%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12)), TRUE);

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_documentos;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_NODEB: '||substr(SQLERRM,1,250));

END;


/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_INICI_ARCHI_NODEB(p_codigoPais VARCHAR2) RETURN VARCHAR2 IS

l_inicioArchivo VARCHAR2(100);

BEGIN
    IF (p_codigoPais = 'VEE' OR p_codigoPais = 'VEL') THEN
        l_inicioArchivo := CHR(27) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77)|| CHR(13) || CHR(10);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL') THEN
        l_inicioArchivo := CHR(27) || CHR(48) || CHR(27) || CHR(80) || CHR(12);
    ELSIF (p_codigoPais = 'ECE' OR p_codigoPais = 'ECL') THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSIF (p_codigoPais = 'GTE' OR p_codigoPais = 'GTL') THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSIF (p_codigoPais = 'SVL' OR p_codigoPais = 'SVL') THEN
        l_inicioArchivo := CHR(18) || CHR(27) || CHR(67) || CHR(66) || CHR(27) || CHR(77) || CHR(32) || CHR(32);
    ELSE
        l_inicioArchivo := '';
    END IF;

    RETURN l_inicioArchivo;
END;

/**************************************************************************
Descripcion         :
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
FUNCTION IMP_FN_FIN_ARCHI_NODEB(p_codigoPais VARCHAR2) RETURN VARCHAR2 IS

l_finArchivo VARCHAR2(100);

BEGIN
    IF (p_codigoPais = 'VEE' OR p_codigoPais = 'VEL') THEN
        l_finArchivo := CHR(12) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL') THEN
        l_finArchivo := CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'ECE' OR p_codigoPais = 'ECL') THEN
        l_finArchivo := CHR(12) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'GTE' OR p_codigoPais = 'GTL') THEN
        l_finArchivo := CHR(13) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSIF (p_codigoPais = 'SVL' OR p_codigoPais = 'SVL') THEN
        l_finArchivo := CHR(13) || CHR(27) || CHR(67) || CHR(66) || CHR(18);
    ELSE
        l_finArchivo := '';
    END IF;

    RETURN l_finArchivo;
END;

/**************************************************************************
Descripcion         : Genera las notas de debito matriciales en el formato
                      de Venezuela Esika.
Fecha Creación      : 01/06/2009
Fecha Modificacion  : 01/06/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_VEE(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 31;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '          -----                                                     ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Pedido y Codigo Interno
                l_textoActual := LPAD(' ', 80) || r_nota(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha
                l_textoActual := LPAD(' ', 70) || RPAD('GUATIRE', 10);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'MM'), 5);
                l_textoActual := l_textoActual || TO_CHAR(r_nota(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 20) || RPAD(r_nota(i).cod_clie || r_nota(i).cod_digi_ctrl, 32);
                l_textoActual := l_textoActual || RPAD(r_nota(i).cod_zona || '-' || r_nota(i).cod_terr, 18);
                l_textoActual := l_textoActual || LPAD(r_nota(i).val_nume_iden_fisc, 21);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Cargo
                l_textoActual := LPAD(' ', 52) || 'Nº Cargo ' || r_nota(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 15) || RPAD(l_nombreCompleto,63) || r_nota(i).cod_peri || ' ' || r_nota(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion
                l_textoActual := LPAD(' ', 15) || r_nota(i).val_dire_comp;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE NOTA DE DEBITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 4) || RPAD(NVL(r_detalle(j).val_codi_vent, ' '), 5);
                            l_textoActual := l_textoActual || LPAD(r_detalle(j).num_unid_aten ,6);
                            l_textoActual := l_textoActual || LPAD(' ', 3) || RPAD(r_detalle(j).des_prod ,38);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 11);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 11);

                            IF r_detalle(j).val_porc_desc > 0 THEN
                                    l_textoActual := l_textoActual || '   (D-' || r_detalle(j).val_porc_desc || '%)';
                            END IF;

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie OR l_numSolicitudAnterior != r_nota(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_numSolicitudAnterior := r_nota(i).val_nume_soli;
                    l_totalDescuentos := l_totalDescuentos - r_nota(i).val_impo_redo_cons;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades
                l_textoActual := LPAD('Total', 9) || LPAD(l_totalUnidades, 6);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Productos
                l_textoActual := LPAD('Total Productos', 51) || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD('(-) Descuento Comercial', 51) || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := ABS(r_nota(i).imp_flet_tota_loca);
                l_textoActual := LPAD('(+) Gastos de Transportes', 51) || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD('Total Factura', 51) || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Espaciado
                FOR k IN 1..(l_totalEspaciado - (l_contadorDetalles + l_numLineasPieDetalle)) LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                END LOOP;

                -- Calculos de montos finales (impuestos)
                l_baseImponible := l_totalFactura / (1 + r_nota(i).val_tasa_impu / 100);
                l_impuesto := l_totalFactura - l_baseImponible;
                l_totalConImpuesto := l_totalFactura;

                -- Base Imponible
                l_textoActual := LPAD(' ', 50) || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Impuesto
                l_textoActual := LPAD(r_nota(i).val_tasa_impu || '%', 50) || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total con Impuesto
                l_textoActual := LPAD(' ', 50) || LPAD(TRIM(TO_CHAR(l_totalConImpuesto, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 10) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalConImpuesto))) || ' CON ' || TO_CHAR((l_totalConImpuesto - TRUNC(l_totalConImpuesto)) * 100)  || '/100';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;

/**************************************************************************
Descripcion         : Genera notas de debito matriciales en el formato
                      de Venezuela LBEL.
Fecha Creación      : 01/06/2009
Fecha Modificacion  : 01/06/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_VEL(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 31;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '          -----                                                     ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Pedido y Codigo Interno
                l_textoActual := LPAD(' ', 80) || r_nota(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha
                l_textoActual := LPAD(' ', 70) || RPAD('GUATIRE', 10);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'MM'), 5);
                l_textoActual := l_textoActual || TO_CHAR(r_nota(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 20) || RPAD(r_nota(i).cod_clie || r_nota(i).cod_digi_ctrl, 32);
                l_textoActual := l_textoActual || RPAD(r_nota(i).cod_zona || '-' || r_nota(i).cod_terr, 18);
                l_textoActual := l_textoActual || LPAD(r_nota(i).val_nume_iden_fisc, 21);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Cargo
                l_textoActual := LPAD(' ', 52) || 'Nº Cargo ' || r_nota(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 15) || RPAD(l_nombreCompleto,63) || r_nota(i).cod_peri || ' ' || r_nota(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion
                l_textoActual := LPAD(' ', 15) || r_nota(i).val_dire_comp;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE NOTA DE DEBITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 4) || RPAD(NVL(r_detalle(j).val_codi_vent, ' '), 5);
                            l_textoActual := l_textoActual || LPAD(r_detalle(j).num_unid_aten ,6);
                            l_textoActual := l_textoActual || LPAD(' ', 3) || RPAD(r_detalle(j).des_prod ,38);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 11);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 11);

                            IF r_detalle(j).val_porc_desc > 0 THEN
                                    l_textoActual := l_textoActual || '   (D-' || r_detalle(j).val_porc_desc || '%)';
                            END IF;

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie OR l_numSolicitudAnterior != r_nota(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_numSolicitudAnterior := r_nota(i).val_nume_soli;
                    l_totalDescuentos := l_totalDescuentos - r_nota(i).val_impo_redo_cons;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades
                l_textoActual := LPAD('Total', 9) || LPAD(l_totalUnidades, 6);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Productos
                l_textoActual := LPAD('Total Productos', 51) || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD('(-) Descuento Comercial', 51) || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := ABS(r_nota(i).imp_flet_tota_loca);
                l_textoActual := LPAD('(+) Gastos de Transportes', 51) || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD('Total Factura', 51) || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 27);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Espaciado
                FOR k IN 1..(l_totalEspaciado - (l_contadorDetalles + l_numLineasPieDetalle)) LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                END LOOP;

                -- Calculos de montos finales (impuestos)
                l_baseImponible := l_totalFactura / (1 + r_nota(i).val_tasa_impu / 100);
                l_impuesto := l_totalFactura - l_baseImponible;
                l_totalConImpuesto := l_totalFactura;

                -- Base Imponible
                l_textoActual := LPAD(' ', 50) || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Impuesto
                l_textoActual := LPAD(r_nota(i).val_tasa_impu || '%', 50) || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total con Impuesto
                l_textoActual := LPAD(' ', 50) || LPAD(TRIM(TO_CHAR(l_totalConImpuesto, '9999999990.00')), 28);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 10) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalConImpuesto))) || ' CON ' || TO_CHAR((l_totalConImpuesto - TRUNC(l_totalConImpuesto)) * 100)  || '/100';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;

/**************************************************************************
Descripcion         : Genera las notas de debito matriciales en el formato
                      de Guatemala Esika.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_GTE(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.COD_PERI_REFE,
       NVL(
           (SELECT TRIM(MCI.NUM_DOCU_IDEN)
            FROM MAE_CLIEN_IDENT MCI,
                 MAE_TIPO_DOCUM MTD
            WHERE MCI.TDOC_OID_TIPO_DOCU = MTD.OID_TIPO_DOCU
              AND MTD.COD_TIPO_DOCU = '02' -- NIT
              AND MCI.CLIE_OID_CLIE = DOC.OID_CLIE
              AND ROWNUM = 1),
           'C.FINAL'
       ) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_PREC_CATA_SIN_IMPU_TOTA,
       CAB.IMP_IMPU_TOTA_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    val_prec_cata_sin_impu_tota      fac_docum_conta_cabec.val_prec_cata_sin_impu_tota%TYPE,
    imp_impu_tota_loca      fac_docum_conta_cabec.imp_impu_tota_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '                                                                      -----             ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Inicializamos las variables
                l_numeroReclamo := 0;
                l_descripcionOperacion := NULL;
                l_numeroLegalFactura := 0;
                l_codigoInternoFactura := 0;
                l_fechaFactura := NULL;
                l_montoFactura := 0;

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 36) || 'COD. INT.: ' || r_nota(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha - Nro Documento - Cliente
                l_textoActual := LPAD(' ', 13) || RPAD('CIUD.GUATEMALA,', 19);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'DD/MM/YY'), 25);
                l_textoActual := l_textoActual || RPAD(r_nota(i).val_nume_iden_fisc, 28);
                l_textoActual := l_textoActual || r_nota(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del cliente - Zona Territorio
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 10) || RPAD(l_nombreCompleto, 71);
                l_textoActual := l_textoActual || r_nota(i).cod_zona || '-' || r_nota(i).cod_secc || '-' || r_nota(i).cod_terr;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion - Periodo
                l_textoActual := LPAD(' ', 10) || RPAD(r_nota(i).val_dire_comp, 71);
                l_textoActual := l_textoActual || SUBSTR(r_nota(i).cod_peri, 3, 2) || '-' || SUBSTR(r_nota(i).cod_peri, 5, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE NOTA DE DEBITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 3)|| RPAD(r_detalle(j).val_codi_vent ,12) || RPAD(r_detalle(j).des_prod ,50);
                            l_textoActual := l_textoActual ||  LPAD(r_detalle(j).num_unid_aten, 10);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 13);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 10);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie OR l_numSolicitudAnterior != r_nota(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_numSolicitudAnterior := r_nota(i).val_nume_soli;
                    -- A diferencia de la factura en este caso sumamos el valor del redondeo
                    l_totalDescuentos := l_totalDescuentos + r_nota(i).val_impo_redo_cons;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := LPAD('Total', 60) || LPAD(l_totalUnidades, 15);
                l_textoActual := l_textoActual  || LPAD(TRIM(TO_CHAR(r_nota(i).val_prec_cata_tota_loca, '9999999990.00')), 23);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Sin IVA
                l_textoActual := LPAD(' ', 47) || 'Total sin IVA            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(r_nota(i).val_prec_cata_sin_impu_tota, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total IVA
                l_textoActual := LPAD(' ', 47) || 'Total IVA                :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(r_nota(i).imp_impu_tota_loca, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 15) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(r_nota(i).val_prec_cata_tota_loca))) || ' ' || TO_CHAR((r_nota(i).val_prec_cata_tota_loca - TRUNC(r_nota(i).val_prec_cata_tota_loca)) * 100)  || '/100 QUETZALES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;

/**************************************************************************
Descripcion         : Genera notas de debito matriciales en el formato
                      de Guatemala LBEL.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_GTL(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.COD_PERI_REFE,
       NVL(
           (SELECT TRIM(MCI.NUM_DOCU_IDEN)
            FROM MAE_CLIEN_IDENT MCI,
                 MAE_TIPO_DOCUM MTD
            WHERE MCI.TDOC_OID_TIPO_DOCU = MTD.OID_TIPO_DOCU
              AND MTD.COD_TIPO_DOCU = '02' -- NIT
              AND MCI.CLIE_OID_CLIE = DOC.OID_CLIE
              AND ROWNUM = 1),
           'C.FINAL'
       ) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_PREC_CATA_SIN_IMPU_TOTA,
       CAB.IMP_IMPU_TOTA_LOCA
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    val_prec_cata_sin_impu_tota      fac_docum_conta_cabec.val_prec_cata_sin_impu_tota%TYPE,
    imp_impu_tota_loca      fac_docum_conta_cabec.imp_impu_tota_loca%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '      -----                                                                 ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Inicializamos las variables
                l_numeroReclamo := 0;
                l_descripcionOperacion := NULL;
                l_numeroLegalFactura := 0;
                l_codigoInternoFactura := 0;
                l_fechaFactura := NULL;
                l_montoFactura := 0;

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha
                l_textoActual := LPAD(' ', 36) || 'COD. INT.: ' || RPAD(r_nota(i).num_docu_cont_inte, 20) || RPAD('C.GUATEMALA', 14);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_nota(i).fec_fact, 'MM'), 5);
                l_textoActual := l_textoActual || TO_CHAR(r_nota(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 17) || RPAD(r_nota(i).cod_clie, 30);
                l_textoActual := l_textoActual || RPAD(r_nota(i).cod_zona || '-' || r_nota(i).cod_secc || '-' || r_nota(i).cod_terr, 25);
                l_textoActual := l_textoActual || r_nota(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nro de Pedido
                l_textoActual := LPAD(' ', 81) || r_nota(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Nombre del cliente - Periodo
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := LPAD(' ', 15) || RPAD(l_nombreCompleto, 66) || SUBSTR(r_nota(i).cod_peri, 3, 2) || '-' || SUBSTR(r_nota(i).cod_peri, 5, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion
                l_textoActual := LPAD(' ', 13) || SUBSTR(r_nota(i).val_dire_comp, 1, 73);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE NOTA DE DEBITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(r_detalle(j).num_unid_aten, 11) ||LPAD(' ', 7)  || RPAD(r_detalle(j).des_prod ,40);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 14);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera nota de la consultora
                IF l_oidClienteAnterior != r_nota(i).oid_clie OR l_numSolicitudAnterior != r_nota(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_nota(i).oid_clie;
                    l_numSolicitudAnterior := r_nota(i).val_nume_soli;
                    -- A diferencia de la factura en este caso sumamos el valor del redondeo
                    l_totalDescuentos := l_totalDescuentos + r_nota(i).val_impo_redo_cons;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := 'Total' || LPAD(l_totalUnidades, 6);
                l_textoActual := l_textoActual || LPAD(' ', 61) || LPAD(TRIM(TO_CHAR(r_nota(i).val_prec_cata_tota_loca, '9999999990.00')), 14);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Sin IVA
                l_textoActual := LPAD(' ', 47) || 'Total sin IVA            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(r_nota(i).val_prec_cata_sin_impu_tota, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total IVA
                l_textoActual := LPAD(' ', 47) || 'Total IVA                :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(r_nota(i).imp_impu_tota_loca, '9999999990.00')), 13);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total en texto
                l_textoActual := LPAD('SON: ', 15) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(r_nota(i).val_prec_cata_tota_loca))) || ' ' || TO_CHAR((r_nota(i).val_prec_cata_tota_loca - TRUNC(r_nota(i).val_prec_cata_tota_loca)) * 100)  || '/100 QUETZALES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;

/**************************************************************************
Descripcion         : Genera las notas de debito matriciales en el formato
                      de El Salvador.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_SVL(p_codigoPais VARCHAR2) IS

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       NVL(
           (SELECT TRIM(MCI.NUM_DOCU_IDEN)
            FROM MAE_CLIEN_IDENT MCI,
                 MAE_TIPO_DOCUM MTD
            WHERE MCI.TDOC_OID_TIPO_DOCU = MTD.OID_TIPO_DOCU
              AND MTD.COD_TIPO_DOCU = '02' -- NIT
              AND MCI.CLIE_OID_CLIE = DOC.OID_CLIE
              AND ROWNUM = 1),
           'C/F'
       ) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       (
select
--d.num_recl,
case when f.cod_oper like 'D%' then 'Devolución'
when f.cod_oper like 'A%' then 'Anulación'
when f.cod_oper like 'F%' then 'Reclamo'
else  'Cambio'
end || ' :' || d.num_recl Despacho
from ped_solic_cabec a, rec_solic_opera b, rec_opera_recla c, rec_cabec_recla d, rec_tipos_opera e, rec_opera f
where a.soca_oid_soli_cabe=doc.oid_soli_cabe and a.oid_soli_cabe=b.soca_oid_soli_cabe and b.opre_oid_oper_recl=C.oid_oper_recl
and c.care_oid_cabe_recl=d.oid_cabe_recl and c.TIOP_OID_TIPO_OPER=e.OID_TIPO_OPER and e.rope_oid_oper=f.oid_oper
--and f.cod_oper<>'DN'
and rownum=1
) despacho
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
and not exists (select 1 from ped_solic_cabec x, int_lar_tipo_solici_pedido_dis y
where x.tspa_oid_tipo_soli_pais=y.tspa_oid_tipo_soli_pais and x.oid_soli_cabe=cab.soca_oid_soli_cabe)
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    despacho                fac_docum_conta_cabec.val_obse%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, LPAD('0', 4 - LENGTH(PSP.VAL_CODI_VENT_FICT), '0') || PSP.VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN > 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '                                                                      -----             ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_CLOB                      CLOB;

l_docinte            NUMBER;

BEGIN

    select VAL_ULTI_NUME_DOCU_INTE
    into l_docinte
    from fac_docum_subac a where a.tido_oid_tipo_docu=1;



    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP


                l_docinte:=l_docinte+1;
                r_factura(i).NUM_DOCU_CONT_INTE:=l_docinte;

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 68) || 'COD. INT.: ' || r_factura(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 57) || RPAD('EL SALVADOR', 16) || TO_CHAR(r_factura(i).fec_fact, 'DD') || LPAD(' ', 7) || TO_CHAR(r_factura(i).fec_fact, 'MM') || LPAD(' ', 7) || TO_CHAR(r_factura(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha - Nro Documento - Cliente
--                l_textoActual := LPAD(' ', 13) || RPAD('CIUD.GUATEMALA,', 19);
--                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YY'), 25);
                -- Nombre del cliente - Zona Territorio
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 11) || RPAD(l_nombreCompleto, 55);
                l_textoActual := l_textoActual || r_factura(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                -- Direccion - Cliente
                l_textoActual := LPAD(' ', 12) || RPAD(substr(r_factura(i).val_dire_comp,1,46), 65);
                l_textoActual := l_textoActual || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion - despacho
                l_textoActual := LPAD(' ', 12) || RPAD(substr(r_factura(i).val_dire_comp,47), 65);
                l_textoActual := l_textoActual || 'Despacho: ' || r_factura(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Territorio - Periodo
                l_textoActual := LPAD(' ', 13) || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_secc || '-' || r_factura(i).cod_terr,30);
                l_textoActual := l_textoActual || SUBSTR(r_factura(i).cod_peri, 3, 2) || '-' || SUBSTR(r_factura(i).cod_peri, 5, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 8)|| RPAD(r_detalle(j).num_unid_aten ,8) || RPAD(r_detalle(j).des_prod ,34);
                            --l_textoActual := l_textoActual ||  LPAD(r_detalle(j).num_unid_aten, 10);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 13) || LPAD(' ', 20);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 10);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                l_textoActual := '   ----------                                                                       ----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
--                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := LPAD('Total', 6) || LPAD(l_totalUnidades, 5);
                l_textoActual := l_textoActual  || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 82);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Orden
                l_textoActual := LPAD(' ', 47) || 'Total Orden              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 47) || '(-)Descuentos            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                l_textoActual := LPAD(' ', 47) || '(+) Fletes y Serv.       :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 85) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Subtotal                 :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Ventas Exentas
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Ventas Exentas           :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Ventas No Sujetas
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Ventas No Sujetas        :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 85) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Total Factura            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);


                -- Total en texto
                l_textoActual := LPAD('SON: ', 15) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura))) || ' ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100 DOLARES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);



                   update fac_docum_conta_cabec set num_docu_cont_inte=l_docinte where oid_cabe=r_factura(i).OID_DOCU_CONT_CABE;
                   update fac_regis_unico_venta set num_docu_cont_inte=l_docinte where dcca_oid_cabe=r_factura(i).OID_DOCU_CONT_CABE;


            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;

       update fac_docum_subac a set a.val_ulti_nume_docu_inte=l_docinte where tido_oid_tipo_docu=1;


    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del boleta matricial en el formato
                      de Panama LBEL.
Fecha Creación      : 29/03/2010
Fecha Modificacion  : 29/03/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_PAL(p_codigoPais VARCHAR2) IS

CURSOR c_factura IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.OID_SOLI_CABE_REFE,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.COD_PERI_REFE,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_IMPO_IVA_ASUM_EMPR
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    oid_soli_cabe_refe      imp_docum_conta_matri.oid_soli_cabe_refe%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi           imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    val_impo_iva_asum_empr  fac_docum_conta_cabec.val_impo_iva_asum_empr%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC,
       NVL(DET.IMP_IMPU_TOTA_PROD_NACI, 0) IMP_IMPU_TOTA_PROD_NACI
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE,
    imp_impu_tota_prod_naci fac_docum_conta_linea.imp_impu_tota_prod_naci%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 31;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalSinDescuentos        NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);

ls_indicadorImpuesto        VARCHAR2(3);
l_tasaImpuesto              NUMBER(5,3);

l_CLOB                      CLOB;

BEGIN

    -- Actualizamos los valores del impuesto
    SELECT PTI.VAL_INDI_IMPU,
           PTI.VAL_TASA_IMPU
    INTO  ls_indicadorImpuesto, l_tasaImpuesto
    FROM   PED_IMPUE_GENER PIG,
           PED_TASA_IMPUE PTI,
           SEG_SUBAC SSA
    WHERE PIG.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
      AND PIG.SBAC_OID_SBAC = SSA.OID_SBAC
      AND SSA.COD_SBAC = '000';

    UPDATE IMP_DOCUM_CONTA_MATRI DCM
    SET DCM.VAL_INDI_IMPU = ls_indicadorImpuesto,
        DCM.VAL_TASA_IMPU = l_tasaImpuesto;

    -- Abrimos el cursor principal
    OPEN c_factura;
    LOOP
        FETCH c_factura BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto de la factura
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nro de Pedido, Codigo Interno y Nro de Pagina
                l_textoActual := LPAD(' ', 9) || 'N.PED.: ' || r_factura(i).val_nume_soli ||  ' COD. INT.:' || LPAD(r_factura(i).num_docu_cont_inte, 14);
                l_textoActual := l_textoActual || LPAD(' ', 10) || 'PAG.' || LPAD(r_factura(i).num_pagi, 2) || ' DE ' ||  LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Pais y Fecha
                l_textoActual := LPAD(' ', 59) || 'PANAMA';
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_factura(i).fec_fact, 'DD'), 10);
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_factura(i).fec_fact, 'MM'), 5);
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_factura(i).fec_fact, 'YY'), 4);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 14) || RPAD(r_factura(i).cod_clie, 32);
                l_textoActual := l_textoActual || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 26);
                l_textoActual := l_textoActual || r_factura(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 12) || RPAD(l_nombreCompleto, 60) || r_factura(i).cod_peri;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_textoActual := LPAD(' ', 9) || substr(r_factura(i).val_dire_comp, 1, 60);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;

                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(r_detalle(j).num_unid_aten, 9) ||LPAD(' ', 2)  || RPAD(r_detalle(j).des_prod ,40);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 14);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := 'Tot.' || LPAD(l_totalUnidades, 6);
                l_textoActual := l_textoActual || LPAD(' ', 29) || 'Total Productos             :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 38) || 'Descuentos                  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Calculos de montos de impuestos
                l_totalSinDescuentos := l_totalProductos - l_totalDescuentos;
                l_baseImponible := l_totalSinDescuentos / (1 + r_factura(i).val_tasa_impu / 100);
                l_impuesto := l_totalSinDescuentos - l_baseImponible;

                -- Base Imponible
                l_textoActual := LPAD(' ', 36) || 'Base Imponible para ITBMS     :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Impuesto
                l_textoActual := LPAD(' ', 36) || 'ITBMS Tarifa ' || LPAD(r_factura(i).val_tasa_impu || '%', 3) || '              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Transportes
                l_totalTransportes := ABS(r_factura(i).imp_flet_tota_loca);
                l_textoActual := LPAD(' ', 36) || 'Fletes y Serv. (0%  ITBMS)    :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 36) || 'Total Factura                 :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total en texto
                IF l_totalFactura <> 0 THEN
                    l_textoActual := LPAD('SON:', 7) || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura)) || ' y ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD('SON:', 7) || 'CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_factura%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_factura;
END;
/**************************************************************************
Descripcion         : Genera notas de debito matriciales en el formato
                      de Peru Esika.
Fecha Creación      : 19/11/2009
Fecha Modificacion  : 19/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_NODEB_MATRI_PEE(p_codigoPais VARCHAR2) IS

CURSOR c_notas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.COD_PERI_REFE,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 4) VAL_CALL,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 3) VAL_DIST,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 2) VAL_PROV,
       GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 1) VAL_DEPA,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CATA_SIN_IMPU_TOTA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE notarecord IS RECORD (
    cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                    imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl               imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                    imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                    imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                    imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                    imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe               imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli               imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                    imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons          imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte          imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                    imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                    imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                    imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                    imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    val_nume_soli_refe          imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    cod_peri_refe               imp_docum_conta_matri.cod_peri_refe%TYPE,
    cod_tipo_docu               imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                    imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi               imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_call                    varchar2(100),
    val_dist                    varchar2(100),
    val_prov                    varchar2(100),
    val_depa                    varchar2(100),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cata_sin_impu_tota fac_docum_conta_cabec.val_prec_cata_sin_impu_tota%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE
);

TYPE notatype IS TABLE OF notarecord;
r_nota    notatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       MP.COD_SAP,
       PSP.VAL_CODI_VENT,
       SUBSTR(SPC.COD_PERI, -2, 2) || SUBSTR(MP.COD_SAP, 1, 5) || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8') COD_SAP_FORM,
       SUBSTR(SPC.COD_PERI, -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8') VAL_CODI_VENT_FORM,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.IMP_DESC_SIN_IMPU_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       DET.VAL_PREC_SIN_IMPU_UNIT,
       DET.VAL_PREC_SIN_IMPU_TOTA_LOCA,
       DET.IMP_IMPU_TOTA_LOCA
FROM FAC_DOCUM_CONTA_LINEA DET,
     FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_POSIC PSP,
     MAE_PRODU MP,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE CAB.OID_CABE = DET.DCCA_OID_CABE
AND DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND DET.PROD_OID_PROD = MP.OID_PROD
AND CAB.PERD_OID_PERI = CP.OID_PERI
AND CP.PERI_OID_PERI = SPC.OID_PERI
AND DET.NUM_UNID_ATEN > 0
AND CAB.OID_CABE = oidCabecera
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    cod_sap                     mae_produ.cod_sap%TYPE,
    val_codi_vent               ped_solic_posic.val_codi_vent%TYPE,
    cod_sap_form                varchar2(15),
    val_codi_vent_form          varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := ' =================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionGeografica VARCHAR2(100) := ' ';
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

-- Variables para obtener los datos del documento legal de origen
l_fechaReferencia               DATE;
l_serieLegalReferencia          VARCHAR2(10);
l_numeroLegalReferencia         NUMBER(9);
l_codigoInternoReferencia       NUMBER(9);
l_montoReferencia               NUMBER(12, 2);
l_oidTipoDocumentoReferencia    NUMBER(12);
l_tipoDocumentoReferencia       VARCHAR2(3);

l_CLOB                      CLOB;

-- Parametro para actualizar las referencias al documento
-- legal de origen en el registro unico de ventas
l_indicadorDocumentoRefRuv      VARCHAR2(15) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'indicadorActualizarDocRefRuv') ;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_notas;
    LOOP
        FETCH c_notas BULK COLLECT
        INTO r_nota LIMIT w_filas;

        IF  r_nota.COUNT > 0 THEN
            FOR i IN r_nota.FIRST..r_nota.LAST
            LOOP
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_nota(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                -- Nro de Control (Numero de la Solicitud)
                l_textoActual := LPAD(' ', 35) || 'NRO CONTROL ';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                l_textoActual := LPAD(' ', 34) || r_nota(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo de Cliente - Nro de Referencia - Fecha
                l_textoActual := 'CTA:' || RPAD(r_nota(i).cod_clie, 12, ' ') || 'REF:';
                IF r_nota(i).val_nume_soli_refe IS NOT NULL THEN
                    l_textoActual := l_textoActual || RPAD(r_nota(i).val_nume_soli_refe, 11);
                ELSE
                    l_textoActual := l_textoActual || RPAD(' ', 11);
                END IF;

                l_textoActual := l_textoActual || 'FEC:' ||  TO_CHAR(r_nota(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Documento Legal de referencia
                l_serieLegalReferencia := NULL;
                l_numeroLegalReferencia := 0;
                l_codigoInternoReferencia := 0;
                l_fechaReferencia := NULL;
                l_montoReferencia := 0;
                l_oidTipoDocumentoReferencia := 0;
                l_tipoDocumentoReferencia := NULL;

                -- Obtenemos los datos de la factura del documento de origen
                IMP_PR_OBTIE_INFOR_DOCLE_REFER(r_nota(i).oid_docu_cont_cabe,
                                               l_serieLegalReferencia,
                                               l_numeroLegalReferencia,
                                               l_codigoInternoReferencia,
                                               l_fechaReferencia,
                                               l_montoReferencia,
                                               l_oidTipoDocumentoReferencia,
                                               l_tipoDocumentoReferencia);

                -- Si el indicador de actualizacion esta activo, pasamos los datos al RUV
                IF (l_indicadorDocumentoRefRuv = 'S' OR l_indicadorDocumentoRefRuv = '1') AND l_numeroLegalReferencia <> 0 THEN

                    -- Actualizamos los valores de la referencia
                    update fac_regis_unico_venta ruv
                    set ruv.fec_emis_refe = l_fechaReferencia,
                        ruv.tido_tipo_docu_refe = l_oidTipoDocumentoReferencia,
                        ruv.val_seri_docu_refe = l_serieLegalReferencia,
                        ruv.val_nume_docu_refe = l_numeroLegalReferencia
                    where dcca_oid_cabe = r_nota(i).oid_docu_cont_cabe;

                END IF;

                IF l_numeroLegalReferencia <> 0 THEN
                    l_textoActual := 'DOC. LEGAL REF: ';
                    IF l_tipoDocumentoReferencia = COD_TIPO_DOCUM_BOLET THEN
                        l_textoActual := l_textoActual || 'BOLETA  ' || l_serieLegalReferencia || '-' || l_numeroLegalReferencia;
                    ELSE
                        l_textoActual := l_textoActual || 'FACTURA ' || l_serieLegalReferencia || '-' || l_numeroLegalReferencia;
                    END IF;
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_nota(i).val_ape1 || ' ' || r_nota(i).val_ape2 || ', ' || r_nota(i).val_nom1 || ' ' || r_nota(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_nota(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_nota(i).val_dire_comp, 1, 46);
                    IF LENGTH(r_nota(i).val_dire_comp) > 46 THEN
                        l_direccionLinea2 := SUBSTR(r_nota(i).val_dire_comp, 47, 46);
                    END IF;

                    IF LENGTH(r_nota(i).val_dire_comp) > 92 THEN
                        l_direccionLinea3 := SUBSTR(r_nota(i).val_dire_comp, 93, 46);
                    END IF;

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionGeografica := r_nota(i).val_dist || '/' || r_nota(i).val_prov || '/' || r_nota(i).val_depa;
                IF r_nota(i).val_call IS NOT NULL THEN
                    l_ubicacionGeografica := r_nota(i).val_call || '/' || l_ubicacionGeografica;
                END IF;
                l_ubicacionLinea1 := SUBSTR(l_ubicacionGeografica, 1, 46);
                IF LENGTH(l_ubicacionGeografica) > 46 THEN
                    l_ubicacionLinea2 := SUBSTR(l_ubicacionGeografica, 47, 46);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea1), l_ubicacionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo Interno
                l_textoActual := 'Código Interno:' || LPAD(r_nota(i).num_docu_cont_inte, 15, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
--                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
--                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE NOTA DE DEBITO
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;

                OPEN c_detalle(r_nota(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP
                            -- Escribimos la linea de detalle
                            IF r_detalle(j).val_codi_vent IS NOT NULL THEN
                                l_textoActual := RPAD(r_detalle(j).val_codi_vent_form, 11);
                            ELSE
                                l_textoActual := RPAD(r_detalle(j).cod_sap_form, 11);
                            END IF;
                            l_textoActual := l_textoActual || RPAD(r_detalle(j).des_prod ,40);
                            l_textoActual := l_textoActual || LPAD(r_detalle(j).num_unid_aten , 6);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(r_detalle(j).val_prec_sin_impu_unit, '9999999990.00')), 14, ' ');
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(r_detalle(j).val_prec_sin_impu_tota_loca, '9999999990.00')), 10, ' ');

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                IF r_nota(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_nota(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Imprimos tantos cambios de linea como sean necesarios
                l_numeroCambiosLinea := 10 - l_contadorDetalles;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE

                -- Total a pagar en texto
                l_totalAPagar := r_nota(i).val_tota_paga_loca;
                l_textoActual := LPAD('SON:', 15) || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                l_totalVentaCatalogo := r_nota(i).val_prec_cata_sin_impu_tota + r_nota(i).val_prec_cont_sin_impu_tota;
                l_textoActual := LPAD('SUB.TOTAL', 70) || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 11, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Percepcion e Impuestos
                l_percepcion := (l_totalAPagar - r_nota(i).imp_flet_tota_loca) * 0.02;
                l_textoActual := LPAD('PERCEPCION 2%', 48) || LPAD(TRIM(TO_CHAR(l_percepcion, '9999999990.00')), 12, ' ');
                l_textoActual := l_textoActual || LPAD('19%', 10) || LPAD(TRIM(TO_CHAR(r_nota(i).imp_impu_tota_loca, '9999999990.00')), 11, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total a Pagar
                l_totalConPercepcion := l_totalAPagar + l_percepcion;
                l_textoActual := LPAD(' ', 35, ' ') || 'TOTAL A PAGAR S/.' || LPAD(TRIM(TO_CHAR(l_totalConPercepcion, '9999999990.00')), 8, ' ');
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 21, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_notas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_notas;

END;


/**************************************************************************
Descripcion         :  Proceso que obtiene la informacion de las boletas y
                       facturas de premios para luego generar el archivo en
                       el formato del pais.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_FACTU_PREMI_MATRI(p_codigoPais VARCHAR2,
                                         p_codigoPeriodo VARCHAR2,
                                         p_fechaFacturacion VARCHAR2,
                                         p_codigoTipoDocumento VARCHAR2,
                                         p_indicadorEnvioLarissa NUMBER := 0,
                                         p_indicadorEnvioUltimoLote VARCHAR2 := 'N') IS

CURSOR c_facturas(oidPeriodo NUMBER,
                  numeroLoteFacturacion NUMBER) IS
SELECT SP.OID_PAIS,
       SP.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_IMPO_REDO_LOCA VAL_IMPO_REDO_CONS,
       PTI.OID_TASA_IMPU,
       PTI.VAL_INDI_IMPU,
       PTI.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       CAB.NUM_DOCU_LEGA,
       REG.OID_REGI,
       REG.COD_REGI,
       ZON.OID_ZONA,
       ZON.COD_ZONA,
       SEC.OID_SECC,
       SEC.COD_SECC,
       TER.OID_TERR,
       TER.COD_TERR,
       FTD.OID_TIPO_DOCU,
       FTD.COD_TIPO_DOCU,
       CTP.OID_TIPO_PROG,
       CTP.COD_TIPO_PROG
FROM FAC_DOCUM_CONTA_CABEC CAB,
     FAC_TIPO_DOCUM FTD,
     MAE_CLIEN MC,
     PED_SOLIC_CABEC CON,
     PED_TASA_IMPUE PTI,
     ZON_REGIO REG,
     ZON_ZONA ZON,
     ZON_SECCI SEC,
     ZON_TERRI TER,
     SEG_PAIS SP,
     INC_CONCU_TIPO_PROG CTP
WHERE SP.OID_PAIS = MC.PAIS_OID_PAIS
AND MC.OID_CLIE = CON.CLIE_OID_CLIE
AND CON.OID_SOLI_CABE = CAB.SOCA_OID_SOLI_CABE
AND CON.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
AND CAB.TIDO_OID_TIPO_DOCU = FTD.OID_TIPO_DOCU
AND CAB.ZORG_OID_REGI = REG.OID_REGI
AND CAB.ZZON_OID_ZONA = ZON.OID_ZONA
AND CAB.ZSCC_OID_SECC = SEC.OID_SECC
AND CAB.TERR_OID_TERR = TER.OID_TERR
AND CAB.ICTP_OID_TIPO_PROG = CTP.OID_TIPO_PROG(+)
AND CAB.PERD_OID_PERI = oidPeriodo
AND SP.COD_PAIS = p_codigoPais
AND CAB.FEC_FACT = TO_DATE(p_fechaFacturacion, 'DD/MM/YYYY')
AND CON.IND_INTE_LARI_GENE = p_indicadorEnvioLarissa
AND (numeroLoteFacturacion IS NULL OR CON.NUM_LOTE_FACT = numeroLoteFacturacion)
AND FTD.COD_TIPO_DOCU = p_codigoTipoDocumento
AND EXISTS (
    SELECT NULL
    FROM FAC_DOCUM_CONTA_LINEA DET
    WHERE DET.NUM_UNID_ATEN > 0
    AND DET.DCCA_OID_CABE = CAB.OID_CABE
)
ORDER BY TO_NUMBER(CAB.VAL_EJER_DOCU_INTE),
         CAB.NUM_DOCU_CONT_INTE;


TYPE facturarecord IS RECORD (
    oid_pais            seg_pais.oid_pais%TYPE,
    cod_pais            seg_pais.cod_pais%TYPE,
    oid_clie            mae_clien.oid_clie%TYPE,
    cod_clie            mae_clien.cod_clie%TYPE,
    cod_digi_ctrl       mae_clien.cod_digi_ctrl%TYPE,
    val_nom1            mae_clien.val_nom1%TYPE,
    val_nom2            mae_clien.val_nom2%TYPE,
    val_ape1            mae_clien.val_ape1%TYPE,
    val_ape2            mae_clien.val_ape2%TYPE,
    oid_soli_cabe       ped_solic_cabec.oid_soli_cabe%TYPE,
    val_nume_soli       ped_solic_cabec.val_nume_soli%TYPE,
    fec_fact            ped_solic_cabec.fec_fact%TYPE,
    val_impo_redo_cons  ped_solic_cabec.val_impo_redo_loca%TYPE,
    oid_tasa_impu       ped_tasa_impue.oid_tasa_impu%TYPE,
    val_indi_impu       ped_tasa_impue.val_indi_impu%TYPE,
    val_tasa_impu       ped_tasa_impue.val_tasa_impu%TYPE,
    oid_cabe            fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte  fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    num_docu_lega       fac_docum_conta_cabec.num_docu_lega%TYPE,
    oid_regi            zon_regio.oid_regi%TYPE,
    cod_regi            zon_regio.cod_regi%TYPE,
    oid_zona            zon_zona.oid_zona%TYPE,
    cod_zona            zon_zona.cod_zona%TYPE,
    oid_secc            zon_secci.oid_secc%TYPE,
    cod_secc            zon_secci.cod_secc%TYPE,
    oid_terr            zon_terri.oid_terr%TYPE,
    cod_terr            zon_terri.cod_terr%TYPE,
    oid_tipo_docu       fac_tipo_docum.oid_tipo_docu%TYPE,
    cod_tipo_docu       fac_tipo_docum.cod_tipo_docu%TYPE,
    oid_tipo_prog       inc_concu_tipo_prog.oid_tipo_prog%TYPE,
    cod_tipo_prog       inc_concu_tipo_prog.cod_tipo_prog%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

-- Cursor para determinar el numero de paginas
CURSOR c_paginas IS
SELECT COR_DOCU_CONT_MATR,
       NUM_PAGI,
       NUM_TOTA_PAGI
FROM (
SELECT X.COR_DOCU_CONT_MATR,
       X.VAL_NUME_SOLI,
       ROW_NUMBER() OVER (PARTITION BY X.VAL_NUME_SOLI ORDER BY X.NUM_DOCU_CONT_INTE) NUM_PAGI,
       (SELECT COUNT(*) FROM IMP_DOCUM_CONTA_MATRI Y WHERE Y.VAL_NUME_SOLI = X.VAL_NUME_SOLI) NUM_TOTA_PAGI
FROM IMP_DOCUM_CONTA_MATRI X
ORDER BY X.COR_DOCU_CONT_MATR
)
WHERE NUM_TOTA_PAGI > 1;

TYPE t_cor_docu_cont_matr   IS TABLE OF  imp_docum_conta_matri.cor_docu_cont_matr%TYPE;
TYPE t_num_pagi             IS TABLE OF  imp_docum_conta_matri.num_pagi%TYPE;
TYPE t_num_tota_pagi        IS TABLE OF  imp_docum_conta_matri.num_tota_pagi%TYPE;

r_cor_docu_cont_matr    t_cor_docu_cont_matr;
r_num_pagi              t_num_pagi;
r_num_tota_pagi         t_num_tota_pagi;

-- Variables locales
l_oidPais               NUMBER;
l_oidPeriodo            NUMBER;
l_oidCanal              NUMBER;
l_oidMarca              NUMBER;
l_correlativo           NUMBER := 1;
l_numeroLoteFacturacion NUMBER;

BEGIN

    -- Obtenemos el OID del periodo
    l_oidPais    := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_codigoPais);
    l_oidCanal   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CANAL(CODIGO_CANAL);
    l_oidMarca   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(CODIGO_MARCA);
    l_oidPeriodo := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CRA_PERIO(p_codigoPeriodo, l_oidMarca, l_oidCanal);

    -- Obtenemos el valor del ultimo numero de lote de facturacion
    IF (p_indicadorEnvioUltimoLote = '1' OR p_indicadorEnvioUltimoLote = 'S') THEN
        BEGIN
          SELECT MAX(con.num_lote_fact)
          INTO l_numeroLoteFacturacion
          FROM ped_solic_cabec con,
               int_lar_tipo_solici_pedido_dis tspd
         WHERE con.perd_oid_peri = l_oidPeriodo
           AND con.fec_fact = to_date(p_fechaFacturacion, 'dd/mm/yyyy')
           AND con.ind_inte_lari_gene = p_indicadorEnvioLarissa
           AND con.ind_ts_no_conso = 0
           AND (con.ind_pedi_prue = 0 OR con.ind_pedi_prue IS NULL)
           AND con.tspa_oid_tipo_soli_pais = tspd.tspa_oid_tipo_soli_pais
           AND con.pais_oid_pais = l_oidPais;
        EXCEPTION
        WHEN OTHERS THEN
            l_numeroLoteFacturacion := NULL;
        END;
    END IF;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE IMP_DOCUM_CONTA_MATRI';

    -- Abrimos el cursor principal
    OPEN c_facturas(l_oidPeriodo, l_numeroLoteFacturacion);
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                INSERT INTO IMP_DOCUM_CONTA_MATRI(
                cor_docu_cont_matr,
                oid_pais,
                cod_pais,
                oid_clie,
                cod_clie,
                cod_digi_ctrl,
                val_nom1,
                val_nom2,
                val_ape1,
                val_ape2,
                oid_soli_cabe,
                val_nume_soli,
                fec_fact,
                val_impo_redo_cons,
                oid_tasa_impu,
                val_indi_impu,
                val_tasa_impu,
                oid_docu_cont_cabe,
                num_docu_cont_inte,
                num_docu_lega,
                oid_regi,
                cod_regi,
                oid_zona,
                cod_zona,
                oid_secc,
                cod_secc,
                oid_terr,
                cod_terr,
                oid_peri,
                cod_peri,
                oid_tipo_docu,
                cod_tipo_docu,
                oid_tipo_prog,
                cod_tipo_prog,
                val_buff
                )
                VALUES(
                l_correlativo,
                r_factura(i).oid_pais,
                r_factura(i).cod_pais,
                r_factura(i).oid_clie,
                r_factura(i).cod_clie,
                r_factura(i).cod_digi_ctrl,
                r_factura(i).val_nom1,
                r_factura(i).val_nom2,
                r_factura(i).val_ape1,
                r_factura(i).val_ape2,
                r_factura(i).oid_soli_cabe,
                r_factura(i).val_nume_soli,
                r_factura(i).fec_fact,
                r_factura(i).val_impo_redo_cons,
                r_factura(i).oid_tasa_impu,
                r_factura(i).val_indi_impu,
                r_factura(i).val_tasa_impu,
                r_factura(i).oid_cabe,
                r_factura(i).num_docu_cont_inte,
                r_factura(i).num_docu_lega,
                r_factura(i).oid_regi,
                r_factura(i).cod_regi,
                r_factura(i).oid_zona,
                r_factura(i).cod_zona,
                r_factura(i).oid_secc,
                r_factura(i).cod_secc,
                r_factura(i).oid_terr,
                r_factura(i).cod_terr,
                l_oidPeriodo,
                p_codigoPeriodo,
                r_factura(i).oid_tipo_docu,
                r_factura(i).cod_tipo_docu,
                r_factura(i).oid_tipo_prog,
                r_factura(i).cod_tipo_prog,
                EMPTY_CLOB
                );

                l_correlativo := l_correlativo + 1;

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

    -- Abrimos el cursor de actualizacion de numeros de pagina
    OPEN c_paginas;
    LOOP
        FETCH c_paginas BULK COLLECT
        INTO r_cor_docu_cont_matr,
             r_num_pagi,
             r_num_tota_pagi LIMIT w_filas;

        FORALL j IN 1..r_cor_docu_cont_matr.COUNT
        UPDATE imp_docum_conta_matri
        SET num_pagi = r_num_pagi(j),
            num_tota_pagi = r_num_tota_pagi(j)
        WHERE cor_docu_cont_matr = r_cor_docu_cont_matr(j);

        EXIT WHEN c_paginas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_paginas;

END;

/**************************************************************************
Descripcion         : Proceso que genera el archivo de boletas y facturas
                      de premios.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_MATRI(p_codigoPais VARCHAR2,
                                         p_codigoPeriodo VARCHAR2,
                                         p_fechaFacturacion VARCHAR2,
                                         p_nombreArchivo VARCHAR2,
                                         p_directorio VARCHAR2) IS

lstemp VARCHAR2(10):=IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'indicadorFactuPremi2');

lstemp2 VARCHAR2(10):=IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'indicadorFactuPremi3');

BEGIN

    -- Procesamos la informacion generando las facturas de premio en el formato correspondiente
    -- TODO -- Solo se ha implementado para Ecuador, Peru y Panama, falta el resto!!!!!
    IF p_codigoPais = 'PAL' THEN
        IMP_PR_GENER_FACTU_PREMI_PAL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL') THEN
        IF nvl(lstemp,'N')='S' then
                IMP_PR_GENER_FACTU_PREMI_PEE_2(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        else
                IF nvl(lstemp2,'N')='S' then
                   IMP_PR_GENER_FACTU_PREMI_PEE_3(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
                else
        IMP_PR_GENER_FACTU_PREMI_PEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
        end if;
        end if;
    ELSIF (p_codigoPais = 'ECE' OR p_codigoPais = 'ECL') THEN
        IMP_PR_GENER_FACTU_PREMI_ECE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF (p_codigoPais = 'SVE' OR p_codigoPais = 'SVL') THEN
        IMP_PR_GENER_FACTU_PREMI_SVE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSIF (p_codigoPais = 'MXL') THEN
        IMP_PR_GENER_NOCRE_MATRI_MXL2(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSE
        IMP_PR_GENER_FACTU_PREMI_PAL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    END IF;

    -- Generamos el archivo matricial
    IMP_PR_GENER_ARCHI_FACTU(p_codigoPais, p_nombreArchivo, p_directorio);

END;

/**************************************************************************
Descripcion         : Proceso que genera el archivo de boletas y facturas
                      de premios.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_MAT_Z(p_oidzona NUMBER) IS

CURSOR c_cons(p_oidperi NUMBER, p_fecfact VARCHAR2, numeroLoteFacturacion NUMBER, indicadorEnvioLarissa NUMBER) IS
select a.oid_soli_cabe
from ped_solic_cabec a
where a.perd_oid_peri=p_oidperi
and a.fec_fact=p_fecfact
and a.num_unid_aten_tota>0
and a.ind_ts_no_conso=0
AND a.IND_INTE_LARI_GENE = indicadorEnvioLarissa
AND (numeroLoteFacturacion IS NULL OR a.NUM_LOTE_FACT = numeroLoteFacturacion)
and a.tspa_oid_tipo_soli_pais in
(
select x.oid_tipo_soli_pais from ped_tipo_solic_pais x, ped_tipo_solic y
where x.tsol_oid_tipo_soli=y.oid_tipo_soli
and y.ind_cons=1 and y.ind_soli_nega=0
)
;

r_cons c_cons%ROWTYPE;



    ln_valtasa        NUMBER(2);
    ln_oidtasa        NUMBER(10);
    ln_valtasaflet    NUMBER(2);
    --ln_oidtasaflet    NUMBER(10);
    --w_filas        NUMBER(12);


    ln_oidperi    NUMBER(10);
    lv_fecfact   varchar2(20);

    lv_codpais   varchar2(20);
    lv_codperi   varchar2(20);
    --w_filas        NUMBER(12);

    l_indicadorEnvioLarissa         VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'indicadorEnvioLarissa');
    l_indicadorEnvioUltimoLote      VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'indicadorEnvioUltimoLote');
    l_numeroLoteFacturacion         NUMBER;
begin

    SELECT x.oid_peri   into ln_oidperi
                                   FROM cra_perio       x,
                                        seg_perio_corpo y,
                                        bas_ctrl_fact   z
                                  WHERE x.peri_oid_peri = y.oid_peri
                                    AND y.cod_peri = z.cod_peri
                                    AND z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.fec_proc   into lv_fecfact
                                   FROM bas_ctrl_fact   z
                                  WHERE z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.cod_pais   into lv_codpais
                                   FROM cra_perio       x,
                                        seg_perio_corpo y,
                                        bas_ctrl_fact   z
                                  WHERE x.peri_oid_peri = y.oid_peri
                                    AND y.cod_peri = z.cod_peri
                                    AND z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.cod_peri   into lv_codperi
                                   FROM bas_ctrl_fact   z
                                  WHERE z.ind_camp_act = 1
                                    AND z.sta_camp = 0;


    IF (l_indicadorEnvioUltimoLote = '1' OR l_indicadorEnvioUltimoLote = 'S') THEN
BEGIN
          SELECT MAX(con.num_lote_fact)
          INTO l_numeroLoteFacturacion
          FROM ped_solic_cabec con,
               int_lar_tipo_solici_pedido_dis tspd
         WHERE con.perd_oid_peri = ln_oidperi
           AND con.fec_fact = to_date(lv_fecfact, 'dd/mm/yyyy')
           AND con.ind_inte_lari_gene = l_indicadorEnvioLarissa
           AND con.ind_ts_no_conso = 0
           AND (con.ind_pedi_prue = 0 OR con.ind_pedi_prue IS NULL)
           AND con.tspa_oid_tipo_soli_pais = tspd.tspa_oid_tipo_soli_pais;
           --AND con.pais_oid_pais = l_oidPais;
        EXCEPTION
        WHEN OTHERS THEN
            l_numeroLoteFacturacion := NULL;
        END;
    END IF;



    OPEN c_cons(ln_oidperi,lv_fecfact,l_numeroLoteFacturacion,l_indicadorEnvioLarissa);
    LOOP
    FETCH c_cons INTO r_cons;
    EXIT WHEN c_cons%NOTFOUND;



    -- Procesamos la informacion generando las facturas de premio en el formato correspondiente
    -- TODO -- Solo se ha implementado para Ecuador, Peru y Panama, falta el resto!!!!!
            --IF p_codigoPais = 'PAL' THEN
            --    IMP_PR_GENER_FACTU_PREMI_PAL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
            IF lv_codpais = 'PE' THEN
                  IMP_PR_GENER_FACTU_PREMI_PEE_F(r_cons.oid_soli_cabe, lv_codperi, lv_codpais);
            --ELSIF (p_codigoPais = 'ECE' OR p_codigoPais = 'ECL') THEN
            --    IMP_PR_GENER_FACTU_PREMI_ECE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
            --ELSE
            --    IMP_PR_GENER_FACTU_PREMI_PAL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    END IF;

    -- Generamos el archivo matricial
            --IMP_PR_GENER_ARCHI_FACTU(p_codigoPais, p_nombreArchivo, p_directorio);


    END LOOP;
    CLOSE c_cons;
END;


/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Ecuador Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_ECE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS
CURSOR c_factura IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.OID_SOLI_CABE_REFE,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.COD_PERI_REFE,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_IMPO_IVA_ASUM_EMPR
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    oid_soli_cabe_refe      imp_docum_conta_matri.oid_soli_cabe_refe%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi           imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    val_impo_iva_asum_empr  fac_docum_conta_cabec.val_impo_iva_asum_empr%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       MP.COD_SAP,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC,
       NVL(DET.IMP_IMPU_TOTA_PROD_NACI, 0) IMP_IMPU_TOTA_PROD_NACI
FROM FAC_DOCUM_CONTA_LINEA DET,
     MAE_PRODU MP
WHERE DET.PROD_OID_PROD = MP.OID_PROD
AND DET.NUM_UNID_ATEN <> 0
AND DET.DCCA_OID_CABE = oidCabecera
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    cod_sap                 mae_produ.cod_sap%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE,
    imp_impu_tota_prod_naci fac_docum_conta_linea.imp_impu_tota_prod_naci%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 31;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalSinDescuentos        NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;
l_totalICE                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);

ls_indicadorImpuesto        VARCHAR2(3);
l_tasaImpuesto              NUMBER(5,3);
l_textoFlete                VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'textoFlete');

l_CLOB                      CLOB;

BEGIN

    -- Actualizamos los valores del impuesto
    SELECT PTI.VAL_INDI_IMPU,
           PTI.VAL_TASA_IMPU
    INTO  ls_indicadorImpuesto, l_tasaImpuesto
    FROM   PED_IMPUE_GENER PIG,
           PED_TASA_IMPUE PTI,
           SEG_SUBAC SSA
    WHERE PIG.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
      AND PIG.SBAC_OID_SBAC = SSA.OID_SBAC
      AND SSA.COD_SBAC = '000';

    UPDATE IMP_DOCUM_CONTA_MATRI DCM
    SET DCM.VAL_INDI_IMPU = ls_indicadorImpuesto,
        DCM.VAL_TASA_IMPU = l_tasaImpuesto;

    -- Abrimos el cursor principal
    OPEN c_factura;
    LOOP
        FETCH c_factura BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del nota
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nro de Pagina
                l_textoActual := LPAD(' ', 62) || 'PAG.' || LPAD(r_factura(i).num_pagi, 2) || ' DE ' || LPAD(r_factura(i).num_tota_pagi, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Fecha
                l_textoActual := LPAD(' ', 59) || RPAD('QUITO', 14);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'DD'), 5);
                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'MM'), 4);
                l_textoActual := l_textoActual || TO_CHAR(r_factura(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nro de Pedido y Codigo Interno
                l_textoActual := 'N.PEDIDO: ' || r_factura(i).val_nume_soli || ' CODIGO INTERNO:' || LPAD(r_factura(i).num_docu_cont_inte, 14);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 16) || RPAD(r_factura(i).cod_clie, 30);
                l_textoActual := l_textoActual || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 26);
                l_textoActual := l_textoActual || r_factura(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 12) || RPAD(l_nombreCompleto,60) || r_factura(i).cod_peri;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_textoActual := LPAD(' ', 9) || substr(r_factura(i).val_dire_comp, 1, 60);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                l_totalICE := 0;

                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(r_detalle(j).num_unid_aten, 9) || RPAD(' ', 2);
                            l_textoActual := l_textoActual || RPAD(r_detalle(j).cod_sap || ' ' || r_detalle(j).des_prod, 45);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_unit_loca * r_detalle(j).num_unid_aten;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_unit_loca * r_detalle(j).num_unid_aten;
                                l_totalICE := l_totalICE + r_detalle(j).imp_impu_tota_prod_naci;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_unit_loca * r_detalle(j).num_unid_aten;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_unit_loca * r_detalle(j).num_unid_aten;
                                l_totalICE := l_totalICE + r_detalle(j).imp_impu_tota_prod_naci;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 9);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := 'Tot.' || LPAD(l_totalUnidades, 6);
                l_textoActual := l_textoActual || LPAD(' ', 29) || 'Total Productos             :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 38) || 'Descuentos                  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Calculos de montos de impuestos
                l_totalSinDescuentos := l_totalProductos - l_totalDescuentos;
                l_baseImponible := l_totalSinDescuentos / (1 + r_factura(i).val_tasa_impu / 100);
                l_impuesto := l_totalSinDescuentos - l_baseImponible;

                -- ICE
                l_textoActual := LPAD(' ', 38) || 'ICE                         :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalICE, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Base Imponible
                l_textoActual := LPAD(' ', 38) || 'Base Imponible para IVA     :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Impuesto
                l_textoActual := LPAD(' ', 38) || 'IVA Tarifa ' || LPAD(r_factura(i).val_tasa_impu || '%', 3) || '              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Transportes
                l_totalTransportes := ABS(r_factura(i).imp_flet_tota_loca);
                l_textoActual := LPAD(' ', 38) || nvl(l_textoFlete,'Fletes y Serv. (0%  IVA)    :');
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 38) || 'Total Factura               :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total en texto
                IF l_totalFactura <> 0 THEN
                    l_textoActual := LPAD('SON:', 7) || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura)) || ' y ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD('SON:', 7) || 'CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_factura%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_factura;
END;

/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Ecuador Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_SVE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS
CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       NVL(
           (SELECT TRIM(MCI.NUM_DOCU_IDEN)
            FROM MAE_CLIEN_IDENT MCI,
                 MAE_TIPO_DOCUM MTD
            WHERE MCI.TDOC_OID_TIPO_DOCU = MTD.OID_TIPO_DOCU
              AND MTD.COD_TIPO_DOCU = '02' -- NIT
              AND MCI.CLIE_OID_CLIE = DOC.OID_CLIE
              AND ROWNUM = 1),
           'C/F'
       ) VAL_NUME_IDEN_FISC,
       TRIM(CAB.VAL_DIRE_COMP) VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       (
select
--d.num_recl,
case when f.cod_oper like 'D%' then 'Devolución'
when f.cod_oper like 'A%' then 'Anulación'
when f.cod_oper like 'F%' then 'Reclamo'
else  'Cambio'
end || ' :' || d.num_recl Despacho
from ped_solic_cabec a, rec_solic_opera b, rec_opera_recla c, rec_cabec_recla d, rec_tipos_opera e, rec_opera f
where a.soca_oid_soli_cabe=doc.oid_soli_cabe and a.oid_soli_cabe=b.soca_oid_soli_cabe and b.opre_oid_oper_recl=C.oid_oper_recl
and c.care_oid_cabe_recl=d.oid_cabe_recl and c.TIOP_OID_TIPO_OPER=e.OID_TIPO_OPER and e.rope_oid_oper=f.oid_oper
--and f.cod_oper<>'DN'
and rownum=1
) despacho
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
and not exists (select 1 from ped_solic_cabec x, int_lar_tipo_solici_pedido_dis y
where x.tspa_oid_tipo_soli_pais=y.tspa_oid_tipo_soli_pais and x.oid_soli_cabe=cab.soca_oid_soli_cabe)
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    despacho                fac_docum_conta_cabec.val_obse%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       NVL(PSP.VAL_CODI_VENT, LPAD('0', 4 - LENGTH(PSP.VAL_CODI_VENT_FICT), '0') || PSP.VAL_CODI_VENT_FICT) VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC
FROM FAC_DOCUM_CONTA_LINEA DET,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND DET.NUM_UNID_ATEN > 0
AND DET.DCCA_OID_CABE = oidCabecera
AND NOT EXISTS (
    SELECT NULL
    FROM FAC_TIPO_OFERT_EXCLU TOE
    WHERE TOE.TOFE_OID_TIPO_OFER = POD.TOFE_OID_TIPO_OFER
);

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent           ped_solic_posic.val_codi_vent%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(2) := CHR(10) || CHR(32);
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '                                                                      -----             ----------';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

l_CLOB                      CLOB;

l_docinte            NUMBER;

BEGIN

    --select VAL_ULTI_NUME_DOCU_INTE
    --into l_docinte
    --from fac_docum_subac a where a.tido_oid_tipo_docu=1;



    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP


                --l_docinte:=l_docinte+1;
                --r_factura(i).NUM_DOCU_CONT_INTE:=l_docinte;

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 68) || 'COD. INT.: ' || r_factura(i).num_docu_cont_inte;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                l_textoActual := LPAD(' ', 57) || RPAD('EL SALVADOR', 16) || TO_CHAR(r_factura(i).fec_fact, 'DD') || LPAD(' ', 7) || TO_CHAR(r_factura(i).fec_fact, 'MM') || LPAD(' ', 7) || TO_CHAR(r_factura(i).fec_fact, 'YY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Fecha - Nro Documento - Cliente
--                l_textoActual := LPAD(' ', 13) || RPAD('CIUD.GUATEMALA,', 19);
--                l_textoActual := l_textoActual || RPAD(TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YY'), 25);
                -- Nombre del cliente - Zona Territorio
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 11) || RPAD(l_nombreCompleto, 55);
                l_textoActual := l_textoActual || r_factura(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                -- Direccion - Cliente
                l_textoActual := LPAD(' ', 12) || RPAD(substr(r_factura(i).val_dire_comp,1,46), 65);
                l_textoActual := l_textoActual || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Direccion - despacho
                l_textoActual := LPAD(' ', 12) || RPAD(substr(r_factura(i).val_dire_comp,47), 65);
                l_textoActual := l_textoActual || 'Despacho: ' || r_factura(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Territorio - Periodo
                l_textoActual := LPAD(' ', 13) || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_secc || '-' || r_factura(i).cod_terr,30);
                l_textoActual := l_textoActual || SUBSTR(r_factura(i).cod_peri, 3, 2) || '-' || SUBSTR(r_factura(i).cod_peri, 5, 2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;
                OPEN c_detalle(r_factura(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN
                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := LPAD(' ', 8)|| RPAD(r_detalle(j).num_unid_aten ,8) || RPAD(r_detalle(j).des_prod ,34);
                            --l_textoActual := l_textoActual ||  LPAD(r_detalle(j).num_unid_aten, 10);

                            IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cont_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_tota_loca;
                            ELSE
                                l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                l_precioTotal := r_detalle(j).val_prec_cata_tota_loca;
                                l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_tota_loca;
                            END IF;

                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 13) || LPAD(' ', 20);
                            l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 10);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                            l_contadorDetalles := l_contadorDetalles + 1;
                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- Incluimos el redondeo en el descuento de la primera factura de la consultora
                IF l_oidClienteAnterior != r_factura(i).oid_clie OR l_numSolicitudAnterior != r_factura(i).val_nume_soli THEN
                    l_oidClienteAnterior := r_factura(i).oid_clie;
                    l_numSolicitudAnterior := r_factura(i).val_nume_soli;
                    -- Solo consideramos el descuento si no se trata de una boleta / factura de premios
                    IF r_factura(i).cod_tipo_docu != '003' AND r_factura(i).cod_tipo_docu != '012' THEN
                        l_totalDescuentos := l_totalDescuentos - r_factura(i).val_impo_redo_cons;
                    END IF;
                END IF;

                l_textoActual := '   ----------                                                                       ----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
--                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := LPAD('Total', 6) || LPAD(l_totalUnidades, 5);
                l_textoActual := l_textoActual  || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 82);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Orden
                l_textoActual := LPAD(' ', 47) || 'Total Orden              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 47) || '(-)Descuentos            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Transportes
                l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                l_textoActual := LPAD(' ', 47) || '(+) Fletes y Serv.       :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 85) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Subtotal                 :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Ventas Exentas
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Ventas Exentas           :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Ventas No Sujetas
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Ventas No Sujetas        :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(0, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);

                -- Separador
                l_textoActual := LPAD(' ', 85) || '----------';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 47) || 'Total Factura            :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 20);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);


                -- Total en texto
                l_textoActual := LPAD('SON: ', 15) || UPPER(GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura))) || ' ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100 DOLARES';
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);



                   --update fac_docum_conta_cabec set num_docu_cont_inte=l_docinte where oid_cabe=r_factura(i).OID_DOCU_CONT_CABE;
                   --update fac_regis_unico_venta set num_docu_cont_inte=l_docinte where dcca_oid_cabe=r_factura(i).OID_DOCU_CONT_CABE;


            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;

       --update fac_docum_subac a set a.val_ulti_nume_docu_inte=l_docinte where tido_oid_tipo_docu=1;


    -- Cerramos el cursor
    CLOSE c_facturas;

    delete from IMP_DOCUM_CONTA_MATRI where length(val_buff)=0;
END;
/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Panama LBEL.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_PAL(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

CURSOR c_factura IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.OID_SOLI_CABE_REFE,
       DOC.VAL_NUME_SOLI_REFE,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.COD_PERI_REFE,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_PREC_CATA_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.VAL_PREC_FACT_TOTA_LOCA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_IMPO_IVA_ASUM_EMPR
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr      imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl           imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe           imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli           imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                imp_docum_conta_matri.fec_fact%TYPE,
    oid_soli_cabe_refe      imp_docum_conta_matri.oid_soli_cabe_refe%TYPE,
    val_nume_soli_refe      imp_docum_conta_matri.val_nume_soli_refe%TYPE,
    val_impo_redo_cons      imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu           imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu           imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe      imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte      imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                imp_docum_conta_matri.cod_peri%TYPE,
    cod_peri_refe           imp_docum_conta_matri.cod_peri_refe%TYPE,
    fec_venc                imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu           imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi           imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_nume_iden_fisc      fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp           fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_cabec.val_prec_cata_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_cabec.val_prec_fact_tota_loca%TYPE,
    imp_flet_tota_loca      fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_redo_loca           fac_docum_conta_cabec.imp_redo_loca%TYPE,
    val_impo_iva_asum_empr  fac_docum_conta_cabec.val_impo_iva_asum_empr%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.NUM_LINEA,
       ABS(DET.NUM_UNID_ATEN) NUM_UNID_ATEN,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       ABS(DET.VAL_PREC_CATA_TOTA_LOCA) VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       ABS(DET.VAL_PREC_CONT_TOTA_LOCA) VAL_PREC_CONT_TOTA_LOCA,
       ABS(DET.IMP_DESC_TOTA_LOCA) IMP_DESC_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       ABS(DET.VAL_PREC_FACT_TOTA_LOCA) VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       ABS(DET.VAL_PREC_NETO_TOTA_LOCA) VAL_PREC_NETO_TOTA_LOCA,
       NVL(DET.VAL_PORC_DESC, 0) VAL_PORC_DESC,
       NVL(DET.IMP_IMPU_TOTA_PROD_NACI, 0) IMP_IMPU_TOTA_PROD_NACI
FROM FAC_DOCUM_CONTA_LINEA DET
WHERE DET.NUM_UNID_ATEN <> 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND DET.DCCA_OID_CABE = oidCabecera
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    num_linea               fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten           fac_docum_conta_linea.num_unid_aten%TYPE,
    des_prod                gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca      fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    val_prec_fact_unit_loca fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_porc_desc           fac_docum_conta_linea.val_porc_desc%TYPE,
    imp_impu_tota_prod_naci fac_docum_conta_linea.imp_impu_tota_prod_naci%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 31;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numLineasPieDetalle       NUMBER := 5;

l_precioUnitario            NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalProductos            NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalSinDescuentos        NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalConImpuesto          NUMBER(12, 2) := 0;

l_oidClienteAnterior        NUMBER(12) := 0;
l_numSolicitudAnterior      NUMBER(12) := 0;

-- Variables para obtener los datos de reclamo
l_numeroReclamo             NUMBER := 0;
l_descripcionOperacion      VARCHAR2(100);

-- Variables para obtener los datos del documento legal de origen
l_fechaFactura              DATE;
l_numeroLegalFactura        NUMBER(9);
l_codigoInternoFactura      NUMBER(9);
l_montoFactura              NUMBER(12, 2);

ls_indicadorImpuesto        VARCHAR2(3);
l_tasaImpuesto              NUMBER(5,3);

l_CLOB                      CLOB;

BEGIN

    -- Actualizamos los valores del impuesto
    SELECT PTI.VAL_INDI_IMPU,
           PTI.VAL_TASA_IMPU
    INTO  ls_indicadorImpuesto, l_tasaImpuesto
    FROM   PED_IMPUE_GENER PIG,
           PED_TASA_IMPUE PTI,
           SEG_SUBAC SSA
    WHERE PIG.TAIM_OID_TASA_IMPU = PTI.OID_TASA_IMPU
      AND PIG.SBAC_OID_SBAC = SSA.OID_SBAC
      AND SSA.COD_SBAC = '000';

    UPDATE IMP_DOCUM_CONTA_MATRI DCM
    SET DCM.VAL_INDI_IMPU = ls_indicadorImpuesto,
        DCM.VAL_TASA_IMPU = l_tasaImpuesto;

    -- Abrimos el cursor principal
    OPEN c_factura;
    LOOP
        FETCH c_factura BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto de la factura
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nro de Pedido, Codigo Interno y Nro de Pagina
                l_textoActual := LPAD(' ', 9) || 'N.PED.: ' || r_factura(i).val_nume_soli ||  ' COD. INT.:' || LPAD(r_factura(i).num_docu_cont_inte, 14);
                l_textoActual := l_textoActual || LPAD(' ', 10) || 'PAG.' || LPAD(r_factura(i).num_pagi, 2) || ' DE ' ||  LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Pais y Fecha
                l_textoActual := LPAD(' ', 59) || 'PANAMA';
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_factura(i).fec_fact, 'DD'), 10);
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_factura(i).fec_fact, 'MM'), 5);
                l_textoActual := l_textoActual || LPAD(TO_CHAR(r_factura(i).fec_fact, 'YY'), 4);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo del cliente - Zona Territorio - Numero Documento
                l_textoActual := LPAD(' ', 14) || RPAD(r_factura(i).cod_clie, 32);
                l_textoActual := l_textoActual || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 26);
                l_textoActual := l_textoActual || r_factura(i).val_nume_iden_fisc;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre del Cliente - Periodo
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := LPAD(' ', 12) || RPAD(l_nombreCompleto, 60) || r_factura(i).cod_peri;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_textoActual := LPAD(' ', 9) || substr(r_factura(i).val_dire_comp, 1, 60);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalProductos := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_factura(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN

                            -- Se imprime el separador a partir del segundo grupo de detalles
                            IF k > 0 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP

                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten, 9) ||LPAD(' ', 2)  || RPAD(r_detalle(j).des_prod ,40);

                                IF r_detalle(j).val_prec_cata_unit_loca = 0 THEN
                                    l_precioUnitario := r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_cont_unit_loca * r_detalle(j).num_unid_aten;
                                    l_totalDescuentos := l_totalDescuentos + r_detalle(j).val_prec_cont_unit_loca * r_detalle(j).num_unid_aten;
                                    l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cont_unit_loca * r_detalle(j).num_unid_aten;
                                ELSE
                                    l_precioUnitario := r_detalle(j).val_prec_cata_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_cata_unit_loca * r_detalle(j).num_unid_aten;
                                    l_totalDescuentos := l_totalDescuentos + r_detalle(j).imp_desc_tota_loca;
                                    l_totalProductos := l_totalProductos + r_detalle(j).val_prec_cata_unit_loca * r_detalle(j).num_unid_aten;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 14);
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 14);

                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                            END LOOP;
                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;

                IF l_contadorSeparadores = 0 THEN
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                    l_contadorSeparadores := l_contadorSeparadores + 1;
                END IF;

                -- PIE DEL DETALLE
                -- Total Unidades - Total Productos
                l_textoActual := 'Tot.' || LPAD(l_totalUnidades, 5);
                l_textoActual := l_textoActual || LPAD(' ', 29) || 'Total Productos             :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalProductos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Descuentos
                l_textoActual := LPAD(' ', 38) || 'Descuentos                  :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Calculos de montos de impuestos
                l_totalSinDescuentos := l_totalProductos - l_totalDescuentos;
                l_baseImponible := l_totalSinDescuentos / (1 + r_factura(i).val_tasa_impu / 100);
                l_impuesto := l_totalSinDescuentos - l_baseImponible;

                -- Base Imponible
                l_textoActual := LPAD(' ', 36) || 'Base Imponible para ITBMS     :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_baseImponible, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Impuesto
                l_textoActual := LPAD(' ', 36) || 'ITBMS Tarifa ' || LPAD(r_factura(i).val_tasa_impu || '%', 3) || '              :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_impuesto, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Transportes
                l_totalTransportes := ABS(r_factura(i).imp_flet_tota_loca);
                l_textoActual := LPAD(' ', 36) || 'Fletes y Serv. (0%  ITBMS)    :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total Factura
                l_totalFactura := l_totalProductos - l_totalDescuentos + l_totalTransportes;
                l_textoActual := LPAD(' ', 36) || 'Total Factura                 :';
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFactura, '9999999990.00')), 12);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total en texto
                IF l_totalFactura <> 0 THEN
                    l_textoActual := LPAD('SON:', 7) || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalFactura)) || ' y ' || TO_CHAR((l_totalFactura - TRUNC(l_totalFactura)) * 100)  || '/100';
                ELSE
                    l_textoActual := LPAD('SON:', 7) || 'CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_factura%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_factura;
END;

/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Peru Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_PEE(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

-- Constantes
COD_TIPO_DOCUM_BOLET VARCHAR2(3) := '012';
COD_TIPO_DOCUM_FACTU VARCHAR2(3) := '003';

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       DOC.COD_TIPO_PROG,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 4) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 3) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 2) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 1)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                    imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl               imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                    imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                    imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                    imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                    imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe               imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli               imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                    imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons          imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte          imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                    imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                    imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                    imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                    imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                    imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi               imp_docum_conta_matri.num_tota_pagi%TYPE,
    cod_tipo_prog               imp_docum_conta_matri.cod_tipo_prog%TYPE,
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.OID OID_DETA,
       DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       CASE
       WHEN PSP.VAL_CODI_VENT IS NOT NULL THEN
           SUBSTR(NVL(SPC.COD_PERI, p_codigoPeriodo), -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       ELSE
           SUBSTR(NVL(SPC.COD_PERI, p_codigoPeriodo), -2, 2) || SUBSTR(MP.COD_SAP, 1, 5) || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       END VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.IMP_DESC_SIN_IMPU_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       DET.VAL_PREC_SIN_IMPU_UNIT,
       DET.VAL_PREC_SIN_IMPU_TOTA_LOCA,
       DET.IMP_IMPU_TOTA_LOCA
FROM FAC_DOCUM_CONTA_LINEA DET,
     MAE_PRODU MP,
     PED_SOLIC_POSIC PSP,
     PED_SOLIC_CABEC PSC,
     PED_SOLIC_CABEC RFE,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND DET.PROD_OID_PROD = MP.OID_PROD
AND PSP.SOCA_OID_SOLI_CABE = PSC.OID_SOLI_CABE
AND PSC.SOCA_OID_DOCU_REFE = RFE.OID_SOLI_CABE (+)
AND RFE.PERD_OID_PERI = CP.OID_PERI (+)
AND CP.PERI_OID_PERI = SPC.OID_PERI (+)
AND DET.NUM_UNID_ATEN > 0
AND NVL(DET.IND_NO_IMPR, 0) = 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND DET.DCCA_OID_CABE = oidCabecera
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    oid_deta                    fac_docum_conta_linea.oid%TYPE,
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

-- Variables para almacenar la informacion de los concursos
l_numeroConcurso    VARCHAR2(6);
l_periodoInicio     VARCHAR2(6);
l_periodoFin        VARCHAR2(6);

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG ' || LPAD(r_factura(i).num_pagi, 3) || ' DE ' || LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y fecha de emision
                l_textoActual := 'CAMPAÑA:' || RPAD(r_factura(i).cod_peri, 9, ' ') || 'EMISION:' || TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Codigo de Cliente
                l_textoActual := 'ZONA:' || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 12, ' ') || 'CUENTA:' || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DNI/RUC
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := 'RUC:' || r_factura(i).val_nume_iden_fisc;
                ELSE
                    l_textoActual := 'DNI:' || r_factura(i).val_nume_iden_fisc;
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_factura(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_factura(i).val_dire_comp, 1, 47);
                    IF LENGTH(r_factura(i).val_dire_comp) > 47 THEN
                        l_direccionLinea2 := SUBSTR(r_factura(i).val_dire_comp, 48, 47);
                    END IF;

                    IF LENGTH(r_factura(i).val_dire_comp) > 94 THEN
                        l_direccionLinea3 := SUBSTR(r_factura(i).val_dire_comp, 95, 47);
                    END IF;

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionLinea1 := SUBSTR(r_factura(i).val_ubig, 1, 47);
                IF LENGTH(r_factura(i).val_ubig) > 47 THEN
                    l_ubicacionLinea2 := SUBSTR(r_factura(i).val_ubig, 48, 47);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea1), l_ubicacionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea2), l_ubicacionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo Interno
                l_textoActual := LPAD('CODIGO INTERNO:', 67, ' ') || LPAD(r_factura(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Boleta de Despacho
                l_textoActual := LPAD('BOLETA DESPACHO:', 68, ' ') || LPAD(r_factura(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_factura(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN

                            -- Se imprime el separador a partir del segundo grupo de detalles
                            IF k > 0 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP

                                -- Inicializamos las variables de concurso
                                l_numeroConcurso := NULL;
                                l_periodoInicio := NULL;
                                l_periodoFin := NULL;

                                -- Obtenemos los datos del concurso (para los concursos de bonificacion)
                                IF(r_factura(i).cod_tipo_prog = 'B') THEN
                                    IMP_PR_OBTIE_INFOR_CONCU(r_factura(i).oid_docu_cont_cabe,
                                                             r_detalle(j).oid_deta,
                                                             l_numeroConcurso,
                                                             l_periodoInicio,
                                                             l_periodoFin);
                                END IF;

                                -- Mostramos la informacion del concurso
                                IF (l_numeroConcurso IS NOT NULL) THEN

                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_textoActual := 'Bonificacion otorgada por haber alcanzado el';
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_textoActual := 'volumen de compra requerido en el periodo';
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_textoActual := 'C' || SUBSTR(l_periodoInicio, 5, 2) || '/' || SUBSTR(l_periodoInicio, 1, 4) || ' al C';
                                    l_textoActual := l_textoActual || SUBSTR(l_periodoFin, 5, 2) || '/' || SUBSTR(l_periodoFin, 1, 4) ||  ' correspondiente al';
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_textoActual := 'programa ' || l_numeroConcurso;
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_contadorDetalles := l_contadorDetalles + 5;

                                END IF;

                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten , 4) || ' ' || RPAD(r_detalle(j).des_prod, 37) || r_detalle(j).val_codi_vent;

                                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                                    l_precioUnitario := r_detalle(j).val_prec_sin_impu_unit;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_neto_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_neto_tota_loca;
                                ELSE
                                    l_precioUnitario :=  r_detalle(j).val_prec_cata_unit_loca + r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_fact_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_fact_tota_loca;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 10, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitarioFacturado, '9999999990.00')), 9, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12, ' ');
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                            END LOOP;
                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;

                -- Agregamos el ultimo separador
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_contadorSeparadores := l_contadorSeparadores + 1;

                IF r_factura(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_factura(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Imprimos tantos cambios de linea como sean necesarios
                l_numeroCambiosLinea := 53 - l_contadorDetalles - l_contadorSeparadores;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE
                -- Total de unidades
                l_textoActual := LPAD(l_totalUnidades, 6, ' ') || ' UNIDADES';

                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_impu_tota_loca - r_factura(i).imp_flet_impu_tota_loca;
                    l_totalVentaCatalogo := l_totalVentaCatalogo + r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalDescuentos := r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_impu_tota_loca;
                ELSE
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_flet_tota_loca + r_factura(i).imp_desc_tota_loca;
                    l_totalDescuentos := r_factura(i).imp_desc_tota_loca;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                END IF;
                -- Total Precio Catalogo
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 17, ' ');
                -- Total Descuento
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')) || ')', 14, ' ');
                -- Total Precio Facturado
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFacturado, '9999999990.00')), 22, ' ');
                -- Flete
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13, ' ');

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Agregamos los valores faltantes al total
                l_totalAPagar := r_factura(i).val_tota_paga_loca;

                -- Total en texto
                IF l_totalAPagar <> 0 THEN
                    l_textoActual := 'SON:' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                ELSE
                    l_textoActual := 'SON:CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Monto Final en Numeros
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := LPAD(' ', 42, ' ') ||  LPAD(TRIM(TO_CHAR(r_factura(i).imp_impu_tota_loca, '9999999990.00')), 15, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                ELSE
                    l_textoActual := LPAD(' ', 57, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Peru Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_PEE_2(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

-- Constantes
COD_TIPO_DOCUM_BOLET VARCHAR2(3) := '012';
COD_TIPO_DOCUM_FACTU VARCHAR2(3) := '003';

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       DOC.COD_TIPO_PROG,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 4) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 3) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 2) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 1)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                    imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl               imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                    imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                    imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                    imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                    imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe               imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli               imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                    imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons          imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte          imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                    imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                    imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                    imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                    imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                    imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi               imp_docum_conta_matri.num_tota_pagi%TYPE,
    cod_tipo_prog               imp_docum_conta_matri.cod_tipo_prog%TYPE,
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.OID OID_DETA,
       DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       CASE
       WHEN PSP.VAL_CODI_VENT IS NOT NULL THEN
           SUBSTR(NVL(SPC.COD_PERI, p_codigoPeriodo), -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       ELSE
           SUBSTR(NVL(SPC.COD_PERI, p_codigoPeriodo), -2, 2) || SUBSTR(MP.COD_SAP, 1, 5) || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       END VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.IMP_DESC_SIN_IMPU_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       DET.VAL_PREC_SIN_IMPU_UNIT,
       DET.VAL_PREC_SIN_IMPU_TOTA_LOCA,
       DET.IMP_IMPU_TOTA_LOCA
FROM FAC_DOCUM_CONTA_LINEA DET,
     MAE_PRODU MP,
     PED_SOLIC_POSIC PSP,
     PED_SOLIC_CABEC PSC,
     PED_SOLIC_CABEC RFE,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND DET.PROD_OID_PROD = MP.OID_PROD
AND PSP.SOCA_OID_SOLI_CABE = PSC.OID_SOLI_CABE
AND PSC.SOCA_OID_DOCU_REFE = RFE.OID_SOLI_CABE (+)
AND RFE.PERD_OID_PERI = CP.OID_PERI (+)
AND CP.PERI_OID_PERI = SPC.OID_PERI (+)
AND DET.NUM_UNID_ATEN > 0
AND NVL(DET.IND_NO_IMPR, 0) = 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND DET.DCCA_OID_CABE = oidCabecera
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    oid_deta                    fac_docum_conta_linea.oid%TYPE,
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

-- Variables para almacenar la informacion de los concursos
l_numeroConcurso    VARCHAR2(6);
l_numeroConcursoAnt VARCHAR2(6);
l_temp              VARCHAR2(6):='0';
l_periodoInicio     VARCHAR2(6);
l_periodoFin        VARCHAR2(6);

l_CLOB                      CLOB;
l_lineasDetalle      NUMBER := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'lineasDetalleBPPeru') ;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                l_temp:='0';
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG ' || LPAD(r_factura(i).num_pagi, 3) || ' DE ' || LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y fecha de emision
                l_textoActual := 'CAMPAÑA:' || RPAD(r_factura(i).cod_peri, 9, ' ') || 'EMISION:' || TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Codigo de Cliente
                l_textoActual := 'ZONA:' || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 12, ' ') || 'CUENTA:' || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DNI/RUC
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := 'RUC:' || r_factura(i).val_nume_iden_fisc;
                ELSE
                    l_textoActual := 'DNI:' || r_factura(i).val_nume_iden_fisc;
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_factura(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_factura(i).val_dire_comp, 1, 47);
                    IF LENGTH(r_factura(i).val_dire_comp) > 47 THEN
                        l_direccionLinea2 := SUBSTR(r_factura(i).val_dire_comp, 48, 47);
                    END IF;

                    IF LENGTH(r_factura(i).val_dire_comp) > 94 THEN
                        l_direccionLinea3 := SUBSTR(r_factura(i).val_dire_comp, 95, 47);
                    END IF;

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionLinea1 := SUBSTR(r_factura(i).val_ubig, 1, 47);
                IF LENGTH(r_factura(i).val_ubig) > 47 THEN
                    l_ubicacionLinea2 := SUBSTR(r_factura(i).val_ubig, 48, 47);
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea1), l_ubicacionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea2), l_ubicacionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo Interno
                l_textoActual := LPAD('CODIGO INTERNO:', 67, ' ') || LPAD(r_factura(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Boleta de Despacho
                l_textoActual := LPAD('BOLETA DESPACHO:', 68, ' ') || LPAD(r_factura(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_factura(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN

                            -- Se imprime el separador a partir del segundo grupo de detalles
                            IF k > 0 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP

                                -- Inicializamos las variables de concurso
                                l_numeroConcurso := NULL;
                                l_periodoInicio := NULL;
                                l_periodoFin := NULL;

                                -- Obtenemos los datos del concurso (para los concursos de bonificacion)
                                IF(r_factura(i).cod_tipo_prog = 'B') THEN
                                    IMP_PR_OBTIE_INFOR_CONCU(r_factura(i).oid_docu_cont_cabe,
                                                             r_detalle(j).oid_deta,
                                                             l_numeroConcurso,
                                                             l_periodoInicio,
                                                             l_periodoFin);
                                END IF;

                                if l_temp='0' then
                                    IF (l_numeroConcurso IS NOT NULL) THEN

                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                        l_textoActual := 'Bonificacion(es) otorgada(s) por haber alcanzado';
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                        l_textoActual := 'el volumen de compra requerido en el periodo.';
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                        l_contadorDetalles := l_contadorDetalles + 3;
                                    end if;
                                    l_temp:='1';
                                end if;
                                -- Mostramos la informacion del concurso
                                IF (l_numeroConcurso IS NOT NULL) THEN

                                    /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_textoActual := 'Bonificacion otorgada por haber alcanzado el';
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_textoActual := 'volumen de compra requerido en el periodo';
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
*/
                                    if l_numeroConcurso IS NOT NULL and l_numeroConcurso<>nvl(l_numeroConcursoAnt,'0') then
                                        l_textoActual := 'C' || SUBSTR(l_periodoInicio, 5, 2) || '/' || SUBSTR(l_periodoInicio, 1, 4) || ' al C';
                                        l_textoActual := l_textoActual || SUBSTR(l_periodoFin, 5, 2) || '/' || SUBSTR(l_periodoFin, 1, 4) ||  ' del';
                                        /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                */
                                        l_textoActual := l_textoActual || ' programa ' || l_numeroConcurso;
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                        l_contadorDetalles := l_contadorDetalles + 1;
                                    end if;
                                END IF;

                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten , 4) || ' ' || RPAD(r_detalle(j).des_prod, 37) || r_detalle(j).val_codi_vent;

                                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                                    l_precioUnitario := r_detalle(j).val_prec_sin_impu_unit;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_neto_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_neto_tota_loca;
                                ELSE
                                    l_precioUnitario :=  r_detalle(j).val_prec_cata_unit_loca + r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_fact_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_fact_tota_loca;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 10, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitarioFacturado, '9999999990.00')), 9, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12, ' ');
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;
                                l_numeroConcursoAnt:=l_numeroConcurso;

                            END LOOP;
                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;

                -- Agregamos el ultimo separador
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_contadorSeparadores := l_contadorSeparadores + 1;

                IF r_factura(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_factura(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Imprimos tantos cambios de linea como sean necesarios
                select decode(l_lineasDetalle,null,53,l_lineasDetalle) into l_lineasDetalle from dual;
                l_numeroCambiosLinea := l_lineasDetalle - l_contadorDetalles - l_contadorSeparadores;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE
                -- Total de unidades
                l_textoActual := LPAD(l_totalUnidades, 6, ' ') || ' UNIDADES';

                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_impu_tota_loca - r_factura(i).imp_flet_impu_tota_loca;
                    l_totalVentaCatalogo := l_totalVentaCatalogo + r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalDescuentos := r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_impu_tota_loca;
                ELSE
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_flet_tota_loca + r_factura(i).imp_desc_tota_loca;
                    l_totalDescuentos := r_factura(i).imp_desc_tota_loca;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                END IF;
                -- Total Precio Catalogo
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 17, ' ');
                -- Total Descuento
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')) || ')', 14, ' ');
                -- Total Precio Facturado
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFacturado, '9999999990.00')), 22, ' ');
                -- Flete
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13, ' ');

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Agregamos los valores faltantes al total
                l_totalAPagar := r_factura(i).val_tota_paga_loca;

                -- Total en texto
                IF l_totalAPagar <> 0 THEN
                    l_textoActual := 'SON:' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                ELSE
                    l_textoActual := 'SON:CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Monto Final en Numeros
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := LPAD(' ', 42, ' ') ||  LPAD(TRIM(TO_CHAR(r_factura(i).imp_impu_tota_loca, '9999999990.00')), 15, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                ELSE
                    l_textoActual := LPAD(' ', 57, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Peru Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_PEE_3(p_codigoPais VARCHAR2,
                                       p_codigoPeriodo VARCHAR2,
                                       p_fechaFacturacion VARCHAR2) IS

-- Constantes
COD_TIPO_DOCUM_BOLET VARCHAR2(3) := '012';
COD_TIPO_DOCUM_FACTU VARCHAR2(3) := '003';

CURSOR c_facturas IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.COD_DIGI_CTRL,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.VAL_IMPO_REDO_CONS,
       DOC.VAL_INDI_IMPU,
       DOC.VAL_TASA_IMPU,
       DOC.OID_DOCU_CONT_CABE,
       DOC.NUM_DOCU_CONT_INTE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.FEC_VENC,
       DOC.COD_TIPO_DOCU,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       DOC.COD_TIPO_PROG,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 4) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 3) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 2) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 1)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
ORDER BY COR_DOCU_CONT_MATR;

TYPE facturarecord IS RECORD (
    cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                    imp_docum_conta_matri.cod_clie%TYPE,
    cod_digi_ctrl               imp_docum_conta_matri.cod_digi_ctrl%TYPE,
    val_nom1                    imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                    imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                    imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                    imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe               imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli               imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                    imp_docum_conta_matri.fec_fact%TYPE,
    val_impo_redo_cons          imp_docum_conta_matri.val_impo_redo_cons%TYPE,
    val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               imp_docum_conta_matri.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    num_docu_cont_inte          imp_docum_conta_matri.num_docu_cont_inte%TYPE,
    cod_regi                    imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                    imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                    imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                    imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               imp_docum_conta_matri.cod_tipo_docu%TYPE,
    num_pagi                    imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi               imp_docum_conta_matri.num_tota_pagi%TYPE,
    cod_tipo_prog               imp_docum_conta_matri.cod_tipo_prog%TYPE,
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.OID OID_DETA,
       DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       CASE
       WHEN PSP.VAL_CODI_VENT IS NOT NULL THEN
           SUBSTR(NVL(SPC.COD_PERI, p_codigoPeriodo), -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       ELSE
           SUBSTR(NVL(SPC.COD_PERI, p_codigoPeriodo), -2, 2) || SUBSTR(MP.COD_SAP, 1, 5) || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       END VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.IMP_DESC_SIN_IMPU_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       DET.VAL_PREC_SIN_IMPU_UNIT,
       DET.VAL_PREC_SIN_IMPU_TOTA_LOCA,
       DET.IMP_IMPU_TOTA_LOCA
FROM FAC_DOCUM_CONTA_LINEA DET,
     MAE_PRODU MP,
     PED_SOLIC_POSIC PSP,
     PED_SOLIC_CABEC PSC,
     PED_SOLIC_CABEC RFE,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND DET.PROD_OID_PROD = MP.OID_PROD
AND PSP.SOCA_OID_SOLI_CABE = PSC.OID_SOLI_CABE
AND PSC.SOCA_OID_DOCU_REFE = RFE.OID_SOLI_CABE (+)
AND RFE.PERD_OID_PERI = CP.OID_PERI (+)
AND CP.PERI_OID_PERI = SPC.OID_PERI (+)
AND DET.NUM_UNID_ATEN > 0
AND NVL(DET.IND_NO_IMPR, 0) = 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND DET.DCCA_OID_CABE = oidCabecera
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    oid_deta                    fac_docum_conta_linea.oid%TYPE,
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

-- Variables para almacenar la informacion de los concursos
l_numeroConcurso    VARCHAR2(6);
l_numeroConcursoAnt VARCHAR2(6);
l_temp              VARCHAR2(6):='0';
l_periodoInicio     VARCHAR2(6);
l_periodoFin        VARCHAR2(6);

l_CLOB                      CLOB;
l_lineasDetalle      NUMBER := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'lineasDetalleBPPeru') ;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                l_temp:='0';
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto del factura
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG ' || LPAD(r_factura(i).num_pagi, 3) || ' DE ' || LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y fecha de emision
                l_textoActual := 'CAMPAÑA:' || RPAD(r_factura(i).cod_peri, 9, ' ') || 'EMISION:' || TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Codigo de Cliente
                l_textoActual := 'ZONA:' || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 12, ' ') || 'CUENTA:' || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DNI/RUC
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := 'RUC:' || r_factura(i).val_nume_iden_fisc;
                ELSE
                    l_textoActual := 'DNI:' || r_factura(i).val_nume_iden_fisc;
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_factura(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_factura(i).val_dire_comp, 1, 47);
                    IF LENGTH(r_factura(i).val_dire_comp) > 47 THEN
                        l_direccionLinea2 := SUBSTR(r_factura(i).val_dire_comp, 48, 47);
                    END IF;

                    IF LENGTH(r_factura(i).val_dire_comp) > 94 THEN
                        l_direccionLinea3 := SUBSTR(r_factura(i).val_dire_comp, 95, 47);
                    END IF;

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);*/
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);*/
                l_textoActual := RPAD(l_direccionLinea3, 52, ' ') || 'CODIGO INTERNO:' || LPAD(r_factura(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionLinea1 := SUBSTR(r_factura(i).val_ubig, 1, 47);
                IF LENGTH(r_factura(i).val_ubig) > 47 THEN
                    l_ubicacionLinea2 := SUBSTR(r_factura(i).val_ubig, 48, 47);
                END IF;
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea1), l_ubicacionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);*/
                l_textoActual := RPAD(l_ubicacionLinea1, 52, ' ') || 'BOLETA DESPACHO:' || LPAD(r_factura(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea2), l_ubicacionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


/*
                -- Codigo Interno
                l_textoActual := LPAD('CODIGO INTERNO:', 67, ' ') || LPAD(r_factura(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Boleta de Despacho
                l_textoActual := LPAD('BOLETA DESPACHO:', 68, ' ') || LPAD(r_factura(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
*/
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_factura(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN

                            -- Se imprime el separador a partir del segundo grupo de detalles
                            /*IF k =1 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;*/

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP
                                -- Inicializamos las variables de concurso
                                l_numeroConcurso := NULL;
                                l_periodoInicio := NULL;
                                l_periodoFin := NULL;

                                -- Obtenemos los datos del concurso (para los concursos de bonificacion)
                                IF(r_factura(i).cod_tipo_prog = 'B') THEN
                                    IMP_PR_OBTIE_INFOR_CONCU(r_factura(i).oid_docu_cont_cabe,
                                                             r_detalle(j).oid_deta,
                                                             l_numeroConcurso,
                                                             l_periodoInicio,
                                                             l_periodoFin);
                                END IF;

                                if l_temp='0' then
                                    IF (l_numeroConcurso IS NOT NULL) THEN

                                        /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                        */
                                        l_textoActual := 'Bonificacion(es) otorgada(s) por haber alcanzado';
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                        l_textoActual := 'el volumen de compra requerido en el periodo.';
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                        l_contadorDetalles := l_contadorDetalles + 2;
                                    end if;
                                    l_temp:='1';
                                end if;
                                -- Mostramos la informacion del concurso
                                IF (l_numeroConcurso IS NOT NULL) THEN

                                    /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_textoActual := 'Bonificacion otorgada por haber alcanzado el';
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_textoActual := 'volumen de compra requerido en el periodo';
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
*/
                                    if l_numeroConcurso IS NOT NULL and l_numeroConcurso<>nvl(l_numeroConcursoAnt,'0') then
                                        l_textoActual := 'C' || SUBSTR(l_periodoInicio, 5, 2) || '/' || SUBSTR(l_periodoInicio, 1, 4) || ' al C';
                                        l_textoActual := l_textoActual || SUBSTR(l_periodoFin, 5, 2) || '/' || SUBSTR(l_periodoFin, 1, 4) ||  ' del';
                                        /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                */
                                        l_textoActual := l_textoActual || ' programa ' || l_numeroConcurso;
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                        l_contadorDetalles := l_contadorDetalles + 1;
                                    end if;
                                END IF;

                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten , 4) || ' ' || RPAD(r_detalle(j).des_prod, 37) || r_detalle(j).val_codi_vent;

                                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                                    l_precioUnitario := r_detalle(j).val_prec_sin_impu_unit;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_neto_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_neto_tota_loca;
                                ELSE
                                    l_precioUnitario :=  r_detalle(j).val_prec_cata_unit_loca + r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_fact_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_fact_tota_loca;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 10, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitarioFacturado, '9999999990.00')), 9, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12, ' ');
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;
                                l_numeroConcursoAnt:=l_numeroConcurso;

                            END LOOP;
                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;

                -- Agregamos el ultimo separador
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_contadorSeparadores := l_contadorSeparadores + 1;*/

                IF r_factura(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_factura(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Imprimos tantos cambios de linea como sean necesarios
                select decode(l_lineasDetalle,null,53,l_lineasDetalle) into l_lineasDetalle from dual;
                l_numeroCambiosLinea := l_lineasDetalle - l_contadorDetalles - l_contadorSeparadores;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE
                -- Total de unidades
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_textoActual := LPAD(l_totalUnidades, 6, ' ') || ' UNIDADES';

                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_impu_tota_loca - r_factura(i).imp_flet_impu_tota_loca;
                    l_totalVentaCatalogo := l_totalVentaCatalogo + r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalDescuentos := r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_impu_tota_loca;
                ELSE
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_flet_tota_loca + r_factura(i).imp_desc_tota_loca;
                    l_totalDescuentos := r_factura(i).imp_desc_tota_loca;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                END IF;
                -- Total Precio Catalogo
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 17, ' ');
                -- Total Descuento
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')) || ')', 14, ' ');
                -- Total Precio Facturado
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFacturado, '9999999990.00')), 22, ' ');
                -- Flete
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13, ' ');

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Agregamos los valores faltantes al total
                l_totalAPagar := r_factura(i).val_tota_paga_loca;

                -- Total en texto
                IF l_totalAPagar <> 0 THEN
                    l_textoActual := 'SON:' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                ELSE
                    l_textoActual := 'SON:CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Monto Final en Numeros
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := LPAD(' ', 42, ' ') ||  LPAD(TRIM(TO_CHAR(r_factura(i).imp_impu_tota_loca, '9999999990.00')), 15, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                ELSE
                    l_textoActual := LPAD(' ', 57, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el documento del factura de premio matricial
                      en el formato de Peru Esika.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_FACTU_PREMI_PEE_F(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2) IS

-- Constantes
COD_TIPO_DOCUM_BOLET VARCHAR2(3) := '012';
COD_TIPO_DOCUM_FACTU VARCHAR2(3) := '003';

CURSOR c_facturas IS
SELECT --DOC.COR_DOCU_CONT_MATR,
       --DOC.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_IMPO_REDO_LOCA,
       --CON.VAL_INDI_IMPU,
       CON.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       ZR.COD_REGI,
       ZZ.COD_ZONA,
       ZS.COD_SECC,
       ZT.COD_TERR,
       --DOC.COD_PERI,
       --DOC.FEC_VENC,
       FTD.COD_TIPO_DOCU,
       1 NUM_PAGI,
       1 NUM_TOTA_PAGI,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 4) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 3) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 2) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 1)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.VAL_PREC_CONT_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE,
       CAB.Val_Tota_Gast_Admi,
       ICTP.Cod_Tipo_Prog
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_DIREC MCD,
     MAE_CLIEN_IDENT MCI,
     MAE_CLIEN MC,
     ZON_TERRI_ADMIN ZTA,
     ZON_TERRI ZT,
     ZON_SECCI ZS,
     ZON_ZONA ZZ,
     ZON_REGIO ZR,
     FAC_TIPO_DOCUM FTD,
     Inc_Concu_Tipo_Prog ICTP
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
AND CON.OID_SOLI_CABE=p_oidsoli
AND CAB.CLDI_OID_CLIE_DIRE=MCD.OID_CLIE_DIRE
AND MCD.CLIE_OID_CLIE=MC.OID_CLIE
AND MC.OID_CLIE=MCI.CLIE_OID_CLIE
AND CON.ZTAD_OID_TERR_ADMI=ZTA.OID_TERR_ADMI
AND ZTA.TERR_OID_TERR=ZT.OID_TERR
AND ZTA.ZSCC_OID_SECC=ZS.OID_SECC
AND ZTA.IND_BORR=0
AND ZS.ZZON_OID_ZONA=ZZ.OID_ZONA
AND ZZ.ZORG_OID_REGI=ZR.OID_REGI
and con.ictp_oid_tipo_prog=ictp.oid_tipo_prog(+)
AND CAB.TIDO_OID_TIPO_DOCU=30
AND CAB.TIDO_OID_TIPO_DOCU=FTD.OID_TIPO_DOCU
;

TYPE facturarecord IS RECORD (
    --cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    --cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    MAE_CLIEN.oid_clie%TYPE,
    cod_clie                    MAE_CLIEN.cod_clie%TYPE,
    cod_digi_ctrl               MAE_CLIEN.cod_digi_ctrl%TYPE,
    val_nom1                    MAE_CLIEN.val_nom1%TYPE,
    val_nom2                    MAE_CLIEN.val_nom2%TYPE,
    val_ape1                    MAE_CLIEN.val_ape1%TYPE,
    val_ape2                    MAE_CLIEN.val_ape2%TYPE,
    oid_soli_cabe               PED_SOLIC_CABEC.oid_soli_cabe%TYPE,
    val_nume_soli               PED_SOLIC_CABEC.val_nume_soli%TYPE,
    fec_fact                    PED_SOLIC_CABEC.fec_fact%TYPE,
    val_impo_redo_cons          PED_SOLIC_CABEC.val_impo_redo_LOCA%TYPE,
    --val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               PED_SOLIC_CABEC.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte          fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    cod_regi                    ZON_REGIO.cod_regi%TYPE,
    cod_zona                    ZON_ZONA.cod_zona%TYPE,
    cod_secc                    ZON_SECCI.cod_secc%TYPE,
    cod_terr                    ZON_TERRI.cod_terr%TYPE,
    --cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    --fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               FAC_TIPO_DOCUM.cod_tipo_docu%TYPE,
    num_pagi                    number(3),
    num_tota_pagi               NUMBER(3),
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_cabec.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    val_tota_gast_admi          fac_docum_conta_cabec.val_tota_gast_admi%TYPE,
    cod_tipo_prog               inc_concu_tipo_prog.cod_tipo_prog%TYPE
);

TYPE facturatype IS TABLE OF facturarecord;
r_factura    facturatype;

CURSOR c_detalle(oidCabecera NUMBER,
                 indicadorDentroFueraCajaBolsa NUMBER) IS
SELECT DET.OID OID_DETA,
       DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       CASE
       WHEN PSP.VAL_CODI_VENT IS NOT NULL THEN
           SUBSTR(NVL(SPC.COD_PERI, p_codperi), -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       ELSE
           SUBSTR(NVL(SPC.COD_PERI, p_codperi), -2, 2) || SUBSTR(MP.COD_SAP, 1, 5) || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       END VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       DET.VAL_PREC_CATA_UNIT_LOCA,
       DET.VAL_PREC_CATA_TOTA_LOCA,
       DET.VAL_PREC_CONT_UNIT_LOCA,
       DET.VAL_PREC_CONT_TOTA_LOCA,
       DET.IMP_DESC_TOTA_LOCA,
       DET.IMP_DESC_SIN_IMPU_TOTA_LOCA,
       DET.VAL_PREC_FACT_UNIT_LOCA,
       DET.VAL_PREC_FACT_TOTA_LOCA,
       DET.VAL_PREC_NETO_UNIT_LOCA,
       DET.VAL_PREC_NETO_TOTA_LOCA,
       DET.VAL_PREC_SIN_IMPU_UNIT,
       DET.VAL_PREC_SIN_IMPU_TOTA_LOCA,
       DET.IMP_IMPU_TOTA_LOCA
FROM FAC_DOCUM_CONTA_LINEA DET,
     MAE_PRODU MP,
     PED_SOLIC_POSIC PSP,
     PED_SOLIC_CABEC PSC,
     PED_SOLIC_CABEC RFE,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND DET.PROD_OID_PROD = MP.OID_PROD
AND PSP.SOCA_OID_SOLI_CABE = PSC.OID_SOLI_CABE
AND PSC.SOCA_OID_DOCU_REFE = RFE.OID_SOLI_CABE (+)
AND RFE.PERD_OID_PERI = CP.OID_PERI (+)
AND CP.PERI_OID_PERI = SPC.OID_PERI (+)
AND DET.NUM_UNID_ATEN > 0
AND NVL(DET.IND_NO_IMPR, 0) = 0
AND DECODE(DET.IND_DENT_FUER_CAJA_BOLS,
           'C', 0,
           'F', 1,
           2) = indicadorDentroFueraCajaBolsa
AND DET.DCCA_OID_CABE = oidCabecera
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    oid_deta                    fac_docum_conta_linea.oid%TYPE,
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    val_prec_cata_unit_loca     fac_docum_conta_linea.val_prec_cata_unit_loca%TYPE,
    val_prec_cata_tota_loca     fac_docum_conta_linea.val_prec_cata_tota_loca%TYPE,
    val_prec_cont_unit_loca     fac_docum_conta_linea.val_prec_cont_unit_loca%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_linea.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_linea.imp_desc_tota_loca%TYPE,
    imp_desc_sin_impu_tota_loca fac_docum_conta_linea.imp_desc_sin_impu_tota_loca%TYPE,
    val_prec_fact_unit_loca     fac_docum_conta_linea.val_prec_fact_unit_loca%TYPE,
    val_prec_fact_tota_loca     fac_docum_conta_linea.val_prec_fact_tota_loca%TYPE,
    val_prec_neto_unit_loca     fac_docum_conta_linea.val_prec_neto_unit_loca%TYPE,
    val_prec_neto_tota_loca     fac_docum_conta_linea.val_prec_neto_tota_loca%TYPE,
    val_prec_sin_impu_unit      fac_docum_conta_linea.val_prec_sin_impu_unit%TYPE,
    val_prec_sin_impu_tota_loca fac_docum_conta_linea.val_prec_sin_impu_tota_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_linea.imp_impu_tota_loca%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;


l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalEspaciado            NUMBER := 34;
l_contadorDetalles          NUMBER := 0;
l_contadorSeparadores       NUMBER := 0;
l_numeroCambiosLinea        NUMBER := 0;


l_precioUnitario            NUMBER(12, 2) := 0;
l_precioUnitarioFacturado   NUMBER(12, 2) := 0;
l_precioTotal               NUMBER(12, 2) := 0;

l_separadorDetalles         VARCHAR2(100) := '=================================================================================';
l_totalUnidades             NUMBER := 0;
l_totalVentaCatalogo        NUMBER(12, 2) := 0;
l_totalDescuentos           NUMBER(12, 2) := 0;
l_totalFacturado            NUMBER(12, 2) := 0;
l_totalTransportes          NUMBER(12, 2) := 0;
l_totalImpuestos            NUMBER(12, 2) := 0;
l_totalFactura              NUMBER(12, 2) := 0;
l_redondeo                  NUMBER(12, 2) := 0;

l_baseImponible             NUMBER(12, 2) := 0;
l_impuesto                  NUMBER(12, 2) := 0;
l_totalAPagar               NUMBER(12, 2) := 0;
l_percepcion                NUMBER(12, 2) := 0;
l_totalConPercepcion        NUMBER(12, 2) := 0;

-- Variables para almacenar la direccion
l_direccionLinea1 VARCHAR2(100) := ' ';
l_direccionLinea2 VARCHAR2(100) := ' ';
l_direccionLinea3 VARCHAR2(100) := ' ';

-- Variables para almacenar la Ubicacion Geografica
l_ubicacionLinea1 VARCHAR2(100) := ' ';
l_ubicacionLinea2 VARCHAR2(100) := ' ';

-- Variables para almacenar la informacion de los concursos
l_numeroConcurso    VARCHAR2(6);
l_numeroConcursoAnt VARCHAR2(6);
l_temp              VARCHAR2(6):='0';
l_periodoInicio     VARCHAR2(6);
l_periodoFin        VARCHAR2(6);

l_CLOB                      CLOB;
l_lineasDetalle      NUMBER := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('MAT', 'lineasDetalleBPPeru') ;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_facturas;
    LOOP
        FETCH c_facturas BULK COLLECT
        INTO r_factura LIMIT w_filas;

        IF  r_factura.COUNT > 0 THEN
            FOR i IN r_factura.FIRST..r_factura.LAST
            LOOP

                l_temp:='0';

                /*
                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                --WHERE COR_DOCU_CONT_MATR = r_factura(i).cor_docu_cont_matr
                FOR UPDATE;*/

                INSERT INTO Imp_Paque_Docum_Bopre_Matri (
                COR_BOLE,
                COD_CONS,
                VAL_NUME_SOLI,
                VAL_BUFF)
                VALUES(
                r_factura(i).oid_soli_cabe,
                r_factura(i).cod_clie,
                r_factura(i).val_nume_soli,
                EMPTY_CLOB())
                RETURNING VAL_BUFF INTO l_clob;

                -- Creamos el texto del factura
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG ' || LPAD(r_factura(i).num_pagi, 3) || ' DE ' || LPAD(r_factura(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y fecha de emision
                l_textoActual := 'CAMPAÑA:' || RPAD(p_codperi, 9, ' ') || 'EMISION:' || TO_CHAR(r_factura(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio y Codigo de Cliente
                l_textoActual := 'ZONA:' || RPAD(r_factura(i).cod_zona || '-' || r_factura(i).cod_terr, 12, ' ') || 'CUENTA:' || r_factura(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_factura(i).val_ape1 || ' ' || r_factura(i).val_ape2 || ', ' || r_factura(i).val_nom1 || ' ' || r_factura(i).val_nom2);
                l_textoActual := l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DNI/RUC
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := 'RUC:' || r_factura(i).val_nume_iden_fisc;
                ELSE
                    l_textoActual := 'DNI:' || r_factura(i).val_nume_iden_fisc;
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direccion
                l_direccionLinea1 := ' ';
                l_direccionLinea2 := ' ';
                l_direccionLinea3 := ' ';
                IF r_factura(i).val_dire_comp IS NOT NULL THEN
                    l_direccionLinea1 := SUBSTR(r_factura(i).val_dire_comp, 1, 47);
                    IF LENGTH(r_factura(i).val_dire_comp) > 47 THEN
                        l_direccionLinea2 := SUBSTR(r_factura(i).val_dire_comp, 48, 47);
                    END IF;

                    IF LENGTH(r_factura(i).val_dire_comp) > 94 THEN
                        l_direccionLinea3 := SUBSTR(r_factura(i).val_dire_comp, 95, 47);
                    END IF;

                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea1), l_direccionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea2), l_direccionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_direccionLinea3), l_direccionLinea3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);*/
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);*/
                l_textoActual := RPAD(l_direccionLinea3, 52, ' ') || 'CODIGO INTERNO:' || LPAD(r_factura(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Ubicacion Geografica
                l_ubicacionLinea1 := ' ';
                l_ubicacionLinea2 := ' ';
                l_ubicacionLinea1 := SUBSTR(r_factura(i).val_ubig, 1, 47);
                IF LENGTH(r_factura(i).val_ubig) > 47 THEN
                    l_ubicacionLinea2 := SUBSTR(r_factura(i).val_ubig, 48, 47);
                END IF;
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea1), l_ubicacionLinea1);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);*/
                l_textoActual := RPAD(l_ubicacionLinea1, 52, ' ') || 'BOLETA DESPACHO:' || LPAD(r_factura(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_ubicacionLinea2), l_ubicacionLinea2);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


/*
                -- Codigo Interno
                l_textoActual := LPAD('CODIGO INTERNO:', 67, ' ') || LPAD(r_factura(i).num_docu_cont_inte, 14, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Boleta de Despacho
                l_textoActual := LPAD('BOLETA DESPACHO:', 68, ' ') || LPAD(r_factura(i).val_nume_soli, 13, ' ');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
*/
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE FACTURA
                -- Abrimos el cursor de detalles
                l_contadorDetalles := 0;
                l_contadorSeparadores := 0;
                l_totalUnidades := 0;
                l_totalDescuentos := 0;
                l_totalVentaCatalogo := 0;
                l_totalImpuestos := 0;

                -- (0) Dentro de caja
                -- (1) Fuera de caja
                -- (2) Bolsa
                FOR k IN 0..2
                LOOP
                    -- Pasamos el tipo de detalle al cursor
                    OPEN c_detalle(r_factura(i).oid_docu_cont_cabe, k);
                    LOOP
                        FETCH c_detalle BULK COLLECT
                        INTO r_detalle LIMIT w_filas;

                        IF  r_detalle.COUNT > 0 THEN

                            -- Se imprime el separador a partir del segundo grupo de detalles
                            /*IF k =1 THEN
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                l_contadorSeparadores := l_contadorSeparadores + 1;
                            END IF;*/

                            FOR j IN r_detalle.FIRST..r_detalle.LAST
                            LOOP
                                -- Inicializamos las variables de concurso
                                l_numeroConcurso := NULL;
                                l_periodoInicio := NULL;
                                l_periodoFin := NULL;

                                -- Obtenemos los datos del concurso (para los concursos de bonificacion)
                                IF(r_factura(i).cod_tipo_prog = 'B') THEN
                                    IMP_PR_OBTIE_INFOR_CONCU(r_factura(i).oid_docu_cont_cabe,
                                                             r_detalle(j).oid_deta,
                                                             l_numeroConcurso,
                                                             l_periodoInicio,
                                                             l_periodoFin);
                                END IF;

                                if l_temp='0' then
                                    IF (l_numeroConcurso IS NOT NULL) THEN

                                        /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                        */
                                        l_textoActual := 'Bonificacion(es) otorgada(s) por haber alcanzado';
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                        l_textoActual := 'el volumen de compra requerido en el periodo.';
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                        l_contadorDetalles := l_contadorDetalles + 2;
                                    end if;
                                    l_temp:='1';
                                end if;
                                -- Mostramos la informacion del concurso
                                IF (l_numeroConcurso IS NOT NULL) THEN

                                    /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_textoActual := 'Bonificacion otorgada por haber alcanzado el';
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                    l_textoActual := 'volumen de compra requerido en el periodo';
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
*/
                                    if l_numeroConcurso IS NOT NULL and l_numeroConcurso<>nvl(l_numeroConcursoAnt,'0') then
                                        l_textoActual := 'C' || SUBSTR(l_periodoInicio, 5, 2) || '/' || SUBSTR(l_periodoInicio, 1, 4) || ' al C';
                                        l_textoActual := l_textoActual || SUBSTR(l_periodoFin, 5, 2) || '/' || SUBSTR(l_periodoFin, 1, 4) ||  ' del';
                                        /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                                */
                                        l_textoActual := l_textoActual || ' programa ' || l_numeroConcurso;
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                        DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                        l_contadorDetalles := l_contadorDetalles + 1;
                                    end if;
                                END IF;

                                -- Escribimos la linea de detalle
                                l_textoActual := LPAD(r_detalle(j).num_unid_aten , 4) || ' ' || RPAD(r_detalle(j).des_prod, 37) || r_detalle(j).val_codi_vent;

                                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                                    l_precioUnitario := r_detalle(j).val_prec_sin_impu_unit;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_neto_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_neto_tota_loca;
                                ELSE
                                    l_precioUnitario :=  r_detalle(j).val_prec_cata_unit_loca + r_detalle(j).val_prec_cont_unit_loca;
                                    l_precioUnitarioFacturado := r_detalle(j).val_prec_fact_unit_loca;
                                    l_precioTotal := r_detalle(j).val_prec_fact_tota_loca;
                                END IF;

                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitario, '9999999990.00')), 10, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioUnitarioFacturado, '9999999990.00')), 9, ' ');
                                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_precioTotal, '9999999990.00')), 12, ' ');
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                l_contadorDetalles := l_contadorDetalles + 1;
                                l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;
                                l_numeroConcursoAnt:=l_numeroConcurso;

                            END LOOP;
                        END IF;
                        EXIT WHEN c_detalle%NOTFOUND;
                    END LOOP;

                    -- Cerramos el cursor de detalles
                    CLOSE c_detalle;

                END LOOP;

                -- Agregamos el ultimo separador
                /*DBMS_LOB.writeappend(l_CLOB, LENGTH(l_separadorDetalles), l_separadorDetalles);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_contadorSeparadores := l_contadorSeparadores + 1;*/

                IF r_factura(i).val_obse IS NOT NULL THEN
                    l_textoActual := 'NOTA: ' || r_factura(i).val_obse;
                ELSE
                    l_textoActual := ' ';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);


                -- Imprimos tantos cambios de linea como sean necesarios
                select decode(l_lineasDetalle,null,53,l_lineasDetalle) into l_lineasDetalle from dual;
                l_numeroCambiosLinea := l_lineasDetalle - l_contadorDetalles - l_contadorSeparadores;
                FOR i IN 1..l_numeroCambiosLinea LOOP
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                    DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                END LOOP;

                -- PIE DEL DETALLE
                -- Total de unidades
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                l_textoActual := LPAD(l_totalUnidades, 6, ' ') || ' UNIDADES';

                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_impu_tota_loca - r_factura(i).imp_flet_impu_tota_loca;
                    l_totalVentaCatalogo := l_totalVentaCatalogo + r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalDescuentos := r_factura(i).val_prec_cont_sin_impu_tota + r_factura(i).imp_des1_sin_impu_tota + r_factura(i).imp_des3_sin_impu_tota;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_impu_tota_loca;
                ELSE
                    l_totalVentaCatalogo := r_factura(i).val_tota_paga_loca - r_factura(i).imp_flet_tota_loca + r_factura(i).imp_desc_tota_loca;
                    l_totalDescuentos := r_factura(i).imp_desc_tota_loca;
                    l_totalFacturado := l_totalVentaCatalogo - l_totalDescuentos;
                    l_totalTransportes := r_factura(i).imp_flet_tota_loca;
                END IF;
                -- Total Precio Catalogo
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalVentaCatalogo, '9999999990.00')), 17, ' ');
                -- Total Descuento
                l_textoActual := l_textoActual || LPAD('(' || TRIM(TO_CHAR(l_totalDescuentos, '9999999990.00')) || ')', 14, ' ');
                -- Total Precio Facturado
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalFacturado, '9999999990.00')), 22, ' ');
                -- Flete
                l_textoActual := l_textoActual || LPAD(TRIM(TO_CHAR(l_totalTransportes, '9999999990.00')), 13, ' ');

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Agregamos los valores faltantes al total
                l_totalAPagar := r_factura(i).val_tota_paga_loca;

                -- Total en texto
                IF l_totalAPagar <> 0 THEN
                    l_textoActual := 'SON:' || GEN_FN_NUME_TO_TEXT(TRUNC(l_totalAPagar)) || ' y ' || TO_CHAR((l_totalAPagar - TRUNC(l_totalAPagar)) * 100)  || '/100';
                ELSE
                    l_textoActual := 'SON:CERO';
                END IF;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Monto Final en Numeros
                IF r_factura(i).cod_tipo_docu = COD_TIPO_DOCUM_FACTU THEN
                    l_textoActual := LPAD(' ', 42, ' ') ||  LPAD(TRIM(TO_CHAR(r_factura(i).imp_impu_tota_loca, '9999999990.00')), 15, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                ELSE
                    l_textoActual := LPAD(' ', 57, ' ') || ' S/.' || LPAD(TRIM(TO_CHAR(l_totalAPagar, '9999999990.00')), 20, ' ');
                END IF;

                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_facturas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_facturas;

END;

/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_FACTU_PRE2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100);
l_finArchivo    VARCHAR2(100);
l_contador      NUMBER := 0;
l_total         NUMBER := 0;

CURSOR c_documentos IS
SELECT VAL_BUFF
FROM Imp_Paque_Docum_Bopre_Matri
--WHERE COD_PAIS = p_codigoPais
ORDER BY COR_bole;

BEGIN

    l_inicioArchivo := IMP_FN_INICI_ARCHI_FACTU(p_codigoPais);
    l_finArchivo := IMP_FN_FIN_ARCHI_FACTU(p_codigoPais);

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    -- Iteramos sobre el cursor
    OPEN c_documentos;
    LOOP
        FETCH c_documentos INTO t_clob;
        EXIT WHEN c_documentos%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12)), TRUE);

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_documentos;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_FACTU2: '||substr(SQLERRM,1,250));

END;


/**************************************************************************
Descripcion         : Recupera informacion del concurso asociado a una
                      factura de premios para visualizarlos en la impresion.
Fecha Creación      : 15/04/2010
Fecha Modificacion  : 15/04/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_OBTIE_INFOR_CONCU(p_oidDocumento IN NUMBER,
                                   p_oidDetalle IN NUMBER,
                                   p_numeroConcurso OUT VARCHAR2,
                                   p_periodoInicio OUT VARCHAR2,
                                   p_periodoFin OUT VARCHAR2) IS

CURSOR c_concurso IS
SELECT CPG.NUM_CONC,
       SPC1.COD_PERI COD_PERI_DESD,
       SPC2.COD_PERI COD_PERI_HAST
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC PSC,
     INC_CONCU_PARAM_GENER CPG,
     CRA_PERIO CP1,
     SEG_PERIO_CORPO SPC1,
     CRA_PERIO CP2,
     SEG_PERIO_CORPO SPC2
WHERE CAB.SOCA_OID_SOLI_CABE = PSC.SOCA_OID_SOLI_CABE
AND PSC.COPA_OID_PARA_GENE = CPG.OID_PARA_GRAL
AND CPG.PERD_OID_PERI_DESD = CP1.OID_PERI
AND CP1.PERI_OID_PERI = SPC1.OID_PERI
AND CPG.PERD_OID_PERI_HAST = CP2.OID_PERI
AND CP2.PERI_OID_PERI = SPC2.OID_PERI
AND CAB.OID_CABE = p_oidDocumento
AND EXISTS (
    SELECT NULL
    FROM FAC_DOCUM_CONTA_LINEA DET,
         PED_SOLIC_POSIC PSP
    WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
    AND PSP.SOCA_OID_SOLI_CABE = PSC.OID_SOLI_CABE
    AND DET.NUM_UNID_ATEN > 0
    AND DET.DCCA_OID_CABE = CAB.OID_CABE
    AND DET.OID = p_oidDetalle
);

BEGIN

    -- Abrimos el cursor y obtenemos los datos
    FOR r_concurso IN c_concurso LOOP
        p_numeroConcurso := r_concurso.NUM_CONC;
        p_periodoInicio := r_concurso.COD_PERI_DESD;
        p_periodoFin := r_concurso.COD_PERI_HAST;
    END LOOP;

END;


/**************************************************************************
Descripcion         : Proceso que obtiene la informacion de las guias de
                      remision para luego generar el archivo en el formato
                      del pais.
Fecha Creación      : 04/05/2010
Fecha Modificacion  : 04/05/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_PROCE_GUIA_REMIS_MATRI(p_codigoPais VARCHAR2,
                                        p_codigoPeriodo VARCHAR2,
                                        p_fechaFacturacion VARCHAR2,
                                        p_codigoTipoDocumento VARCHAR2,
                                        p_indicadorEnvioLarissa NUMBER := 0,
                                        p_indicadorEnvioUltimoLote VARCHAR2 := 'N') IS

CURSOR c_guias(oidPeriodo NUMBER,
               numeroLoteFacturacion NUMBER) IS
SELECT SP.OID_PAIS,
       SP.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       CAB.NUM_DOCU_LEGA,
       ZON.OID_ZONA,
       NVL(ZON.COD_ZONA, '0000') COD_ZONA,
       FTD.OID_TIPO_DOCU,
       FTD.COD_TIPO_DOCU
FROM FAC_DOCUM_CONTA_CABEC CAB,
     FAC_TIPO_DOCUM FTD,
     MAE_CLIEN MC,
     PED_SOLIC_CABEC CON,
     ZON_ZONA ZON,
     SEG_PAIS SP
WHERE SP.OID_PAIS = MC.PAIS_OID_PAIS
AND MC.OID_CLIE = CON.CLIE_OID_CLIE
AND CON.OID_SOLI_CABE = CAB.SOCA_OID_SOLI_CABE
AND CAB.TIDO_OID_TIPO_DOCU = FTD.OID_TIPO_DOCU
AND MC.OID_CLIE = ZON.CLIE_OID_CLIE (+)
AND CAB.PERD_OID_PERI = oidPeriodo
AND SP.COD_PAIS = p_codigoPais
AND CAB.FEC_FACT = TO_DATE(p_fechaFacturacion, 'DD/MM/YYYY')
AND CON.IND_INTE_LARI_GENE = p_indicadorEnvioLarissa
AND (numeroLoteFacturacion IS NULL OR CON.NUM_LOTE_FACT = numeroLoteFacturacion)
AND FTD.COD_TIPO_DOCU = p_codigoTipoDocumento
AND EXISTS (
    SELECT NULL
    FROM FAC_DOCUM_CONTA_LINEA DET
    WHERE DET.NUM_UNID_ATEN > 0
    AND DET.DCCA_OID_CABE = CAB.OID_CABE
)
ORDER BY TO_NUMBER(CAB.VAL_EJER_DOCU_INTE),
         CAB.NUM_DOCU_CONT_INTE;


TYPE guiarecord IS RECORD (
    oid_pais            seg_pais.oid_pais%TYPE,
    cod_pais            seg_pais.cod_pais%TYPE,
    oid_clie            mae_clien.oid_clie%TYPE,
    cod_clie            mae_clien.cod_clie%TYPE,
    cod_digi_ctrl       mae_clien.cod_digi_ctrl%TYPE,
    val_nom1            mae_clien.val_nom1%TYPE,
    val_nom2            mae_clien.val_nom2%TYPE,
    val_ape1            mae_clien.val_ape1%TYPE,
    val_ape2            mae_clien.val_ape2%TYPE,
    oid_soli_cabe       ped_solic_cabec.oid_soli_cabe%TYPE,
    val_nume_soli       ped_solic_cabec.val_nume_soli%TYPE,
    fec_fact            ped_solic_cabec.fec_fact%TYPE,
    oid_cabe            fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte  fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    num_docu_lega       fac_docum_conta_cabec.num_docu_lega%TYPE,
    oid_zona            zon_zona.oid_zona%TYPE,
    cod_zona            zon_zona.cod_zona%TYPE,
    oid_tipo_docu       fac_tipo_docum.oid_tipo_docu%TYPE,
    cod_tipo_docu       fac_tipo_docum.cod_tipo_docu%TYPE
);

TYPE guiatype IS TABLE OF guiarecord;
r_guia    guiatype;

-- Cursor para determinar el numero de paginas
CURSOR c_paginas IS
SELECT COR_DOCU_CONT_MATR,
       NUM_PAGI,
       NUM_TOTA_PAGI
FROM (
SELECT X.COR_DOCU_CONT_MATR,
       X.VAL_NUME_SOLI,
       ROW_NUMBER() OVER (PARTITION BY X.VAL_NUME_SOLI ORDER BY X.NUM_DOCU_CONT_INTE) NUM_PAGI,
       (SELECT COUNT(*) FROM IMP_DOCUM_CONTA_MATRI Y WHERE Y.VAL_NUME_SOLI = X.VAL_NUME_SOLI) NUM_TOTA_PAGI
FROM IMP_DOCUM_CONTA_MATRI X
ORDER BY X.COR_DOCU_CONT_MATR
)
WHERE NUM_TOTA_PAGI > 1;

TYPE t_cor_docu_cont_matr   IS TABLE OF  imp_docum_conta_matri.cor_docu_cont_matr%TYPE;
TYPE t_num_pagi             IS TABLE OF  imp_docum_conta_matri.num_pagi%TYPE;
TYPE t_num_tota_pagi        IS TABLE OF  imp_docum_conta_matri.num_tota_pagi%TYPE;

r_cor_docu_cont_matr    t_cor_docu_cont_matr;
r_num_pagi              t_num_pagi;
r_num_tota_pagi         t_num_tota_pagi;

-- Variables locales
l_oidPais               NUMBER;
l_oidPeriodo            NUMBER;
l_oidCanal              NUMBER;
l_oidMarca              NUMBER;
l_correlativo           NUMBER := 1;
l_numeroLoteFacturacion NUMBER;

BEGIN

    -- Obtenemos el OID del periodo
    l_oidPais    := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_PAIS(p_codigoPais);
    l_oidCanal   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CANAL(CODIGO_CANAL);
    l_oidMarca   := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_MARCA(CODIGO_MARCA);
    l_oidPeriodo := GEN_PKG_GENER.GEN_FN_DEVUELVE_ID_CRA_PERIO(p_codigoPeriodo, l_oidMarca, l_oidCanal);

    -- Obtenemos el valor del ultimo numero de lote de facturacion
    IF (p_indicadorEnvioUltimoLote = '1' OR p_indicadorEnvioUltimoLote = 'S') THEN
        BEGIN
          SELECT MAX(con.num_lote_fact)
          INTO l_numeroLoteFacturacion
          FROM ped_solic_cabec con,
               int_lar_tipo_solici_pedido_dis tspd
         WHERE con.perd_oid_peri = l_oidPeriodo
           AND con.fec_fact = to_date(p_fechaFacturacion, 'dd/mm/yyyy')
           AND con.ind_inte_lari_gene = p_indicadorEnvioLarissa
           AND con.ind_ts_no_conso = 0
           AND (con.ind_pedi_prue = 0 OR con.ind_pedi_prue IS NULL)
           AND con.tspa_oid_tipo_soli_pais = tspd.tspa_oid_tipo_soli_pais
           AND con.pais_oid_pais = l_oidPais;
        EXCEPTION
        WHEN OTHERS THEN
            l_numeroLoteFacturacion := NULL;
        END;
    END IF;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE IMP_DOCUM_CONTA_MATRI';

    -- Abrimos el cursor principal
    OPEN c_guias(l_oidPeriodo, l_numeroLoteFacturacion);
    LOOP
        FETCH c_guias BULK COLLECT
        INTO r_guia LIMIT w_filas;

        IF  r_guia.COUNT > 0 THEN
            FOR i IN r_guia.FIRST..r_guia.LAST
            LOOP

                INSERT INTO IMP_DOCUM_CONTA_MATRI(
                cor_docu_cont_matr,
                oid_pais,
                cod_pais,
                oid_clie,
                cod_clie,
                cod_digi_ctrl,
                val_nom1,
                val_nom2,
                val_ape1,
                val_ape2,
                oid_soli_cabe,
                val_nume_soli,
                fec_fact,
                oid_docu_cont_cabe,
                num_docu_cont_inte,
                num_docu_lega,
                oid_zona,
                cod_zona,
                oid_peri,
                cod_peri,
                oid_tipo_docu,
                cod_tipo_docu,
                val_buff
                )
                VALUES(
                l_correlativo,
                r_guia(i).oid_pais,
                r_guia(i).cod_pais,
                r_guia(i).oid_clie,
                r_guia(i).cod_clie,
                r_guia(i).cod_digi_ctrl,
                r_guia(i).val_nom1,
                r_guia(i).val_nom2,
                r_guia(i).val_ape1,
                r_guia(i).val_ape2,
                r_guia(i).oid_soli_cabe,
                r_guia(i).val_nume_soli,
                r_guia(i).fec_fact,
                r_guia(i).oid_cabe,
                r_guia(i).num_docu_cont_inte,
                r_guia(i).num_docu_lega,
                r_guia(i).oid_zona,
                r_guia(i).cod_zona,
                l_oidPeriodo,
                p_codigoPeriodo,
                r_guia(i).oid_tipo_docu,
                r_guia(i).cod_tipo_docu,
                EMPTY_CLOB
                );

                l_correlativo := l_correlativo + 1;

            END LOOP;

        END IF;

        EXIT WHEN c_guias%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_guias;

    -- Abrimos el cursor de actualizacion de numeros de pagina
    OPEN c_paginas;
    LOOP
        FETCH c_paginas BULK COLLECT
        INTO r_cor_docu_cont_matr,
             r_num_pagi,
             r_num_tota_pagi LIMIT w_filas;

        FORALL j IN 1..r_cor_docu_cont_matr.COUNT
        UPDATE imp_docum_conta_matri
        SET num_pagi = r_num_pagi(j),
            num_tota_pagi = r_num_tota_pagi(j)
        WHERE cor_docu_cont_matr = r_cor_docu_cont_matr(j);

        EXIT WHEN c_paginas%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_paginas;

END;


/**************************************************************************
Descripcion         : Proceso que genera el archivo de guias de remision.
Fecha Creación      : 04/05/2010
Fecha Modificacion  : 04/05/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_GUIA_REMIS_MATRI(p_codigoPais VARCHAR2,
                                        p_codigoPeriodo VARCHAR2,
                                        p_fechaFacturacion VARCHAR2,
                                        p_nombreArchivo VARCHAR2,
                                        p_directorio VARCHAR2) IS
BEGIN

    -- Procesamos la informacion generando las guias en el formato correspondiente
    -- TODO -- Solo se ha implementado para Peru, falta el resto!!!!!
    IF (p_codigoPais = 'PE' OR p_codigoPais = 'PEL') THEN
        IMP_PR_GENER_GUIA_REMIS_PEE(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    ELSE
        IMP_PR_GENER_FACTU_MATRI_MXL(p_codigoPais, p_codigoPeriodo, p_fechaFacturacion);
    END IF;

    -- Generamos el archivo matricial
    IMP_PR_GENER_ARCHI_FACTU(p_codigoPais, p_nombreArchivo, p_directorio);

END;

/**************************************************************************
Descripcion         : Proceso que genera el archivo de guias de remision.
Fecha Creación      : 04/05/2010
Fecha Modificacion  : 04/05/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_GUIA_REMIS_MAT_Z(p_oidzona NUMBER) IS

CURSOR c_cons(p_oidperi NUMBER, p_fecfact VARCHAR2, numeroLoteFacturacion NUMBER, indicadorEnvioLarissa NUMBER) IS
select a.oid_soli_cabe
from ped_solic_cabec a
where a.perd_oid_peri=p_oidperi
and a.fec_fact=p_fecfact
and a.num_unid_aten_tota>0
and a.ind_ts_no_conso=0
AND a.IND_INTE_LARI_GENE = indicadorEnvioLarissa
AND (numeroLoteFacturacion IS NULL OR a.NUM_LOTE_FACT = numeroLoteFacturacion)
and a.tspa_oid_tipo_soli_pais in
(
select x.oid_tipo_soli_pais from ped_tipo_solic_pais x, ped_tipo_solic y
where x.tsol_oid_tipo_soli=y.oid_tipo_soli
and y.ind_cons=1 and y.ind_soli_nega=0
)
;

r_cons c_cons%ROWTYPE;



    ln_valtasa        NUMBER(2);
    ln_oidtasa        NUMBER(10);
    ln_valtasaflet    NUMBER(2);
    --ln_oidtasaflet    NUMBER(10);
    --w_filas        NUMBER(12);


    ln_oidperi    NUMBER(10);
    lv_fecfact   varchar2(20);

    lv_codpais   varchar2(20);
    lv_codperi   varchar2(20);
    --w_filas        NUMBER(12);

    l_indicadorEnvioLarissa         VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'indicadorEnvioLarissa');
    l_indicadorEnvioUltimoLote      VARCHAR2(100) := IMP_PKG_PROCE_GENER.IMP_FN_OBTIE_PARAM_IMPRE('LAS', 'indicadorEnvioUltimoLote');
    l_numeroLoteFacturacion         NUMBER;
begin

    SELECT x.oid_peri   into ln_oidperi
                                   FROM cra_perio       x,
                                        seg_perio_corpo y,
                                        bas_ctrl_fact   z
                                  WHERE x.peri_oid_peri = y.oid_peri
                                    AND y.cod_peri = z.cod_peri
                                    AND z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.fec_proc   into lv_fecfact
                                   FROM bas_ctrl_fact   z
                                  WHERE z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.cod_pais   into lv_codpais
                                   FROM cra_perio       x,
                                        seg_perio_corpo y,
                                        bas_ctrl_fact   z
                                  WHERE x.peri_oid_peri = y.oid_peri
                                    AND y.cod_peri = z.cod_peri
                                    AND z.ind_camp_act = 1
                                    AND z.sta_camp = 0;

    SELECT z.cod_peri   into lv_codperi
                                   FROM bas_ctrl_fact   z
                                  WHERE z.ind_camp_act = 1
                                    AND z.sta_camp = 0;


    IF (l_indicadorEnvioUltimoLote = '1' OR l_indicadorEnvioUltimoLote = 'S') THEN
BEGIN
          SELECT MAX(con.num_lote_fact)
          INTO l_numeroLoteFacturacion
          FROM ped_solic_cabec con,
               int_lar_tipo_solici_pedido_dis tspd
         WHERE con.perd_oid_peri = ln_oidperi
           AND con.fec_fact = to_date(lv_fecfact, 'dd/mm/yyyy')
           AND con.ind_inte_lari_gene = l_indicadorEnvioLarissa
           AND con.ind_ts_no_conso = 0
           AND (con.ind_pedi_prue = 0 OR con.ind_pedi_prue IS NULL)
           AND con.tspa_oid_tipo_soli_pais = tspd.tspa_oid_tipo_soli_pais;
           --AND con.pais_oid_pais = l_oidPais;
        EXCEPTION
        WHEN OTHERS THEN
            l_numeroLoteFacturacion := NULL;
        END;
    END IF;



    OPEN c_cons(ln_oidperi,lv_fecfact,l_numeroLoteFacturacion,l_indicadorEnvioLarissa);
    LOOP
    FETCH c_cons INTO r_cons;
    EXIT WHEN c_cons%NOTFOUND;




    -- Procesamos la informacion generando las guias en el formato correspondiente
    -- TODO -- Solo se ha implementado para Peru, falta el resto!!!!!
        IF lv_codpais = 'PE' THEN
            IMP_PR_GENER_GUIA_REMIS_PEE_F(r_cons.oid_soli_cabe, lv_codperi,lv_codpais);
    END IF;

    END LOOP;
    CLOSE c_cons;
END;

/**************************************************************************
Descripcion         : Genera el documento de guia de remision matricial
                      en el formato de Peru Esika.
Fecha Creación      : 04/05/2010
Fecha Modificacion  : 04/05/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_GUIA_REMIS_PEE(p_codigoPais VARCHAR2,
                                      p_codigoPeriodo VARCHAR2,
                                      p_fechaFacturacion VARCHAR2) IS

CURSOR c_guias IS
SELECT DOC.COR_DOCU_CONT_MATR,
       DOC.COD_PAIS,
       DOC.OID_CLIE,
       DOC.COD_CLIE,
       DOC.VAL_NOM1,
       DOC.VAL_NOM2,
       DOC.VAL_APE1,
       DOC.VAL_APE2,
       DOC.OID_SOLI_CABE,
       DOC.VAL_NUME_SOLI,
       DOC.FEC_FACT,
       DOC.OID_DOCU_CONT_CABE,
       DOC.COD_REGI,
       DOC.COD_ZONA,
       DOC.COD_SECC,
       DOC.COD_TERR,
       DOC.COD_PERI,
       DOC.NUM_PAGI,
       DOC.NUM_TOTA_PAGI,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 4) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 3) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 2) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(DOC.OID_PAIS, DOC.OID_CLIE, 1)
       ) VAL_UBIG,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_OBSE,
       NVL((SELECT VAL_I18N FROM GEN_I18N_SICC WHERE ATTR_ENTI = 'PED_TIPO_SOLIC' AND IDIO_OID_IDIO = 1 AND VAL_OID = TSP.TSOL_OID_TIPO_SOLI), ' ') DES_TIPO_SOLI
FROM IMP_DOCUM_CONTA_MATRI DOC,
     FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     PED_TIPO_SOLIC_PAIS TSP
WHERE DOC.OID_DOCU_CONT_CABE = CAB.OID_CABE
AND CAB.SOCA_OID_SOLI_CABE = CON.OID_SOLI_CABE
AND CON.TSPA_OID_TIPO_SOLI_PAIS = TSP.OID_TIPO_SOLI_PAIS
ORDER BY COR_DOCU_CONT_MATR;

TYPE guiarecord IS RECORD (
    cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    imp_docum_conta_matri.oid_clie%TYPE,
    cod_clie                    imp_docum_conta_matri.cod_clie%TYPE,
    val_nom1                    imp_docum_conta_matri.val_nom1%TYPE,
    val_nom2                    imp_docum_conta_matri.val_nom2%TYPE,
    val_ape1                    imp_docum_conta_matri.val_ape1%TYPE,
    val_ape2                    imp_docum_conta_matri.val_ape2%TYPE,
    oid_soli_cabe               imp_docum_conta_matri.oid_soli_cabe%TYPE,
    val_nume_soli               imp_docum_conta_matri.val_nume_soli%TYPE,
    fec_fact                    imp_docum_conta_matri.fec_fact%TYPE,
    oid_docu_cont_cabe          imp_docum_conta_matri.oid_docu_cont_cabe%TYPE,
    cod_regi                    imp_docum_conta_matri.cod_regi%TYPE,
    cod_zona                    imp_docum_conta_matri.cod_zona%TYPE,
    cod_secc                    imp_docum_conta_matri.cod_secc%TYPE,
    cod_terr                    imp_docum_conta_matri.cod_terr%TYPE,
    cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    num_pagi                    imp_docum_conta_matri.num_pagi%TYPE,
    num_tota_pagi               imp_docum_conta_matri.num_tota_pagi%TYPE,
    val_ubig                    varchar2(1000),
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    des_tipo_soli               varchar2(1000)
);

TYPE guiatype IS TABLE OF guiarecord;
r_guia    guiatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.OID OID_DETA,
       DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       CASE
       WHEN PSP.VAL_CODI_VENT IS NOT NULL THEN
           SUBSTR(NVL(SPC.COD_PERI, p_codigoPeriodo), -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       ELSE
           SUBSTR(NVL(SPC.COD_PERI, p_codigoPeriodo), -2, 2) || SUBSTR(MP.COD_SAP, 1, 5) || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       END VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD,
       nvl((select a.lot_sap from sap_traza_lote a, mae_produ b where b.oid_prod=det.prod_oid_prod
       and b.cod_sap=a.cod_sap and rownum=1
       ),' ') LOTE_PROD
FROM FAC_DOCUM_CONTA_LINEA DET,
     MAE_PRODU MP,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     PRE_MATRI_FACTU PMF,
     PRE_MATRI_FACTU_CABEC PMFC,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND DET.PROD_OID_PROD = MP.OID_PROD
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND POD.OID_DETA_OFER = PMF.OFDE_OID_DETA_OFER (+)
AND PMF.MFCA_OID_CABE = PMFC.OID_CABE (+)
AND PMFC.PERD_OID_PERI = CP.OID_PERI (+)
AND CP.PERI_OID_PERI = SPC.OID_PERI (+)
AND DET.NUM_UNID_ATEN > 0
AND NVL(DET.IND_NO_IMPR, 0) = 0
AND DET.DCCA_OID_CABE = oidCabecera
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    oid_deta                    fac_docum_conta_linea.oid%TYPE,
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE,
    lote_prod                    gen_i18n_sicc_pais.val_i18n%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;

l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalUnidades             NUMBER := 0;

-- Variables para almacenar las direcciones
l_direccion1       VARCHAR2(500) := 'AV. SAN GENARO 150 URB MOLITALIA LOS OLIVOS/LIMA/LIMA';
l_direccion1Linea1 VARCHAR2(500) := ' ';
l_direccion1Linea2 VARCHAR2(500) := ' ';
l_direccion2       VARCHAR2(500) := ' ';
l_direccion2Linea1 VARCHAR2(500) := ' ';
l_direccion2Linea2 VARCHAR2(500) := ' ';

l_CLOB                      CLOB;

lv_loteprod VARCHAR2(10):=nvl(sto_pkg_gener.sto_fn_obten_param_ocr(p_codigoPais,'STO_LOTE_PROD'),'N');


BEGIN

    -- Abrimos el cursor principal
    OPEN c_guias;
    LOOP
        FETCH c_guias BULK COLLECT
        INTO r_guia LIMIT w_filas;

        IF  r_guia.COUNT > 0 THEN
            FOR i IN r_guia.FIRST..r_guia.LAST
            LOOP

                -- Obtenemos la referencia al CLOB
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_guia(i).cor_docu_cont_matr
                FOR UPDATE;

                -- Creamos el texto de la guia
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG.' || LPAD(r_guia(i).num_pagi, 3) || ' DE ' || LPAD(r_guia(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Fecha de Facturacion
                l_textoActual := LPAD(' ', 10) || TO_CHAR(r_guia(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Descripcion de la solicitud
                l_textoActual := LPAD(' ', 27) || SUBSTR(r_guia(i).des_tipo_soli, 1, 22);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio
                l_textoActual := LPAD(' ', 10) || LPAD(r_guia(i).cod_zona, 4, '0') || '-' || LPAD(0, 6, '0');
                l_textoActual := l_textoActual || LPAD(' ', 6) || SUBSTR(r_guia(i).des_tipo_soli, 23, 22);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo Cliente
                l_textoActual := LPAD(' ', 10) || r_guia(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y Numero de Solicitud
                l_textoActual := LPAD(' ', 10) || RPAD(r_guia(i).cod_peri, 17, ' ') || r_guia(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direcciones
                l_direccion1Linea1 := SUBSTR(l_direccion1,  1, 40);
                l_direccion1Linea2 := SUBSTR(l_direccion1, 41, 40);

                l_direccion2Linea1 := ' ';
                l_direccion2Linea2 := ' ';

                IF r_guia(i).val_dire_comp IS NOT NULL OR r_guia(i).val_ubig IS NOT NULL THEN

                    l_direccion2 := r_guia(i).val_dire_comp || ' ' || r_guia(i).val_ubig;

                    l_direccion2Linea1 := SUBSTR(l_direccion2, 1, 38);
                    IF LENGTH(l_direccion2) > 38 THEN
                        l_direccion2Linea2 := SUBSTR(l_direccion2, 39, 38);
                    END IF;

                END IF;

                l_textoActual := LPAD(' ', 2) || RPAD(l_direccion1Linea1, 41) || RPAD(l_direccion2Linea1, 40);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                l_textoActual := LPAD(' ', 2) || RPAD(l_direccion1Linea2, 41) || RPAD(l_direccion2Linea2, 40);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_guia(i).val_ape1 || ' ' || r_guia(i).val_ape2 || ', ' || r_guia(i).val_nom1 || ' ' || r_guia(i).val_nom2);
                l_textoActual := LPAD(' ', 10) || l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Constante
                l_textoActual := LPAD('4', 78);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE GUIA
                -- Abrimos el cursor de detalles
                l_totalUnidades := 0;

                    -- Pasamos el tipo de detalle al cursor
                OPEN c_detalle(r_guia(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN

                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := '  ' || RPAD(r_detalle(j).val_codi_vent, 14) || RPAD(r_detalle(j).des_prod, 35) || LPAD(r_detalle(j).num_unid_aten , 10);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                            if lv_loteprod='S' then

                                l_textoActual := 'LOTE:' || r_detalle(j).lote_prod;
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                                --l_contadorDetalles := l_contadorDetalles + 1;

                            end if;


                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- PIE DEL DETALLE
                -- Agregamos el separador
                l_textoActual := LPAD('---------', 61);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total de unidades
                l_textoActual := LPAD('TOTAL', 51) || LPAD(l_totalUnidades, 10);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_guias%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_guias;

END;

/**************************************************************************
Descripcion         : Genera el documento de guia de remision matricial
                      en el formato de Peru Esika.
Fecha Creación      : 04/05/2010
Fecha Modificacion  : 04/05/2010
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_GUIA_REMIS_PEE_F(p_oidsoli NUMBER, p_codperi varchar2, p_codpais varchar2) IS

CURSOR c_guias IS
SELECT --DOC.COR_DOCU_CONT_MATR,
       --DOC.COD_PAIS,
       MC.OID_CLIE,
       MC.COD_CLIE,
       MC.COD_DIGI_CTRL,
       MC.VAL_NOM1,
       MC.VAL_NOM2,
       MC.VAL_APE1,
       MC.VAL_APE2,
       CON.OID_SOLI_CABE,
       CON.VAL_NUME_SOLI,
       CON.FEC_FACT,
       CON.VAL_IMPO_REDO_LOCA,
       --CON.VAL_INDI_IMPU,
       CON.VAL_TASA_IMPU,
       CAB.OID_CABE,
       CAB.NUM_DOCU_CONT_INTE,
       ZR.COD_REGI,
       ZZ.COD_ZONA,
       ZS.COD_SECC,
       ZT.COD_TERR,
       --DOC.COD_PERI,
       --DOC.FEC_VENC,
       FTD.COD_TIPO_DOCU,
       1 NUM_PAGI,
       1 NUM_TOTA_PAGI,
       TRIM('/' FROM
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 4) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 3) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 2) || '/' ||
           GEN_PKG_GENER.GEN_FN_DESCR_ESTRU_GEOPO(CON.PAIS_OID_PAIS, MC.OID_CLIE, 1)
       ) VAL_UBIG,
       CAB.VAL_NUME_IDEN_FISC,
       CAB.VAL_DIRE_COMP,
       CAB.VAL_TOTA_PAGA_LOCA,
       CAB.IMP_IMPU_TOTA_LOCA,
       CAB.VAL_PREC_CONT_SIN_IMPU_TOTA,
       CAB.VAL_PREC_CONT_TOTA_LOCA,
       CAB.IMP_DESC_TOTA_LOCA,
       CAB.IMP_DES1_SIN_IMPU_TOTA,
       CAB.IMP_DES3_SIN_IMPU_TOTA,
       CAB.IMP_FLET_TOTA_LOCA,
       CAB.IMP_FLET_IMPU_TOTA_LOCA,
       CAB.IMP_REDO_LOCA,
       CAB.VAL_OBSE,
       NVL((SELECT VAL_I18N FROM GEN_I18N_SICC WHERE ATTR_ENTI = 'PED_TIPO_SOLIC' AND IDIO_OID_IDIO = 1 AND VAL_OID = CON.Tspa_Oid_Tipo_Soli_Pais), ' ') DES_TIPO_SOLI
FROM FAC_DOCUM_CONTA_CABEC CAB,
     PED_SOLIC_CABEC CON,
     MAE_CLIEN_DIREC MCD,
     MAE_CLIEN_IDENT MCI,
     MAE_CLIEN MC,
     ZON_TERRI_ADMIN ZTA,
     ZON_TERRI ZT,
     ZON_SECCI ZS,
     ZON_ZONA ZZ,
     ZON_REGIO ZR,
     FAC_TIPO_DOCUM FTD
WHERE CAB.SOCA_OID_SOLI_CABE=CON.OID_SOLI_CABE
AND CON.OID_SOLI_CABE=p_oidsoli
AND CAB.CLDI_OID_CLIE_DIRE=MCD.OID_CLIE_DIRE
AND MCD.CLIE_OID_CLIE=MC.OID_CLIE
AND MC.OID_CLIE=MCI.CLIE_OID_CLIE
AND CON.ZTAD_OID_TERR_ADMI=ZTA.OID_TERR_ADMI
AND ZTA.TERR_OID_TERR=ZT.OID_TERR
AND ZTA.ZSCC_OID_SECC=ZS.OID_SECC
AND ZTA.IND_BORR=0
AND ZS.ZZON_OID_ZONA=ZZ.OID_ZONA
AND ZZ.ZORG_OID_REGI=ZR.OID_REGI
AND CAB.TIDO_OID_TIPO_DOCU=8
;

TYPE guiarecord IS RECORD (
    --cor_docu_cont_matr          imp_docum_conta_matri.cor_docu_cont_matr%TYPE,
    --cod_pais                    imp_docum_conta_matri.cod_pais%TYPE,
    oid_clie                    MAE_CLIEN.oid_clie%TYPE,
    cod_clie                    MAE_CLIEN.cod_clie%TYPE,
    cod_digi_ctrl               MAE_CLIEN.cod_digi_ctrl%TYPE,
    val_nom1                    MAE_CLIEN.val_nom1%TYPE,
    val_nom2                    MAE_CLIEN.val_nom2%TYPE,
    val_ape1                    MAE_CLIEN.val_ape1%TYPE,
    val_ape2                    MAE_CLIEN.val_ape2%TYPE,
    oid_soli_cabe               PED_SOLIC_CABEC.oid_soli_cabe%TYPE,
    val_nume_soli               PED_SOLIC_CABEC.val_nume_soli%TYPE,
    fec_fact                    PED_SOLIC_CABEC.fec_fact%TYPE,
    val_impo_redo_cons          PED_SOLIC_CABEC.val_impo_redo_LOCA%TYPE,
    --val_indi_impu               imp_docum_conta_matri.val_indi_impu%TYPE,
    val_tasa_impu               PED_SOLIC_CABEC.val_tasa_impu%TYPE,
    oid_docu_cont_cabe          fac_docum_conta_cabec.oid_cabe%TYPE,
    num_docu_cont_inte          fac_docum_conta_cabec.num_docu_cont_inte%TYPE,
    cod_regi                    ZON_REGIO.cod_regi%TYPE,
    cod_zona                    ZON_ZONA.cod_zona%TYPE,
    cod_secc                    ZON_SECCI.cod_secc%TYPE,
    cod_terr                    ZON_TERRI.cod_terr%TYPE,
    --cod_peri                    imp_docum_conta_matri.cod_peri%TYPE,
    --fec_venc                    imp_docum_conta_matri.fec_venc%TYPE,
    cod_tipo_docu               FAC_TIPO_DOCUM.cod_tipo_docu%TYPE,
    num_pagi                    number(3),
    num_tota_pagi               NUMBER(3),
    val_ubig                    varchar2(1000),
    val_nume_iden_fisc          fac_docum_conta_cabec.val_nume_iden_fisc%TYPE,
    val_dire_comp               fac_docum_conta_cabec.val_dire_comp%TYPE,
    val_tota_paga_loca          fac_docum_conta_cabec.val_tota_paga_loca%TYPE,
    imp_impu_tota_loca          fac_docum_conta_cabec.imp_impu_tota_loca%TYPE,
    val_prec_cont_sin_impu_tota fac_docum_conta_cabec.val_prec_cont_sin_impu_tota%TYPE,
    val_prec_cont_tota_loca     fac_docum_conta_cabec.val_prec_cont_tota_loca%TYPE,
    imp_desc_tota_loca          fac_docum_conta_cabec.imp_desc_tota_loca%TYPE,
    imp_des1_sin_impu_tota      fac_docum_conta_cabec.imp_des1_sin_impu_tota%TYPE,
    imp_des3_sin_impu_tota      fac_docum_conta_cabec.imp_des3_sin_impu_tota%TYPE,
    imp_flet_tota_loca          fac_docum_conta_cabec.imp_flet_tota_loca%TYPE,
    imp_flet_impu_tota_loca     fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    imp_redo_loca               fac_docum_conta_cabec.imp_flet_impu_tota_loca%TYPE,
    val_obse                    fac_docum_conta_cabec.val_obse%TYPE,
    des_tipo_soli               gen_i18n_sicc_comun.val_i18n%TYPE
);

TYPE guiatype IS TABLE OF guiarecord;
r_guia    guiatype;

CURSOR c_detalle(oidCabecera NUMBER) IS
SELECT DET.OID OID_DETA,
       DET.NUM_LINEA,
       DET.NUM_UNID_ATEN,
       CASE
       WHEN PSP.VAL_CODI_VENT IS NOT NULL THEN
           SUBSTR(NVL(SPC.COD_PERI, p_codperi), -2, 2) || PSP.VAL_CODI_VENT || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       ELSE
           SUBSTR(NVL(SPC.COD_PERI, p_codperi), -2, 2) || SUBSTR(MP.COD_SAP, 1, 5) || DECODE(PSP.VAL_PREC_CATA_UNIT_LOCA, 0, '0', '8')
       END VAL_CODI_VENT,
       TRIM((SELECT VAL_I18N FROM GEN_I18N_SICC_PAIS WHERE ATTR_ENTI = 'MAE_PRODU' AND IDIO_OID_IDIO = 1 AND VAL_OID = DET.PROD_OID_PROD)) DES_PROD
FROM FAC_DOCUM_CONTA_LINEA DET,
     MAE_PRODU MP,
     PED_SOLIC_POSIC PSP,
     PRE_OFERT_DETAL POD,
     PRE_MATRI_FACTU PMF,
     PRE_MATRI_FACTU_CABEC PMFC,
     CRA_PERIO CP,
     SEG_PERIO_CORPO SPC
WHERE DET.SOPO_OID_SOLI_POSI = PSP.OID_SOLI_POSI
AND DET.PROD_OID_PROD = MP.OID_PROD
AND PSP.OFDE_OID_DETA_OFER = POD.OID_DETA_OFER (+)
AND POD.OID_DETA_OFER = PMF.OFDE_OID_DETA_OFER (+)
AND PMF.MFCA_OID_CABE = PMFC.OID_CABE (+)
AND PMFC.PERD_OID_PERI = CP.OID_PERI (+)
AND CP.PERI_OID_PERI = SPC.OID_PERI (+)
AND DET.NUM_UNID_ATEN > 0
AND NVL(DET.IND_NO_IMPR, 0) = 0
AND DET.DCCA_OID_CABE = oidCabecera
ORDER BY DET.NUM_LINEA;

TYPE detallerecord IS RECORD (
    oid_deta                    fac_docum_conta_linea.oid%TYPE,
    num_linea                   fac_docum_conta_linea.num_linea%TYPE,
    num_unid_aten               fac_docum_conta_linea.num_unid_aten%TYPE,
    val_codi_vent               varchar2(15),
    des_prod                    gen_i18n_sicc_pais.val_i18n%TYPE
);

TYPE detalletype IS TABLE OF detallerecord;
r_detalle    detalletype;

l_textoActual               VARCHAR2(1000) := '';
l_textoSaldoNumerico        VARCHAR2(100) := '';
l_textoSaldoLetras          VARCHAR2(100) := '';
l_nombreCompleto            VARCHAR2(100) := '';
l_cambioLineaEspacioBlanco  VARCHAR2(5) := CHR(10) || ' ';
l_retornoCarroEspacioBlanco VARCHAR2(5) := CHR(13) || ' ';
l_cambioLinea               VARCHAR2(1) := CHR(10);
l_retornoCarro              VARCHAR2(1) := CHR(13);

l_totalUnidades             NUMBER := 0;

-- Variables para almacenar las direcciones
l_direccion1       VARCHAR2(500) := 'AV. SAN GENARO 150 URB MOLITALIA LOS OLIVOS/LIMA/LIMA';
l_direccion1Linea1 VARCHAR2(500) := ' ';
l_direccion1Linea2 VARCHAR2(500) := ' ';
l_direccion2       VARCHAR2(500) := ' ';
l_direccion2Linea1 VARCHAR2(500) := ' ';
l_direccion2Linea2 VARCHAR2(500) := ' ';

l_CLOB                      CLOB;

BEGIN

    -- Abrimos el cursor principal
    OPEN c_guias;
    LOOP
        FETCH c_guias BULK COLLECT
        INTO r_guia LIMIT w_filas;

        IF  r_guia.COUNT > 0 THEN
            FOR i IN r_guia.FIRST..r_guia.LAST
            LOOP

                -- Obtenemos la referencia al CLOB
                /*
                SELECT VAL_BUFF
                INTO l_CLOB
                FROM IMP_DOCUM_CONTA_MATRI
                WHERE COR_DOCU_CONT_MATR = r_guia(i).cor_docu_cont_matr
                FOR UPDATE;
                */

                INSERT INTO Imp_Paque_Docum_Factu_Matri (
                COR_FACT,
                COD_CONS,
                VAL_NUME_SOLI,
                VAL_BUFF)
                VALUES(
                r_guia(i).oid_soli_cabe,
                r_guia(i).cod_clie,
                r_guia(i).val_nume_soli,
                EMPTY_CLOB())
                RETURNING VAL_BUFF INTO l_clob;


                -- Creamos el texto de la guia
                -- Nro de Pagina
                l_textoActual := LPAD(' ', 67) || 'PAG.' || LPAD(r_guia(i).num_pagi, 3) || ' DE ' || LPAD(r_guia(i).num_tota_pagi, 3);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Fecha de Facturacion
                l_textoActual := LPAD(' ', 10) || TO_CHAR(r_guia(i).fec_fact, 'DD/MM/YYYY');
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Descripcion de la solicitud
                l_textoActual := LPAD(' ', 27) || SUBSTR(r_guia(i).des_tipo_soli, 1, 22);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Zona - Territorio
                l_textoActual := LPAD(' ', 10) || LPAD(r_guia(i).cod_zona, 4, '0') || '-' || LPAD(0, 6, '0');
                l_textoActual := l_textoActual || LPAD(' ', 6) || SUBSTR(r_guia(i).des_tipo_soli, 23, 22);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Codigo Cliente
                l_textoActual := LPAD(' ', 10) || r_guia(i).cod_clie;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Campaña y Numero de Solicitud
                l_textoActual := LPAD(' ', 10) || RPAD(p_codperi, 17, ' ') || r_guia(i).val_nume_soli;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Direcciones
                l_direccion1Linea1 := SUBSTR(l_direccion1,  1, 40);
                l_direccion1Linea2 := SUBSTR(l_direccion1, 41, 40);

                l_direccion2Linea1 := ' ';
                l_direccion2Linea2 := ' ';

                IF r_guia(i).val_dire_comp IS NOT NULL OR r_guia(i).val_ubig IS NOT NULL THEN

                    l_direccion2 := r_guia(i).val_dire_comp || ' ' || r_guia(i).val_ubig;

                    l_direccion2Linea1 := SUBSTR(l_direccion2, 1, 38);
                    IF LENGTH(l_direccion2) > 38 THEN
                        l_direccion2Linea2 := SUBSTR(l_direccion2, 39, 38);
                    END IF;

                END IF;

                l_textoActual := LPAD(' ', 2) || RPAD(l_direccion1Linea1, 41) || RPAD(l_direccion2Linea1, 40);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                l_textoActual := LPAD(' ', 2) || RPAD(l_direccion1Linea2, 41) || RPAD(l_direccion2Linea2, 40);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Nombre de la Cliente
                l_nombreCompleto := TRIM(r_guia(i).val_ape1 || ' ' || r_guia(i).val_ape2 || ', ' || r_guia(i).val_nom1 || ' ' || r_guia(i).val_nom2);
                l_textoActual := LPAD(' ', 10) || l_nombreCompleto;
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Constante
                l_textoActual := LPAD('4', 78);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- DETALLE DE GUIA
                -- Abrimos el cursor de detalles
                l_totalUnidades := 0;

                    -- Pasamos el tipo de detalle al cursor
                OPEN c_detalle(r_guia(i).oid_docu_cont_cabe);
                LOOP
                    FETCH c_detalle BULK COLLECT
                    INTO r_detalle LIMIT w_filas;

                    IF  r_detalle.COUNT > 0 THEN

                        FOR j IN r_detalle.FIRST..r_detalle.LAST
                        LOOP

                            -- Escribimos la linea de detalle
                            l_textoActual := '  ' || RPAD(r_detalle(j).val_codi_vent, 14) || RPAD(r_detalle(j).des_prod, 35) || LPAD(r_detalle(j).num_unid_aten , 10);

                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                            DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                            l_totalUnidades := l_totalUnidades + r_detalle(j).num_unid_aten;

                        END LOOP;
                    END IF;
                    EXIT WHEN c_detalle%NOTFOUND;
                END LOOP;

                -- Cerramos el cursor de detalles
                CLOSE c_detalle;

                -- PIE DEL DETALLE
                -- Agregamos el separador
                l_textoActual := LPAD('---------', 61);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);

                -- Total de unidades
                l_textoActual := LPAD('TOTAL', 51) || LPAD(l_totalUnidades, 10);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_textoActual), l_textoActual);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarroEspacioBlanco), l_retornoCarroEspacioBlanco);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_cambioLinea), l_cambioLinea);
                DBMS_LOB.writeappend(l_CLOB, LENGTH(l_retornoCarro), l_retornoCarro);

            END LOOP;

        END IF;

        EXIT WHEN c_guias%NOTFOUND;
    END LOOP;
    -- Cerramos el cursor
    CLOSE c_guias;

END;


/**************************************************************************
Descripcion         : Genera el archivo de la factura.
Fecha Creación      : 16/11/2009
Fecha Modificacion  : 16/11/2009
Autor               : Carlos Hurtado Ramirez - cahurtado@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
PROCEDURE IMP_PR_GENER_ARCHI_FACTU_GR2(p_codigoPais VARCHAR2,
                                   p_nombreArchivo VARCHAR2,
                                   p_directorio VARCHAR2) IS

l_output         UTL_FILE.file_type;
l_amt            NUMBER DEFAULT 4000;
l_offset         NUMBER DEFAULT 1;
position         INTEGER := 1;
l_length         NUMBER := 0;
x                VARCHAR2(32000);
t_Clob           CLOB;

-- Variable a contener el mensaje de la excepcion a lanzar
l_mensajeError VARCHAR2(500);

l_inicioArchivo VARCHAR2(100);
l_finArchivo    VARCHAR2(100);
l_contador      NUMBER := 0;
l_total         NUMBER := 0;

CURSOR c_documentos IS
SELECT VAL_BUFF
FROM Imp_Paque_Docum_Factu_Matri
--WHERE COD_PAIS = p_codigoPais
ORDER BY COR_fact;

BEGIN

    l_inicioArchivo := IMP_FN_INICI_ARCHI_FACTU(p_codigoPais);
    l_finArchivo := IMP_FN_FIN_ARCHI_FACTU(p_codigoPais);

    -- Obtenemos la referencia al archivo
    l_output := UTL_FILE.fopen (p_directorio, p_nombreArchivo, 'wb', 32760);

    -- Escribimos los caracteres de inicio de impresio
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_inicioArchivo), TRUE);

    -- Iteramos sobre el cursor
    OPEN c_documentos;
    LOOP
        FETCH c_documentos INTO t_clob;
        EXIT WHEN c_documentos%NOTFOUND;

        l_length := DBMS_LOB.GETLENGTH(T_CLOB);
        position := 1;
        l_offset := 1;
        l_amt := 4000;

        -- Escribimos los bloques en el archivo
        WHILE (l_offset < l_length) LOOP
            IF (l_amt > (l_length - l_offset)) THEN l_amt := l_length - l_offset + 1; END IF;
            dbms_lob.read (t_clob, l_amt, l_offset, x);
            UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(x), TRUE);
            l_offset := l_offset + l_amt;
            position := position + 4000;
            x := NULL;
        END LOOP;

        l_contador := l_contador + 1;

        -- Salto de pagina
        UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(CHR(12)), TRUE);

    END LOOP;

    -- Escribimos los caracteres de fin de impresion
    UTL_FILE.PUT_raw(l_output, utl_raw.cast_to_raw(l_finArchivo), TRUE);

    -- Cerramos el cursor
    CLOSE c_documentos;
    -- Cerramos el archivo
    UTL_FILE.fclose (l_output);

    EXCEPTION
    WHEN UTL_FILE.INTERNAL_ERROR THEN
        l_mensajeError:='ERROR INTERNO DEL MANEJADOR DE ARCHIVOS';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_FILEHANDLE THEN
        l_mensajeError:='EL ARCHIVO NO ESTA ABIERTO O NO ES VALIDO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_MODE THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.WRITE_ERROR THEN
           l_mensajeError:='ERROR AL ESCRIBIR EN EL ARCHIVO O NO HAY ESPACIO EN DISCO';
           RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_OPERATION THEN
        l_mensajeError:='MODO INVALIDO AL ABRIR EL ARCHIVO';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN UTL_FILE.INVALID_PATH THEN
        l_mensajeError:='ERROR EN LA RUTA DEL ARCHIVO, ARCHIVO NO ES ACCESIBLE';
        RAISE_APPLICATION_ERROR(-20123, l_mensajeError);
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20123, 'ERROR IMP_PR_GENER_ARCHI_FACTU2: '||substr(SQLERRM,1,250));

END;


/**************************************************************************
Descripcion         : Valida la existencia de documentos con numeros de
                      documento inteno en null y de encontrar registros, procede
                      con la resecuenciación..
Fecha Creación      : 10/03/2011
Fecha Modificacion  : 10/03/2011
Autor               :Jorge Florencio - jflorencio@belcorp.biz
Versión             : Final (Alfa|Final)
***************************************************************************/
   PROCEDURE IMP_PR_REGEN_SECUE_DOCUM_INTER(
      p_oidPais NUMBER,
      p_codigoTipoDocumento VARCHAR2,
      p_oidDocumentoInicial NUMBER)
   IS

   CURSOR c_notasConSalto(
      numeroDocumentoInternoInicial NUMBER,
      oidDocuCabeInic NUMBER,
      oidDocuCabeFina NUMBER)
   IS
      SELECT
         oid_cabe,
         oid_regi,
         numeroDocumentoInternoInicial -1 + ROWNUM num_docu_cont_inte
      FROM (
         SELECT
            con.clie_oid_clie,
            con.oid_soli_cabe,
            cab.oid_cabe,
            cab.val_ejer_docu_inte,
            cab.num_docu_cont_inte,
            cab.val_seri_docu_lega,
            cab.num_docu_lega,
            cab.fec_emis,
            cab.fec_fact,
            ven.oid_regi,
            ven.val_ejer_docu_inte,
            ven.num_docu_cont_inte,
            ven.val_seri_docu_lega
     FROM
        fac_docum_conta_cabec cab,
        fac_regis_unico_venta ven,
        fac_tipo_docum ftd,
        ped_solic_cabec con,
        ped_solic_cabec_secue sec
      WHERE cab.tido_oid_tipo_docu = ftd.oid_tipo_docu
           AND ftd.cod_tipo_docu = p_codigoTipoDocumento
           AND cab.soca_oid_soli_cabe = con.oid_soli_cabe
           AND cab.oid_cabe = ven.dcca_oid_cabe
           AND con.oid_soli_cabe = sec.soca_oid_soli_cabe
           AND cab.oid_cabe > oidDocuCabeInic
           AND cab.oid_cabe <= oidDocuCabeFina
           AND ((cab.num_docu_cont_inte > numeroDocumentoInternoInicial) OR
                    (cab.num_docu_cont_inte IS NULL))
      ORDER BY
         con.num_lote_fact,
         sec.num_secu_zona_ruta,
         sec.val_secu_ruta_terr,
         con.clie_oid_clie,
         cab.oid_cabe,
         cab.fec_fact);

-- Cursor para la actualizacion de los numeros de documento en null
   CURSOR c_notasSinNumeroInterno(
      numeroDocumentoInternoInicial NUMBER,
      oidDocuCabeInic NUMBER,
      oidDocuCabeFina NUMBER,
      fecFactNulo DATE) IS
      SELECT
         oid_cabe,
         oid_regi,
         numeroDocumentoInternoInicial + ROWNUM NUM_DOCU_CONT_INTE
      FROM (
         SELECT
            con.clie_oid_clie,
            con.oid_soli_cabe,
            cab.oid_cabe,
            cab.val_ejer_docu_inte,
            cab.num_docu_cont_inte,
            cab.val_seri_docu_lega,
            cab.num_docu_lega,
            cab.fec_emis,
            cab.fec_fact,
            ven.oid_regi,
            ven.val_ejer_docu_inte,
            ven.num_docu_cont_inte,
            ven.val_seri_docu_lega
     FROM
        fac_docum_conta_cabec cab,
        fac_regis_unico_venta ven,
        fac_tipo_docum ftd,
        ped_solic_cabec con,
        ped_solic_cabec_secue sec
      WHERE cab.tido_oid_tipo_docu = ftd.oid_tipo_docu
           AND ftd.cod_tipo_docu = p_codigoTipoDocumento
           AND cab.soca_oid_soli_cabe = con.oid_soli_cabe
           AND cab.oid_cabe = ven.dcca_oid_cabe
           AND con.oid_soli_cabe = sec.soca_oid_soli_cabe
           AND cab.oid_cabe > oidDocuCabeInic
           AND cab.oid_cabe < oidDocuCabeFina
           AND (( cab.num_docu_cont_inte IS NULL ) OR
             ( cab.fec_fact > fecFactNulo))
      ORDER BY
         con.num_lote_fact,
         sec.num_secu_zona_ruta,
         sec.val_secu_ruta_terr,
         con.clie_oid_clie,
         cab.oid_cabe);

      TYPE t_oid_cabe IS TABLE OF fac_docum_conta_cabec.oid_cabe%TYPE;
      TYPE t_oid_regi IS TABLE OF fac_regis_unico_venta.oid_regi%TYPE;
      TYPE t_num_docu_cont_inte IS TABLE OF fac_docum_conta_cabec.num_docu_cont_inte%TYPE;

      v_oid_cabe t_oid_cabe;
      v_oid_regi t_oid_regi;
      v_num_docu_cont_inte t_num_docu_cont_inte;

      i    BINARY_INTEGER := 0;
      j    BINARY_INTEGER := 0;

      l_cantidadNC                   NUMBER := 0;
       l_cantidadNDI             NUMBER := 0;
      l_contadorNulos               NUMBER := 0;
      l_oidDocuCabeFina          fac_docum_conta_cabec.oid_cabe%TYPE;
      l_oidTipoDocu                  fac_tipo_docum.oid_tipo_docu%TYPE;
      l_oidDocumSubac             fac_docum_subac.oid_docu_suba%TYPE;
      l_numDocuInteInic           fac_docum_subac.val_ulti_nume_docu_inte%TYPE;
      l_numDocuInteFina           fac_docum_subac.val_ulti_nume_docu_inte%TYPE;
      l_numDocuInteSalt           fac_docum_subac.val_ulti_nume_docu_inte%TYPE;
      l_valorSerieDocumento    fac_docum_subac.val_seri_docu_lega%TYPE;
      l_ultimoNumDocInterno   fac_docum_subac.val_ulti_nume_docu_inte%TYPE;
      l_fecFactNulo                    fac_docum_conta_cabec.fec_fact%TYPE;

   BEGIN

      SELECT ftd.oid_tipo_docu
      INTO l_oidTipoDocu
      FROM fac_tipo_docum ftd
      WHERE ftd.cod_tipo_docu = p_codigoTipoDocumento;

      SELECT
         COUNT(*),
         MIN(cab.num_docu_cont_inte),
         MAX(cab.num_docu_cont_inte),
         MAX(cab.oid_cabe)
      INTO
         l_cantidadNC,
         l_numDocuInteInic,
         l_numDocuInteFina,
         l_oidDocuCabeFina
      FROM
         fac_docum_conta_cabec cab
     WHERE cab.pais_oid_pais = p_oidPais
           AND cab.tido_oid_tipo_docu = l_oidTipoDocu
          AND cab.num_docu_cont_inte IS NOT NULL
          AND cab.oid_cabe > p_oidDocumentoInicial;

      l_cantidadNDI := l_numDocuInteFina - l_numDocuInteInic + 1;

      -- Verificamos si hay saltos --
      IF l_cantidadNC <> l_cantidadNDI   THEN

         -- Ubicando el punto donde se genera el Salto
         SELECT numDocuInteCorre
         INTO  l_numDocuInteSalt
         FROM (
            SELECT
               ROWNUM secuNume,
               (l_numDocuInteInic - 1) + rownum numDocuInteCorre,
               oid_cabe,
               num_docu_cont_inte,
               secuDocuInte
           FROM
             ( SELECT
                   cab.oid_cabe,
                   cab.num_docu_cont_inte,
                   cab.num_docu_cont_inte - (l_numDocuInteInic - 1) secuDocuInte
               FROM
                  fac_docum_conta_cabec cab
               WHERE cab.pais_oid_pais = p_oidPais
                    AND cab.tido_oid_tipo_docu = l_oidTipoDocu
                    AND cab.num_docu_cont_inte  IS NOT NULL
                    AND cab.oid_cabe > p_oidDocumentoInicial
                    AND cab.oid_cabe <= l_oidDocuCabeFina
               ORDER BY cab.num_docu_cont_inte ASC))
          WHERE secuNume <> secuDocuInte
          AND ROWNUM < 2;

         SELECT
            fds.oid_docu_suba,
            fds.val_seri_docu_lega
         INTO
             l_oidDocumSubac,
             l_valorSerieDocumento
        FROM fac_docum_subac fds,
             fac_tipo_docum ftd,
             seg_subac ss
        WHERE fds.tido_oid_tipo_docu = ftd.oid_tipo_docu
          AND ftd.cod_tipo_docu = p_codigoTipoDocumento
          AND fds.sbac_oid_sbac = ss.oid_sbac
          AND ss.cod_sbac = '000' -- Gerentes
          AND fds.val_ulti_ejer_docu_inte = (SELECT MAX(x.val_ulti_ejer_docu_inte)
                                               FROM fac_docum_subac x
                                              WHERE x.tido_oid_tipo_docu = fds.tido_oid_tipo_docu
                                                AND x.sbac_oid_sbac = fds.sbac_oid_sbac);

         OPEN c_notasConSalto(l_numDocuInteSalt,
                                     p_oidDocumentoInicial,l_oidDocuCabeFina);
        LOOP
            FETCH c_notasConSalto BULK COLLECT INTO
                            v_oid_cabe,
                            v_oid_regi,
                            v_num_docu_cont_inte LIMIT w_filas;
            EXIT WHEN v_oid_cabe.count = 0;

            FORALL i IN 1..v_oid_cabe.count
               UPDATE fac_docum_conta_cabec cab
               SET
                   cab.val_ejer_docu_inte = to_char(cab.fec_fact, 'yy'),
                   cab.val_seri_docu_lega = l_valorSerieDocumento,
                   cab.num_docu_cont_inte = v_num_docu_cont_inte(i)
                WHERE cab.oid_cabe = v_oid_cabe(i);

            FORALL j IN 1..v_oid_cabe.count
               UPDATE fac_regis_unico_venta ven
               SET ven.val_ejer_docu_inte = to_char(ven.fec_emis, 'yy'),
                   ven.val_seri_docu_lega = l_valorSerieDocumento,
                   ven.num_docu_cont_inte = v_num_docu_cont_inte(j)
                WHERE ven.oid_regi = v_oid_regi(j);

        END LOOP;
        CLOSE c_notasConSalto;

           -- Actualizamos la semilla con el ultimo numero de documento generado
        SELECT MAX(cab.num_docu_cont_inte)
        INTO l_ultimoNumDocInterno
        FROM fac_docum_conta_cabec cab,
             fac_tipo_docum ftd
        WHERE cab.tido_oid_tipo_docu = ftd.oid_tipo_docu
          AND cab.pais_oid_pais = p_oidPais
          AND ftd.cod_tipo_docu = p_codigoTipoDocumento
          AND CAB.OID_CABE > p_oidDocumentoInicial;

        UPDATE fac_docum_subac fds
        SET fds.val_ulti_nume_docu_inte = l_ultimoNumDocInterno
        WHERE FDS.OID_DOCU_SUBA = l_oidDocumSubac;

     END IF;

     SELECT
        COUNT(*),
        MIN(cab.fec_fact)
      INTO
         l_contadorNulos,
         l_fecFactNulo
      FROM
         fac_docum_conta_cabec cab
     WHERE cab.pais_oid_pais = p_oidPais
          AND cab.tido_oid_tipo_docu = l_oidTipoDocu
          AND cab.num_docu_cont_inte IS NULL
          AND cab.oid_cabe > p_oidDocumentoInicial
          AND cab.oid_cabe <= l_oidDocuCabeFina;

     -- Validando si existen nulos
     IF l_contadorNulos > 0 THEN

        -- Obtenemos el valor de la serie configurado para el tipo de documento.
        SELECT
           fds.oid_docu_suba,
           fds.val_seri_docu_lega
        INTO
           l_oidDocumSubac,
           l_valorSerieDocumento
        FROM fac_docum_subac fds,
             fac_tipo_docum ftd,
             seg_subac ss
        WHERE fds.tido_oid_tipo_docu = ftd.oid_tipo_docu
          AND ftd.cod_tipo_docu = p_codigoTipoDocumento
          AND fds.sbac_oid_sbac = ss.oid_sbac
          AND ss.cod_sbac = '000' -- Gerentes
          AND fds.val_ulti_ejer_docu_inte = (SELECT MAX(X.VAL_ULTI_EJER_DOCU_INTE)
                                               FROM FAC_DOCUM_SUBAC X
                                              WHERE X.TIDO_OID_TIPO_DOCU = FDS.TIDO_OID_TIPO_DOCU
                                                AND X.SBAC_OID_SBAC = FDS.SBAC_OID_SBAC);

        -- Abrimos el cursor de notas de credito sin numero interno y
        -- hacemos la actualizacion correspondiente
        OPEN c_notasSinNumeroInterno(l_numDocuInteFina,
                                     p_oidDocumentoInicial,l_oidDocuCabeFina,l_fecFactNulo);
        LOOP
            FETCH c_notasSinNumeroInterno BULK COLLECT INTO
                            v_oid_cabe,
                            v_oid_regi,
                            v_num_docu_cont_inte LIMIT w_filas;
            EXIT WHEN v_oid_cabe.count = 0;

            FORALL i IN 1..v_oid_cabe.count
            UPDATE fac_docum_conta_cabec cab
               SET cab.val_ejer_docu_inte = to_char(cab.fec_fact, 'yy'),
                   cab.val_seri_docu_lega = l_valorSerieDocumento,
                   cab.num_docu_cont_inte = v_num_docu_cont_inte(i)
             WHERE cab.oid_cabe = v_oid_cabe(i);

            FORALL j IN 1..v_oid_cabe.count
            UPDATE fac_regis_unico_venta ven
               SET ven.val_ejer_docu_inte = to_char(ven.fec_emis, 'yy'),
                   ven.val_seri_docu_lega = l_valorSerieDocumento,
                   ven.num_docu_cont_inte = v_num_docu_cont_inte(j)
             WHERE ven.oid_regi = v_oid_regi(j);

        END LOOP;
        CLOSE c_notasSinNumeroInterno;

         -- Actualizamos la semilla con el ultimo numero de documento generado
        SELECT MAX(CAB.NUM_DOCU_CONT_INTE)
        INTO l_ultimoNumDocInterno
        FROM fac_docum_conta_cabec cab,
             fac_tipo_docum ftd
        WHERE CAB.TIDO_OID_TIPO_DOCU = FTD.OID_TIPO_DOCU
          AND CAB.PAIS_OID_PAIS = p_oidPais
          AND FTD.COD_TIPO_DOCU = p_codigoTipoDocumento
          AND CAB.OID_CABE > p_oidDocumentoInicial;

        UPDATE fac_docum_subac fds
        SET fds.val_ulti_nume_docu_inte = l_ultimoNumDocInterno
        WHERE FDS.OID_DOCU_SUBA = l_oidDocumSubac;

      END IF;

   END IMP_PR_REGEN_SECUE_DOCUM_INTER;

END;
/
